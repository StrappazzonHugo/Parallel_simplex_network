<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="4009"><g><title>[[heap]] (19 samples, 0.47%)</title><rect x="0.0000%" y="309" width="0.4739%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="19"/><text x="0.2500%" y="319.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (19 samples, 0.47%)</title><rect x="0.0000%" y="293" width="0.4739%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="19"/><text x="0.2500%" y="303.50"></text></g><g><title>lemon::ListDigraphBase::ArcT&amp;&amp; std::forward&lt;lemon::ListDigraphBase::ArcT&gt; (1 samples, 0.02%)</title><rect x="0.4739%" y="293" width="0.0249%" height="15" fill="rgb(221,193,54)" fg:x="19" fg:w="1"/><text x="0.7239%" y="303.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::findLeavingArc (1 samples, 0.02%)</title><rect x="0.4989%" y="293" width="0.0249%" height="15" fill="rgb(248,212,6)" fg:x="20" fg:w="1"/><text x="0.7489%" y="303.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (1 samples, 0.02%)</title><rect x="0.5238%" y="293" width="0.0249%" height="15" fill="rgb(208,68,35)" fg:x="21" fg:w="1"/><text x="0.7738%" y="303.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::reverse_iterator (1 samples, 0.02%)</title><rect x="0.5488%" y="293" width="0.0249%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="1"/><text x="0.7988%" y="303.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (89 samples, 2.22%)</title><rect x="0.5737%" y="293" width="2.2200%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="89"/><text x="0.8237%" y="303.50">s..</text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="2.7937%" y="293" width="0.0249%" height="15" fill="rgb(228,23,34)" fg:x="112" fg:w="1"/><text x="3.0437%" y="303.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="2.8187%" y="293" width="0.0249%" height="15" fill="rgb(218,30,26)" fg:x="113" fg:w="1"/><text x="3.0687%" y="303.50"></text></g><g><title>[[stack]] (98 samples, 2.44%)</title><rect x="0.4739%" y="309" width="2.4445%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="98"/><text x="0.7239%" y="319.50">[[..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (3 samples, 0.07%)</title><rect x="2.8436%" y="293" width="0.0748%" height="15" fill="rgb(250,228,42)" fg:x="114" fg:w="3"/><text x="3.0936%" y="303.50"></text></g><g><title>[anon] (1 samples, 0.02%)</title><rect x="2.9184%" y="309" width="0.0249%" height="15" fill="rgb(240,193,28)" fg:x="117" fg:w="1"/><text x="3.1684%" y="319.50"></text></g><g><title>std::__timepunct&lt;char&gt;::_M_initialize_timepunct (1 samples, 0.02%)</title><rect x="2.9184%" y="293" width="0.0249%" height="15" fill="rgb(216,20,37)" fg:x="117" fg:w="1"/><text x="3.1684%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.07%)</title><rect x="3.1180%" y="229" width="0.0748%" height="15" fill="rgb(206,188,39)" fg:x="125" fg:w="3"/><text x="3.3680%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="3.1429%" y="213" width="0.0499%" height="15" fill="rgb(217,207,13)" fg:x="126" fg:w="2"/><text x="3.3929%" y="223.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.02%)</title><rect x="3.1928%" y="229" width="0.0249%" height="15" fill="rgb(231,73,38)" fg:x="128" fg:w="1"/><text x="3.4428%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="3.1928%" y="213" width="0.0249%" height="15" fill="rgb(225,20,46)" fg:x="128" fg:w="1"/><text x="3.4428%" y="223.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="3.1928%" y="197" width="0.0249%" height="15" fill="rgb(210,31,41)" fg:x="128" fg:w="1"/><text x="3.4428%" y="207.50"></text></g><g><title>[ld-linux-x86-64.so.2] (12 samples, 0.30%)</title><rect x="2.9434%" y="309" width="0.2993%" height="15" fill="rgb(221,200,47)" fg:x="118" fg:w="12"/><text x="3.1934%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.15%)</title><rect x="3.0930%" y="293" width="0.1497%" height="15" fill="rgb(226,26,5)" fg:x="124" fg:w="6"/><text x="3.3430%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.15%)</title><rect x="3.0930%" y="277" width="0.1497%" height="15" fill="rgb(249,33,26)" fg:x="124" fg:w="6"/><text x="3.3430%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.15%)</title><rect x="3.0930%" y="261" width="0.1497%" height="15" fill="rgb(235,183,28)" fg:x="124" fg:w="6"/><text x="3.3430%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.12%)</title><rect x="3.1180%" y="245" width="0.1247%" height="15" fill="rgb(221,5,38)" fg:x="125" fg:w="5"/><text x="3.3680%" y="255.50"></text></g><g><title>wcslen (1 samples, 0.02%)</title><rect x="3.2178%" y="229" width="0.0249%" height="15" fill="rgb(247,18,42)" fg:x="129" fg:w="1"/><text x="3.4678%" y="239.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::NodeT*, std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="3.2427%" y="293" width="0.0249%" height="15" fill="rgb(241,131,45)" fg:x="130" fg:w="1"/><text x="3.4927%" y="303.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="3.2676%" y="293" width="0.0249%" height="15" fill="rgb(249,31,29)" fg:x="131" fg:w="1"/><text x="3.5176%" y="303.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (67 samples, 1.67%)</title><rect x="3.2926%" y="293" width="1.6712%" height="15" fill="rgb(225,111,53)" fg:x="132" fg:w="67"/><text x="3.5426%" y="303.50"></text></g><g><title>[unknown] (72 samples, 1.80%)</title><rect x="3.2427%" y="309" width="1.7960%" height="15" fill="rgb(238,160,17)" fg:x="130" fg:w="72"/><text x="3.4927%" y="319.50">[..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (3 samples, 0.07%)</title><rect x="4.9638%" y="293" width="0.0748%" height="15" fill="rgb(214,148,48)" fg:x="199" fg:w="3"/><text x="5.2138%" y="303.50"></text></g><g><title>_IO_2_1_stderr_ (1 samples, 0.02%)</title><rect x="5.0387%" y="309" width="0.0249%" height="15" fill="rgb(232,36,49)" fg:x="202" fg:w="1"/><text x="5.2887%" y="319.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="5.0387%" y="293" width="0.0249%" height="15" fill="rgb(209,103,24)" fg:x="202" fg:w="1"/><text x="5.2887%" y="303.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt;::ArcMap (1 samples, 0.02%)</title><rect x="5.0636%" y="245" width="0.0249%" height="15" fill="rgb(229,88,8)" fg:x="203" fg:w="1"/><text x="5.3136%" y="255.50"></text></g><g><title>lemon::MapExtender&lt;lemon::DefaultMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt; &gt;::MapExtender (1 samples, 0.02%)</title><rect x="5.0636%" y="229" width="0.0249%" height="15" fill="rgb(213,181,19)" fg:x="203" fg:w="1"/><text x="5.3136%" y="239.50"></text></g><g><title>lemon::DefaultMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::DefaultMap (1 samples, 0.02%)</title><rect x="5.0636%" y="213" width="0.0249%" height="15" fill="rgb(254,191,54)" fg:x="203" fg:w="1"/><text x="5.3136%" y="223.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::VectorMap (1 samples, 0.02%)</title><rect x="5.0636%" y="197" width="0.0249%" height="15" fill="rgb(241,83,37)" fg:x="203" fg:w="1"/><text x="5.3136%" y="207.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="5.0636%" y="181" width="0.0249%" height="15" fill="rgb(233,36,39)" fg:x="203" fg:w="1"/><text x="5.3136%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="5.0636%" y="165" width="0.0249%" height="15" fill="rgb(226,3,54)" fg:x="203" fg:w="1"/><text x="5.3136%" y="175.50"></text></g><g><title>int* std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (1 samples, 0.02%)</title><rect x="5.0636%" y="149" width="0.0249%" height="15" fill="rgb(245,192,40)" fg:x="203" fg:w="1"/><text x="5.3136%" y="159.50"></text></g><g><title>int* std::__uninitialized_default_n&lt;int*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="5.0636%" y="133" width="0.0249%" height="15" fill="rgb(238,167,29)" fg:x="203" fg:w="1"/><text x="5.3136%" y="143.50"></text></g><g><title>int* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="5.0636%" y="117" width="0.0249%" height="15" fill="rgb(232,182,51)" fg:x="203" fg:w="1"/><text x="5.3136%" y="127.50"></text></g><g><title>int* std::fill_n&lt;int*, unsigned long, int&gt; (1 samples, 0.02%)</title><rect x="5.0636%" y="101" width="0.0249%" height="15" fill="rgb(231,60,39)" fg:x="203" fg:w="1"/><text x="5.3136%" y="111.50"></text></g><g><title>int* std::__fill_n_a&lt;int*, unsigned long, int&gt; (1 samples, 0.02%)</title><rect x="5.0636%" y="85" width="0.0249%" height="15" fill="rgb(208,69,12)" fg:x="203" fg:w="1"/><text x="5.3136%" y="95.50"></text></g><g><title>void std::__fill_a&lt;int*, int&gt; (1 samples, 0.02%)</title><rect x="5.0636%" y="69" width="0.0249%" height="15" fill="rgb(235,93,37)" fg:x="203" fg:w="1"/><text x="5.3136%" y="79.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;int&gt;::__value, void&gt;::__type std::__fill_a1&lt;int*, int&gt; (1 samples, 0.02%)</title><rect x="5.0636%" y="53" width="0.0249%" height="15" fill="rgb(213,116,39)" fg:x="203" fg:w="1"/><text x="5.3136%" y="63.50"></text></g><g><title>bool std::operator!=&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt; (7 samples, 0.17%)</title><rect x="5.1883%" y="197" width="0.1746%" height="15" fill="rgb(222,207,29)" fg:x="208" fg:w="7"/><text x="5.4383%" y="207.50"></text></g><g><title>bool std::operator==&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt; (6 samples, 0.15%)</title><rect x="5.2133%" y="181" width="0.1497%" height="15" fill="rgb(206,96,30)" fg:x="209" fg:w="6"/><text x="5.4633%" y="191.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::base (3 samples, 0.07%)</title><rect x="5.2881%" y="165" width="0.0748%" height="15" fill="rgb(218,138,4)" fg:x="212" fg:w="3"/><text x="5.5381%" y="175.50"></text></g><g><title>int* std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (3 samples, 0.07%)</title><rect x="5.5375%" y="149" width="0.0748%" height="15" fill="rgb(250,191,14)" fg:x="222" fg:w="3"/><text x="5.7875%" y="159.50"></text></g><g><title>int* std::__uninitialized_default_n&lt;int*, unsigned long&gt; (2 samples, 0.05%)</title><rect x="5.5625%" y="133" width="0.0499%" height="15" fill="rgb(239,60,40)" fg:x="223" fg:w="2"/><text x="5.8125%" y="143.50"></text></g><g><title>int* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (2 samples, 0.05%)</title><rect x="5.5625%" y="117" width="0.0499%" height="15" fill="rgb(206,27,48)" fg:x="223" fg:w="2"/><text x="5.8125%" y="127.50"></text></g><g><title>void std::_Construct&lt;int&gt; (2 samples, 0.05%)</title><rect x="5.5625%" y="101" width="0.0499%" height="15" fill="rgb(225,35,8)" fg:x="223" fg:w="2"/><text x="5.8125%" y="111.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%)</title><rect x="5.6373%" y="133" width="0.0249%" height="15" fill="rgb(250,213,24)" fg:x="226" fg:w="1"/><text x="5.8873%" y="143.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::add (14 samples, 0.35%)</title><rect x="5.3629%" y="197" width="0.3492%" height="15" fill="rgb(247,123,22)" fg:x="215" fg:w="14"/><text x="5.6129%" y="207.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (14 samples, 0.35%)</title><rect x="5.3629%" y="181" width="0.3492%" height="15" fill="rgb(231,138,38)" fg:x="215" fg:w="14"/><text x="5.6129%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (12 samples, 0.30%)</title><rect x="5.4128%" y="165" width="0.2993%" height="15" fill="rgb(231,145,46)" fg:x="217" fg:w="12"/><text x="5.6628%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::max_size (4 samples, 0.10%)</title><rect x="5.6124%" y="149" width="0.0998%" height="15" fill="rgb(251,118,11)" fg:x="225" fg:w="4"/><text x="5.8624%" y="159.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_max_size (2 samples, 0.05%)</title><rect x="5.6623%" y="133" width="0.0499%" height="15" fill="rgb(217,147,25)" fg:x="227" fg:w="2"/><text x="5.9123%" y="143.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (1 samples, 0.02%)</title><rect x="5.6872%" y="117" width="0.0249%" height="15" fill="rgb(247,81,37)" fg:x="228" fg:w="1"/><text x="5.9372%" y="127.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::begin (1 samples, 0.02%)</title><rect x="5.7121%" y="197" width="0.0249%" height="15" fill="rgb(209,12,38)" fg:x="229" fg:w="1"/><text x="5.9621%" y="207.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::rend (3 samples, 0.07%)</title><rect x="5.7371%" y="197" width="0.0748%" height="15" fill="rgb(227,1,9)" fg:x="230" fg:w="3"/><text x="5.9871%" y="207.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::reverse_iterator (2 samples, 0.05%)</title><rect x="5.7620%" y="181" width="0.0499%" height="15" fill="rgb(248,47,43)" fg:x="231" fg:w="2"/><text x="6.0120%" y="191.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::operator* (3 samples, 0.07%)</title><rect x="5.8119%" y="197" width="0.0748%" height="15" fill="rgb(221,10,30)" fg:x="233" fg:w="3"/><text x="6.0619%" y="207.50"></text></g><g><title>std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::operator* (2 samples, 0.05%)</title><rect x="5.8369%" y="181" width="0.0499%" height="15" fill="rgb(210,229,1)" fg:x="234" fg:w="2"/><text x="6.0869%" y="191.50"></text></g><g><title>std::_List_node&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::_M_valptr (1 samples, 0.02%)</title><rect x="5.8618%" y="165" width="0.0249%" height="15" fill="rgb(222,148,37)" fg:x="235" fg:w="1"/><text x="6.1118%" y="175.50"></text></g><g><title>__gnu_cxx::__aligned_membuf&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::_M_ptr (1 samples, 0.02%)</title><rect x="5.8618%" y="149" width="0.0249%" height="15" fill="rgb(234,67,33)" fg:x="235" fg:w="1"/><text x="6.1118%" y="159.50"></text></g><g><title>__gnu_cxx::__aligned_membuf&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::_M_addr (1 samples, 0.02%)</title><rect x="5.8618%" y="133" width="0.0249%" height="15" fill="rgb(247,98,35)" fg:x="235" fg:w="1"/><text x="6.1118%" y="143.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::add (34 samples, 0.85%)</title><rect x="5.0886%" y="213" width="0.8481%" height="15" fill="rgb(247,138,52)" fg:x="204" fg:w="34"/><text x="5.3386%" y="223.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::operator++ (2 samples, 0.05%)</title><rect x="5.8868%" y="197" width="0.0499%" height="15" fill="rgb(213,79,30)" fg:x="236" fg:w="2"/><text x="6.1368%" y="207.50"></text></g><g><title>std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::operator-- (2 samples, 0.05%)</title><rect x="5.8868%" y="181" width="0.0499%" height="15" fill="rgb(246,177,23)" fg:x="236" fg:w="2"/><text x="6.1368%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::Arc::Arc (1 samples, 0.02%)</title><rect x="6.0364%" y="197" width="0.0249%" height="15" fill="rgb(230,62,27)" fg:x="242" fg:w="1"/><text x="6.2864%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::ArcT&amp; std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::emplace_back&lt;lemon::ListDigraphBase::ArcT&gt; (2 samples, 0.05%)</title><rect x="6.0614%" y="197" width="0.0499%" height="15" fill="rgb(216,154,8)" fg:x="243" fg:w="2"/><text x="6.3114%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (3 samples, 0.07%)</title><rect x="6.1112%" y="197" width="0.0748%" height="15" fill="rgb(244,35,45)" fg:x="245" fg:w="3"/><text x="6.3612%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::ArcT&amp;&amp; std::forward&lt;lemon::ListDigraphBase::ArcT&gt; (1 samples, 0.02%)</title><rect x="6.3357%" y="165" width="0.0249%" height="15" fill="rgb(251,115,12)" fg:x="254" fg:w="1"/><text x="6.5857%" y="175.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::ArcT*, std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt; &gt;::operator- (4 samples, 0.10%)</title><rect x="6.3607%" y="149" width="0.0998%" height="15" fill="rgb(240,54,50)" fg:x="255" fg:w="4"/><text x="6.6107%" y="159.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::ArcT*, std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="6.4355%" y="133" width="0.0249%" height="15" fill="rgb(233,84,52)" fg:x="258" fg:w="1"/><text x="6.6855%" y="143.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::back (6 samples, 0.15%)</title><rect x="6.3607%" y="165" width="0.1497%" height="15" fill="rgb(207,117,47)" fg:x="255" fg:w="6"/><text x="6.6107%" y="175.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::end (2 samples, 0.05%)</title><rect x="6.4605%" y="149" width="0.0499%" height="15" fill="rgb(249,43,39)" fg:x="259" fg:w="2"/><text x="6.7105%" y="159.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::ArcT*, std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="6.4854%" y="133" width="0.0249%" height="15" fill="rgb(209,38,44)" fg:x="260" fg:w="1"/><text x="6.7354%" y="143.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::push_back (14 samples, 0.35%)</title><rect x="6.1861%" y="197" width="0.3492%" height="15" fill="rgb(236,212,23)" fg:x="248" fg:w="14"/><text x="6.4361%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::ArcT&amp; std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::emplace_back&lt;lemon::ListDigraphBase::ArcT&gt; (14 samples, 0.35%)</title><rect x="6.1861%" y="181" width="0.3492%" height="15" fill="rgb(242,79,21)" fg:x="248" fg:w="14"/><text x="6.4361%" y="191.50"></text></g><g><title>void std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::_M_realloc_insert&lt;lemon::ListDigraphBase::ArcT&gt; (1 samples, 0.02%)</title><rect x="6.5104%" y="165" width="0.0249%" height="15" fill="rgb(211,96,35)" fg:x="261" fg:w="1"/><text x="6.7604%" y="175.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::_S_relocate (1 samples, 0.02%)</title><rect x="6.5104%" y="149" width="0.0249%" height="15" fill="rgb(253,215,40)" fg:x="261" fg:w="1"/><text x="6.7604%" y="159.50"></text></g><g><title>lemon::ListDigraphBase::ArcT* std::__relocate_a&lt;lemon::ListDigraphBase::ArcT*, lemon::ListDigraphBase::ArcT*, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt; (1 samples, 0.02%)</title><rect x="6.5104%" y="133" width="0.0249%" height="15" fill="rgb(211,81,21)" fg:x="261" fg:w="1"/><text x="6.7604%" y="143.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;lemon::ListDigraphBase::ArcT, void&gt;::value, lemon::ListDigraphBase::ArcT*&gt;::type std::__relocate_a_1&lt;lemon::ListDigraphBase::ArcT, lemon::ListDigraphBase::ArcT&gt; (1 samples, 0.02%)</title><rect x="6.5104%" y="117" width="0.0249%" height="15" fill="rgb(208,190,38)" fg:x="261" fg:w="1"/><text x="6.7604%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="6.5104%" y="101" width="0.0249%" height="15" fill="rgb(235,213,38)" fg:x="261" fg:w="1"/><text x="6.7604%" y="111.50"></text></g><g><title>lemon::ListDigraph::addArc (59 samples, 1.47%)</title><rect x="5.0886%" y="245" width="1.4717%" height="15" fill="rgb(237,122,38)" fg:x="204" fg:w="59"/><text x="5.3386%" y="255.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::addArc (59 samples, 1.47%)</title><rect x="5.0886%" y="229" width="1.4717%" height="15" fill="rgb(244,218,35)" fg:x="204" fg:w="59"/><text x="5.3386%" y="239.50"></text></g><g><title>lemon::ListDigraphBase::addArc (25 samples, 0.62%)</title><rect x="5.9366%" y="213" width="0.6236%" height="15" fill="rgb(240,68,47)" fg:x="238" fg:w="25"/><text x="6.1866%" y="223.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="6.5353%" y="197" width="0.0249%" height="15" fill="rgb(210,16,53)" fg:x="262" fg:w="1"/><text x="6.7853%" y="207.50"></text></g><g><title>std::operator== (1 samples, 0.02%)</title><rect x="6.5852%" y="165" width="0.0249%" height="15" fill="rgb(235,124,12)" fg:x="264" fg:w="1"/><text x="6.8352%" y="175.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::add (3 samples, 0.07%)</title><rect x="6.5602%" y="213" width="0.0748%" height="15" fill="rgb(224,169,11)" fg:x="263" fg:w="3"/><text x="6.8102%" y="223.50"></text></g><g><title>bool std::operator!=&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt; (3 samples, 0.07%)</title><rect x="6.5602%" y="197" width="0.0748%" height="15" fill="rgb(250,166,2)" fg:x="263" fg:w="3"/><text x="6.8102%" y="207.50"></text></g><g><title>bool std::operator==&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt; (3 samples, 0.07%)</title><rect x="6.5602%" y="181" width="0.0748%" height="15" fill="rgb(242,216,29)" fg:x="263" fg:w="3"/><text x="6.8102%" y="191.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt;::base (1 samples, 0.02%)</title><rect x="6.6101%" y="165" width="0.0249%" height="15" fill="rgb(230,116,27)" fg:x="265" fg:w="1"/><text x="6.8601%" y="175.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::NodeT*, std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt; &gt;::operator- (1 samples, 0.02%)</title><rect x="6.7348%" y="149" width="0.0249%" height="15" fill="rgb(228,99,48)" fg:x="270" fg:w="1"/><text x="6.9848%" y="159.50"></text></g><g><title>lemon::ListDigraph::addNode (9 samples, 0.22%)</title><rect x="6.5602%" y="245" width="0.2245%" height="15" fill="rgb(253,11,6)" fg:x="263" fg:w="9"/><text x="6.8102%" y="255.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::addNode (9 samples, 0.22%)</title><rect x="6.5602%" y="229" width="0.2245%" height="15" fill="rgb(247,143,39)" fg:x="263" fg:w="9"/><text x="6.8102%" y="239.50"></text></g><g><title>lemon::ListDigraphBase::addNode (6 samples, 0.15%)</title><rect x="6.6351%" y="213" width="0.1497%" height="15" fill="rgb(236,97,10)" fg:x="266" fg:w="6"/><text x="6.8851%" y="223.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::push_back (4 samples, 0.10%)</title><rect x="6.6850%" y="197" width="0.0998%" height="15" fill="rgb(233,208,19)" fg:x="268" fg:w="4"/><text x="6.9350%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::NodeT&amp; std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::emplace_back&lt;lemon::ListDigraphBase::NodeT&gt; (4 samples, 0.10%)</title><rect x="6.6850%" y="181" width="0.0998%" height="15" fill="rgb(216,164,2)" fg:x="268" fg:w="4"/><text x="6.9350%" y="191.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::back (2 samples, 0.05%)</title><rect x="6.7348%" y="165" width="0.0499%" height="15" fill="rgb(220,129,5)" fg:x="270" fg:w="2"/><text x="6.9848%" y="175.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::end (1 samples, 0.02%)</title><rect x="6.7598%" y="149" width="0.0249%" height="15" fill="rgb(242,17,10)" fg:x="271" fg:w="1"/><text x="7.0098%" y="159.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::NodeT*, std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="6.7598%" y="133" width="0.0249%" height="15" fill="rgb(242,107,0)" fg:x="271" fg:w="1"/><text x="7.0098%" y="143.50"></text></g><g><title>lemon::ListDigraph::~ListDigraph (1 samples, 0.02%)</title><rect x="6.7847%" y="245" width="0.0249%" height="15" fill="rgb(251,28,31)" fg:x="272" fg:w="1"/><text x="7.0347%" y="255.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::~DigraphExtender (1 samples, 0.02%)</title><rect x="6.7847%" y="229" width="0.0249%" height="15" fill="rgb(233,223,10)" fg:x="272" fg:w="1"/><text x="7.0347%" y="239.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::~AlterationNotifier (1 samples, 0.02%)</title><rect x="6.7847%" y="213" width="0.0249%" height="15" fill="rgb(215,21,27)" fg:x="272" fg:w="1"/><text x="7.0347%" y="223.50"></text></g><g><title>lemon::bits::Lock::~Lock (1 samples, 0.02%)</title><rect x="6.7847%" y="197" width="0.0249%" height="15" fill="rgb(232,23,21)" fg:x="272" fg:w="1"/><text x="7.0347%" y="207.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="6.7847%" y="181" width="0.0249%" height="15" fill="rgb(244,5,23)" fg:x="272" fg:w="1"/><text x="7.0347%" y="191.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="6.7847%" y="165" width="0.0249%" height="15" fill="rgb(226,81,46)" fg:x="272" fg:w="1"/><text x="7.0347%" y="175.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="6.7847%" y="149" width="0.0249%" height="15" fill="rgb(247,70,30)" fg:x="272" fg:w="1"/><text x="7.0347%" y="159.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="6.7847%" y="133" width="0.0249%" height="15" fill="rgb(212,68,19)" fg:x="272" fg:w="1"/><text x="7.0347%" y="143.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="6.7847%" y="117" width="0.0249%" height="15" fill="rgb(240,187,13)" fg:x="272" fg:w="1"/><text x="7.0347%" y="127.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="6.7847%" y="101" width="0.0249%" height="15" fill="rgb(223,113,26)" fg:x="272" fg:w="1"/><text x="7.0347%" y="111.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (1 samples, 0.02%)</title><rect x="6.8346%" y="229" width="0.0249%" height="15" fill="rgb(206,192,2)" fg:x="274" fg:w="1"/><text x="7.0846%" y="239.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="6.8346%" y="213" width="0.0249%" height="15" fill="rgb(241,108,4)" fg:x="274" fg:w="1"/><text x="7.0846%" y="223.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase::notifier (1 samples, 0.02%)</title><rect x="6.8845%" y="213" width="0.0249%" height="15" fill="rgb(247,173,49)" fg:x="276" fg:w="1"/><text x="7.1345%" y="223.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;&amp; lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::costMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt; &gt; (6 samples, 0.15%)</title><rect x="6.8097%" y="245" width="0.1497%" height="15" fill="rgb(224,114,35)" fg:x="273" fg:w="6"/><text x="7.0597%" y="255.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (4 samples, 0.10%)</title><rect x="6.8596%" y="229" width="0.0998%" height="15" fill="rgb(245,159,27)" fg:x="275" fg:w="4"/><text x="7.1096%" y="239.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (2 samples, 0.05%)</title><rect x="6.9095%" y="213" width="0.0499%" height="15" fill="rgb(245,172,44)" fg:x="277" fg:w="2"/><text x="7.1595%" y="223.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (3 samples, 0.07%)</title><rect x="7.0092%" y="229" width="0.0748%" height="15" fill="rgb(236,23,11)" fg:x="281" fg:w="3"/><text x="7.2592%" y="239.50"></text></g><g><title>lemon::ListDigraphBase::next (3 samples, 0.07%)</title><rect x="7.0092%" y="213" width="0.0748%" height="15" fill="rgb(205,117,38)" fg:x="281" fg:w="3"/><text x="7.2592%" y="223.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="7.0591%" y="197" width="0.0249%" height="15" fill="rgb(237,72,25)" fg:x="283" fg:w="1"/><text x="7.3091%" y="207.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;&amp; lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::upperMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt; &gt; (6 samples, 0.15%)</title><rect x="6.9593%" y="245" width="0.1497%" height="15" fill="rgb(244,70,9)" fg:x="279" fg:w="6"/><text x="7.2093%" y="255.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (1 samples, 0.02%)</title><rect x="7.0841%" y="229" width="0.0249%" height="15" fill="rgb(217,125,39)" fg:x="284" fg:w="1"/><text x="7.3341%" y="239.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::NodeMap&lt;int&gt;::NodeMap (1 samples, 0.02%)</title><rect x="7.1090%" y="229" width="0.0249%" height="15" fill="rgb(235,36,10)" fg:x="285" fg:w="1"/><text x="7.3590%" y="239.50"></text></g><g><title>lemon::MapExtender&lt;lemon::DefaultMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node, int&gt; &gt;::MapExtender (1 samples, 0.02%)</title><rect x="7.1090%" y="213" width="0.0249%" height="15" fill="rgb(251,123,47)" fg:x="285" fg:w="1"/><text x="7.3590%" y="223.50"></text></g><g><title>lemon::DefaultMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node, int&gt;::DefaultMap (1 samples, 0.02%)</title><rect x="7.1090%" y="197" width="0.0249%" height="15" fill="rgb(221,13,13)" fg:x="285" fg:w="1"/><text x="7.3590%" y="207.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node, int&gt;::VectorMap (1 samples, 0.02%)</title><rect x="7.1090%" y="181" width="0.0249%" height="15" fill="rgb(238,131,9)" fg:x="285" fg:w="1"/><text x="7.3590%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="7.1090%" y="165" width="0.0249%" height="15" fill="rgb(211,50,8)" fg:x="285" fg:w="1"/><text x="7.3590%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (1 samples, 0.02%)</title><rect x="7.1090%" y="149" width="0.0249%" height="15" fill="rgb(245,182,24)" fg:x="285" fg:w="1"/><text x="7.3590%" y="159.50"></text></g><g><title>int* std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (1 samples, 0.02%)</title><rect x="7.1090%" y="133" width="0.0249%" height="15" fill="rgb(242,14,37)" fg:x="285" fg:w="1"/><text x="7.3590%" y="143.50"></text></g><g><title>int* std::__uninitialized_default_n&lt;int*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="7.1090%" y="117" width="0.0249%" height="15" fill="rgb(246,228,12)" fg:x="285" fg:w="1"/><text x="7.3590%" y="127.50"></text></g><g><title>int* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (1 samples, 0.02%)</title><rect x="7.1090%" y="101" width="0.0249%" height="15" fill="rgb(213,55,15)" fg:x="285" fg:w="1"/><text x="7.3590%" y="111.50"></text></g><g><title>int* std::fill_n&lt;int*, unsigned long, int&gt; (1 samples, 0.02%)</title><rect x="7.1090%" y="85" width="0.0249%" height="15" fill="rgb(209,9,3)" fg:x="285" fg:w="1"/><text x="7.3590%" y="95.50"></text></g><g><title>int* std::__fill_n_a&lt;int*, unsigned long, int&gt; (1 samples, 0.02%)</title><rect x="7.1090%" y="69" width="0.0249%" height="15" fill="rgb(230,59,30)" fg:x="285" fg:w="1"/><text x="7.3590%" y="79.50"></text></g><g><title>void std::__fill_a&lt;int*, int&gt; (1 samples, 0.02%)</title><rect x="7.1090%" y="53" width="0.0249%" height="15" fill="rgb(209,121,21)" fg:x="285" fg:w="1"/><text x="7.3590%" y="63.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;int&gt;::__value, void&gt;::__type std::__fill_a1&lt;int*, int&gt; (1 samples, 0.02%)</title><rect x="7.1090%" y="37" width="0.0249%" height="15" fill="rgb(220,109,13)" fg:x="285" fg:w="1"/><text x="7.3590%" y="47.50"></text></g><g><title>int lemon::countItems&lt;lemon::ListDigraph, lemon::ListDigraphBase::Arc&gt; (1 samples, 0.02%)</title><rect x="7.2337%" y="181" width="0.0249%" height="15" fill="rgb(232,18,1)" fg:x="290" fg:w="1"/><text x="7.4837%" y="191.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (1 samples, 0.02%)</title><rect x="7.2337%" y="165" width="0.0249%" height="15" fill="rgb(215,41,42)" fg:x="290" fg:w="1"/><text x="7.4837%" y="175.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.02%)</title><rect x="7.2337%" y="149" width="0.0249%" height="15" fill="rgb(224,123,36)" fg:x="290" fg:w="1"/><text x="7.4837%" y="159.50"></text></g><g><title>int lemon::countArcs&lt;lemon::ListDigraph&gt; (2 samples, 0.05%)</title><rect x="7.2337%" y="213" width="0.0499%" height="15" fill="rgb(240,125,3)" fg:x="290" fg:w="2"/><text x="7.4837%" y="223.50"></text></g><g><title>lemon::_core_bits::CountArcsSelector&lt;lemon::ListDigraph, void&gt;::count (2 samples, 0.05%)</title><rect x="7.2337%" y="197" width="0.0499%" height="15" fill="rgb(205,98,50)" fg:x="290" fg:w="2"/><text x="7.4837%" y="207.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (1 samples, 0.02%)</title><rect x="7.2587%" y="181" width="0.0249%" height="15" fill="rgb(205,185,37)" fg:x="291" fg:w="1"/><text x="7.5087%" y="191.50"></text></g><g><title>int lemon::countNodes&lt;lemon::ListDigraph&gt; (1 samples, 0.02%)</title><rect x="7.2836%" y="213" width="0.0249%" height="15" fill="rgb(238,207,15)" fg:x="292" fg:w="1"/><text x="7.5336%" y="223.50"></text></g><g><title>lemon::_core_bits::CountNodesSelector&lt;lemon::ListDigraph, void&gt;::count (1 samples, 0.02%)</title><rect x="7.2836%" y="197" width="0.0249%" height="15" fill="rgb(213,199,42)" fg:x="292" fg:w="1"/><text x="7.5336%" y="207.50"></text></g><g><title>int lemon::countItems&lt;lemon::ListDigraph, lemon::ListDigraphBase::Node&gt; (1 samples, 0.02%)</title><rect x="7.2836%" y="181" width="0.0249%" height="15" fill="rgb(235,201,11)" fg:x="292" fg:w="1"/><text x="7.5336%" y="191.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::NodeIt::operator++ (1 samples, 0.02%)</title><rect x="7.2836%" y="165" width="0.0249%" height="15" fill="rgb(207,46,11)" fg:x="292" fg:w="1"/><text x="7.5336%" y="175.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.02%)</title><rect x="7.2836%" y="149" width="0.0249%" height="15" fill="rgb(241,35,35)" fg:x="292" fg:w="1"/><text x="7.5336%" y="159.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="7.2836%" y="133" width="0.0249%" height="15" fill="rgb(243,32,47)" fg:x="292" fg:w="1"/><text x="7.5336%" y="143.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (2 samples, 0.05%)</title><rect x="7.3086%" y="213" width="0.0499%" height="15" fill="rgb(247,202,23)" fg:x="293" fg:w="2"/><text x="7.5586%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.02%)</title><rect x="7.3335%" y="197" width="0.0249%" height="15" fill="rgb(219,102,11)" fg:x="294" fg:w="1"/><text x="7.5835%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="7.3335%" y="181" width="0.0249%" height="15" fill="rgb(243,110,44)" fg:x="294" fg:w="1"/><text x="7.5835%" y="191.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::NodeIt::operator++ (2 samples, 0.05%)</title><rect x="7.3584%" y="213" width="0.0499%" height="15" fill="rgb(222,74,54)" fg:x="295" fg:w="2"/><text x="7.6084%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::next (2 samples, 0.05%)</title><rect x="7.3584%" y="197" width="0.0499%" height="15" fill="rgb(216,99,12)" fg:x="295" fg:w="2"/><text x="7.6084%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::source (2 samples, 0.05%)</title><rect x="7.4083%" y="213" width="0.0499%" height="15" fill="rgb(226,22,26)" fg:x="297" fg:w="2"/><text x="7.6583%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::Node::Node (1 samples, 0.02%)</title><rect x="7.4333%" y="197" width="0.0249%" height="15" fill="rgb(217,163,10)" fg:x="298" fg:w="1"/><text x="7.6833%" y="207.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::resetParams (2 samples, 0.05%)</title><rect x="7.4582%" y="213" width="0.0499%" height="15" fill="rgb(213,25,53)" fg:x="299" fg:w="2"/><text x="7.7082%" y="223.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (1 samples, 0.02%)</title><rect x="7.5081%" y="213" width="0.0249%" height="15" fill="rgb(252,105,26)" fg:x="301" fg:w="1"/><text x="7.7581%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (2 samples, 0.05%)</title><rect x="7.5331%" y="213" width="0.0499%" height="15" fill="rgb(220,39,43)" fg:x="302" fg:w="2"/><text x="7.7831%" y="223.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::NetworkSimplex (27 samples, 0.67%)</title><rect x="7.1090%" y="245" width="0.6735%" height="15" fill="rgb(229,68,48)" fg:x="285" fg:w="27"/><text x="7.3590%" y="255.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::reset (26 samples, 0.65%)</title><rect x="7.1339%" y="229" width="0.6485%" height="15" fill="rgb(252,8,32)" fg:x="286" fg:w="26"/><text x="7.3839%" y="239.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (8 samples, 0.20%)</title><rect x="7.5829%" y="213" width="0.1996%" height="15" fill="rgb(223,20,43)" fg:x="304" fg:w="8"/><text x="7.8329%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (8 samples, 0.20%)</title><rect x="7.5829%" y="197" width="0.1996%" height="15" fill="rgb(229,81,49)" fg:x="304" fg:w="8"/><text x="7.8329%" y="207.50"></text></g><g><title>int* std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (8 samples, 0.20%)</title><rect x="7.5829%" y="181" width="0.1996%" height="15" fill="rgb(236,28,36)" fg:x="304" fg:w="8"/><text x="7.8329%" y="191.50"></text></g><g><title>int* std::__uninitialized_default_n&lt;int*, unsigned long&gt; (8 samples, 0.20%)</title><rect x="7.5829%" y="165" width="0.1996%" height="15" fill="rgb(249,185,26)" fg:x="304" fg:w="8"/><text x="7.8329%" y="175.50"></text></g><g><title>int* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (8 samples, 0.20%)</title><rect x="7.5829%" y="149" width="0.1996%" height="15" fill="rgb(249,174,33)" fg:x="304" fg:w="8"/><text x="7.8329%" y="159.50"></text></g><g><title>int* std::fill_n&lt;int*, unsigned long, int&gt; (8 samples, 0.20%)</title><rect x="7.5829%" y="133" width="0.1996%" height="15" fill="rgb(233,201,37)" fg:x="304" fg:w="8"/><text x="7.8329%" y="143.50"></text></g><g><title>int* std::__fill_n_a&lt;int*, unsigned long, int&gt; (8 samples, 0.20%)</title><rect x="7.5829%" y="117" width="0.1996%" height="15" fill="rgb(221,78,26)" fg:x="304" fg:w="8"/><text x="7.8329%" y="127.50"></text></g><g><title>void std::__fill_a&lt;int*, int&gt; (8 samples, 0.20%)</title><rect x="7.5829%" y="101" width="0.1996%" height="15" fill="rgb(250,127,30)" fg:x="304" fg:w="8"/><text x="7.8329%" y="111.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;int&gt;::__value, void&gt;::__type std::__fill_a1&lt;int*, int&gt; (8 samples, 0.20%)</title><rect x="7.5829%" y="85" width="0.1996%" height="15" fill="rgb(230,49,44)" fg:x="304" fg:w="8"/><text x="7.8329%" y="95.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::init (4 samples, 0.10%)</title><rect x="7.7825%" y="229" width="0.0998%" height="15" fill="rgb(229,67,23)" fg:x="312" fg:w="4"/><text x="8.0325%" y="239.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="7.8573%" y="213" width="0.0249%" height="15" fill="rgb(249,83,47)" fg:x="315" fg:w="1"/><text x="8.1073%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (275 samples, 6.86%)</title><rect x="23.5470%" y="181" width="6.8596%" height="15" fill="rgb(215,43,3)" fg:x="944" fg:w="275"/><text x="23.7970%" y="191.50">std::vect..</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::BlockSearchPivotRule::findEnteringArc (940 samples, 23.45%)</title><rect x="7.9820%" y="197" width="23.4472%" height="15" fill="rgb(238,154,13)" fg:x="320" fg:w="940"/><text x="8.2320%" y="207.50">lemon::NetworkSimplex&lt;lemon::ListDigr..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (41 samples, 1.02%)</title><rect x="30.4066%" y="181" width="1.0227%" height="15" fill="rgb(219,56,2)" fg:x="1219" fg:w="41"/><text x="30.6566%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="31.5041%" y="181" width="0.0249%" height="15" fill="rgb(233,0,4)" fg:x="1263" fg:w="1"/><text x="31.7541%" y="191.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::changeFlow (5 samples, 0.12%)</title><rect x="31.4293%" y="197" width="0.1247%" height="15" fill="rgb(235,30,7)" fg:x="1260" fg:w="5"/><text x="31.6793%" y="207.50"></text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="31.5291%" y="181" width="0.0249%" height="15" fill="rgb(250,79,13)" fg:x="1264" fg:w="1"/><text x="31.7791%" y="191.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::findJoinNode (600 samples, 14.97%)</title><rect x="31.5540%" y="197" width="14.9663%" height="15" fill="rgb(211,146,34)" fg:x="1265" fg:w="600"/><text x="31.8040%" y="207.50">lemon::NetworkSimplex&lt;l..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (166 samples, 4.14%)</title><rect x="42.3796%" y="181" width="4.1407%" height="15" fill="rgb(228,22,38)" fg:x="1699" fg:w="166"/><text x="42.6296%" y="191.50">std::..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (242 samples, 6.04%)</title><rect x="72.8611%" y="181" width="6.0364%" height="15" fill="rgb(235,168,5)" fg:x="2921" fg:w="242"/><text x="73.1111%" y="191.50">std::vec..</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::findLeavingArc (1,356 samples, 33.82%)</title><rect x="46.5203%" y="197" width="33.8239%" height="15" fill="rgb(221,155,16)" fg:x="1865" fg:w="1356"/><text x="46.7703%" y="207.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::fi..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (58 samples, 1.45%)</title><rect x="78.8975%" y="181" width="1.4467%" height="15" fill="rgb(215,215,53)" fg:x="3163" fg:w="58"/><text x="79.1475%" y="191.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::NodeIt::operator++ (1 samples, 0.02%)</title><rect x="80.3941%" y="181" width="0.0249%" height="15" fill="rgb(223,4,10)" fg:x="3223" fg:w="1"/><text x="80.6441%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.02%)</title><rect x="80.3941%" y="165" width="0.0249%" height="15" fill="rgb(234,103,6)" fg:x="3223" fg:w="1"/><text x="80.6441%" y="175.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node, int&gt;::operator[] (1 samples, 0.02%)</title><rect x="80.4191%" y="181" width="0.0249%" height="15" fill="rgb(227,97,0)" fg:x="3224" fg:w="1"/><text x="80.6691%" y="191.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::id (1 samples, 0.02%)</title><rect x="80.4191%" y="165" width="0.0249%" height="15" fill="rgb(234,150,53)" fg:x="3224" fg:w="1"/><text x="80.6691%" y="175.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::initialPivots (5 samples, 0.12%)</title><rect x="80.3442%" y="197" width="0.1247%" height="15" fill="rgb(228,201,54)" fg:x="3221" fg:w="5"/><text x="80.5942%" y="207.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="80.4440%" y="181" width="0.0249%" height="15" fill="rgb(222,22,37)" fg:x="3225" fg:w="1"/><text x="80.6940%" y="191.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::updatePotential (105 samples, 2.62%)</title><rect x="80.4689%" y="197" width="2.6191%" height="15" fill="rgb(237,53,32)" fg:x="3226" fg:w="105"/><text x="80.7189%" y="207.50">le..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (26 samples, 0.65%)</title><rect x="82.4395%" y="181" width="0.6485%" height="15" fill="rgb(233,25,53)" fg:x="3305" fg:w="26"/><text x="82.6895%" y="191.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="92.9159%" y="181" width="0.0249%" height="15" fill="rgb(210,40,34)" fg:x="3725" fg:w="1"/><text x="93.1659%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (137 samples, 3.42%)</title><rect x="92.9409%" y="181" width="3.4173%" height="15" fill="rgb(241,220,44)" fg:x="3726" fg:w="137"/><text x="93.1909%" y="191.50">std..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="96.3582%" y="181" width="0.0249%" height="15" fill="rgb(235,28,35)" fg:x="3863" fg:w="1"/><text x="96.6082%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (1 samples, 0.02%)</title><rect x="96.3831%" y="181" width="0.0249%" height="15" fill="rgb(210,56,17)" fg:x="3864" fg:w="1"/><text x="96.6331%" y="191.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::updateTreeStructure (535 samples, 13.34%)</title><rect x="83.0881%" y="197" width="13.3450%" height="15" fill="rgb(224,130,29)" fg:x="3331" fg:w="535"/><text x="83.3381%" y="207.50">lemon::NetworkSimple..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="96.4081%" y="181" width="0.0249%" height="15" fill="rgb(235,212,8)" fg:x="3865" fg:w="1"/><text x="96.6581%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (73 samples, 1.82%)</title><rect x="96.4330%" y="197" width="1.8209%" height="15" fill="rgb(223,33,50)" fg:x="3866" fg:w="73"/><text x="96.6830%" y="207.50">s..</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::ProblemType lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start&lt;lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::BlockSearchPivotRule&gt; (3,644 samples, 90.90%)</title><rect x="7.8823%" y="213" width="90.8955%" height="15" fill="rgb(219,149,13)" fg:x="316" fg:w="3644"/><text x="8.1323%" y="223.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::ProblemType lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start&lt;lemon::NetworkSimplex&lt;lemon:..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (21 samples, 0.52%)</title><rect x="98.2539%" y="197" width="0.5238%" height="15" fill="rgb(250,156,29)" fg:x="3939" fg:w="21"/><text x="98.5039%" y="207.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::run (3,649 samples, 91.02%)</title><rect x="7.7825%" y="245" width="91.0202%" height="15" fill="rgb(216,193,19)" fg:x="312" fg:w="3649"/><text x="8.0325%" y="255.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::run</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start (3,645 samples, 90.92%)</title><rect x="7.8823%" y="229" width="90.9204%" height="15" fill="rgb(216,135,14)" fg:x="316" fg:w="3645"/><text x="8.1323%" y="239.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::findLeavingArc (1 samples, 0.02%)</title><rect x="98.7778%" y="213" width="0.0249%" height="15" fill="rgb(241,47,5)" fg:x="3960" fg:w="1"/><text x="99.0278%" y="223.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::id (1 samples, 0.02%)</title><rect x="98.8276%" y="213" width="0.0249%" height="15" fill="rgb(233,42,35)" fg:x="3962" fg:w="1"/><text x="99.0776%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::next (3 samples, 0.07%)</title><rect x="98.8775%" y="197" width="0.0748%" height="15" fill="rgb(231,13,6)" fg:x="3964" fg:w="3"/><text x="99.1275%" y="207.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::totalCost (7 samples, 0.17%)</title><rect x="98.8027%" y="245" width="0.1746%" height="15" fill="rgb(207,181,40)" fg:x="3961" fg:w="7"/><text x="99.0527%" y="255.50"></text></g><g><title>int lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::totalCost&lt;int&gt; (7 samples, 0.17%)</title><rect x="98.8027%" y="229" width="0.1746%" height="15" fill="rgb(254,173,49)" fg:x="3961" fg:w="7"/><text x="99.0527%" y="239.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (5 samples, 0.12%)</title><rect x="98.8526%" y="213" width="0.1247%" height="15" fill="rgb(221,1,38)" fg:x="3963" fg:w="5"/><text x="99.1026%" y="223.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="98.9524%" y="197" width="0.0249%" height="15" fill="rgb(206,124,46)" fg:x="3967" fg:w="1"/><text x="99.2024%" y="207.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::set (1 samples, 0.02%)</title><rect x="98.9773%" y="245" width="0.0249%" height="15" fill="rgb(249,21,11)" fg:x="3968" fg:w="1"/><text x="99.2273%" y="255.50"></text></g><g><title>[libm.so.6] (7 samples, 0.17%)</title><rect x="99.3764%" y="149" width="0.1746%" height="15" fill="rgb(222,201,40)" fg:x="3984" fg:w="7"/><text x="99.6264%" y="159.50"></text></g><g><title>double std::uniform_real_distribution&lt;double&gt;::operator (24 samples, 0.60%)</title><rect x="99.0022%" y="229" width="0.5987%" height="15" fill="rgb(235,61,29)" fg:x="3969" fg:w="24"/><text x="99.2522%" y="239.50"></text></g><g><title>double std::uniform_real_distribution&lt;double&gt;::operator (23 samples, 0.57%)</title><rect x="99.0272%" y="213" width="0.5737%" height="15" fill="rgb(219,207,3)" fg:x="3970" fg:w="23"/><text x="99.2772%" y="223.50"></text></g><g><title>std::__detail::_Adaptor&lt;std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;, double&gt;::operator (22 samples, 0.55%)</title><rect x="99.0521%" y="197" width="0.5488%" height="15" fill="rgb(222,56,46)" fg:x="3971" fg:w="22"/><text x="99.3021%" y="207.50"></text></g><g><title>double std::generate_canonical&lt;double, 53ul, std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt; &gt; (21 samples, 0.52%)</title><rect x="99.0771%" y="181" width="0.5238%" height="15" fill="rgb(239,76,54)" fg:x="3972" fg:w="21"/><text x="99.3271%" y="191.50"></text></g><g><title>std::log (12 samples, 0.30%)</title><rect x="99.3016%" y="165" width="0.2993%" height="15" fill="rgb(231,124,27)" fg:x="3981" fg:w="12"/><text x="99.5516%" y="175.50"></text></g><g><title>logf64x (2 samples, 0.05%)</title><rect x="99.5510%" y="149" width="0.0499%" height="15" fill="rgb(249,195,6)" fg:x="3991" fg:w="2"/><text x="99.8010%" y="159.50"></text></g><g><title>randomnumber (28 samples, 0.70%)</title><rect x="99.0022%" y="245" width="0.6984%" height="15" fill="rgb(237,174,47)" fg:x="3969" fg:w="28"/><text x="99.2522%" y="255.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::uniform_real_distribution (4 samples, 0.10%)</title><rect x="99.6009%" y="229" width="0.0998%" height="15" fill="rgb(206,201,31)" fg:x="3993" fg:w="4"/><text x="99.8509%" y="239.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::param_type::param_type (1 samples, 0.02%)</title><rect x="99.6757%" y="213" width="0.0249%" height="15" fill="rgb(231,57,52)" fg:x="3996" fg:w="1"/><text x="99.9257%" y="223.50"></text></g><g><title>std::vector&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::allocator&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="99.7007%" y="245" width="0.0249%" height="15" fill="rgb(248,177,22)" fg:x="3997" fg:w="1"/><text x="99.9507%" y="255.50"></text></g><g><title>bool __gnu_cxx::operator!=&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="99.7256%" y="69" width="0.0249%" height="15" fill="rgb(215,211,37)" fg:x="3998" fg:w="1"/><text x="99.9756%" y="79.50"></text></g><g><title>std::vector&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::allocator&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; &gt;::vector (2 samples, 0.05%)</title><rect x="99.7256%" y="245" width="0.0499%" height="15" fill="rgb(241,128,51)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="255.50"></text></g><g><title>std::vector&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::allocator&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; &gt;::_M_fill_initialize (2 samples, 0.05%)</title><rect x="99.7256%" y="229" width="0.0499%" height="15" fill="rgb(227,165,31)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="239.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::__uninitialized_fill_n_a&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (2 samples, 0.05%)</title><rect x="99.7256%" y="213" width="0.0499%" height="15" fill="rgb(228,167,24)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="223.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::uninitialized_fill_n&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (2 samples, 0.05%)</title><rect x="99.7256%" y="197" width="0.0499%" height="15" fill="rgb(228,143,12)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::__uninitialized_fill_n&lt;false&gt;::__uninit_fill_n&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (2 samples, 0.05%)</title><rect x="99.7256%" y="181" width="0.0499%" height="15" fill="rgb(249,149,8)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="191.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::__do_uninit_fill_n&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (2 samples, 0.05%)</title><rect x="99.7256%" y="165" width="0.0499%" height="15" fill="rgb(243,35,44)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="175.50"></text></g><g><title>void std::_Construct&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; const&amp;&gt; (2 samples, 0.05%)</title><rect x="99.7256%" y="149" width="0.0499%" height="15" fill="rgb(246,89,9)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="159.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;::vector (2 samples, 0.05%)</title><rect x="99.7256%" y="133" width="0.0499%" height="15" fill="rgb(233,213,13)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="143.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*, lemon::ListDigraphBase::Node&gt; (2 samples, 0.05%)</title><rect x="99.7256%" y="117" width="0.0499%" height="15" fill="rgb(233,141,41)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="127.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*&gt; (2 samples, 0.05%)</title><rect x="99.7256%" y="101" width="0.0499%" height="15" fill="rgb(239,167,4)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="111.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*&gt; (2 samples, 0.05%)</title><rect x="99.7256%" y="85" width="0.0499%" height="15" fill="rgb(209,217,16)" fg:x="3998" fg:w="2"/><text x="99.9756%" y="95.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*&gt; (1 samples, 0.02%)</title><rect x="99.7506%" y="69" width="0.0249%" height="15" fill="rgb(219,88,35)" fg:x="3999" fg:w="1"/><text x="100.0006%" y="79.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="99.7506%" y="53" width="0.0249%" height="15" fill="rgb(220,193,23)" fg:x="3999" fg:w="1"/><text x="100.0006%" y="63.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (4 samples, 0.10%)</title><rect x="99.7755%" y="229" width="0.0998%" height="15" fill="rgb(230,90,52)" fg:x="4000" fg:w="4"/><text x="100.0255%" y="239.50"></text></g><g><title>lemon::ListDigraphBase::next (4 samples, 0.10%)</title><rect x="99.7755%" y="213" width="0.0998%" height="15" fill="rgb(252,106,19)" fg:x="4000" fg:w="4"/><text x="100.0255%" y="223.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="99.8503%" y="197" width="0.0249%" height="15" fill="rgb(206,74,20)" fg:x="4003" fg:w="1"/><text x="100.1003%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::Arc::operator!= (1 samples, 0.02%)</title><rect x="99.8753%" y="229" width="0.0249%" height="15" fill="rgb(230,138,44)" fg:x="4004" fg:w="1"/><text x="100.1253%" y="239.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (1 samples, 0.02%)</title><rect x="99.9002%" y="229" width="0.0249%" height="15" fill="rgb(235,182,43)" fg:x="4005" fg:w="1"/><text x="100.1502%" y="239.50"></text></g><g><title>_start (3,804 samples, 94.89%)</title><rect x="5.0636%" y="309" width="94.8865%" height="15" fill="rgb(242,16,51)" fg:x="203" fg:w="3804"/><text x="5.3136%" y="319.50">_start</text></g><g><title>__libc_start_main (3,804 samples, 94.89%)</title><rect x="5.0636%" y="293" width="94.8865%" height="15" fill="rgb(248,9,4)" fg:x="203" fg:w="3804"/><text x="5.3136%" y="303.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,804 samples, 94.89%)</title><rect x="5.0636%" y="277" width="94.8865%" height="15" fill="rgb(210,31,22)" fg:x="203" fg:w="3804"/><text x="5.3136%" y="287.50">[libc.so.6]</text></g><g><title>main (3,804 samples, 94.89%)</title><rect x="5.0636%" y="261" width="94.8865%" height="15" fill="rgb(239,54,39)" fg:x="203" fg:w="3804"/><text x="5.3136%" y="271.50">main</text></g><g><title>void lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::flowMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt; &gt; (7 samples, 0.17%)</title><rect x="99.7755%" y="245" width="0.1746%" height="15" fill="rgb(230,99,41)" fg:x="4000" fg:w="7"/><text x="100.0255%" y="255.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::set (1 samples, 0.02%)</title><rect x="99.9252%" y="229" width="0.0249%" height="15" fill="rgb(253,106,12)" fg:x="4006" fg:w="1"/><text x="100.1752%" y="239.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (1 samples, 0.02%)</title><rect x="99.9252%" y="213" width="0.0249%" height="15" fill="rgb(213,46,41)" fg:x="4006" fg:w="1"/><text x="100.1752%" y="223.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::id (1 samples, 0.02%)</title><rect x="99.9252%" y="197" width="0.0249%" height="15" fill="rgb(215,133,35)" fg:x="4006" fg:w="1"/><text x="100.1752%" y="207.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::uniform_real_distribution (1 samples, 0.02%)</title><rect x="99.9501%" y="309" width="0.0249%" height="15" fill="rgb(213,28,5)" fg:x="4007" fg:w="1"/><text x="100.2001%" y="319.50"></text></g><g><title>all (4,009 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(215,77,49)" fg:x="0" fg:w="4009"/><text x="0.2500%" y="351.50"></text></g><g><title>a.out (4,009 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="4009"/><text x="0.2500%" y="335.50">a.out</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::max_size (1 samples, 0.02%)</title><rect x="99.9751%" y="309" width="0.0249%" height="15" fill="rgb(208,67,9)" fg:x="4008" fg:w="1"/><text x="100.2251%" y="319.50"></text></g></svg></svg>