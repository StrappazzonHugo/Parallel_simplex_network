<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="3634"><g><title>bool std::operator==&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt; (2 samples, 0.06%)</title><rect x="0.0000%" y="277" width="0.0550%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="287.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase::notifier (1 samples, 0.03%)</title><rect x="0.0550%" y="277" width="0.0275%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.3050%" y="287.50"></text></g><g><title>lemon::ListDigraphBase::addArc (1 samples, 0.03%)</title><rect x="0.0826%" y="277" width="0.0275%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.3326%" y="287.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::findJoinNode (1 samples, 0.03%)</title><rect x="0.1101%" y="277" width="0.0275%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3601%" y="287.50"></text></g><g><title>std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::operator-- (1 samples, 0.03%)</title><rect x="0.1376%" y="277" width="0.0275%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.3876%" y="287.50"></text></g><g><title>std::__new_allocator&lt;signed char&gt;::deallocate (1 samples, 0.03%)</title><rect x="0.1651%" y="277" width="0.0275%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="0.4151%" y="287.50"></text></g><g><title>std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;::operator (1 samples, 0.03%)</title><rect x="0.1926%" y="277" width="0.0275%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="1"/><text x="0.4426%" y="287.50"></text></g><g><title>std::operator== (2 samples, 0.06%)</title><rect x="0.2201%" y="277" width="0.0550%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="2"/><text x="0.4701%" y="287.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::operator++ (1 samples, 0.03%)</title><rect x="0.2752%" y="277" width="0.0275%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="0.5252%" y="287.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (57 samples, 1.57%)</title><rect x="0.3027%" y="277" width="1.5685%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="57"/><text x="0.5527%" y="287.50"></text></g><g><title>[[stack]] (79 samples, 2.17%)</title><rect x="0.0000%" y="293" width="2.1739%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="79"/><text x="0.2500%" y="303.50">[..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (11 samples, 0.30%)</title><rect x="1.8712%" y="277" width="0.3027%" height="15" fill="rgb(240,193,28)" fg:x="68" fg:w="11"/><text x="2.1212%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (12 samples, 0.33%)</title><rect x="2.1739%" y="293" width="0.3302%" height="15" fill="rgb(216,20,37)" fg:x="79" fg:w="12"/><text x="2.4239%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.14%)</title><rect x="2.3665%" y="277" width="0.1376%" height="15" fill="rgb(206,188,39)" fg:x="86" fg:w="5"/><text x="2.6165%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.14%)</title><rect x="2.3665%" y="261" width="0.1376%" height="15" fill="rgb(217,207,13)" fg:x="86" fg:w="5"/><text x="2.6165%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.14%)</title><rect x="2.3665%" y="245" width="0.1376%" height="15" fill="rgb(231,73,38)" fg:x="86" fg:w="5"/><text x="2.6165%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.11%)</title><rect x="2.3941%" y="229" width="0.1101%" height="15" fill="rgb(225,20,46)" fg:x="87" fg:w="4"/><text x="2.6441%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.06%)</title><rect x="2.4491%" y="213" width="0.0550%" height="15" fill="rgb(210,31,41)" fg:x="89" fg:w="2"/><text x="2.6991%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (58 samples, 1.60%)</title><rect x="2.5041%" y="277" width="1.5960%" height="15" fill="rgb(221,200,47)" fg:x="91" fg:w="58"/><text x="2.7541%" y="287.50"></text></g><g><title>[unknown] (62 samples, 1.71%)</title><rect x="2.5041%" y="293" width="1.7061%" height="15" fill="rgb(226,26,5)" fg:x="91" fg:w="62"/><text x="2.7541%" y="303.50"></text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (4 samples, 0.11%)</title><rect x="4.1002%" y="277" width="0.1101%" height="15" fill="rgb(249,33,26)" fg:x="149" fg:w="4"/><text x="4.3502%" y="287.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt;::ArcMap (1 samples, 0.03%)</title><rect x="4.2653%" y="229" width="0.0275%" height="15" fill="rgb(235,183,28)" fg:x="155" fg:w="1"/><text x="4.5153%" y="239.50"></text></g><g><title>lemon::MapExtender&lt;lemon::DefaultMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt; &gt;::MapExtender (1 samples, 0.03%)</title><rect x="4.2653%" y="213" width="0.0275%" height="15" fill="rgb(221,5,38)" fg:x="155" fg:w="1"/><text x="4.5153%" y="223.50"></text></g><g><title>lemon::DefaultMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::DefaultMap (1 samples, 0.03%)</title><rect x="4.2653%" y="197" width="0.0275%" height="15" fill="rgb(247,18,42)" fg:x="155" fg:w="1"/><text x="4.5153%" y="207.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::VectorMap (1 samples, 0.03%)</title><rect x="4.2653%" y="181" width="0.0275%" height="15" fill="rgb(241,131,45)" fg:x="155" fg:w="1"/><text x="4.5153%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (1 samples, 0.03%)</title><rect x="4.2653%" y="165" width="0.0275%" height="15" fill="rgb(249,31,29)" fg:x="155" fg:w="1"/><text x="4.5153%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (1 samples, 0.03%)</title><rect x="4.2653%" y="149" width="0.0275%" height="15" fill="rgb(225,111,53)" fg:x="155" fg:w="1"/><text x="4.5153%" y="159.50"></text></g><g><title>int* std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (1 samples, 0.03%)</title><rect x="4.2653%" y="133" width="0.0275%" height="15" fill="rgb(238,160,17)" fg:x="155" fg:w="1"/><text x="4.5153%" y="143.50"></text></g><g><title>int* std::__uninitialized_default_n&lt;int*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="4.2653%" y="117" width="0.0275%" height="15" fill="rgb(214,148,48)" fg:x="155" fg:w="1"/><text x="4.5153%" y="127.50"></text></g><g><title>int* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (1 samples, 0.03%)</title><rect x="4.2653%" y="101" width="0.0275%" height="15" fill="rgb(232,36,49)" fg:x="155" fg:w="1"/><text x="4.5153%" y="111.50"></text></g><g><title>int* std::fill_n&lt;int*, unsigned long, int&gt; (1 samples, 0.03%)</title><rect x="4.2653%" y="85" width="0.0275%" height="15" fill="rgb(209,103,24)" fg:x="155" fg:w="1"/><text x="4.5153%" y="95.50"></text></g><g><title>int* std::__fill_n_a&lt;int*, unsigned long, int&gt; (1 samples, 0.03%)</title><rect x="4.2653%" y="69" width="0.0275%" height="15" fill="rgb(229,88,8)" fg:x="155" fg:w="1"/><text x="4.5153%" y="79.50"></text></g><g><title>void std::__fill_a&lt;int*, int&gt; (1 samples, 0.03%)</title><rect x="4.2653%" y="53" width="0.0275%" height="15" fill="rgb(213,181,19)" fg:x="155" fg:w="1"/><text x="4.5153%" y="63.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;int&gt;::__value, void&gt;::__type std::__fill_a1&lt;int*, int&gt; (1 samples, 0.03%)</title><rect x="4.2653%" y="37" width="0.0275%" height="15" fill="rgb(254,191,54)" fg:x="155" fg:w="1"/><text x="4.5153%" y="47.50"></text></g><g><title>bool std::operator!=&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt; (5 samples, 0.14%)</title><rect x="4.3203%" y="181" width="0.1376%" height="15" fill="rgb(241,83,37)" fg:x="157" fg:w="5"/><text x="4.5703%" y="191.50"></text></g><g><title>bool std::operator==&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt; (3 samples, 0.08%)</title><rect x="4.3753%" y="165" width="0.0826%" height="15" fill="rgb(233,36,39)" fg:x="159" fg:w="3"/><text x="4.6253%" y="175.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::base (3 samples, 0.08%)</title><rect x="4.3753%" y="149" width="0.0826%" height="15" fill="rgb(226,3,54)" fg:x="159" fg:w="3"/><text x="4.6253%" y="159.50"></text></g><g><title>int* std::__fill_n_a&lt;int*, unsigned long, int&gt; (1 samples, 0.03%)</title><rect x="4.7056%" y="69" width="0.0275%" height="15" fill="rgb(245,192,40)" fg:x="171" fg:w="1"/><text x="4.9556%" y="79.50"></text></g><g><title>int* std::fill_n&lt;int*, unsigned long, int&gt; (4 samples, 0.11%)</title><rect x="4.6505%" y="85" width="0.1101%" height="15" fill="rgb(238,167,29)" fg:x="169" fg:w="4"/><text x="4.9005%" y="95.50"></text></g><g><title>std::__size_to_integer (1 samples, 0.03%)</title><rect x="4.7331%" y="69" width="0.0275%" height="15" fill="rgb(232,182,51)" fg:x="172" fg:w="1"/><text x="4.9831%" y="79.50"></text></g><g><title>int* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (6 samples, 0.17%)</title><rect x="4.6230%" y="101" width="0.1651%" height="15" fill="rgb(231,60,39)" fg:x="168" fg:w="6"/><text x="4.8730%" y="111.50"></text></g><g><title>void std::_Construct&lt;int&gt; (1 samples, 0.03%)</title><rect x="4.7606%" y="85" width="0.0275%" height="15" fill="rgb(208,69,12)" fg:x="173" fg:w="1"/><text x="5.0106%" y="95.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="4.7606%" y="69" width="0.0275%" height="15" fill="rgb(235,93,37)" fg:x="173" fg:w="1"/><text x="5.0106%" y="79.50"></text></g><g><title>int* std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (8 samples, 0.22%)</title><rect x="4.5955%" y="133" width="0.2201%" height="15" fill="rgb(213,116,39)" fg:x="167" fg:w="8"/><text x="4.8455%" y="143.50"></text></g><g><title>int* std::__uninitialized_default_n&lt;int*, unsigned long&gt; (7 samples, 0.19%)</title><rect x="4.6230%" y="117" width="0.1926%" height="15" fill="rgb(222,207,29)" fg:x="168" fg:w="7"/><text x="4.8730%" y="127.50"></text></g><g><title>int* std::fill_n&lt;int*, unsigned long, int&gt; (1 samples, 0.03%)</title><rect x="4.7881%" y="101" width="0.0275%" height="15" fill="rgb(206,96,30)" fg:x="174" fg:w="1"/><text x="5.0381%" y="111.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::add (19 samples, 0.52%)</title><rect x="4.4579%" y="181" width="0.5228%" height="15" fill="rgb(218,138,4)" fg:x="162" fg:w="19"/><text x="4.7079%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (17 samples, 0.47%)</title><rect x="4.5129%" y="165" width="0.4678%" height="15" fill="rgb(250,191,14)" fg:x="164" fg:w="17"/><text x="4.7629%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (17 samples, 0.47%)</title><rect x="4.5129%" y="149" width="0.4678%" height="15" fill="rgb(239,60,40)" fg:x="164" fg:w="17"/><text x="4.7629%" y="159.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::max_size (6 samples, 0.17%)</title><rect x="4.8156%" y="133" width="0.1651%" height="15" fill="rgb(206,27,48)" fg:x="175" fg:w="6"/><text x="5.0656%" y="143.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_max_size (6 samples, 0.17%)</title><rect x="4.8156%" y="117" width="0.1651%" height="15" fill="rgb(225,35,8)" fg:x="175" fg:w="6"/><text x="5.0656%" y="127.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="4.9532%" y="101" width="0.0275%" height="15" fill="rgb(250,213,24)" fg:x="180" fg:w="1"/><text x="5.2032%" y="111.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::begin (1 samples, 0.03%)</title><rect x="5.0083%" y="165" width="0.0275%" height="15" fill="rgb(247,123,22)" fg:x="182" fg:w="1"/><text x="5.2583%" y="175.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::rend (4 samples, 0.11%)</title><rect x="4.9807%" y="181" width="0.1101%" height="15" fill="rgb(231,138,38)" fg:x="181" fg:w="4"/><text x="5.2307%" y="191.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::reverse_iterator (2 samples, 0.06%)</title><rect x="5.0358%" y="165" width="0.0550%" height="15" fill="rgb(231,145,46)" fg:x="183" fg:w="2"/><text x="5.2858%" y="175.50"></text></g><g><title>std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::operator* (2 samples, 0.06%)</title><rect x="5.1183%" y="165" width="0.0550%" height="15" fill="rgb(251,118,11)" fg:x="186" fg:w="2"/><text x="5.3683%" y="175.50"></text></g><g><title>std::_List_node&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::_M_valptr (1 samples, 0.03%)</title><rect x="5.1458%" y="149" width="0.0275%" height="15" fill="rgb(217,147,25)" fg:x="187" fg:w="1"/><text x="5.3958%" y="159.50"></text></g><g><title>__gnu_cxx::__aligned_membuf&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::_M_ptr (1 samples, 0.03%)</title><rect x="5.1458%" y="133" width="0.0275%" height="15" fill="rgb(247,81,37)" fg:x="187" fg:w="1"/><text x="5.3958%" y="143.50"></text></g><g><title>std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::operator-- (3 samples, 0.08%)</title><rect x="5.1734%" y="165" width="0.0826%" height="15" fill="rgb(209,12,38)" fg:x="188" fg:w="3"/><text x="5.4234%" y="175.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::operator* (7 samples, 0.19%)</title><rect x="5.0908%" y="181" width="0.1926%" height="15" fill="rgb(227,1,9)" fg:x="185" fg:w="7"/><text x="5.3408%" y="191.50"></text></g><g><title>std::_List_node&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::_M_valptr (1 samples, 0.03%)</title><rect x="5.2559%" y="165" width="0.0275%" height="15" fill="rgb(248,47,43)" fg:x="191" fg:w="1"/><text x="5.5059%" y="175.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::add (40 samples, 1.10%)</title><rect x="4.2928%" y="197" width="1.1007%" height="15" fill="rgb(221,10,30)" fg:x="156" fg:w="40"/><text x="4.5428%" y="207.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::operator++ (4 samples, 0.11%)</title><rect x="5.2834%" y="181" width="0.1101%" height="15" fill="rgb(210,229,1)" fg:x="192" fg:w="4"/><text x="5.5334%" y="191.50"></text></g><g><title>std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::operator-- (3 samples, 0.08%)</title><rect x="5.3110%" y="165" width="0.0826%" height="15" fill="rgb(222,148,37)" fg:x="193" fg:w="3"/><text x="5.5610%" y="175.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="5.5586%" y="181" width="0.0275%" height="15" fill="rgb(234,67,33)" fg:x="202" fg:w="1"/><text x="5.8086%" y="191.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::push_back (2 samples, 0.06%)</title><rect x="5.5861%" y="181" width="0.0550%" height="15" fill="rgb(247,98,35)" fg:x="203" fg:w="2"/><text x="5.8361%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::ArcT&amp; std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::emplace_back&lt;lemon::ListDigraphBase::ArcT&gt; (2 samples, 0.06%)</title><rect x="5.5861%" y="165" width="0.0550%" height="15" fill="rgb(247,138,52)" fg:x="203" fg:w="2"/><text x="5.8361%" y="175.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::back (1 samples, 0.03%)</title><rect x="5.6136%" y="149" width="0.0275%" height="15" fill="rgb(213,79,30)" fg:x="204" fg:w="1"/><text x="5.8636%" y="159.50"></text></g><g><title>lemon::ListDigraph::addArc (50 samples, 1.38%)</title><rect x="4.2928%" y="229" width="1.3759%" height="15" fill="rgb(246,177,23)" fg:x="156" fg:w="50"/><text x="4.5428%" y="239.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::addArc (50 samples, 1.38%)</title><rect x="4.2928%" y="213" width="1.3759%" height="15" fill="rgb(230,62,27)" fg:x="156" fg:w="50"/><text x="4.5428%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::addArc (10 samples, 0.28%)</title><rect x="5.3935%" y="197" width="0.2752%" height="15" fill="rgb(216,154,8)" fg:x="196" fg:w="10"/><text x="5.6435%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::size (1 samples, 0.03%)</title><rect x="5.6412%" y="181" width="0.0275%" height="15" fill="rgb(244,35,45)" fg:x="205" fg:w="1"/><text x="5.8912%" y="191.50"></text></g><g><title>bool std::operator!=&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt; (2 samples, 0.06%)</title><rect x="5.7237%" y="181" width="0.0550%" height="15" fill="rgb(251,115,12)" fg:x="208" fg:w="2"/><text x="5.9737%" y="191.50"></text></g><g><title>bool std::operator==&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt; (1 samples, 0.03%)</title><rect x="5.7512%" y="165" width="0.0275%" height="15" fill="rgb(240,54,50)" fg:x="209" fg:w="1"/><text x="6.0012%" y="175.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt;::base (1 samples, 0.03%)</title><rect x="5.7512%" y="149" width="0.0275%" height="15" fill="rgb(233,84,52)" fg:x="209" fg:w="1"/><text x="6.0012%" y="159.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt;::rbegin (1 samples, 0.03%)</title><rect x="5.7788%" y="181" width="0.0275%" height="15" fill="rgb(207,117,47)" fg:x="210" fg:w="1"/><text x="6.0288%" y="191.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt;::end (1 samples, 0.03%)</title><rect x="5.7788%" y="165" width="0.0275%" height="15" fill="rgb(249,43,39)" fg:x="210" fg:w="1"/><text x="6.0288%" y="175.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::add (6 samples, 0.17%)</title><rect x="5.6687%" y="197" width="0.1651%" height="15" fill="rgb(209,38,44)" fg:x="206" fg:w="6"/><text x="5.9187%" y="207.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt;::rend (1 samples, 0.03%)</title><rect x="5.8063%" y="181" width="0.0275%" height="15" fill="rgb(236,212,23)" fg:x="211" fg:w="1"/><text x="6.0563%" y="191.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::NodeT*, std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt; &gt;::operator- (1 samples, 0.03%)</title><rect x="5.8338%" y="133" width="0.0275%" height="15" fill="rgb(242,79,21)" fg:x="212" fg:w="1"/><text x="6.0838%" y="143.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::back (3 samples, 0.08%)</title><rect x="5.8338%" y="149" width="0.0826%" height="15" fill="rgb(211,96,35)" fg:x="212" fg:w="3"/><text x="6.0838%" y="159.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::end (2 samples, 0.06%)</title><rect x="5.8613%" y="133" width="0.0550%" height="15" fill="rgb(253,215,40)" fg:x="213" fg:w="2"/><text x="6.1113%" y="143.50"></text></g><g><title>lemon::ListDigraph::addNode (10 samples, 0.28%)</title><rect x="5.6687%" y="229" width="0.2752%" height="15" fill="rgb(211,81,21)" fg:x="206" fg:w="10"/><text x="5.9187%" y="239.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::addNode (10 samples, 0.28%)</title><rect x="5.6687%" y="213" width="0.2752%" height="15" fill="rgb(208,190,38)" fg:x="206" fg:w="10"/><text x="5.9187%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::addNode (4 samples, 0.11%)</title><rect x="5.8338%" y="197" width="0.1101%" height="15" fill="rgb(235,213,38)" fg:x="212" fg:w="4"/><text x="6.0838%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::push_back (4 samples, 0.11%)</title><rect x="5.8338%" y="181" width="0.1101%" height="15" fill="rgb(237,122,38)" fg:x="212" fg:w="4"/><text x="6.0838%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::NodeT&amp; std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::emplace_back&lt;lemon::ListDigraphBase::NodeT&gt; (4 samples, 0.11%)</title><rect x="5.8338%" y="165" width="0.1101%" height="15" fill="rgb(244,218,35)" fg:x="212" fg:w="4"/><text x="6.0838%" y="175.50"></text></g><g><title>void std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::_M_realloc_insert&lt;lemon::ListDigraphBase::NodeT&gt; (1 samples, 0.03%)</title><rect x="5.9163%" y="149" width="0.0275%" height="15" fill="rgb(240,68,47)" fg:x="215" fg:w="1"/><text x="6.1663%" y="159.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::_S_relocate (1 samples, 0.03%)</title><rect x="5.9163%" y="133" width="0.0275%" height="15" fill="rgb(210,16,53)" fg:x="215" fg:w="1"/><text x="6.1663%" y="143.50"></text></g><g><title>lemon::ListDigraphBase::NodeT* std::__relocate_a&lt;lemon::ListDigraphBase::NodeT*, lemon::ListDigraphBase::NodeT*, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt; (1 samples, 0.03%)</title><rect x="5.9163%" y="117" width="0.0275%" height="15" fill="rgb(235,124,12)" fg:x="215" fg:w="1"/><text x="6.1663%" y="127.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;lemon::ListDigraphBase::NodeT, void&gt;::value, lemon::ListDigraphBase::NodeT*&gt;::type std::__relocate_a_1&lt;lemon::ListDigraphBase::NodeT, lemon::ListDigraphBase::NodeT&gt; (1 samples, 0.03%)</title><rect x="5.9163%" y="101" width="0.0275%" height="15" fill="rgb(224,169,11)" fg:x="215" fg:w="1"/><text x="6.1663%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="5.9163%" y="85" width="0.0275%" height="15" fill="rgb(250,166,2)" fg:x="215" fg:w="1"/><text x="6.1663%" y="95.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (3 samples, 0.08%)</title><rect x="5.9989%" y="213" width="0.0826%" height="15" fill="rgb(242,216,29)" fg:x="218" fg:w="3"/><text x="6.2489%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::next (3 samples, 0.08%)</title><rect x="5.9989%" y="197" width="0.0826%" height="15" fill="rgb(230,116,27)" fg:x="218" fg:w="3"/><text x="6.2489%" y="207.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;&amp; lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::costMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt; &gt; (6 samples, 0.17%)</title><rect x="5.9439%" y="229" width="0.1651%" height="15" fill="rgb(228,99,48)" fg:x="216" fg:w="6"/><text x="6.1939%" y="239.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="6.0815%" y="213" width="0.0275%" height="15" fill="rgb(253,11,6)" fg:x="221" fg:w="1"/><text x="6.3315%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.03%)</title><rect x="6.1365%" y="197" width="0.0275%" height="15" fill="rgb(247,143,39)" fg:x="223" fg:w="1"/><text x="6.3865%" y="207.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (2 samples, 0.06%)</title><rect x="6.1365%" y="213" width="0.0550%" height="15" fill="rgb(236,97,10)" fg:x="223" fg:w="2"/><text x="6.3865%" y="223.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="6.1640%" y="197" width="0.0275%" height="15" fill="rgb(233,208,19)" fg:x="224" fg:w="1"/><text x="6.4140%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::Arc::Arc (1 samples, 0.03%)</title><rect x="6.1915%" y="213" width="0.0275%" height="15" fill="rgb(216,164,2)" fg:x="225" fg:w="1"/><text x="6.4415%" y="223.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;&amp; lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::upperMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt; &gt; (6 samples, 0.17%)</title><rect x="6.1090%" y="229" width="0.1651%" height="15" fill="rgb(220,129,5)" fg:x="222" fg:w="6"/><text x="6.3590%" y="239.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (2 samples, 0.06%)</title><rect x="6.2190%" y="213" width="0.0550%" height="15" fill="rgb(242,17,10)" fg:x="226" fg:w="2"/><text x="6.4690%" y="223.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase::notifier (1 samples, 0.03%)</title><rect x="6.2466%" y="197" width="0.0275%" height="15" fill="rgb(242,107,0)" fg:x="227" fg:w="1"/><text x="6.4966%" y="207.50"></text></g><g><title>int lemon::countArcs&lt;lemon::ListDigraph&gt; (3 samples, 0.08%)</title><rect x="6.3016%" y="197" width="0.0826%" height="15" fill="rgb(251,28,31)" fg:x="229" fg:w="3"/><text x="6.5516%" y="207.50"></text></g><g><title>lemon::_core_bits::CountArcsSelector&lt;lemon::ListDigraph, void&gt;::count (3 samples, 0.08%)</title><rect x="6.3016%" y="181" width="0.0826%" height="15" fill="rgb(233,223,10)" fg:x="229" fg:w="3"/><text x="6.5516%" y="191.50"></text></g><g><title>int lemon::countItems&lt;lemon::ListDigraph, lemon::ListDigraphBase::Arc&gt; (3 samples, 0.08%)</title><rect x="6.3016%" y="165" width="0.0826%" height="15" fill="rgb(215,21,27)" fg:x="229" fg:w="3"/><text x="6.5516%" y="175.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (2 samples, 0.06%)</title><rect x="6.3291%" y="149" width="0.0550%" height="15" fill="rgb(232,23,21)" fg:x="230" fg:w="2"/><text x="6.5791%" y="159.50"></text></g><g><title>lemon::ListDigraphBase::next (2 samples, 0.06%)</title><rect x="6.3291%" y="133" width="0.0550%" height="15" fill="rgb(244,5,23)" fg:x="230" fg:w="2"/><text x="6.5791%" y="143.50"></text></g><g><title>int lemon::countNodes&lt;lemon::ListDigraph&gt; (1 samples, 0.03%)</title><rect x="6.3841%" y="197" width="0.0275%" height="15" fill="rgb(226,81,46)" fg:x="232" fg:w="1"/><text x="6.6341%" y="207.50"></text></g><g><title>lemon::_core_bits::CountNodesSelector&lt;lemon::ListDigraph, void&gt;::count (1 samples, 0.03%)</title><rect x="6.3841%" y="181" width="0.0275%" height="15" fill="rgb(247,70,30)" fg:x="232" fg:w="1"/><text x="6.6341%" y="191.50"></text></g><g><title>int lemon::countItems&lt;lemon::ListDigraph, lemon::ListDigraphBase::Node&gt; (1 samples, 0.03%)</title><rect x="6.3841%" y="165" width="0.0275%" height="15" fill="rgb(212,68,19)" fg:x="232" fg:w="1"/><text x="6.6341%" y="175.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::NodeIt::operator++ (1 samples, 0.03%)</title><rect x="6.3841%" y="149" width="0.0275%" height="15" fill="rgb(240,187,13)" fg:x="232" fg:w="1"/><text x="6.6341%" y="159.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.03%)</title><rect x="6.3841%" y="133" width="0.0275%" height="15" fill="rgb(223,113,26)" fg:x="232" fg:w="1"/><text x="6.6341%" y="143.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (4 samples, 0.11%)</title><rect x="6.4117%" y="197" width="0.1101%" height="15" fill="rgb(206,192,2)" fg:x="233" fg:w="4"/><text x="6.6617%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::next (4 samples, 0.11%)</title><rect x="6.4117%" y="181" width="0.1101%" height="15" fill="rgb(241,108,4)" fg:x="233" fg:w="4"/><text x="6.6617%" y="191.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::NodeIt::operator++ (1 samples, 0.03%)</title><rect x="6.5217%" y="197" width="0.0275%" height="15" fill="rgb(247,173,49)" fg:x="237" fg:w="1"/><text x="6.7717%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.03%)</title><rect x="6.5217%" y="181" width="0.0275%" height="15" fill="rgb(224,114,35)" fg:x="237" fg:w="1"/><text x="6.7717%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::Arc::operator!= (1 samples, 0.03%)</title><rect x="6.5493%" y="197" width="0.0275%" height="15" fill="rgb(245,159,27)" fg:x="238" fg:w="1"/><text x="6.7993%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::target (1 samples, 0.03%)</title><rect x="6.5768%" y="197" width="0.0275%" height="15" fill="rgb(245,172,44)" fg:x="239" fg:w="1"/><text x="6.8268%" y="207.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::resetParams (2 samples, 0.06%)</title><rect x="6.6043%" y="197" width="0.0550%" height="15" fill="rgb(236,23,11)" fg:x="240" fg:w="2"/><text x="6.8543%" y="207.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node, int&gt;::operator[] (4 samples, 0.11%)</title><rect x="6.6593%" y="197" width="0.1101%" height="15" fill="rgb(205,117,38)" fg:x="242" fg:w="4"/><text x="6.9093%" y="207.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (2 samples, 0.06%)</title><rect x="6.7144%" y="181" width="0.0550%" height="15" fill="rgb(237,72,25)" fg:x="244" fg:w="2"/><text x="6.9644%" y="191.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::NetworkSimplex (26 samples, 0.72%)</title><rect x="6.2741%" y="229" width="0.7155%" height="15" fill="rgb(244,70,9)" fg:x="228" fg:w="26"/><text x="6.5241%" y="239.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::reset (26 samples, 0.72%)</title><rect x="6.2741%" y="213" width="0.7155%" height="15" fill="rgb(217,125,39)" fg:x="228" fg:w="26"/><text x="6.5241%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (8 samples, 0.22%)</title><rect x="6.7694%" y="197" width="0.2201%" height="15" fill="rgb(235,36,10)" fg:x="246" fg:w="8"/><text x="7.0194%" y="207.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (8 samples, 0.22%)</title><rect x="6.7694%" y="181" width="0.2201%" height="15" fill="rgb(251,123,47)" fg:x="246" fg:w="8"/><text x="7.0194%" y="191.50"></text></g><g><title>int* std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (8 samples, 0.22%)</title><rect x="6.7694%" y="165" width="0.2201%" height="15" fill="rgb(221,13,13)" fg:x="246" fg:w="8"/><text x="7.0194%" y="175.50"></text></g><g><title>int* std::__uninitialized_default_n&lt;int*, unsigned long&gt; (8 samples, 0.22%)</title><rect x="6.7694%" y="149" width="0.2201%" height="15" fill="rgb(238,131,9)" fg:x="246" fg:w="8"/><text x="7.0194%" y="159.50"></text></g><g><title>int* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (8 samples, 0.22%)</title><rect x="6.7694%" y="133" width="0.2201%" height="15" fill="rgb(211,50,8)" fg:x="246" fg:w="8"/><text x="7.0194%" y="143.50"></text></g><g><title>int* std::fill_n&lt;int*, unsigned long, int&gt; (8 samples, 0.22%)</title><rect x="6.7694%" y="117" width="0.2201%" height="15" fill="rgb(245,182,24)" fg:x="246" fg:w="8"/><text x="7.0194%" y="127.50"></text></g><g><title>int* std::__fill_n_a&lt;int*, unsigned long, int&gt; (8 samples, 0.22%)</title><rect x="6.7694%" y="101" width="0.2201%" height="15" fill="rgb(242,14,37)" fg:x="246" fg:w="8"/><text x="7.0194%" y="111.50"></text></g><g><title>void std::__fill_a&lt;int*, int&gt; (8 samples, 0.22%)</title><rect x="6.7694%" y="85" width="0.2201%" height="15" fill="rgb(246,228,12)" fg:x="246" fg:w="8"/><text x="7.0194%" y="95.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;int&gt;::__value, void&gt;::__type std::__fill_a1&lt;int*, int&gt; (8 samples, 0.22%)</title><rect x="6.7694%" y="69" width="0.2201%" height="15" fill="rgb(213,55,15)" fg:x="246" fg:w="8"/><text x="7.0194%" y="79.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::init (4 samples, 0.11%)</title><rect x="6.9895%" y="213" width="0.1101%" height="15" fill="rgb(209,9,3)" fg:x="254" fg:w="4"/><text x="7.2395%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="7.0721%" y="197" width="0.0275%" height="15" fill="rgb(230,59,30)" fg:x="257" fg:w="1"/><text x="7.3221%" y="207.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::BlockSearchPivotRule::BlockSearchPivotRule (1 samples, 0.03%)</title><rect x="7.1271%" y="181" width="0.0275%" height="15" fill="rgb(209,121,21)" fg:x="259" fg:w="1"/><text x="7.3771%" y="191.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="7.1271%" y="165" width="0.0275%" height="15" fill="rgb(220,109,13)" fg:x="259" fg:w="1"/><text x="7.3771%" y="175.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="7.1271%" y="149" width="0.0275%" height="15" fill="rgb(232,18,1)" fg:x="259" fg:w="1"/><text x="7.3771%" y="159.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="7.1271%" y="133" width="0.0275%" height="15" fill="rgb(215,41,42)" fg:x="259" fg:w="1"/><text x="7.3771%" y="143.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="7.1271%" y="117" width="0.0275%" height="15" fill="rgb(224,123,36)" fg:x="259" fg:w="1"/><text x="7.3771%" y="127.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (221 samples, 6.08%)</title><rect x="24.1882%" y="165" width="6.0815%" height="15" fill="rgb(240,125,3)" fg:x="879" fg:w="221"/><text x="24.4382%" y="175.50">std::vec..</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::BlockSearchPivotRule::findEnteringArc (877 samples, 24.13%)</title><rect x="7.1547%" y="181" width="24.1332%" height="15" fill="rgb(205,98,50)" fg:x="260" fg:w="877"/><text x="7.4047%" y="191.50">lemon::NetworkSimplex&lt;lemon::ListDigra..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (37 samples, 1.02%)</title><rect x="30.2697%" y="165" width="1.0182%" height="15" fill="rgb(205,185,37)" fg:x="1100" fg:w="37"/><text x="30.5197%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="31.4254%" y="165" width="0.0275%" height="15" fill="rgb(238,207,15)" fg:x="1142" fg:w="1"/><text x="31.6754%" y="175.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::changeFlow (7 samples, 0.19%)</title><rect x="31.2878%" y="181" width="0.1926%" height="15" fill="rgb(213,199,42)" fg:x="1137" fg:w="7"/><text x="31.5378%" y="191.50"></text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="31.4529%" y="165" width="0.0275%" height="15" fill="rgb(235,201,11)" fg:x="1143" fg:w="1"/><text x="31.7029%" y="175.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::findJoinNode (592 samples, 16.29%)</title><rect x="31.4805%" y="181" width="16.2906%" height="15" fill="rgb(207,46,11)" fg:x="1144" fg:w="592"/><text x="31.7305%" y="191.50">lemon::NetworkSimplex&lt;lem..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (169 samples, 4.65%)</title><rect x="43.1205%" y="165" width="4.6505%" height="15" fill="rgb(241,35,35)" fg:x="1567" fg:w="169"/><text x="43.3705%" y="175.50">std::..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (178 samples, 4.90%)</title><rect x="73.7479%" y="165" width="4.8982%" height="15" fill="rgb(243,32,47)" fg:x="2680" fg:w="178"/><text x="73.9979%" y="175.50">std::v..</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::findLeavingArc (1,171 samples, 32.22%)</title><rect x="47.7711%" y="181" width="32.2234%" height="15" fill="rgb(247,202,23)" fg:x="1736" fg:w="1171"/><text x="48.0211%" y="191.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;:..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (49 samples, 1.35%)</title><rect x="78.6461%" y="165" width="1.3484%" height="15" fill="rgb(219,102,11)" fg:x="2858" fg:w="49"/><text x="78.8961%" y="175.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::updatePotential (105 samples, 2.89%)</title><rect x="79.9945%" y="181" width="2.8894%" height="15" fill="rgb(243,110,44)" fg:x="2907" fg:w="105"/><text x="80.2445%" y="191.50">le..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (32 samples, 0.88%)</title><rect x="82.0033%" y="165" width="0.8806%" height="15" fill="rgb(222,74,54)" fg:x="2980" fg:w="32"/><text x="82.2533%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (122 samples, 3.36%)</title><rect x="92.7353%" y="165" width="3.3572%" height="15" fill="rgb(216,99,12)" fg:x="3370" fg:w="122"/><text x="92.9853%" y="175.50">std..</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::updateTreeStructure (482 samples, 13.26%)</title><rect x="82.8839%" y="181" width="13.2636%" height="15" fill="rgb(226,22,26)" fg:x="3012" fg:w="482"/><text x="83.1339%" y="191.50">lemon::NetworkSimple..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (2 samples, 0.06%)</title><rect x="96.0925%" y="165" width="0.0550%" height="15" fill="rgb(217,163,10)" fg:x="3492" fg:w="2"/><text x="96.3425%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (55 samples, 1.51%)</title><rect x="96.1475%" y="181" width="1.5135%" height="15" fill="rgb(213,25,53)" fg:x="3494" fg:w="55"/><text x="96.3975%" y="191.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::run (3,310 samples, 91.08%)</title><rect x="6.9895%" y="229" width="91.0842%" height="15" fill="rgb(252,105,26)" fg:x="254" fg:w="3310"/><text x="7.2395%" y="239.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::run</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start (3,306 samples, 90.97%)</title><rect x="7.0996%" y="213" width="90.9741%" height="15" fill="rgb(220,39,43)" fg:x="258" fg:w="3306"/><text x="7.3496%" y="223.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::ProblemType lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start&lt;lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::BlockSearchPivotRule&gt; (3,306 samples, 90.97%)</title><rect x="7.0996%" y="197" width="90.9741%" height="15" fill="rgb(229,68,48)" fg:x="258" fg:w="3306"/><text x="7.3496%" y="207.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::ProblemType lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start&lt;lemon::NetworkSimplex&lt;lemon:..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (15 samples, 0.41%)</title><rect x="97.6610%" y="181" width="0.4128%" height="15" fill="rgb(252,8,32)" fg:x="3549" fg:w="15"/><text x="97.9110%" y="191.50"></text></g><g><title>int lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::totalCost&lt;int&gt; (5 samples, 0.14%)</title><rect x="98.0737%" y="213" width="0.1376%" height="15" fill="rgb(223,20,43)" fg:x="3564" fg:w="5"/><text x="98.3237%" y="223.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (2 samples, 0.06%)</title><rect x="98.1563%" y="197" width="0.0550%" height="15" fill="rgb(229,81,49)" fg:x="3567" fg:w="2"/><text x="98.4063%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::next (2 samples, 0.06%)</title><rect x="98.1563%" y="181" width="0.0550%" height="15" fill="rgb(236,28,36)" fg:x="3567" fg:w="2"/><text x="98.4063%" y="191.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (1 samples, 0.03%)</title><rect x="98.2113%" y="213" width="0.0275%" height="15" fill="rgb(249,185,26)" fg:x="3569" fg:w="1"/><text x="98.4613%" y="223.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::totalCost (7 samples, 0.19%)</title><rect x="98.0737%" y="229" width="0.1926%" height="15" fill="rgb(249,174,33)" fg:x="3564" fg:w="7"/><text x="98.3237%" y="239.50"></text></g><g><title>lemon::ListDigraphBase::Arc::Arc (1 samples, 0.03%)</title><rect x="98.2389%" y="213" width="0.0275%" height="15" fill="rgb(233,201,37)" fg:x="3570" fg:w="1"/><text x="98.4889%" y="223.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (1 samples, 0.03%)</title><rect x="98.2664%" y="229" width="0.0275%" height="15" fill="rgb(221,78,26)" fg:x="3571" fg:w="1"/><text x="98.5164%" y="239.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::id (1 samples, 0.03%)</title><rect x="98.2939%" y="213" width="0.0275%" height="15" fill="rgb(250,127,30)" fg:x="3572" fg:w="1"/><text x="98.5439%" y="223.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::id (1 samples, 0.03%)</title><rect x="98.3214%" y="197" width="0.0275%" height="15" fill="rgb(230,49,44)" fg:x="3573" fg:w="1"/><text x="98.5714%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::id (1 samples, 0.03%)</title><rect x="98.3214%" y="181" width="0.0275%" height="15" fill="rgb(229,67,23)" fg:x="3573" fg:w="1"/><text x="98.5714%" y="191.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::set (3 samples, 0.08%)</title><rect x="98.2939%" y="229" width="0.0826%" height="15" fill="rgb(249,83,47)" fg:x="3572" fg:w="3"/><text x="98.5439%" y="239.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (2 samples, 0.06%)</title><rect x="98.3214%" y="213" width="0.0550%" height="15" fill="rgb(215,43,3)" fg:x="3573" fg:w="2"/><text x="98.5714%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="98.3489%" y="197" width="0.0275%" height="15" fill="rgb(238,154,13)" fg:x="3574" fg:w="1"/><text x="98.5989%" y="207.50"></text></g><g><title>std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;::operator (1 samples, 0.03%)</title><rect x="98.6791%" y="149" width="0.0275%" height="15" fill="rgb(219,56,2)" fg:x="3586" fg:w="1"/><text x="98.9291%" y="159.50"></text></g><g><title>unsigned long std::__detail::__mod&lt;unsigned long, 2147483647ul, 16807ul, 0ul&gt; (1 samples, 0.03%)</title><rect x="98.6791%" y="133" width="0.0275%" height="15" fill="rgb(233,0,4)" fg:x="3586" fg:w="1"/><text x="98.9291%" y="143.50"></text></g><g><title>std::__detail::_Mod&lt;unsigned long, 2147483647ul, 16807ul, 0ul, true, true&gt;::__calc (1 samples, 0.03%)</title><rect x="98.6791%" y="117" width="0.0275%" height="15" fill="rgb(235,30,7)" fg:x="3586" fg:w="1"/><text x="98.9291%" y="127.50"></text></g><g><title>double std::uniform_real_distribution&lt;double&gt;::operator (25 samples, 0.69%)</title><rect x="98.3764%" y="213" width="0.6879%" height="15" fill="rgb(250,79,13)" fg:x="3575" fg:w="25"/><text x="98.6264%" y="223.50"></text></g><g><title>double std::uniform_real_distribution&lt;double&gt;::operator (25 samples, 0.69%)</title><rect x="98.3764%" y="197" width="0.6879%" height="15" fill="rgb(211,146,34)" fg:x="3575" fg:w="25"/><text x="98.6264%" y="207.50"></text></g><g><title>std::__detail::_Adaptor&lt;std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;, double&gt;::operator (23 samples, 0.63%)</title><rect x="98.4315%" y="181" width="0.6329%" height="15" fill="rgb(228,22,38)" fg:x="3577" fg:w="23"/><text x="98.6815%" y="191.50"></text></g><g><title>double std::generate_canonical&lt;double, 53ul, std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt; &gt; (22 samples, 0.61%)</title><rect x="98.4590%" y="165" width="0.6054%" height="15" fill="rgb(235,168,5)" fg:x="3578" fg:w="22"/><text x="98.7090%" y="175.50"></text></g><g><title>std::log (13 samples, 0.36%)</title><rect x="98.7067%" y="149" width="0.3577%" height="15" fill="rgb(221,155,16)" fg:x="3587" fg:w="13"/><text x="98.9567%" y="159.50"></text></g><g><title>[libm.so.6] (11 samples, 0.30%)</title><rect x="98.7617%" y="133" width="0.3027%" height="15" fill="rgb(215,215,53)" fg:x="3589" fg:w="11"/><text x="99.0117%" y="143.50"></text></g><g><title>randomnumber (26 samples, 0.72%)</title><rect x="98.3764%" y="229" width="0.7155%" height="15" fill="rgb(223,4,10)" fg:x="3575" fg:w="26"/><text x="98.6264%" y="239.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::uniform_real_distribution (1 samples, 0.03%)</title><rect x="99.0644%" y="213" width="0.0275%" height="15" fill="rgb(234,103,6)" fg:x="3600" fg:w="1"/><text x="99.3144%" y="223.50"></text></g><g><title>std::uniform_real_distribution&lt;double&gt;::param_type::param_type (1 samples, 0.03%)</title><rect x="99.0644%" y="197" width="0.0275%" height="15" fill="rgb(227,97,0)" fg:x="3600" fg:w="1"/><text x="99.3144%" y="207.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::push_back (1 samples, 0.03%)</title><rect x="99.0919%" y="229" width="0.0275%" height="15" fill="rgb(234,150,53)" fg:x="3601" fg:w="1"/><text x="99.3419%" y="239.50"></text></g><g><title>void std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_realloc_insert&lt;float const&amp;&gt; (1 samples, 0.03%)</title><rect x="99.0919%" y="213" width="0.0275%" height="15" fill="rgb(228,201,54)" fg:x="3601" fg:w="1"/><text x="99.3419%" y="223.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_S_relocate (1 samples, 0.03%)</title><rect x="99.0919%" y="197" width="0.0275%" height="15" fill="rgb(222,22,37)" fg:x="3601" fg:w="1"/><text x="99.3419%" y="207.50"></text></g><g><title>float* std::__relocate_a&lt;float*, float*, std::allocator&lt;float&gt; &gt; (1 samples, 0.03%)</title><rect x="99.0919%" y="181" width="0.0275%" height="15" fill="rgb(237,53,32)" fg:x="3601" fg:w="1"/><text x="99.3419%" y="191.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;float, void&gt;::value, float*&gt;::type std::__relocate_a_1&lt;float, float&gt; (1 samples, 0.03%)</title><rect x="99.0919%" y="165" width="0.0275%" height="15" fill="rgb(233,25,53)" fg:x="3601" fg:w="1"/><text x="99.3419%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.0919%" y="149" width="0.0275%" height="15" fill="rgb(210,40,34)" fg:x="3601" fg:w="1"/><text x="99.3419%" y="159.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="99.1194%" y="229" width="0.0275%" height="15" fill="rgb(241,220,44)" fg:x="3602" fg:w="1"/><text x="99.3694%" y="239.50"></text></g><g><title>std::vector&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::allocator&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="99.1469%" y="229" width="0.0275%" height="15" fill="rgb(235,28,35)" fg:x="3603" fg:w="1"/><text x="99.3969%" y="239.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;::operator* (1 samples, 0.03%)</title><rect x="99.1745%" y="37" width="0.0275%" height="15" fill="rgb(210,56,17)" fg:x="3604" fg:w="1"/><text x="99.4245%" y="47.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;::operator++ (1 samples, 0.03%)</title><rect x="99.2020%" y="37" width="0.0275%" height="15" fill="rgb(224,130,29)" fg:x="3605" fg:w="1"/><text x="99.4520%" y="47.50"></text></g><g><title>std::vector&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::allocator&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; &gt;::vector (3 samples, 0.08%)</title><rect x="99.1745%" y="229" width="0.0826%" height="15" fill="rgb(235,212,8)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="239.50"></text></g><g><title>std::vector&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::allocator&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; &gt;::_M_fill_initialize (3 samples, 0.08%)</title><rect x="99.1745%" y="213" width="0.0826%" height="15" fill="rgb(223,33,50)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="223.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::__uninitialized_fill_n_a&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (3 samples, 0.08%)</title><rect x="99.1745%" y="197" width="0.0826%" height="15" fill="rgb(219,149,13)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::uninitialized_fill_n&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (3 samples, 0.08%)</title><rect x="99.1745%" y="181" width="0.0826%" height="15" fill="rgb(250,156,29)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="191.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::__uninitialized_fill_n&lt;false&gt;::__uninit_fill_n&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (3 samples, 0.08%)</title><rect x="99.1745%" y="165" width="0.0826%" height="15" fill="rgb(216,193,19)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="175.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::__do_uninit_fill_n&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (3 samples, 0.08%)</title><rect x="99.1745%" y="149" width="0.0826%" height="15" fill="rgb(216,135,14)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="159.50"></text></g><g><title>void std::_Construct&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; const&amp;&gt; (3 samples, 0.08%)</title><rect x="99.1745%" y="133" width="0.0826%" height="15" fill="rgb(241,47,5)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="143.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;::vector (3 samples, 0.08%)</title><rect x="99.1745%" y="117" width="0.0826%" height="15" fill="rgb(233,42,35)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="127.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*, lemon::ListDigraphBase::Node&gt; (3 samples, 0.08%)</title><rect x="99.1745%" y="101" width="0.0826%" height="15" fill="rgb(231,13,6)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="111.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*&gt; (3 samples, 0.08%)</title><rect x="99.1745%" y="85" width="0.0826%" height="15" fill="rgb(207,181,40)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="95.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*&gt; (3 samples, 0.08%)</title><rect x="99.1745%" y="69" width="0.0826%" height="15" fill="rgb(254,173,49)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="79.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*&gt; (3 samples, 0.08%)</title><rect x="99.1745%" y="53" width="0.0826%" height="15" fill="rgb(221,1,38)" fg:x="3604" fg:w="3"/><text x="99.4245%" y="63.50"></text></g><g><title>bool __gnu_cxx::operator!=&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="99.2295%" y="37" width="0.0275%" height="15" fill="rgb(206,124,46)" fg:x="3606" fg:w="1"/><text x="99.4795%" y="47.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (3 samples, 0.08%)</title><rect x="99.2570%" y="213" width="0.0826%" height="15" fill="rgb(249,21,11)" fg:x="3607" fg:w="3"/><text x="99.5070%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::next (3 samples, 0.08%)</title><rect x="99.2570%" y="197" width="0.0826%" height="15" fill="rgb(222,201,40)" fg:x="3607" fg:w="3"/><text x="99.5070%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (2 samples, 0.06%)</title><rect x="99.2845%" y="181" width="0.0550%" height="15" fill="rgb(235,61,29)" fg:x="3608" fg:w="2"/><text x="99.5345%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::Arc::operator!= (1 samples, 0.03%)</title><rect x="99.3396%" y="213" width="0.0275%" height="15" fill="rgb(219,207,3)" fg:x="3610" fg:w="1"/><text x="99.5896%" y="223.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase::notifier (2 samples, 0.06%)</title><rect x="99.3946%" y="181" width="0.0550%" height="15" fill="rgb(222,56,46)" fg:x="3612" fg:w="2"/><text x="99.6446%" y="191.50"></text></g><g><title>_start (3,462 samples, 95.27%)</title><rect x="4.2102%" y="293" width="95.2669%" height="15" fill="rgb(239,76,54)" fg:x="153" fg:w="3462"/><text x="4.4602%" y="303.50">_start</text></g><g><title>__libc_start_main (3,462 samples, 95.27%)</title><rect x="4.2102%" y="277" width="95.2669%" height="15" fill="rgb(231,124,27)" fg:x="153" fg:w="3462"/><text x="4.4602%" y="287.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,462 samples, 95.27%)</title><rect x="4.2102%" y="261" width="95.2669%" height="15" fill="rgb(249,195,6)" fg:x="153" fg:w="3462"/><text x="4.4602%" y="271.50">[libc.so.6]</text></g><g><title>main (3,462 samples, 95.27%)</title><rect x="4.2102%" y="245" width="95.2669%" height="15" fill="rgb(237,174,47)" fg:x="153" fg:w="3462"/><text x="4.4602%" y="255.50">main</text></g><g><title>void lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::flowMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt; &gt; (8 samples, 0.22%)</title><rect x="99.2570%" y="229" width="0.2201%" height="15" fill="rgb(206,201,31)" fg:x="3607" fg:w="8"/><text x="99.5070%" y="239.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::set (4 samples, 0.11%)</title><rect x="99.3671%" y="213" width="0.1101%" height="15" fill="rgb(231,57,52)" fg:x="3611" fg:w="4"/><text x="99.6171%" y="223.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (3 samples, 0.08%)</title><rect x="99.3946%" y="197" width="0.0826%" height="15" fill="rgb(248,177,22)" fg:x="3612" fg:w="3"/><text x="99.6446%" y="207.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::id (1 samples, 0.03%)</title><rect x="99.4496%" y="181" width="0.0275%" height="15" fill="rgb(215,211,37)" fg:x="3614" fg:w="1"/><text x="99.6996%" y="191.50"></text></g><g><title>all (3,634 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="3634"/><text x="0.2500%" y="335.50"></text></g><g><title>a.out (3,634 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="3634"/><text x="0.2500%" y="319.50">a.out</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (19 samples, 0.52%)</title><rect x="99.4772%" y="293" width="0.5228%" height="15" fill="rgb(228,167,24)" fg:x="3615" fg:w="19"/><text x="99.7272%" y="303.50"></text></g></svg></svg>