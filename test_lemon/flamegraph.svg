<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="1812"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0000%" y="277" width="0.0552%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>int* std::__uninitialized_default_n&lt;int*, unsigned long&gt; (1 samples, 0.06%)</title><rect x="0.0552%" y="277" width="0.0552%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3052%" y="287.50"></text></g><g><title>lemon::ListDigraph::addArc (1 samples, 0.06%)</title><rect x="0.1104%" y="277" width="0.0552%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.3604%" y="287.50"></text></g><g><title>lemon::ListDigraphBase::ArcT&amp;&amp; std::forward&lt;lemon::ListDigraphBase::ArcT&gt; (1 samples, 0.06%)</title><rect x="0.1656%" y="277" width="0.0552%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.4156%" y="287.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (1 samples, 0.06%)</title><rect x="0.2208%" y="277" width="0.0552%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.4708%" y="287.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::max_size (1 samples, 0.06%)</title><rect x="0.2759%" y="277" width="0.0552%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.5259%" y="287.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (38 samples, 2.10%)</title><rect x="0.3311%" y="277" width="2.0971%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="38"/><text x="0.5811%" y="287.50">s..</text></g><g><title>[[stack]] (46 samples, 2.54%)</title><rect x="0.0000%" y="293" width="2.5386%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="46"/><text x="0.2500%" y="303.50">[[..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (2 samples, 0.11%)</title><rect x="2.4283%" y="277" width="0.1104%" height="15" fill="rgb(218,30,26)" fg:x="44" fg:w="2"/><text x="2.6783%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (11 samples, 0.61%)</title><rect x="2.5386%" y="293" width="0.6071%" height="15" fill="rgb(220,122,19)" fg:x="46" fg:w="11"/><text x="2.7886%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.28%)</title><rect x="2.8698%" y="277" width="0.2759%" height="15" fill="rgb(250,228,42)" fg:x="52" fg:w="5"/><text x="3.1198%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.28%)</title><rect x="2.8698%" y="261" width="0.2759%" height="15" fill="rgb(240,193,28)" fg:x="52" fg:w="5"/><text x="3.1198%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.28%)</title><rect x="2.8698%" y="245" width="0.2759%" height="15" fill="rgb(216,20,37)" fg:x="52" fg:w="5"/><text x="3.1198%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.22%)</title><rect x="2.9249%" y="229" width="0.2208%" height="15" fill="rgb(206,188,39)" fg:x="53" fg:w="4"/><text x="3.1749%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.17%)</title><rect x="2.9801%" y="213" width="0.1656%" height="15" fill="rgb(217,207,13)" fg:x="54" fg:w="3"/><text x="3.2301%" y="223.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="3.0905%" y="197" width="0.0552%" height="15" fill="rgb(231,73,38)" fg:x="56" fg:w="1"/><text x="3.3405%" y="207.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (22 samples, 1.21%)</title><rect x="3.1457%" y="277" width="1.2141%" height="15" fill="rgb(225,20,46)" fg:x="57" fg:w="22"/><text x="3.3957%" y="287.50"></text></g><g><title>[unknown] (23 samples, 1.27%)</title><rect x="3.1457%" y="293" width="1.2693%" height="15" fill="rgb(210,31,41)" fg:x="57" fg:w="23"/><text x="3.3957%" y="303.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (1 samples, 0.06%)</title><rect x="4.3598%" y="277" width="0.0552%" height="15" fill="rgb(221,200,47)" fg:x="79" fg:w="1"/><text x="4.6098%" y="287.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::set (1 samples, 0.06%)</title><rect x="4.4150%" y="245" width="0.0552%" height="15" fill="rgb(226,26,5)" fg:x="80" fg:w="1"/><text x="4.6650%" y="255.50"></text></g><g><title>std::operator== (1 samples, 0.06%)</title><rect x="4.7461%" y="149" width="0.0552%" height="15" fill="rgb(249,33,26)" fg:x="86" fg:w="1"/><text x="4.9961%" y="159.50"></text></g><g><title>bool std::operator!=&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt; (5 samples, 0.28%)</title><rect x="4.6909%" y="181" width="0.2759%" height="15" fill="rgb(235,183,28)" fg:x="85" fg:w="5"/><text x="4.9409%" y="191.50"></text></g><g><title>bool std::operator==&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt; (5 samples, 0.28%)</title><rect x="4.6909%" y="165" width="0.2759%" height="15" fill="rgb(221,5,38)" fg:x="85" fg:w="5"/><text x="4.9409%" y="175.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::base (3 samples, 0.17%)</title><rect x="4.8013%" y="149" width="0.1656%" height="15" fill="rgb(247,18,42)" fg:x="87" fg:w="3"/><text x="5.0513%" y="159.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::id (1 samples, 0.06%)</title><rect x="4.9669%" y="165" width="0.0552%" height="15" fill="rgb(241,131,45)" fg:x="90" fg:w="1"/><text x="5.2169%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::max_size (2 samples, 0.11%)</title><rect x="5.2428%" y="133" width="0.1104%" height="15" fill="rgb(249,31,29)" fg:x="95" fg:w="2"/><text x="5.4928%" y="143.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_max_size (1 samples, 0.06%)</title><rect x="5.2980%" y="117" width="0.0552%" height="15" fill="rgb(225,111,53)" fg:x="96" fg:w="1"/><text x="5.5480%" y="127.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::add (8 samples, 0.44%)</title><rect x="4.9669%" y="181" width="0.4415%" height="15" fill="rgb(238,160,17)" fg:x="90" fg:w="8"/><text x="5.2169%" y="191.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (7 samples, 0.39%)</title><rect x="5.0221%" y="165" width="0.3863%" height="15" fill="rgb(214,148,48)" fg:x="91" fg:w="7"/><text x="5.2721%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (7 samples, 0.39%)</title><rect x="5.0221%" y="149" width="0.3863%" height="15" fill="rgb(232,36,49)" fg:x="91" fg:w="7"/><text x="5.2721%" y="159.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (1 samples, 0.06%)</title><rect x="5.3532%" y="133" width="0.0552%" height="15" fill="rgb(209,103,24)" fg:x="97" fg:w="1"/><text x="5.6032%" y="143.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::rbegin (1 samples, 0.06%)</title><rect x="5.4084%" y="181" width="0.0552%" height="15" fill="rgb(229,88,8)" fg:x="98" fg:w="1"/><text x="5.6584%" y="191.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::end (1 samples, 0.06%)</title><rect x="5.4084%" y="165" width="0.0552%" height="15" fill="rgb(213,181,19)" fg:x="98" fg:w="1"/><text x="5.6584%" y="175.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::rend (4 samples, 0.22%)</title><rect x="5.4636%" y="181" width="0.2208%" height="15" fill="rgb(254,191,54)" fg:x="99" fg:w="4"/><text x="5.7136%" y="191.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::begin (2 samples, 0.11%)</title><rect x="5.5740%" y="165" width="0.1104%" height="15" fill="rgb(241,83,37)" fg:x="101" fg:w="2"/><text x="5.8240%" y="175.50"></text></g><g><title>std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::operator* (1 samples, 0.06%)</title><rect x="5.6843%" y="165" width="0.0552%" height="15" fill="rgb(233,36,39)" fg:x="103" fg:w="1"/><text x="5.9343%" y="175.50"></text></g><g><title>std::_List_node&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::_M_valptr (1 samples, 0.06%)</title><rect x="5.6843%" y="149" width="0.0552%" height="15" fill="rgb(226,3,54)" fg:x="103" fg:w="1"/><text x="5.9343%" y="159.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::operator* (3 samples, 0.17%)</title><rect x="5.6843%" y="181" width="0.1656%" height="15" fill="rgb(245,192,40)" fg:x="103" fg:w="3"/><text x="5.9343%" y="191.50"></text></g><g><title>std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::operator-- (2 samples, 0.11%)</title><rect x="5.7395%" y="165" width="0.1104%" height="15" fill="rgb(238,167,29)" fg:x="104" fg:w="2"/><text x="5.9895%" y="175.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::add (25 samples, 1.38%)</title><rect x="4.6358%" y="197" width="1.3797%" height="15" fill="rgb(232,182,51)" fg:x="84" fg:w="25"/><text x="4.8858%" y="207.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt; &gt;::operator++ (3 samples, 0.17%)</title><rect x="5.8499%" y="181" width="0.1656%" height="15" fill="rgb(231,60,39)" fg:x="106" fg:w="3"/><text x="6.0999%" y="191.50"></text></g><g><title>std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase*&gt;::operator-- (2 samples, 0.11%)</title><rect x="5.9051%" y="165" width="0.1104%" height="15" fill="rgb(208,69,12)" fg:x="107" fg:w="2"/><text x="6.1551%" y="175.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="6.0155%" y="181" width="0.0552%" height="15" fill="rgb(235,93,37)" fg:x="109" fg:w="1"/><text x="6.2655%" y="191.50"></text></g><g><title>operator new (1 samples, 0.06%)</title><rect x="6.0706%" y="149" width="0.0552%" height="15" fill="rgb(213,116,39)" fg:x="110" fg:w="1"/><text x="6.3206%" y="159.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::back (2 samples, 0.11%)</title><rect x="6.1258%" y="149" width="0.1104%" height="15" fill="rgb(222,207,29)" fg:x="111" fg:w="2"/><text x="6.3758%" y="159.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::end (2 samples, 0.11%)</title><rect x="6.1258%" y="133" width="0.1104%" height="15" fill="rgb(206,96,30)" fg:x="111" fg:w="2"/><text x="6.3758%" y="143.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::ArcT*, std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt; &gt;::__normal_iterator (2 samples, 0.11%)</title><rect x="6.1258%" y="117" width="0.1104%" height="15" fill="rgb(218,138,4)" fg:x="111" fg:w="2"/><text x="6.3758%" y="127.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::push_back (5 samples, 0.28%)</title><rect x="6.0706%" y="181" width="0.2759%" height="15" fill="rgb(250,191,14)" fg:x="110" fg:w="5"/><text x="6.3206%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::ArcT&amp; std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::emplace_back&lt;lemon::ListDigraphBase::ArcT&gt; (5 samples, 0.28%)</title><rect x="6.0706%" y="165" width="0.2759%" height="15" fill="rgb(239,60,40)" fg:x="110" fg:w="5"/><text x="6.3206%" y="175.50"></text></g><g><title>void std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::_M_realloc_insert&lt;lemon::ListDigraphBase::ArcT&gt; (2 samples, 0.11%)</title><rect x="6.2362%" y="149" width="0.1104%" height="15" fill="rgb(206,27,48)" fg:x="113" fg:w="2"/><text x="6.4862%" y="159.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::_S_relocate (2 samples, 0.11%)</title><rect x="6.2362%" y="133" width="0.1104%" height="15" fill="rgb(225,35,8)" fg:x="113" fg:w="2"/><text x="6.4862%" y="143.50"></text></g><g><title>lemon::ListDigraphBase::ArcT* std::__relocate_a&lt;lemon::ListDigraphBase::ArcT*, lemon::ListDigraphBase::ArcT*, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt; (2 samples, 0.11%)</title><rect x="6.2362%" y="117" width="0.1104%" height="15" fill="rgb(250,213,24)" fg:x="113" fg:w="2"/><text x="6.4862%" y="127.50"></text></g><g><title>std::enable_if&lt;std::__is_bitwise_relocatable&lt;lemon::ListDigraphBase::ArcT, void&gt;::value, lemon::ListDigraphBase::ArcT*&gt;::type std::__relocate_a_1&lt;lemon::ListDigraphBase::ArcT, lemon::ListDigraphBase::ArcT&gt; (2 samples, 0.11%)</title><rect x="6.2362%" y="101" width="0.1104%" height="15" fill="rgb(247,123,22)" fg:x="113" fg:w="2"/><text x="6.4862%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.11%)</title><rect x="6.2362%" y="85" width="0.1104%" height="15" fill="rgb(231,138,38)" fg:x="113" fg:w="2"/><text x="6.4862%" y="95.50"></text></g><g><title>lemon::ListDigraph::addArc (32 samples, 1.77%)</title><rect x="4.6358%" y="229" width="1.7660%" height="15" fill="rgb(231,145,46)" fg:x="84" fg:w="32"/><text x="4.8858%" y="239.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::addArc (32 samples, 1.77%)</title><rect x="4.6358%" y="213" width="1.7660%" height="15" fill="rgb(251,118,11)" fg:x="84" fg:w="32"/><text x="4.8858%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::addArc (7 samples, 0.39%)</title><rect x="6.0155%" y="197" width="0.3863%" height="15" fill="rgb(217,147,25)" fg:x="109" fg:w="7"/><text x="6.2655%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="6.3466%" y="181" width="0.0552%" height="15" fill="rgb(247,81,37)" fg:x="115" fg:w="1"/><text x="6.5966%" y="191.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt;::rbegin (2 samples, 0.11%)</title><rect x="6.4018%" y="181" width="0.1104%" height="15" fill="rgb(209,12,38)" fg:x="116" fg:w="2"/><text x="6.6518%" y="191.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt;::reverse_iterator (2 samples, 0.11%)</title><rect x="6.4018%" y="165" width="0.1104%" height="15" fill="rgb(227,1,9)" fg:x="116" fg:w="2"/><text x="6.6518%" y="175.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::add (3 samples, 0.17%)</title><rect x="6.4018%" y="197" width="0.1656%" height="15" fill="rgb(248,47,43)" fg:x="116" fg:w="3"/><text x="6.6518%" y="207.50"></text></g><g><title>std::__cxx11::list&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*, std::allocator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt;::rend (1 samples, 0.06%)</title><rect x="6.5121%" y="181" width="0.0552%" height="15" fill="rgb(221,10,30)" fg:x="118" fg:w="1"/><text x="6.7621%" y="191.50"></text></g><g><title>std::reverse_iterator&lt;std::_List_iterator&lt;lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase*&gt; &gt;::reverse_iterator (1 samples, 0.06%)</title><rect x="6.5121%" y="165" width="0.0552%" height="15" fill="rgb(210,229,1)" fg:x="118" fg:w="1"/><text x="6.7621%" y="175.50"></text></g><g><title>lemon::ListDigraph::addNode (7 samples, 0.39%)</title><rect x="6.4018%" y="229" width="0.3863%" height="15" fill="rgb(222,148,37)" fg:x="116" fg:w="7"/><text x="6.6518%" y="239.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::addNode (7 samples, 0.39%)</title><rect x="6.4018%" y="213" width="0.3863%" height="15" fill="rgb(234,67,33)" fg:x="116" fg:w="7"/><text x="6.6518%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::addNode (4 samples, 0.22%)</title><rect x="6.5673%" y="197" width="0.2208%" height="15" fill="rgb(247,98,35)" fg:x="119" fg:w="4"/><text x="6.8173%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::push_back (2 samples, 0.11%)</title><rect x="6.6777%" y="181" width="0.1104%" height="15" fill="rgb(247,138,52)" fg:x="121" fg:w="2"/><text x="6.9277%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::NodeT&amp; std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::emplace_back&lt;lemon::ListDigraphBase::NodeT&gt; (1 samples, 0.06%)</title><rect x="6.7329%" y="165" width="0.0552%" height="15" fill="rgb(213,79,30)" fg:x="122" fg:w="1"/><text x="6.9829%" y="175.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::back (1 samples, 0.06%)</title><rect x="6.7329%" y="149" width="0.0552%" height="15" fill="rgb(246,177,23)" fg:x="122" fg:w="1"/><text x="6.9829%" y="159.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::NodeT, std::allocator&lt;lemon::ListDigraphBase::NodeT&gt; &gt;::end (1 samples, 0.06%)</title><rect x="6.7329%" y="133" width="0.0552%" height="15" fill="rgb(230,62,27)" fg:x="122" fg:w="1"/><text x="6.9829%" y="143.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (1 samples, 0.06%)</title><rect x="6.8433%" y="213" width="0.0552%" height="15" fill="rgb(216,154,8)" fg:x="124" fg:w="1"/><text x="7.0933%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.06%)</title><rect x="6.8433%" y="197" width="0.0552%" height="15" fill="rgb(244,35,45)" fg:x="124" fg:w="1"/><text x="7.0933%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="6.8433%" y="181" width="0.0552%" height="15" fill="rgb(251,115,12)" fg:x="124" fg:w="1"/><text x="7.0933%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::Arc::operator!= (1 samples, 0.06%)</title><rect x="6.8985%" y="213" width="0.0552%" height="15" fill="rgb(240,54,50)" fg:x="125" fg:w="1"/><text x="7.1485%" y="223.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;&amp; lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::costMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt; &gt; (4 samples, 0.22%)</title><rect x="6.7881%" y="229" width="0.2208%" height="15" fill="rgb(233,84,52)" fg:x="123" fg:w="4"/><text x="7.0381%" y="239.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (1 samples, 0.06%)</title><rect x="6.9536%" y="213" width="0.0552%" height="15" fill="rgb(207,117,47)" fg:x="126" fg:w="1"/><text x="7.2036%" y="223.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::id (1 samples, 0.06%)</title><rect x="6.9536%" y="197" width="0.0552%" height="15" fill="rgb(249,43,39)" fg:x="126" fg:w="1"/><text x="7.2036%" y="207.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase::notifier (1 samples, 0.06%)</title><rect x="7.1192%" y="197" width="0.0552%" height="15" fill="rgb(209,38,44)" fg:x="129" fg:w="1"/><text x="7.3692%" y="207.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;&amp; lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::upperMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt; &gt; (4 samples, 0.22%)</title><rect x="7.0088%" y="229" width="0.2208%" height="15" fill="rgb(236,212,23)" fg:x="127" fg:w="4"/><text x="7.2588%" y="239.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (3 samples, 0.17%)</title><rect x="7.0640%" y="213" width="0.1656%" height="15" fill="rgb(242,79,21)" fg:x="128" fg:w="3"/><text x="7.3140%" y="223.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::id (1 samples, 0.06%)</title><rect x="7.1744%" y="197" width="0.0552%" height="15" fill="rgb(211,96,35)" fg:x="130" fg:w="1"/><text x="7.4244%" y="207.50"></text></g><g><title>int lemon::countArcs&lt;lemon::ListDigraph&gt; (1 samples, 0.06%)</title><rect x="7.3400%" y="197" width="0.0552%" height="15" fill="rgb(253,215,40)" fg:x="133" fg:w="1"/><text x="7.5900%" y="207.50"></text></g><g><title>lemon::_core_bits::CountArcsSelector&lt;lemon::ListDigraph, void&gt;::count (1 samples, 0.06%)</title><rect x="7.3400%" y="181" width="0.0552%" height="15" fill="rgb(211,81,21)" fg:x="133" fg:w="1"/><text x="7.5900%" y="191.50"></text></g><g><title>int lemon::countItems&lt;lemon::ListDigraph, lemon::ListDigraphBase::Arc&gt; (1 samples, 0.06%)</title><rect x="7.3400%" y="165" width="0.0552%" height="15" fill="rgb(208,190,38)" fg:x="133" fg:w="1"/><text x="7.5900%" y="175.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (1 samples, 0.06%)</title><rect x="7.3400%" y="149" width="0.0552%" height="15" fill="rgb(235,213,38)" fg:x="133" fg:w="1"/><text x="7.5900%" y="159.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.06%)</title><rect x="7.3400%" y="133" width="0.0552%" height="15" fill="rgb(237,122,38)" fg:x="133" fg:w="1"/><text x="7.5900%" y="143.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="7.3400%" y="117" width="0.0552%" height="15" fill="rgb(244,218,35)" fg:x="133" fg:w="1"/><text x="7.5900%" y="127.50"></text></g><g><title>int lemon::countNodes&lt;lemon::ListDigraph&gt; (1 samples, 0.06%)</title><rect x="7.3951%" y="197" width="0.0552%" height="15" fill="rgb(240,68,47)" fg:x="134" fg:w="1"/><text x="7.6451%" y="207.50"></text></g><g><title>lemon::_core_bits::CountNodesSelector&lt;lemon::ListDigraph, void&gt;::count (1 samples, 0.06%)</title><rect x="7.3951%" y="181" width="0.0552%" height="15" fill="rgb(210,16,53)" fg:x="134" fg:w="1"/><text x="7.6451%" y="191.50"></text></g><g><title>int lemon::countItems&lt;lemon::ListDigraph, lemon::ListDigraphBase::Node&gt; (1 samples, 0.06%)</title><rect x="7.3951%" y="165" width="0.0552%" height="15" fill="rgb(235,124,12)" fg:x="134" fg:w="1"/><text x="7.6451%" y="175.50"></text></g><g><title>lemon::ListDigraphBase::Node::operator!= (1 samples, 0.06%)</title><rect x="7.3951%" y="149" width="0.0552%" height="15" fill="rgb(224,169,11)" fg:x="134" fg:w="1"/><text x="7.6451%" y="159.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::NodeIt::operator++ (1 samples, 0.06%)</title><rect x="7.4503%" y="197" width="0.0552%" height="15" fill="rgb(250,166,2)" fg:x="135" fg:w="1"/><text x="7.7003%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::next (1 samples, 0.06%)</title><rect x="7.4503%" y="181" width="0.0552%" height="15" fill="rgb(242,216,29)" fg:x="135" fg:w="1"/><text x="7.7003%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::source (3 samples, 0.17%)</title><rect x="7.5055%" y="197" width="0.1656%" height="15" fill="rgb(230,116,27)" fg:x="136" fg:w="3"/><text x="7.7555%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (2 samples, 0.11%)</title><rect x="7.5607%" y="181" width="0.1104%" height="15" fill="rgb(228,99,48)" fg:x="137" fg:w="2"/><text x="7.8107%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::target (1 samples, 0.06%)</title><rect x="7.6711%" y="197" width="0.0552%" height="15" fill="rgb(253,11,6)" fg:x="139" fg:w="1"/><text x="7.9211%" y="207.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::resetParams (1 samples, 0.06%)</title><rect x="7.7263%" y="197" width="0.0552%" height="15" fill="rgb(247,143,39)" fg:x="140" fg:w="1"/><text x="7.9763%" y="207.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="7.7263%" y="181" width="0.0552%" height="15" fill="rgb(236,97,10)" fg:x="140" fg:w="1"/><text x="7.9763%" y="191.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node, int&gt;::operator[] (2 samples, 0.11%)</title><rect x="7.7815%" y="197" width="0.1104%" height="15" fill="rgb(233,208,19)" fg:x="141" fg:w="2"/><text x="8.0315%" y="207.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Node&gt;::ObserverBase::notifier (1 samples, 0.06%)</title><rect x="7.8366%" y="181" width="0.0552%" height="15" fill="rgb(216,164,2)" fg:x="142" fg:w="1"/><text x="8.0866%" y="191.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::NetworkSimplex (17 samples, 0.94%)</title><rect x="7.2296%" y="229" width="0.9382%" height="15" fill="rgb(220,129,5)" fg:x="131" fg:w="17"/><text x="7.4796%" y="239.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::reset (17 samples, 0.94%)</title><rect x="7.2296%" y="213" width="0.9382%" height="15" fill="rgb(242,17,10)" fg:x="131" fg:w="17"/><text x="7.4796%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::resize (5 samples, 0.28%)</title><rect x="7.8918%" y="197" width="0.2759%" height="15" fill="rgb(242,107,0)" fg:x="143" fg:w="5"/><text x="8.1418%" y="207.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (5 samples, 0.28%)</title><rect x="7.8918%" y="181" width="0.2759%" height="15" fill="rgb(251,28,31)" fg:x="143" fg:w="5"/><text x="8.1418%" y="191.50"></text></g><g><title>int* std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (5 samples, 0.28%)</title><rect x="7.8918%" y="165" width="0.2759%" height="15" fill="rgb(233,223,10)" fg:x="143" fg:w="5"/><text x="8.1418%" y="175.50"></text></g><g><title>int* std::__uninitialized_default_n&lt;int*, unsigned long&gt; (5 samples, 0.28%)</title><rect x="7.8918%" y="149" width="0.2759%" height="15" fill="rgb(215,21,27)" fg:x="143" fg:w="5"/><text x="8.1418%" y="159.50"></text></g><g><title>int* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (5 samples, 0.28%)</title><rect x="7.8918%" y="133" width="0.2759%" height="15" fill="rgb(232,23,21)" fg:x="143" fg:w="5"/><text x="8.1418%" y="143.50"></text></g><g><title>int* std::fill_n&lt;int*, unsigned long, int&gt; (5 samples, 0.28%)</title><rect x="7.8918%" y="117" width="0.2759%" height="15" fill="rgb(244,5,23)" fg:x="143" fg:w="5"/><text x="8.1418%" y="127.50"></text></g><g><title>int* std::__fill_n_a&lt;int*, unsigned long, int&gt; (5 samples, 0.28%)</title><rect x="7.8918%" y="101" width="0.2759%" height="15" fill="rgb(226,81,46)" fg:x="143" fg:w="5"/><text x="8.1418%" y="111.50"></text></g><g><title>void std::__fill_a&lt;int*, int&gt; (5 samples, 0.28%)</title><rect x="7.8918%" y="85" width="0.2759%" height="15" fill="rgb(247,70,30)" fg:x="143" fg:w="5"/><text x="8.1418%" y="95.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_scalar&lt;int&gt;::__value, void&gt;::__type std::__fill_a1&lt;int*, int&gt; (5 samples, 0.28%)</title><rect x="7.8918%" y="69" width="0.2759%" height="15" fill="rgb(212,68,19)" fg:x="143" fg:w="5"/><text x="8.1418%" y="79.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::init (3 samples, 0.17%)</title><rect x="8.1678%" y="213" width="0.1656%" height="15" fill="rgb(240,187,13)" fg:x="148" fg:w="3"/><text x="8.4178%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (114 samples, 6.29%)</title><rect x="25.0552%" y="165" width="6.2914%" height="15" fill="rgb(223,113,26)" fg:x="454" fg:w="114"/><text x="25.3052%" y="175.50">std::vec..</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::BlockSearchPivotRule::findEnteringArc (444 samples, 24.50%)</title><rect x="8.4989%" y="181" width="24.5033%" height="15" fill="rgb(206,192,2)" fg:x="154" fg:w="444"/><text x="8.7489%" y="191.50">lemon::NetworkSimplex&lt;lemon::ListDigrap..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (30 samples, 1.66%)</title><rect x="31.3466%" y="165" width="1.6556%" height="15" fill="rgb(241,108,4)" fg:x="568" fg:w="30"/><text x="31.5966%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (2 samples, 0.11%)</title><rect x="33.2230%" y="165" width="0.1104%" height="15" fill="rgb(247,173,49)" fg:x="602" fg:w="2"/><text x="33.4730%" y="175.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::changeFlow (7 samples, 0.39%)</title><rect x="33.0022%" y="181" width="0.3863%" height="15" fill="rgb(224,114,35)" fg:x="598" fg:w="7"/><text x="33.2522%" y="191.50"></text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="33.3333%" y="165" width="0.0552%" height="15" fill="rgb(245,159,27)" fg:x="604" fg:w="1"/><text x="33.5833%" y="175.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::findJoinNode (268 samples, 14.79%)</title><rect x="33.3885%" y="181" width="14.7903%" height="15" fill="rgb(245,172,44)" fg:x="605" fg:w="268"/><text x="33.6385%" y="191.50">lemon::NetworkSimplex&lt;l..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (68 samples, 3.75%)</title><rect x="44.4260%" y="165" width="3.7528%" height="15" fill="rgb(236,23,11)" fg:x="805" fg:w="68"/><text x="44.6760%" y="175.50">std:..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (102 samples, 5.63%)</title><rect x="73.2340%" y="165" width="5.6291%" height="15" fill="rgb(205,117,38)" fg:x="1327" fg:w="102"/><text x="73.4840%" y="175.50">std::ve..</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::findLeavingArc (571 samples, 31.51%)</title><rect x="48.1788%" y="181" width="31.5121%" height="15" fill="rgb(237,72,25)" fg:x="873" fg:w="571"/><text x="48.4288%" y="191.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (15 samples, 0.83%)</title><rect x="78.8631%" y="165" width="0.8278%" height="15" fill="rgb(244,70,9)" fg:x="1429" fg:w="15"/><text x="79.1131%" y="175.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::updatePotential (40 samples, 2.21%)</title><rect x="79.6909%" y="181" width="2.2075%" height="15" fill="rgb(217,125,39)" fg:x="1444" fg:w="40"/><text x="79.9409%" y="191.50">l..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (10 samples, 0.55%)</title><rect x="81.3466%" y="165" width="0.5519%" height="15" fill="rgb(235,36,10)" fg:x="1474" fg:w="10"/><text x="81.5966%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (58 samples, 3.20%)</title><rect x="92.3289%" y="165" width="3.2009%" height="15" fill="rgb(251,123,47)" fg:x="1673" fg:w="58"/><text x="92.5789%" y="175.50">std..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (1 samples, 0.06%)</title><rect x="95.5298%" y="165" width="0.0552%" height="15" fill="rgb(221,13,13)" fg:x="1731" fg:w="1"/><text x="95.7798%" y="175.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::updateTreeStructure (249 samples, 13.74%)</title><rect x="81.8985%" y="181" width="13.7417%" height="15" fill="rgb(238,131,9)" fg:x="1484" fg:w="249"/><text x="82.1485%" y="191.50">lemon::NetworkSimplex..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="95.5850%" y="165" width="0.0552%" height="15" fill="rgb(211,50,8)" fg:x="1732" fg:w="1"/><text x="95.8350%" y="175.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (29 samples, 1.60%)</title><rect x="95.6402%" y="181" width="1.6004%" height="15" fill="rgb(245,182,24)" fg:x="1733" fg:w="29"/><text x="95.8902%" y="191.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::run (1,620 samples, 89.40%)</title><rect x="8.1678%" y="229" width="89.4040%" height="15" fill="rgb(242,14,37)" fg:x="148" fg:w="1620"/><text x="8.4178%" y="239.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::run</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start (1,617 samples, 89.24%)</title><rect x="8.3333%" y="213" width="89.2384%" height="15" fill="rgb(246,228,12)" fg:x="151" fg:w="1617"/><text x="8.5833%" y="223.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start</text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::ProblemType lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start&lt;lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::BlockSearchPivotRule&gt; (1,617 samples, 89.24%)</title><rect x="8.3333%" y="197" width="89.2384%" height="15" fill="rgb(213,55,15)" fg:x="151" fg:w="1617"/><text x="8.5833%" y="207.50">lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::ProblemType lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::start&lt;lemon::NetworkSimplex&lt;lem..</text></g><g><title>std::vector&lt;signed char, std::allocator&lt;signed char&gt; &gt;::operator[] (6 samples, 0.33%)</title><rect x="97.2406%" y="181" width="0.3311%" height="15" fill="rgb(209,9,3)" fg:x="1762" fg:w="6"/><text x="97.4906%" y="191.50"></text></g><g><title>lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::totalCost (5 samples, 0.28%)</title><rect x="97.5717%" y="229" width="0.2759%" height="15" fill="rgb(230,59,30)" fg:x="1768" fg:w="5"/><text x="97.8217%" y="239.50"></text></g><g><title>int lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::totalCost&lt;int&gt; (5 samples, 0.28%)</title><rect x="97.5717%" y="213" width="0.2759%" height="15" fill="rgb(209,121,21)" fg:x="1768" fg:w="5"/><text x="97.8217%" y="223.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (3 samples, 0.17%)</title><rect x="97.6821%" y="197" width="0.1656%" height="15" fill="rgb(220,109,13)" fg:x="1770" fg:w="3"/><text x="97.9321%" y="207.50"></text></g><g><title>lemon::ListDigraphBase::next (3 samples, 0.17%)</title><rect x="97.6821%" y="181" width="0.1656%" height="15" fill="rgb(232,18,1)" fg:x="1770" fg:w="3"/><text x="97.9321%" y="191.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="97.7925%" y="165" width="0.0552%" height="15" fill="rgb(215,41,42)" fg:x="1772" fg:w="1"/><text x="98.0425%" y="175.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (1 samples, 0.06%)</title><rect x="97.8477%" y="229" width="0.0552%" height="15" fill="rgb(224,123,36)" fg:x="1773" fg:w="1"/><text x="98.0977%" y="239.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase::notifier (1 samples, 0.06%)</title><rect x="97.9581%" y="197" width="0.0552%" height="15" fill="rgb(240,125,3)" fg:x="1775" fg:w="1"/><text x="98.2081%" y="207.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::set (3 samples, 0.17%)</title><rect x="97.9029%" y="229" width="0.1656%" height="15" fill="rgb(205,98,50)" fg:x="1774" fg:w="3"/><text x="98.1529%" y="239.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (2 samples, 0.11%)</title><rect x="97.9581%" y="213" width="0.1104%" height="15" fill="rgb(205,185,37)" fg:x="1775" fg:w="2"/><text x="98.2081%" y="223.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="98.0132%" y="197" width="0.0552%" height="15" fill="rgb(238,207,15)" fg:x="1776" fg:w="1"/><text x="98.2632%" y="207.50"></text></g><g><title>std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;::operator (1 samples, 0.06%)</title><rect x="98.4547%" y="149" width="0.0552%" height="15" fill="rgb(213,199,42)" fg:x="1784" fg:w="1"/><text x="98.7047%" y="159.50"></text></g><g><title>unsigned long std::__detail::__mod&lt;unsigned long, 2147483647ul, 16807ul, 0ul&gt; (1 samples, 0.06%)</title><rect x="98.4547%" y="133" width="0.0552%" height="15" fill="rgb(235,201,11)" fg:x="1784" fg:w="1"/><text x="98.7047%" y="143.50"></text></g><g><title>randomnumber (12 samples, 0.66%)</title><rect x="98.0684%" y="229" width="0.6623%" height="15" fill="rgb(207,46,11)" fg:x="1777" fg:w="12"/><text x="98.3184%" y="239.50"></text></g><g><title>double std::uniform_real_distribution&lt;double&gt;::operator (11 samples, 0.61%)</title><rect x="98.1236%" y="213" width="0.6071%" height="15" fill="rgb(241,35,35)" fg:x="1778" fg:w="11"/><text x="98.3736%" y="223.50"></text></g><g><title>double std::uniform_real_distribution&lt;double&gt;::operator (11 samples, 0.61%)</title><rect x="98.1236%" y="197" width="0.6071%" height="15" fill="rgb(243,32,47)" fg:x="1778" fg:w="11"/><text x="98.3736%" y="207.50"></text></g><g><title>std::__detail::_Adaptor&lt;std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;, double&gt;::operator (11 samples, 0.61%)</title><rect x="98.1236%" y="181" width="0.6071%" height="15" fill="rgb(247,202,23)" fg:x="1778" fg:w="11"/><text x="98.3736%" y="191.50"></text></g><g><title>double std::generate_canonical&lt;double, 53ul, std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt; &gt; (11 samples, 0.61%)</title><rect x="98.1236%" y="165" width="0.6071%" height="15" fill="rgb(219,102,11)" fg:x="1778" fg:w="11"/><text x="98.3736%" y="175.50"></text></g><g><title>std::log (4 samples, 0.22%)</title><rect x="98.5099%" y="149" width="0.2208%" height="15" fill="rgb(243,110,44)" fg:x="1785" fg:w="4"/><text x="98.7599%" y="159.50"></text></g><g><title>[libm.so.6] (3 samples, 0.17%)</title><rect x="98.5651%" y="133" width="0.1656%" height="15" fill="rgb(222,74,54)" fg:x="1786" fg:w="3"/><text x="98.8151%" y="143.50"></text></g><g><title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (1 samples, 0.06%)</title><rect x="98.7307%" y="229" width="0.0552%" height="15" fill="rgb(216,99,12)" fg:x="1789" fg:w="1"/><text x="98.9807%" y="239.50"></text></g><g><title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::put (1 samples, 0.06%)</title><rect x="98.7307%" y="213" width="0.0552%" height="15" fill="rgb(226,22,26)" fg:x="1789" fg:w="1"/><text x="98.9807%" y="223.50"></text></g><g><title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (1 samples, 0.06%)</title><rect x="98.7307%" y="197" width="0.0552%" height="15" fill="rgb(217,163,10)" fg:x="1789" fg:w="1"/><text x="98.9807%" y="207.50"></text></g><g><title>std::vector&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::allocator&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="98.7859%" y="229" width="0.0552%" height="15" fill="rgb(213,25,53)" fg:x="1790" fg:w="1"/><text x="99.0359%" y="239.50"></text></g><g><title>std::vector&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::allocator&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; &gt;::vector (2 samples, 0.11%)</title><rect x="98.8411%" y="229" width="0.1104%" height="15" fill="rgb(252,105,26)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="239.50"></text></g><g><title>std::vector&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::allocator&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; &gt;::_M_fill_initialize (2 samples, 0.11%)</title><rect x="98.8411%" y="213" width="0.1104%" height="15" fill="rgb(220,39,43)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="223.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::__uninitialized_fill_n_a&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (2 samples, 0.11%)</title><rect x="98.8411%" y="197" width="0.1104%" height="15" fill="rgb(229,68,48)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::uninitialized_fill_n&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (2 samples, 0.11%)</title><rect x="98.8411%" y="181" width="0.1104%" height="15" fill="rgb(252,8,32)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="191.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::__uninitialized_fill_n&lt;false&gt;::__uninit_fill_n&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (2 samples, 0.11%)</title><rect x="98.8411%" y="165" width="0.1104%" height="15" fill="rgb(223,20,43)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="175.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;* std::__do_uninit_fill_n&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;*, unsigned long, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt; (2 samples, 0.11%)</title><rect x="98.8411%" y="149" width="0.1104%" height="15" fill="rgb(229,81,49)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="159.50"></text></g><g><title>void std::_Construct&lt;std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; const&amp;&gt; (2 samples, 0.11%)</title><rect x="98.8411%" y="133" width="0.1104%" height="15" fill="rgb(236,28,36)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="143.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt;::vector (2 samples, 0.11%)</title><rect x="98.8411%" y="117" width="0.1104%" height="15" fill="rgb(249,185,26)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="127.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*, lemon::ListDigraphBase::Node&gt; (2 samples, 0.11%)</title><rect x="98.8411%" y="101" width="0.1104%" height="15" fill="rgb(249,174,33)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="111.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*&gt; (2 samples, 0.11%)</title><rect x="98.8411%" y="85" width="0.1104%" height="15" fill="rgb(233,201,37)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="95.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*&gt; (2 samples, 0.11%)</title><rect x="98.8411%" y="69" width="0.1104%" height="15" fill="rgb(221,78,26)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="79.50"></text></g><g><title>lemon::ListDigraphBase::Node* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;, lemon::ListDigraphBase::Node*&gt; (2 samples, 0.11%)</title><rect x="98.8411%" y="53" width="0.1104%" height="15" fill="rgb(250,127,30)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="63.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;lemon::ListDigraphBase::Node const*, std::vector&lt;lemon::ListDigraphBase::Node, std::allocator&lt;lemon::ListDigraphBase::Node&gt; &gt; &gt;::operator++ (2 samples, 0.11%)</title><rect x="98.8411%" y="37" width="0.1104%" height="15" fill="rgb(230,49,44)" fg:x="1791" fg:w="2"/><text x="99.0911%" y="47.50"></text></g><g><title>lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcIt::operator++ (2 samples, 0.11%)</title><rect x="98.9514%" y="213" width="0.1104%" height="15" fill="rgb(229,67,23)" fg:x="1793" fg:w="2"/><text x="99.2014%" y="223.50"></text></g><g><title>lemon::ListDigraphBase::next (2 samples, 0.11%)</title><rect x="98.9514%" y="197" width="0.1104%" height="15" fill="rgb(249,83,47)" fg:x="1793" fg:w="2"/><text x="99.2014%" y="207.50"></text></g><g><title>std::vector&lt;lemon::ListDigraphBase::ArcT, std::allocator&lt;lemon::ListDigraphBase::ArcT&gt; &gt;::operator[] (1 samples, 0.06%)</title><rect x="99.0066%" y="181" width="0.0552%" height="15" fill="rgb(215,43,3)" fg:x="1794" fg:w="1"/><text x="99.2566%" y="191.50"></text></g><g><title>lemon::ListDigraphBase::Arc::Arc (1 samples, 0.06%)</title><rect x="99.0618%" y="213" width="0.0552%" height="15" fill="rgb(238,154,13)" fg:x="1795" fg:w="1"/><text x="99.3118%" y="223.50"></text></g><g><title>main (1,718 samples, 94.81%)</title><rect x="4.4702%" y="245" width="94.8124%" height="15" fill="rgb(219,56,2)" fg:x="81" fg:w="1718"/><text x="4.7202%" y="255.50">main</text></g><g><title>void lemon::NetworkSimplex&lt;lemon::ListDigraph, int, int&gt;::flowMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;::ArcMap&lt;int&gt; &gt; (6 samples, 0.33%)</title><rect x="98.9514%" y="229" width="0.3311%" height="15" fill="rgb(233,0,4)" fg:x="1793" fg:w="6"/><text x="99.2014%" y="239.50"></text></g><g><title>lemon::VectorMap&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc, int&gt;::operator[] (3 samples, 0.17%)</title><rect x="99.1170%" y="213" width="0.1656%" height="15" fill="rgb(235,30,7)" fg:x="1796" fg:w="3"/><text x="99.3670%" y="223.50"></text></g><g><title>lemon::AlterationNotifier&lt;lemon::DigraphExtender&lt;lemon::ListDigraphBase&gt;, lemon::ListDigraphBase::Arc&gt;::ObserverBase::notifier (1 samples, 0.06%)</title><rect x="99.2274%" y="197" width="0.0552%" height="15" fill="rgb(250,79,13)" fg:x="1798" fg:w="1"/><text x="99.4774%" y="207.50"></text></g><g><title>_start (1,720 samples, 94.92%)</title><rect x="4.4150%" y="293" width="94.9227%" height="15" fill="rgb(211,146,34)" fg:x="80" fg:w="1720"/><text x="4.6650%" y="303.50">_start</text></g><g><title>__libc_start_main (1,720 samples, 94.92%)</title><rect x="4.4150%" y="277" width="94.9227%" height="15" fill="rgb(228,22,38)" fg:x="80" fg:w="1720"/><text x="4.6650%" y="287.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,720 samples, 94.92%)</title><rect x="4.4150%" y="261" width="94.9227%" height="15" fill="rgb(235,168,5)" fg:x="80" fg:w="1720"/><text x="4.6650%" y="271.50">[libc.so.6]</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::push_back (1 samples, 0.06%)</title><rect x="99.2826%" y="245" width="0.0552%" height="15" fill="rgb(221,155,16)" fg:x="1799" fg:w="1"/><text x="99.5326%" y="255.50"></text></g><g><title>all (1,812 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="1812"/><text x="0.2500%" y="335.50"></text></g><g><title>a.out (1,812 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="1812"/><text x="0.2500%" y="319.50">a.out</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (12 samples, 0.66%)</title><rect x="99.3377%" y="293" width="0.6623%" height="15" fill="rgb(234,103,6)" fg:x="1800" fg:w="12"/><text x="99.5877%" y="303.50"></text></g></svg></svg>