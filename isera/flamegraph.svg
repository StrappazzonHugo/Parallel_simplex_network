<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="103313"><g><title>[anon] (2,610 samples, 2.53%)</title><rect x="0.0010%" y="549" width="2.5263%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2610"/><text x="0.2510%" y="559.50">[a..</text></g><g><title>isera::get_reduced_cost_edgeindex (2,610 samples, 2.53%)</title><rect x="0.0010%" y="533" width="2.5263%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2610"/><text x="0.2510%" y="543.50">ma..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6,324 samples, 6.12%)</title><rect x="2.5408%" y="533" width="6.1212%" height="15" fill="rgb(221,193,54)" fg:x="2625" fg:w="6324"/><text x="2.7908%" y="543.50">core::op..</text></g><g><title>isera::_find_block_search::_{{closure}} (2,816 samples, 2.73%)</title><rect x="5.9363%" y="517" width="2.7257%" height="15" fill="rgb(248,212,6)" fg:x="6133" fg:w="2816"/><text x="6.1863%" y="527.50">ma..</text></g><g><title>isera::get_reduced_cost_edgeindex (110 samples, 0.11%)</title><rect x="8.6620%" y="533" width="0.1065%" height="15" fill="rgb(208,68,35)" fg:x="8949" fg:w="110"/><text x="8.9120%" y="543.50"></text></g><g><title>isera::_find_block_search (255 samples, 0.25%)</title><rect x="8.7685%" y="517" width="0.2468%" height="15" fill="rgb(232,128,0)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (255 samples, 0.25%)</title><rect x="8.7685%" y="501" width="0.2468%" height="15" fill="rgb(207,160,47)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (255 samples, 0.25%)</title><rect x="8.7685%" y="485" width="0.2468%" height="15" fill="rgb(228,23,34)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (255 samples, 0.25%)</title><rect x="8.7685%" y="469" width="0.2468%" height="15" fill="rgb(218,30,26)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (255 samples, 0.25%)</title><rect x="8.7685%" y="453" width="0.2468%" height="15" fill="rgb(220,122,19)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (255 samples, 0.25%)</title><rect x="8.7685%" y="437" width="0.2468%" height="15" fill="rgb(250,228,42)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (255 samples, 0.25%)</title><rect x="8.7685%" y="421" width="0.2468%" height="15" fill="rgb(240,193,28)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (255 samples, 0.25%)</title><rect x="8.7685%" y="405" width="0.2468%" height="15" fill="rgb(216,20,37)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (255 samples, 0.25%)</title><rect x="8.7685%" y="389" width="0.2468%" height="15" fill="rgb(206,188,39)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (255 samples, 0.25%)</title><rect x="8.7685%" y="373" width="0.2468%" height="15" fill="rgb(217,207,13)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (255 samples, 0.25%)</title><rect x="8.7685%" y="357" width="0.2468%" height="15" fill="rgb(231,73,38)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (255 samples, 0.25%)</title><rect x="8.7685%" y="341" width="0.2468%" height="15" fill="rgb(225,20,46)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (255 samples, 0.25%)</title><rect x="8.7685%" y="325" width="0.2468%" height="15" fill="rgb(210,31,41)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="335.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (255 samples, 0.25%)</title><rect x="8.7685%" y="309" width="0.2468%" height="15" fill="rgb(221,200,47)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (255 samples, 0.25%)</title><rect x="8.7685%" y="293" width="0.2468%" height="15" fill="rgb(226,26,5)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="303.50"></text></g><g><title>core::cmp::min_by (255 samples, 0.25%)</title><rect x="8.7685%" y="277" width="0.2468%" height="15" fill="rgb(249,33,26)" fg:x="9059" fg:w="255"/><text x="9.0185%" y="287.50"></text></g><g><title>isera::min_cost (256 samples, 0.25%)</title><rect x="8.7685%" y="533" width="0.2478%" height="15" fill="rgb(235,183,28)" fg:x="9059" fg:w="256"/><text x="9.0185%" y="543.50"></text></g><g><title>[unknown] (6,696 samples, 6.48%)</title><rect x="2.5360%" y="549" width="6.4813%" height="15" fill="rgb(221,5,38)" fg:x="2620" fg:w="6696"/><text x="2.7860%" y="559.50">[unknown]</text></g><g><title>&lt;isera::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (67 samples, 0.06%)</title><rect x="9.0850%" y="293" width="0.0649%" height="15" fill="rgb(247,18,42)" fg:x="9386" fg:w="67"/><text x="9.3350%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (68 samples, 0.07%)</title><rect x="9.0850%" y="309" width="0.0658%" height="15" fill="rgb(241,131,45)" fg:x="9386" fg:w="68"/><text x="9.3350%" y="319.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (80 samples, 0.08%)</title><rect x="9.0821%" y="389" width="0.0774%" height="15" fill="rgb(249,31,29)" fg:x="9383" fg:w="80"/><text x="9.3321%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (80 samples, 0.08%)</title><rect x="9.0821%" y="373" width="0.0774%" height="15" fill="rgb(225,111,53)" fg:x="9383" fg:w="80"/><text x="9.3321%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (80 samples, 0.08%)</title><rect x="9.0821%" y="357" width="0.0774%" height="15" fill="rgb(238,160,17)" fg:x="9383" fg:w="80"/><text x="9.3321%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (80 samples, 0.08%)</title><rect x="9.0821%" y="341" width="0.0774%" height="15" fill="rgb(214,148,48)" fg:x="9383" fg:w="80"/><text x="9.3321%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (80 samples, 0.08%)</title><rect x="9.0821%" y="325" width="0.0774%" height="15" fill="rgb(232,36,49)" fg:x="9383" fg:w="80"/><text x="9.3321%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 0.03%)</title><rect x="9.1595%" y="373" width="0.0261%" height="15" fill="rgb(209,103,24)" fg:x="9463" fg:w="27"/><text x="9.4095%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 0.03%)</title><rect x="9.1595%" y="357" width="0.0261%" height="15" fill="rgb(229,88,8)" fg:x="9463" fg:w="27"/><text x="9.4095%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (19 samples, 0.02%)</title><rect x="9.1673%" y="341" width="0.0184%" height="15" fill="rgb(213,181,19)" fg:x="9471" fg:w="19"/><text x="9.4173%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (19 samples, 0.02%)</title><rect x="9.1673%" y="325" width="0.0184%" height="15" fill="rgb(254,191,54)" fg:x="9471" fg:w="19"/><text x="9.4173%" y="335.50"></text></g><g><title>isera::min_cost::_{{closure}} (19 samples, 0.02%)</title><rect x="9.1673%" y="309" width="0.0184%" height="15" fill="rgb(241,83,37)" fg:x="9471" fg:w="19"/><text x="9.4173%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (99 samples, 0.10%)</title><rect x="9.1595%" y="389" width="0.0958%" height="15" fill="rgb(233,36,39)" fg:x="9463" fg:w="99"/><text x="9.4095%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (72 samples, 0.07%)</title><rect x="9.1857%" y="373" width="0.0697%" height="15" fill="rgb(226,3,54)" fg:x="9490" fg:w="72"/><text x="9.4357%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (72 samples, 0.07%)</title><rect x="9.1857%" y="357" width="0.0697%" height="15" fill="rgb(245,192,40)" fg:x="9490" fg:w="72"/><text x="9.4357%" y="367.50"></text></g><g><title>isera::min_cost::_{{closure}} (72 samples, 0.07%)</title><rect x="9.1857%" y="341" width="0.0697%" height="15" fill="rgb(238,167,29)" fg:x="9490" fg:w="72"/><text x="9.4357%" y="351.50"></text></g><g><title>isera::_find_best_arc (57 samples, 0.06%)</title><rect x="9.2554%" y="389" width="0.0552%" height="15" fill="rgb(232,182,51)" fg:x="9562" fg:w="57"/><text x="9.5054%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (15 samples, 0.01%)</title><rect x="12.4554%" y="101" width="0.0145%" height="15" fill="rgb(231,60,39)" fg:x="12868" fg:w="15"/><text x="12.7054%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15 samples, 0.01%)</title><rect x="12.4554%" y="85" width="0.0145%" height="15" fill="rgb(208,69,12)" fg:x="12868" fg:w="15"/><text x="12.7054%" y="95.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.01%)</title><rect x="12.4554%" y="69" width="0.0145%" height="15" fill="rgb(235,93,37)" fg:x="12868" fg:w="15"/><text x="12.7054%" y="79.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (134 samples, 0.13%)</title><rect x="12.4699%" y="101" width="0.1297%" height="15" fill="rgb(213,116,39)" fg:x="12883" fg:w="134"/><text x="12.7199%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (68 samples, 0.07%)</title><rect x="12.8735%" y="85" width="0.0658%" height="15" fill="rgb(222,207,29)" fg:x="13300" fg:w="68"/><text x="13.1235%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (68 samples, 0.07%)</title><rect x="12.8735%" y="69" width="0.0658%" height="15" fill="rgb(206,96,30)" fg:x="13300" fg:w="68"/><text x="13.1235%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (68 samples, 0.07%)</title><rect x="12.8735%" y="53" width="0.0658%" height="15" fill="rgb(218,138,4)" fg:x="13300" fg:w="68"/><text x="13.1235%" y="63.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (28 samples, 0.03%)</title><rect x="12.9393%" y="85" width="0.0271%" height="15" fill="rgb(250,191,14)" fg:x="13368" fg:w="28"/><text x="13.1893%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (746 samples, 0.72%)</title><rect x="12.2560%" y="213" width="0.7221%" height="15" fill="rgb(239,60,40)" fg:x="12662" fg:w="746"/><text x="12.5060%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (746 samples, 0.72%)</title><rect x="12.2560%" y="197" width="0.7221%" height="15" fill="rgb(206,27,48)" fg:x="12662" fg:w="746"/><text x="12.5060%" y="207.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (705 samples, 0.68%)</title><rect x="12.2956%" y="181" width="0.6824%" height="15" fill="rgb(225,35,8)" fg:x="12703" fg:w="705"/><text x="12.5456%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (705 samples, 0.68%)</title><rect x="12.2956%" y="165" width="0.6824%" height="15" fill="rgb(250,213,24)" fg:x="12703" fg:w="705"/><text x="12.5456%" y="175.50"></text></g><g><title>core::cmp::min_by (705 samples, 0.68%)</title><rect x="12.2956%" y="149" width="0.6824%" height="15" fill="rgb(247,123,22)" fg:x="12703" fg:w="705"/><text x="12.5456%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (700 samples, 0.68%)</title><rect x="12.3005%" y="133" width="0.6776%" height="15" fill="rgb(231,138,38)" fg:x="12708" fg:w="700"/><text x="12.5505%" y="143.50"></text></g><g><title>isera::_find_block_search::_{{closure}} (700 samples, 0.68%)</title><rect x="12.3005%" y="117" width="0.6776%" height="15" fill="rgb(231,145,46)" fg:x="12708" fg:w="700"/><text x="12.5505%" y="127.50"></text></g><g><title>isera::get_reduced_cost_edgeindex (391 samples, 0.38%)</title><rect x="12.5996%" y="101" width="0.3785%" height="15" fill="rgb(251,118,11)" fg:x="13017" fg:w="391"/><text x="12.8496%" y="111.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (12 samples, 0.01%)</title><rect x="12.9664%" y="85" width="0.0116%" height="15" fill="rgb(217,147,25)" fg:x="13396" fg:w="12"/><text x="13.2164%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2,962 samples, 2.87%)</title><rect x="41.3888%" y="85" width="2.8670%" height="15" fill="rgb(247,81,37)" fg:x="42760" fg:w="2962"/><text x="41.6388%" y="95.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (143 samples, 0.14%)</title><rect x="44.1174%" y="69" width="0.1384%" height="15" fill="rgb(209,12,38)" fg:x="45579" fg:w="143"/><text x="44.3674%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (143 samples, 0.14%)</title><rect x="44.1174%" y="53" width="0.1384%" height="15" fill="rgb(227,1,9)" fg:x="45579" fg:w="143"/><text x="44.3674%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,612 samples, 5.43%)</title><rect x="41.3888%" y="101" width="5.4320%" height="15" fill="rgb(248,47,43)" fg:x="42760" fg:w="5612"/><text x="41.6388%" y="111.50">&lt;alloc:..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,650 samples, 2.57%)</title><rect x="44.2558%" y="85" width="2.5650%" height="15" fill="rgb(221,10,30)" fg:x="45722" fg:w="2650"/><text x="44.5058%" y="95.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,650 samples, 2.57%)</title><rect x="44.2558%" y="69" width="2.5650%" height="15" fill="rgb(210,229,1)" fg:x="45722" fg:w="2650"/><text x="44.5058%" y="79.50">&lt;u..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (6,761 samples, 6.54%)</title><rect x="46.8208%" y="101" width="6.5442%" height="15" fill="rgb(222,148,37)" fg:x="48372" fg:w="6761"/><text x="47.0708%" y="111.50">&lt;i32 as c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::partial_cmp (5,269 samples, 5.10%)</title><rect x="53.3650%" y="101" width="5.1000%" height="15" fill="rgb(234,67,33)" fg:x="55133" fg:w="5269"/><text x="53.6150%" y="111.50">core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i32&gt;::cmp (5,269 samples, 5.10%)</title><rect x="53.3650%" y="85" width="5.1000%" height="15" fill="rgb(247,98,35)" fg:x="55133" fg:w="5269"/><text x="53.6150%" y="95.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5,202 samples, 5.04%)</title><rect x="70.0309%" y="69" width="5.0352%" height="15" fill="rgb(247,138,52)" fg:x="72351" fg:w="5202"/><text x="70.2809%" y="79.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2,598 samples, 2.51%)</title><rect x="72.5514%" y="53" width="2.5147%" height="15" fill="rgb(213,79,30)" fg:x="74955" fg:w="2598"/><text x="72.8014%" y="63.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2,598 samples, 2.51%)</title><rect x="72.5514%" y="37" width="2.5147%" height="15" fill="rgb(246,177,23)" fg:x="74955" fg:w="2598"/><text x="72.8014%" y="47.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13,804 samples, 13.36%)</title><rect x="70.0309%" y="85" width="13.3613%" height="15" fill="rgb(230,62,27)" fg:x="72351" fg:w="13804"/><text x="70.2809%" y="95.50">&lt;alloc::vec::Vec&lt;T,A..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8,602 samples, 8.33%)</title><rect x="75.0661%" y="69" width="8.3262%" height="15" fill="rgb(216,154,8)" fg:x="77553" fg:w="8602"/><text x="75.3161%" y="79.50">core::slice:..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8,602 samples, 8.33%)</title><rect x="75.0661%" y="53" width="8.3262%" height="15" fill="rgb(244,35,45)" fg:x="77553" fg:w="8602"/><text x="75.3161%" y="63.50">&lt;usize as co..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (6,608 samples, 6.40%)</title><rect x="83.3922%" y="85" width="6.3961%" height="15" fill="rgb(251,115,12)" fg:x="86155" fg:w="6608"/><text x="83.6422%" y="95.50">&lt;i32 as ..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (90,019 samples, 87.13%)</title><rect x="9.3144%" y="229" width="87.1323%" height="15" fill="rgb(240,54,50)" fg:x="9623" fg:w="90019"/><text x="9.5644%" y="239.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (86,234 samples, 83.47%)</title><rect x="12.9780%" y="213" width="83.4687%" height="15" fill="rgb(233,84,52)" fg:x="13408" fg:w="86234"/><text x="13.2280%" y="223.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (86,234 samples, 83.47%)</title><rect x="12.9780%" y="197" width="83.4687%" height="15" fill="rgb(207,117,47)" fg:x="13408" fg:w="86234"/><text x="13.2280%" y="207.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}}</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (77,371 samples, 74.89%)</title><rect x="21.5568%" y="181" width="74.8899%" height="15" fill="rgb(249,43,39)" fg:x="22271" fg:w="77371"/><text x="21.8068%" y="191.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (77,371 samples, 74.89%)</title><rect x="21.5568%" y="165" width="74.8899%" height="15" fill="rgb(209,38,44)" fg:x="22271" fg:w="77371"/><text x="21.8068%" y="175.50">core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}}</text></g><g><title>core::cmp::min_by (77,371 samples, 74.89%)</title><rect x="21.5568%" y="149" width="74.8899%" height="15" fill="rgb(236,212,23)" fg:x="22271" fg:w="77371"/><text x="21.8068%" y="159.50">core::cmp::min_by</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (71,756 samples, 69.45%)</title><rect x="26.9918%" y="133" width="69.4550%" height="15" fill="rgb(242,79,21)" fg:x="27886" fg:w="71756"/><text x="27.2418%" y="143.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>isera::_find_block_search::_{{closure}} (69,129 samples, 66.91%)</title><rect x="29.5345%" y="117" width="66.9122%" height="15" fill="rgb(211,96,35)" fg:x="30513" fg:w="69129"/><text x="29.7845%" y="127.50">isera::_find_block_search::_{{closure}}</text></g><g><title>isera::get_reduced_cost_edgeindex (39,240 samples, 37.98%)</title><rect x="58.4651%" y="101" width="37.9817%" height="15" fill="rgb(253,215,40)" fg:x="60402" fg:w="39240"/><text x="58.7151%" y="111.50">isera::get_reduced_cost_edgeindex</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (6,879 samples, 6.66%)</title><rect x="89.7883%" y="85" width="6.6584%" height="15" fill="rgb(211,81,21)" fg:x="92763" fg:w="6879"/><text x="90.0383%" y="95.50">&lt;i32 as c..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (46 samples, 0.04%)</title><rect x="96.7216%" y="213" width="0.0445%" height="15" fill="rgb(208,190,38)" fg:x="99926" fg:w="46"/><text x="96.9716%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (90,364 samples, 87.47%)</title><rect x="9.3144%" y="373" width="87.4662%" height="15" fill="rgb(235,213,38)" fg:x="9623" fg:w="90364"/><text x="9.5644%" y="383.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (90,364 samples, 87.47%)</title><rect x="9.3144%" y="357" width="87.4662%" height="15" fill="rgb(237,122,38)" fg:x="9623" fg:w="90364"/><text x="9.5644%" y="367.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (90,364 samples, 87.47%)</title><rect x="9.3144%" y="341" width="87.4662%" height="15" fill="rgb(244,218,35)" fg:x="9623" fg:w="90364"/><text x="9.5644%" y="351.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (90,364 samples, 87.47%)</title><rect x="9.3144%" y="325" width="87.4662%" height="15" fill="rgb(240,68,47)" fg:x="9623" fg:w="90364"/><text x="9.5644%" y="335.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (90,364 samples, 87.47%)</title><rect x="9.3144%" y="309" width="87.4662%" height="15" fill="rgb(210,16,53)" fg:x="9623" fg:w="90364"/><text x="9.5644%" y="319.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (90,364 samples, 87.47%)</title><rect x="9.3144%" y="293" width="87.4662%" height="15" fill="rgb(235,124,12)" fg:x="9623" fg:w="90364"/><text x="9.5644%" y="303.50">&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (90,364 samples, 87.47%)</title><rect x="9.3144%" y="277" width="87.4662%" height="15" fill="rgb(224,169,11)" fg:x="9623" fg:w="90364"/><text x="9.5644%" y="287.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (90,364 samples, 87.47%)</title><rect x="9.3144%" y="261" width="87.4662%" height="15" fill="rgb(250,166,2)" fg:x="9623" fg:w="90364"/><text x="9.5644%" y="271.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (90,364 samples, 87.47%)</title><rect x="9.3144%" y="245" width="87.4662%" height="15" fill="rgb(242,216,29)" fg:x="9623" fg:w="90364"/><text x="9.5644%" y="255.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (343 samples, 0.33%)</title><rect x="96.4487%" y="229" width="0.3320%" height="15" fill="rgb(230,116,27)" fg:x="99644" fg:w="343"/><text x="96.6987%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (15 samples, 0.01%)</title><rect x="96.7661%" y="213" width="0.0145%" height="15" fill="rgb(228,99,48)" fg:x="99972" fg:w="15"/><text x="97.0161%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (15 samples, 0.01%)</title><rect x="96.7661%" y="197" width="0.0145%" height="15" fill="rgb(253,11,6)" fg:x="99972" fg:w="15"/><text x="97.0161%" y="207.50"></text></g><g><title>isera::_find_block_search (90,369 samples, 87.47%)</title><rect x="9.3105%" y="389" width="87.4711%" height="15" fill="rgb(247,143,39)" fg:x="9619" fg:w="90369"/><text x="9.5605%" y="399.50">isera::_find_block_search</text></g><g><title>isera::compute_flowchange (20 samples, 0.02%)</title><rect x="96.7816%" y="389" width="0.0194%" height="15" fill="rgb(236,97,10)" fg:x="99988" fg:w="20"/><text x="97.0316%" y="399.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="96.8010%" y="341" width="0.0242%" height="15" fill="rgb(233,208,19)" fg:x="100008" fg:w="25"/><text x="97.0510%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (24 samples, 0.02%)</title><rect x="96.8020%" y="325" width="0.0232%" height="15" fill="rgb(216,164,2)" fg:x="100009" fg:w="24"/><text x="97.0520%" y="335.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (24 samples, 0.02%)</title><rect x="96.8020%" y="309" width="0.0232%" height="15" fill="rgb(220,129,5)" fg:x="100009" fg:w="24"/><text x="97.0520%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.02%)</title><rect x="96.9820%" y="309" width="0.0165%" height="15" fill="rgb(242,17,10)" fg:x="100195" fg:w="17"/><text x="97.2320%" y="319.50"></text></g><g><title>isera::initialization (206 samples, 0.20%)</title><rect x="96.8010%" y="389" width="0.1994%" height="15" fill="rgb(242,107,0)" fg:x="100008" fg:w="206"/><text x="97.0510%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (206 samples, 0.20%)</title><rect x="96.8010%" y="373" width="0.1994%" height="15" fill="rgb(251,28,31)" fg:x="100008" fg:w="206"/><text x="97.0510%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (206 samples, 0.20%)</title><rect x="96.8010%" y="357" width="0.1994%" height="15" fill="rgb(233,223,10)" fg:x="100008" fg:w="206"/><text x="97.0510%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (181 samples, 0.18%)</title><rect x="96.8252%" y="341" width="0.1752%" height="15" fill="rgb(215,21,27)" fg:x="100033" fg:w="181"/><text x="97.0752%" y="351.50"></text></g><g><title>isera::initialization::_{{closure}} (181 samples, 0.18%)</title><rect x="96.8252%" y="325" width="0.1752%" height="15" fill="rgb(232,23,21)" fg:x="100033" fg:w="181"/><text x="97.0752%" y="335.50"></text></g><g><title>isera::update_node_potentials (30 samples, 0.03%)</title><rect x="97.0004%" y="389" width="0.0290%" height="15" fill="rgb(244,5,23)" fg:x="100214" fg:w="30"/><text x="97.2504%" y="399.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (16 samples, 0.02%)</title><rect x="97.0139%" y="373" width="0.0155%" height="15" fill="rgb(226,81,46)" fg:x="100228" fg:w="16"/><text x="97.2639%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (31 samples, 0.03%)</title><rect x="97.1204%" y="373" width="0.0300%" height="15" fill="rgb(247,70,30)" fg:x="100338" fg:w="31"/><text x="97.3704%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (31 samples, 0.03%)</title><rect x="97.1204%" y="357" width="0.0300%" height="15" fill="rgb(212,68,19)" fg:x="100338" fg:w="31"/><text x="97.3704%" y="367.50"></text></g><g><title>isera::update_sptree::_{{closure}} (31 samples, 0.03%)</title><rect x="97.1204%" y="341" width="0.0300%" height="15" fill="rgb(240,187,13)" fg:x="100338" fg:w="31"/><text x="97.3704%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (40 samples, 0.04%)</title><rect x="97.1504%" y="373" width="0.0387%" height="15" fill="rgb(223,113,26)" fg:x="100369" fg:w="40"/><text x="97.4004%" y="383.50"></text></g><g><title>isera::update_sptree::_{{closure}} (36 samples, 0.03%)</title><rect x="97.1543%" y="357" width="0.0348%" height="15" fill="rgb(206,192,2)" fg:x="100373" fg:w="36"/><text x="97.4043%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (29 samples, 0.03%)</title><rect x="97.1611%" y="341" width="0.0281%" height="15" fill="rgb(241,108,4)" fg:x="100380" fg:w="29"/><text x="97.4111%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.02%)</title><rect x="97.1949%" y="357" width="0.0165%" height="15" fill="rgb(247,173,49)" fg:x="100415" fg:w="17"/><text x="97.4449%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.02%)</title><rect x="97.1949%" y="341" width="0.0165%" height="15" fill="rgb(224,114,35)" fg:x="100415" fg:w="17"/><text x="97.4449%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.02%)</title><rect x="97.1959%" y="325" width="0.0155%" height="15" fill="rgb(245,159,27)" fg:x="100416" fg:w="16"/><text x="97.4459%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.01%)</title><rect x="97.1969%" y="309" width="0.0145%" height="15" fill="rgb(245,172,44)" fg:x="100417" fg:w="15"/><text x="97.4469%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.01%)</title><rect x="97.1969%" y="293" width="0.0145%" height="15" fill="rgb(236,23,11)" fg:x="100417" fg:w="15"/><text x="97.4469%" y="303.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.01%)</title><rect x="97.1969%" y="277" width="0.0145%" height="15" fill="rgb(205,117,38)" fg:x="100417" fg:w="15"/><text x="97.4469%" y="287.50"></text></g><g><title>realloc (15 samples, 0.01%)</title><rect x="97.1969%" y="261" width="0.0145%" height="15" fill="rgb(237,72,25)" fg:x="100417" fg:w="15"/><text x="97.4469%" y="271.50"></text></g><g><title>[libc.so.6] (14 samples, 0.01%)</title><rect x="97.1978%" y="245" width="0.0136%" height="15" fill="rgb(244,70,9)" fg:x="100418" fg:w="14"/><text x="97.4478%" y="255.50"></text></g><g><title>[libc.so.6] (12 samples, 0.01%)</title><rect x="97.1998%" y="229" width="0.0116%" height="15" fill="rgb(217,125,39)" fg:x="100420" fg:w="12"/><text x="97.4498%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (21 samples, 0.02%)</title><rect x="97.1920%" y="373" width="0.0203%" height="15" fill="rgb(235,36,10)" fg:x="100412" fg:w="21"/><text x="97.4420%" y="383.50"></text></g><g><title>isera::min_cost (91,071 samples, 88.15%)</title><rect x="9.0802%" y="405" width="88.1506%" height="15" fill="rgb(251,123,47)" fg:x="9381" fg:w="91071"/><text x="9.3302%" y="415.50">isera::min_cost</text></g><g><title>isera::update_sptree (208 samples, 0.20%)</title><rect x="97.0294%" y="389" width="0.2013%" height="15" fill="rgb(221,13,13)" fg:x="100244" fg:w="208"/><text x="97.2794%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.02%)</title><rect x="97.2433%" y="389" width="0.0213%" height="15" fill="rgb(238,131,9)" fg:x="100465" fg:w="22"/><text x="97.4933%" y="399.50"></text></g><g><title>core::ptr::write (11 samples, 0.01%)</title><rect x="97.2540%" y="373" width="0.0106%" height="15" fill="rgb(211,50,8)" fg:x="100476" fg:w="11"/><text x="97.5040%" y="383.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (42 samples, 0.04%)</title><rect x="97.2307%" y="405" width="0.0407%" height="15" fill="rgb(245,182,24)" fg:x="100452" fg:w="42"/><text x="97.4807%" y="415.50"></text></g><g><title>_start (91,192 samples, 88.27%)</title><rect x="9.0173%" y="549" width="88.2677%" height="15" fill="rgb(242,14,37)" fg:x="9316" fg:w="91192"/><text x="9.2673%" y="559.50">_start</text></g><g><title>__libc_start_main (91,192 samples, 88.27%)</title><rect x="9.0173%" y="533" width="88.2677%" height="15" fill="rgb(246,228,12)" fg:x="9316" fg:w="91192"/><text x="9.2673%" y="543.50">__libc_start_main</text></g><g><title>[libc.so.6] (91,192 samples, 88.27%)</title><rect x="9.0173%" y="517" width="88.2677%" height="15" fill="rgb(213,55,15)" fg:x="9316" fg:w="91192"/><text x="9.2673%" y="527.50">[libc.so.6]</text></g><g><title>main (91,192 samples, 88.27%)</title><rect x="9.0173%" y="501" width="88.2677%" height="15" fill="rgb(209,9,3)" fg:x="9316" fg:w="91192"/><text x="9.2673%" y="511.50">main</text></g><g><title>std::rt::lang_start_internal (91,192 samples, 88.27%)</title><rect x="9.0173%" y="485" width="88.2677%" height="15" fill="rgb(230,59,30)" fg:x="9316" fg:w="91192"/><text x="9.2673%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (91,192 samples, 88.27%)</title><rect x="9.0173%" y="469" width="88.2677%" height="15" fill="rgb(209,121,21)" fg:x="9316" fg:w="91192"/><text x="9.2673%" y="479.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (91,192 samples, 88.27%)</title><rect x="9.0173%" y="453" width="88.2677%" height="15" fill="rgb(220,109,13)" fg:x="9316" fg:w="91192"/><text x="9.2673%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (91,192 samples, 88.27%)</title><rect x="9.0173%" y="437" width="88.2677%" height="15" fill="rgb(232,18,1)" fg:x="9316" fg:w="91192"/><text x="9.2673%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>isera::main (91,192 samples, 88.27%)</title><rect x="9.0173%" y="421" width="88.2677%" height="15" fill="rgb(215,41,42)" fg:x="9316" fg:w="91192"/><text x="9.2673%" y="431.50">isera::main</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (14 samples, 0.01%)</title><rect x="97.2714%" y="405" width="0.0136%" height="15" fill="rgb(224,123,36)" fg:x="100494" fg:w="14"/><text x="97.5214%" y="415.50"></text></g><g><title>all (103,313 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="103313"/><text x="0.2500%" y="591.50"></text></g><g><title>main (103,313 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="103313"/><text x="0.2500%" y="575.50">main</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,804 samples, 2.71%)</title><rect x="97.2859%" y="549" width="2.7141%" height="15" fill="rgb(205,185,37)" fg:x="100509" fg:w="2804"/><text x="97.5359%" y="559.50">co..</text></g></svg></svg>