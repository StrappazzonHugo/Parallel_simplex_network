<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="273893"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 0.01%)</title><rect x="0.0047%" y="501" width="0.0146%" height="15" fill="rgb(227,0,7)" fg:x="13" fg:w="40"/><text x="0.2547%" y="511.50"></text></g><g><title>[libc.so.6] (47 samples, 0.02%)</title><rect x="0.0256%" y="501" width="0.0172%" height="15" fill="rgb(217,0,24)" fg:x="70" fg:w="47"/><text x="0.2756%" y="511.50"></text></g><g><title>core::num::from_str_radix (35 samples, 0.01%)</title><rect x="0.0478%" y="501" width="0.0128%" height="15" fill="rgb(221,193,54)" fg:x="131" fg:w="35"/><text x="0.2978%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (49 samples, 0.02%)</title><rect x="0.0624%" y="373" width="0.0179%" height="15" fill="rgb(248,212,6)" fg:x="171" fg:w="49"/><text x="0.3124%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (49 samples, 0.02%)</title><rect x="0.0624%" y="357" width="0.0179%" height="15" fill="rgb(208,68,35)" fg:x="171" fg:w="49"/><text x="0.3124%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (49 samples, 0.02%)</title><rect x="0.0624%" y="341" width="0.0179%" height="15" fill="rgb(232,128,0)" fg:x="171" fg:w="49"/><text x="0.3124%" y="351.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.03%)</title><rect x="0.0624%" y="453" width="0.0252%" height="15" fill="rgb(207,160,47)" fg:x="171" fg:w="69"/><text x="0.3124%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.03%)</title><rect x="0.0624%" y="437" width="0.0252%" height="15" fill="rgb(228,23,34)" fg:x="171" fg:w="69"/><text x="0.3124%" y="447.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.03%)</title><rect x="0.0624%" y="421" width="0.0252%" height="15" fill="rgb(218,30,26)" fg:x="171" fg:w="69"/><text x="0.3124%" y="431.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (69 samples, 0.03%)</title><rect x="0.0624%" y="405" width="0.0252%" height="15" fill="rgb(220,122,19)" fg:x="171" fg:w="69"/><text x="0.3124%" y="415.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (69 samples, 0.03%)</title><rect x="0.0624%" y="389" width="0.0252%" height="15" fill="rgb(250,228,42)" fg:x="171" fg:w="69"/><text x="0.3124%" y="399.50"></text></g><g><title>isera::parser::parsed_graph (202 samples, 0.07%)</title><rect x="0.0624%" y="501" width="0.0738%" height="15" fill="rgb(240,193,28)" fg:x="171" fg:w="202"/><text x="0.3124%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (202 samples, 0.07%)</title><rect x="0.0624%" y="485" width="0.0738%" height="15" fill="rgb(216,20,37)" fg:x="171" fg:w="202"/><text x="0.3124%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (202 samples, 0.07%)</title><rect x="0.0624%" y="469" width="0.0738%" height="15" fill="rgb(206,188,39)" fg:x="171" fg:w="202"/><text x="0.3124%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (133 samples, 0.05%)</title><rect x="0.0876%" y="453" width="0.0486%" height="15" fill="rgb(217,207,13)" fg:x="240" fg:w="133"/><text x="0.3376%" y="463.50"></text></g><g><title>isera::parser::parsed_graph::_{{closure}} (133 samples, 0.05%)</title><rect x="0.0876%" y="437" width="0.0486%" height="15" fill="rgb(231,73,38)" fg:x="240" fg:w="133"/><text x="0.3376%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (99 samples, 0.04%)</title><rect x="0.1000%" y="421" width="0.0361%" height="15" fill="rgb(225,20,46)" fg:x="274" fg:w="99"/><text x="0.3500%" y="431.50"></text></g><g><title>[[stack]] (361 samples, 0.13%)</title><rect x="0.0047%" y="517" width="0.1318%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="361"/><text x="0.2547%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (48 samples, 0.02%)</title><rect x="0.2077%" y="453" width="0.0175%" height="15" fill="rgb(221,200,47)" fg:x="569" fg:w="48"/><text x="0.4577%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (48 samples, 0.02%)</title><rect x="0.2077%" y="437" width="0.0175%" height="15" fill="rgb(226,26,5)" fg:x="569" fg:w="48"/><text x="0.4577%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (48 samples, 0.02%)</title><rect x="0.2077%" y="421" width="0.0175%" height="15" fill="rgb(249,33,26)" fg:x="569" fg:w="48"/><text x="0.4577%" y="431.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (252 samples, 0.09%)</title><rect x="0.1365%" y="501" width="0.0920%" height="15" fill="rgb(235,183,28)" fg:x="374" fg:w="252"/><text x="0.3865%" y="511.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (252 samples, 0.09%)</title><rect x="0.1365%" y="485" width="0.0920%" height="15" fill="rgb(221,5,38)" fg:x="374" fg:w="252"/><text x="0.3865%" y="495.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (57 samples, 0.02%)</title><rect x="0.2077%" y="469" width="0.0208%" height="15" fill="rgb(247,18,42)" fg:x="569" fg:w="57"/><text x="0.4577%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (43 samples, 0.02%)</title><rect x="0.2304%" y="501" width="0.0157%" height="15" fill="rgb(241,131,45)" fg:x="631" fg:w="43"/><text x="0.4804%" y="511.50"></text></g><g><title>[anon] (328 samples, 0.12%)</title><rect x="0.1365%" y="517" width="0.1198%" height="15" fill="rgb(249,31,29)" fg:x="374" fg:w="328"/><text x="0.3865%" y="527.50"></text></g><g><title>realloc (28 samples, 0.01%)</title><rect x="0.2461%" y="501" width="0.0102%" height="15" fill="rgb(225,111,53)" fg:x="674" fg:w="28"/><text x="0.4961%" y="511.50"></text></g><g><title>[libc.so.6] (76 samples, 0.03%)</title><rect x="0.2614%" y="517" width="0.0277%" height="15" fill="rgb(238,160,17)" fg:x="716" fg:w="76"/><text x="0.5114%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (89 samples, 0.03%)</title><rect x="0.2892%" y="501" width="0.0325%" height="15" fill="rgb(214,148,48)" fg:x="792" fg:w="89"/><text x="0.5392%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (43 samples, 0.02%)</title><rect x="0.3060%" y="485" width="0.0157%" height="15" fill="rgb(232,36,49)" fg:x="838" fg:w="43"/><text x="0.5560%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (37 samples, 0.01%)</title><rect x="0.4907%" y="453" width="0.0135%" height="15" fill="rgb(209,103,24)" fg:x="1344" fg:w="37"/><text x="0.7407%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (37 samples, 0.01%)</title><rect x="0.4907%" y="437" width="0.0135%" height="15" fill="rgb(229,88,8)" fg:x="1344" fg:w="37"/><text x="0.7407%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (37 samples, 0.01%)</title><rect x="0.4907%" y="421" width="0.0135%" height="15" fill="rgb(213,181,19)" fg:x="1344" fg:w="37"/><text x="0.7407%" y="431.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (533 samples, 0.19%)</title><rect x="0.3217%" y="501" width="0.1946%" height="15" fill="rgb(254,191,54)" fg:x="881" fg:w="533"/><text x="0.5717%" y="511.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (223 samples, 0.08%)</title><rect x="0.4348%" y="485" width="0.0814%" height="15" fill="rgb(241,83,37)" fg:x="1191" fg:w="223"/><text x="0.6848%" y="495.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (70 samples, 0.03%)</title><rect x="0.4907%" y="469" width="0.0256%" height="15" fill="rgb(233,36,39)" fg:x="1344" fg:w="70"/><text x="0.7407%" y="479.50"></text></g><g><title>core::slice::memchr::memchr (33 samples, 0.01%)</title><rect x="0.5042%" y="453" width="0.0120%" height="15" fill="rgb(226,3,54)" fg:x="1381" fg:w="33"/><text x="0.7542%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (59 samples, 0.02%)</title><rect x="0.5261%" y="501" width="0.0215%" height="15" fill="rgb(245,192,40)" fg:x="1441" fg:w="59"/><text x="0.7761%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (28 samples, 0.01%)</title><rect x="0.5374%" y="485" width="0.0102%" height="15" fill="rgb(238,167,29)" fg:x="1472" fg:w="28"/><text x="0.7874%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (28 samples, 0.01%)</title><rect x="0.5374%" y="469" width="0.0102%" height="15" fill="rgb(232,182,51)" fg:x="1472" fg:w="28"/><text x="0.7874%" y="479.50"></text></g><g><title>alloc::alloc::realloc (28 samples, 0.01%)</title><rect x="0.5374%" y="453" width="0.0102%" height="15" fill="rgb(231,60,39)" fg:x="1472" fg:w="28"/><text x="0.7874%" y="463.50"></text></g><g><title>[unknown] (794 samples, 0.29%)</title><rect x="0.2892%" y="517" width="0.2899%" height="15" fill="rgb(208,69,12)" fg:x="792" fg:w="794"/><text x="0.5392%" y="527.50"></text></g><g><title>malloc (33 samples, 0.01%)</title><rect x="0.5670%" y="501" width="0.0120%" height="15" fill="rgb(235,93,37)" fg:x="1553" fg:w="33"/><text x="0.8170%" y="511.50"></text></g><g><title>__rdl_dealloc (39 samples, 0.01%)</title><rect x="0.5791%" y="517" width="0.0142%" height="15" fill="rgb(213,116,39)" fg:x="1586" fg:w="39"/><text x="0.8291%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.02%)</title><rect x="0.6123%" y="277" width="0.0161%" height="15" fill="rgb(222,207,29)" fg:x="1677" fg:w="44"/><text x="0.8623%" y="287.50"></text></g><g><title>&lt;isera::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (60 samples, 0.02%)</title><rect x="0.6283%" y="261" width="0.0219%" height="15" fill="rgb(206,96,30)" fg:x="1721" fg:w="60"/><text x="0.8783%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (557 samples, 0.20%)</title><rect x="0.6283%" y="277" width="0.2034%" height="15" fill="rgb(218,138,4)" fg:x="1721" fg:w="557"/><text x="0.8783%" y="287.50"></text></g><g><title>core::array::_&lt;impl core::clone::Clone for [T: N]&gt;::clone (497 samples, 0.18%)</title><rect x="0.6503%" y="261" width="0.1815%" height="15" fill="rgb(250,191,14)" fg:x="1781" fg:w="497"/><text x="0.9003%" y="271.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (497 samples, 0.18%)</title><rect x="0.6503%" y="245" width="0.1815%" height="15" fill="rgb(239,60,40)" fg:x="1781" fg:w="497"/><text x="0.9003%" y="255.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (1,037 samples, 0.38%)</title><rect x="0.6123%" y="357" width="0.3786%" height="15" fill="rgb(206,27,48)" fg:x="1677" fg:w="1037"/><text x="0.8623%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,037 samples, 0.38%)</title><rect x="0.6123%" y="341" width="0.3786%" height="15" fill="rgb(225,35,8)" fg:x="1677" fg:w="1037"/><text x="0.8623%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,037 samples, 0.38%)</title><rect x="0.6123%" y="325" width="0.3786%" height="15" fill="rgb(250,213,24)" fg:x="1677" fg:w="1037"/><text x="0.8623%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1,037 samples, 0.38%)</title><rect x="0.6123%" y="309" width="0.3786%" height="15" fill="rgb(247,123,22)" fg:x="1677" fg:w="1037"/><text x="0.8623%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,037 samples, 0.38%)</title><rect x="0.6123%" y="293" width="0.3786%" height="15" fill="rgb(231,138,38)" fg:x="1677" fg:w="1037"/><text x="0.8623%" y="303.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (436 samples, 0.16%)</title><rect x="0.8317%" y="277" width="0.1592%" height="15" fill="rgb(231,145,46)" fg:x="2278" fg:w="436"/><text x="1.0817%" y="287.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (71 samples, 0.03%)</title><rect x="1.0902%" y="293" width="0.0259%" height="15" fill="rgb(251,118,11)" fg:x="2986" fg:w="71"/><text x="1.3402%" y="303.50"></text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (81 samples, 0.03%)</title><rect x="1.1161%" y="293" width="0.0296%" height="15" fill="rgb(217,147,25)" fg:x="3057" fg:w="81"/><text x="1.3661%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (441 samples, 0.16%)</title><rect x="0.9909%" y="357" width="0.1610%" height="15" fill="rgb(247,81,37)" fg:x="2714" fg:w="441"/><text x="1.2409%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (441 samples, 0.16%)</title><rect x="0.9909%" y="341" width="0.1610%" height="15" fill="rgb(209,12,38)" fg:x="2714" fg:w="441"/><text x="1.2409%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (441 samples, 0.16%)</title><rect x="0.9909%" y="325" width="0.1610%" height="15" fill="rgb(227,1,9)" fg:x="2714" fg:w="441"/><text x="1.2409%" y="335.50"></text></g><g><title>isera::min_cost::_{{closure}} (441 samples, 0.16%)</title><rect x="0.9909%" y="309" width="0.1610%" height="15" fill="rgb(248,47,43)" fg:x="2714" fg:w="441"/><text x="1.2409%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (13,687 samples, 5.00%)</title><rect x="26.2581%" y="341" width="4.9972%" height="15" fill="rgb(221,10,30)" fg:x="71919" fg:w="13687"/><text x="26.5081%" y="351.50">&lt;i64 a..</text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (1,274 samples, 0.47%)</title><rect x="31.2553%" y="341" width="0.4651%" height="15" fill="rgb(210,229,1)" fg:x="85606" fg:w="1274"/><text x="31.5053%" y="351.50"></text></g><g><title>&lt;i64 as num_traits::sign::Signed&gt;::is_negative (1,290 samples, 0.47%)</title><rect x="31.7204%" y="341" width="0.4710%" height="15" fill="rgb(222,148,37)" fg:x="86880" fg:w="1290"/><text x="31.9704%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (3,248 samples, 1.19%)</title><rect x="32.1914%" y="341" width="1.1859%" height="15" fill="rgb(234,67,33)" fg:x="88170" fg:w="3248"/><text x="32.4414%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2,105 samples, 0.77%)</title><rect x="33.4138%" y="309" width="0.7685%" height="15" fill="rgb(247,98,35)" fg:x="91518" fg:w="2105"/><text x="33.6638%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2,105 samples, 0.77%)</title><rect x="33.4138%" y="293" width="0.7685%" height="15" fill="rgb(247,138,52)" fg:x="91518" fg:w="2105"/><text x="33.6638%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,811 samples, 1.03%)</title><rect x="33.3776%" y="341" width="1.0263%" height="15" fill="rgb(213,79,30)" fg:x="91419" fg:w="2811"/><text x="33.6276%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,811 samples, 1.03%)</title><rect x="33.3776%" y="325" width="1.0263%" height="15" fill="rgb(246,177,23)" fg:x="91419" fg:w="2811"/><text x="33.6276%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (607 samples, 0.22%)</title><rect x="34.1823%" y="309" width="0.2216%" height="15" fill="rgb(230,62,27)" fg:x="93623" fg:w="607"/><text x="34.4323%" y="319.50"></text></g><g><title>isera::_block_search_v1 (91,069 samples, 33.25%)</title><rect x="1.1545%" y="357" width="33.2498%" height="15" fill="rgb(216,154,8)" fg:x="3162" fg:w="91069"/><text x="1.4045%" y="367.50">isera::_block_search_v1</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (649 samples, 0.24%)</title><rect x="38.4040%" y="341" width="0.2370%" height="15" fill="rgb(244,35,45)" fg:x="105186" fg:w="649"/><text x="38.6540%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (649 samples, 0.24%)</title><rect x="38.4040%" y="325" width="0.2370%" height="15" fill="rgb(251,115,12)" fg:x="105186" fg:w="649"/><text x="38.6540%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (649 samples, 0.24%)</title><rect x="38.4040%" y="309" width="0.2370%" height="15" fill="rgb(240,54,50)" fg:x="105186" fg:w="649"/><text x="38.6540%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (34 samples, 0.01%)</title><rect x="38.6410%" y="341" width="0.0124%" height="15" fill="rgb(233,84,52)" fg:x="105835" fg:w="34"/><text x="38.8910%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (34 samples, 0.01%)</title><rect x="38.6410%" y="325" width="0.0124%" height="15" fill="rgb(207,117,47)" fg:x="105835" fg:w="34"/><text x="38.8910%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (34 samples, 0.01%)</title><rect x="38.6410%" y="309" width="0.0124%" height="15" fill="rgb(249,43,39)" fg:x="105835" fg:w="34"/><text x="38.8910%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::arith::Sub&gt;::sub (550 samples, 0.20%)</title><rect x="38.6534%" y="341" width="0.2008%" height="15" fill="rgb(209,38,44)" fg:x="105869" fg:w="550"/><text x="38.9034%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::ne (28 samples, 0.01%)</title><rect x="38.8608%" y="341" width="0.0102%" height="15" fill="rgb(236,212,23)" fg:x="106437" fg:w="28"/><text x="39.1108%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::le (34 samples, 0.01%)</title><rect x="38.8717%" y="341" width="0.0124%" height="15" fill="rgb(242,79,21)" fg:x="106467" fg:w="34"/><text x="39.1217%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (51 samples, 0.02%)</title><rect x="38.8842%" y="341" width="0.0186%" height="15" fill="rgb(211,96,35)" fg:x="106501" fg:w="51"/><text x="39.1342%" y="351.50"></text></g><g><title>isera::_compute_flowchange (12,511 samples, 4.57%)</title><rect x="34.4043%" y="357" width="4.5678%" height="15" fill="rgb(253,215,40)" fg:x="94231" fg:w="12511"/><text x="34.6543%" y="367.50">isera..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (190 samples, 0.07%)</title><rect x="38.9028%" y="341" width="0.0694%" height="15" fill="rgb(211,81,21)" fg:x="106552" fg:w="190"/><text x="39.1528%" y="351.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.03%)</title><rect x="38.9725%" y="309" width="0.0310%" height="15" fill="rgb(208,190,38)" fg:x="106743" fg:w="85"/><text x="39.2225%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (81 samples, 0.03%)</title><rect x="38.9740%" y="293" width="0.0296%" height="15" fill="rgb(235,213,38)" fg:x="106747" fg:w="81"/><text x="39.2240%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (81 samples, 0.03%)</title><rect x="38.9740%" y="277" width="0.0296%" height="15" fill="rgb(237,122,38)" fg:x="106747" fg:w="81"/><text x="39.2240%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (58 samples, 0.02%)</title><rect x="39.3683%" y="277" width="0.0212%" height="15" fill="rgb(244,218,35)" fg:x="107827" fg:w="58"/><text x="39.6183%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (58 samples, 0.02%)</title><rect x="39.3683%" y="261" width="0.0212%" height="15" fill="rgb(240,68,47)" fg:x="107827" fg:w="58"/><text x="39.6183%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (29 samples, 0.01%)</title><rect x="39.3789%" y="245" width="0.0106%" height="15" fill="rgb(210,16,53)" fg:x="107856" fg:w="29"/><text x="39.6289%" y="255.50"></text></g><g><title>isera::initialization::_{{closure}}::_{{closure}} (29 samples, 0.01%)</title><rect x="39.3789%" y="229" width="0.0106%" height="15" fill="rgb(235,124,12)" fg:x="107856" fg:w="29"/><text x="39.6289%" y="239.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_weight (29 samples, 0.01%)</title><rect x="39.3789%" y="213" width="0.0106%" height="15" fill="rgb(224,169,11)" fg:x="107856" fg:w="29"/><text x="39.6289%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (29 samples, 0.01%)</title><rect x="39.3789%" y="197" width="0.0106%" height="15" fill="rgb(250,166,2)" fg:x="107856" fg:w="29"/><text x="39.6289%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,153 samples, 0.42%)</title><rect x="38.9725%" y="341" width="0.4210%" height="15" fill="rgb(242,216,29)" fg:x="106743" fg:w="1153"/><text x="39.2225%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,153 samples, 0.42%)</title><rect x="38.9725%" y="325" width="0.4210%" height="15" fill="rgb(230,116,27)" fg:x="106743" fg:w="1153"/><text x="39.2225%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1,068 samples, 0.39%)</title><rect x="39.0036%" y="309" width="0.3899%" height="15" fill="rgb(228,99,48)" fg:x="106828" fg:w="1068"/><text x="39.2536%" y="319.50"></text></g><g><title>isera::initialization::_{{closure}} (1,068 samples, 0.39%)</title><rect x="39.0036%" y="293" width="0.3899%" height="15" fill="rgb(253,11,6)" fg:x="106828" fg:w="1068"/><text x="39.2536%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (75 samples, 0.03%)</title><rect x="39.3946%" y="229" width="0.0274%" height="15" fill="rgb(247,143,39)" fg:x="107899" fg:w="75"/><text x="39.6446%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (69 samples, 0.03%)</title><rect x="39.3968%" y="213" width="0.0252%" height="15" fill="rgb(236,97,10)" fg:x="107905" fg:w="69"/><text x="39.6468%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (69 samples, 0.03%)</title><rect x="39.3968%" y="197" width="0.0252%" height="15" fill="rgb(233,208,19)" fg:x="107905" fg:w="69"/><text x="39.6468%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (78 samples, 0.03%)</title><rect x="39.3942%" y="325" width="0.0285%" height="15" fill="rgb(216,164,2)" fg:x="107898" fg:w="78"/><text x="39.6442%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (78 samples, 0.03%)</title><rect x="39.3942%" y="309" width="0.0285%" height="15" fill="rgb(220,129,5)" fg:x="107898" fg:w="78"/><text x="39.6442%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (78 samples, 0.03%)</title><rect x="39.3942%" y="293" width="0.0285%" height="15" fill="rgb(242,17,10)" fg:x="107898" fg:w="78"/><text x="39.6442%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (78 samples, 0.03%)</title><rect x="39.3942%" y="277" width="0.0285%" height="15" fill="rgb(242,107,0)" fg:x="107898" fg:w="78"/><text x="39.6442%" y="287.50"></text></g><g><title>isera::compute_node_potentials::_{{closure}} (78 samples, 0.03%)</title><rect x="39.3942%" y="261" width="0.0285%" height="15" fill="rgb(251,28,31)" fg:x="107898" fg:w="78"/><text x="39.6442%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (77 samples, 0.03%)</title><rect x="39.3946%" y="245" width="0.0281%" height="15" fill="rgb(233,223,10)" fg:x="107899" fg:w="77"/><text x="39.6446%" y="255.50"></text></g><g><title>isera::compute_node_potentials (88 samples, 0.03%)</title><rect x="39.3935%" y="341" width="0.0321%" height="15" fill="rgb(215,21,27)" fg:x="107896" fg:w="88"/><text x="39.6435%" y="351.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (321 samples, 0.12%)</title><rect x="39.4559%" y="309" width="0.1172%" height="15" fill="rgb(232,23,21)" fg:x="108067" fg:w="321"/><text x="39.7059%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (321 samples, 0.12%)</title><rect x="39.4559%" y="293" width="0.1172%" height="15" fill="rgb(244,5,23)" fg:x="108067" fg:w="321"/><text x="39.7059%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (423 samples, 0.15%)</title><rect x="39.4263%" y="325" width="0.1544%" height="15" fill="rgb(226,81,46)" fg:x="107986" fg:w="423"/><text x="39.6763%" y="335.50"></text></g><g><title>isera::initialization (1,668 samples, 0.61%)</title><rect x="38.9725%" y="357" width="0.6090%" height="15" fill="rgb(247,70,30)" fg:x="106743" fg:w="1668"/><text x="39.2225%" y="367.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (425 samples, 0.16%)</title><rect x="39.4263%" y="341" width="0.1552%" height="15" fill="rgb(212,68,19)" fg:x="107986" fg:w="425"/><text x="39.6763%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (578 samples, 0.21%)</title><rect x="53.6932%" y="341" width="0.2110%" height="15" fill="rgb(240,187,13)" fg:x="147062" fg:w="578"/><text x="53.9432%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (578 samples, 0.21%)</title><rect x="53.6932%" y="325" width="0.2110%" height="15" fill="rgb(223,113,26)" fg:x="147062" fg:w="578"/><text x="53.9432%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (578 samples, 0.21%)</title><rect x="53.6932%" y="309" width="0.2110%" height="15" fill="rgb(206,192,2)" fg:x="147062" fg:w="578"/><text x="53.9432%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (7,812 samples, 2.85%)</title><rect x="53.9075%" y="341" width="2.8522%" height="15" fill="rgb(241,108,4)" fg:x="147649" fg:w="7812"/><text x="54.1575%" y="351.50">&lt;i..</text></g><g><title>isera::update_node_potentials (47,080 samples, 17.19%)</title><rect x="39.5815%" y="357" width="17.1892%" height="15" fill="rgb(247,173,49)" fg:x="108411" fg:w="47080"/><text x="39.8315%" y="367.50">isera::update_node_potentia..</text></g><g><title>isera::get_reduced_cost_edgeindex (30 samples, 0.01%)</title><rect x="56.7598%" y="341" width="0.0110%" height="15" fill="rgb(224,114,35)" fg:x="155461" fg:w="30"/><text x="57.0098%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (705 samples, 0.26%)</title><rect x="74.1702%" y="341" width="0.2574%" height="15" fill="rgb(245,159,27)" fg:x="203147" fg:w="705"/><text x="74.4202%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (705 samples, 0.26%)</title><rect x="74.1702%" y="325" width="0.2574%" height="15" fill="rgb(245,172,44)" fg:x="203147" fg:w="705"/><text x="74.4202%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (705 samples, 0.26%)</title><rect x="74.1702%" y="309" width="0.2574%" height="15" fill="rgb(236,23,11)" fg:x="203147" fg:w="705"/><text x="74.4202%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (870 samples, 0.32%)</title><rect x="87.9862%" y="293" width="0.3176%" height="15" fill="rgb(205,117,38)" fg:x="240988" fg:w="870"/><text x="88.2362%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (870 samples, 0.32%)</title><rect x="87.9862%" y="277" width="0.3176%" height="15" fill="rgb(237,72,25)" fg:x="240988" fg:w="870"/><text x="88.2362%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (870 samples, 0.32%)</title><rect x="87.9862%" y="261" width="0.3176%" height="15" fill="rgb(244,70,9)" fg:x="240988" fg:w="870"/><text x="88.2362%" y="271.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (633 samples, 0.23%)</title><rect x="88.3067%" y="293" width="0.2311%" height="15" fill="rgb(217,125,39)" fg:x="241866" fg:w="633"/><text x="88.5567%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (148 samples, 0.05%)</title><rect x="88.5390%" y="277" width="0.0540%" height="15" fill="rgb(235,36,10)" fg:x="242502" fg:w="148"/><text x="88.7890%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (148 samples, 0.05%)</title><rect x="88.5390%" y="261" width="0.0540%" height="15" fill="rgb(251,123,47)" fg:x="242502" fg:w="148"/><text x="88.7890%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (146 samples, 0.05%)</title><rect x="88.5397%" y="245" width="0.0533%" height="15" fill="rgb(221,13,13)" fg:x="242504" fg:w="146"/><text x="88.7897%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (146 samples, 0.05%)</title><rect x="88.5397%" y="229" width="0.0533%" height="15" fill="rgb(238,131,9)" fg:x="242504" fg:w="146"/><text x="88.7897%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (146 samples, 0.05%)</title><rect x="88.5397%" y="213" width="0.0533%" height="15" fill="rgb(211,50,8)" fg:x="242504" fg:w="146"/><text x="88.7897%" y="223.50"></text></g><g><title>alloc::alloc::realloc (146 samples, 0.05%)</title><rect x="88.5397%" y="197" width="0.0533%" height="15" fill="rgb(245,182,24)" fg:x="242504" fg:w="146"/><text x="88.7897%" y="207.50"></text></g><g><title>realloc (140 samples, 0.05%)</title><rect x="88.5419%" y="181" width="0.0511%" height="15" fill="rgb(242,14,37)" fg:x="242510" fg:w="140"/><text x="88.7919%" y="191.50"></text></g><g><title>[libc.so.6] (114 samples, 0.04%)</title><rect x="88.5514%" y="165" width="0.0416%" height="15" fill="rgb(246,228,12)" fg:x="242536" fg:w="114"/><text x="88.8014%" y="175.50"></text></g><g><title>[libc.so.6] (105 samples, 0.04%)</title><rect x="88.5547%" y="149" width="0.0383%" height="15" fill="rgb(213,55,15)" fg:x="242545" fg:w="105"/><text x="88.8047%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (158 samples, 0.06%)</title><rect x="88.5379%" y="293" width="0.0577%" height="15" fill="rgb(209,9,3)" fg:x="242499" fg:w="158"/><text x="88.7879%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (38,820 samples, 14.17%)</title><rect x="74.4291%" y="341" width="14.1734%" height="15" fill="rgb(230,59,30)" fg:x="203856" fg:w="38820"/><text x="74.6791%" y="351.50">&lt;core::iter::adapters:..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (38,820 samples, 14.17%)</title><rect x="74.4291%" y="325" width="14.1734%" height="15" fill="rgb(209,121,21)" fg:x="203856" fg:w="38820"/><text x="74.6791%" y="335.50">&lt;core::iter::adapters:..</text></g><g><title>isera::update_sptree::_{{closure}} (38,819 samples, 14.17%)</title><rect x="74.4294%" y="309" width="14.1731%" height="15" fill="rgb(220,109,13)" fg:x="203857" fg:w="38819"/><text x="74.6794%" y="319.50">isera::update_sptree::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (314 samples, 0.11%)</title><rect x="88.8716%" y="325" width="0.1146%" height="15" fill="rgb(232,18,1)" fg:x="243413" fg:w="314"/><text x="89.1216%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (189 samples, 0.07%)</title><rect x="88.9172%" y="309" width="0.0690%" height="15" fill="rgb(215,41,42)" fg:x="243538" fg:w="189"/><text x="89.1672%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,368 samples, 0.50%)</title><rect x="90.1779%" y="309" width="0.4995%" height="15" fill="rgb(224,123,36)" fg:x="246991" fg:w="1368"/><text x="90.4279%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,368 samples, 0.50%)</title><rect x="90.1779%" y="293" width="0.4995%" height="15" fill="rgb(240,125,3)" fg:x="246991" fg:w="1368"/><text x="90.4279%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,368 samples, 0.50%)</title><rect x="90.1779%" y="277" width="0.4995%" height="15" fill="rgb(205,98,50)" fg:x="246991" fg:w="1368"/><text x="90.4279%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (15,411 samples, 5.63%)</title><rect x="88.6083%" y="341" width="5.6266%" height="15" fill="rgb(205,185,37)" fg:x="242692" fg:w="15411"/><text x="88.8583%" y="351.50">&lt;core::..</text></g><g><title>isera::update_sptree::_{{closure}} (14,376 samples, 5.25%)</title><rect x="88.9862%" y="325" width="5.2488%" height="15" fill="rgb(238,207,15)" fg:x="243727" fg:w="14376"/><text x="89.2362%" y="335.50">isera:..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (9,744 samples, 3.56%)</title><rect x="90.6774%" y="309" width="3.5576%" height="15" fill="rgb(213,199,42)" fg:x="248359" fg:w="9744"/><text x="90.9274%" y="319.50">core..</text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (633 samples, 0.23%)</title><rect x="94.2350%" y="341" width="0.2311%" height="15" fill="rgb(235,201,11)" fg:x="258103" fg:w="633"/><text x="94.4850%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (686 samples, 0.25%)</title><rect x="94.4997%" y="277" width="0.2505%" height="15" fill="rgb(207,46,11)" fg:x="258828" fg:w="686"/><text x="94.7497%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (686 samples, 0.25%)</title><rect x="94.4997%" y="261" width="0.2505%" height="15" fill="rgb(241,35,35)" fg:x="258828" fg:w="686"/><text x="94.7497%" y="271.50"></text></g><g><title>alloc::alloc::realloc (685 samples, 0.25%)</title><rect x="94.5000%" y="245" width="0.2501%" height="15" fill="rgb(243,32,47)" fg:x="258829" fg:w="685"/><text x="94.7500%" y="255.50"></text></g><g><title>realloc (674 samples, 0.25%)</title><rect x="94.5041%" y="229" width="0.2461%" height="15" fill="rgb(247,202,23)" fg:x="258840" fg:w="674"/><text x="94.7541%" y="239.50"></text></g><g><title>[libc.so.6] (593 samples, 0.22%)</title><rect x="94.5336%" y="213" width="0.2165%" height="15" fill="rgb(219,102,11)" fg:x="258921" fg:w="593"/><text x="94.7836%" y="223.50"></text></g><g><title>[libc.so.6] (560 samples, 0.20%)</title><rect x="94.5457%" y="197" width="0.2045%" height="15" fill="rgb(243,110,44)" fg:x="258954" fg:w="560"/><text x="94.7957%" y="207.50"></text></g><g><title>[libc.so.6] (35 samples, 0.01%)</title><rect x="94.7374%" y="181" width="0.0128%" height="15" fill="rgb(222,74,54)" fg:x="259479" fg:w="35"/><text x="94.9874%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (722 samples, 0.26%)</title><rect x="94.4993%" y="293" width="0.2636%" height="15" fill="rgb(216,99,12)" fg:x="258827" fg:w="722"/><text x="94.7493%" y="303.50"></text></g><g><title>malloc (31 samples, 0.01%)</title><rect x="94.7516%" y="277" width="0.0113%" height="15" fill="rgb(226,22,26)" fg:x="259518" fg:w="31"/><text x="95.0016%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (746 samples, 0.27%)</title><rect x="94.4931%" y="325" width="0.2724%" height="15" fill="rgb(217,163,10)" fg:x="258810" fg:w="746"/><text x="94.7431%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (746 samples, 0.27%)</title><rect x="94.4931%" y="309" width="0.2724%" height="15" fill="rgb(213,25,53)" fg:x="258810" fg:w="746"/><text x="94.7431%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,738 samples, 0.63%)</title><rect x="94.4694%" y="341" width="0.6346%" height="15" fill="rgb(252,105,26)" fg:x="258745" fg:w="1738"/><text x="94.7194%" y="351.50"></text></g><g><title>core::ptr::write (925 samples, 0.34%)</title><rect x="94.7662%" y="325" width="0.3377%" height="15" fill="rgb(220,39,43)" fg:x="259558" fg:w="925"/><text x="95.0162%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (72 samples, 0.03%)</title><rect x="95.1094%" y="309" width="0.0263%" height="15" fill="rgb(229,68,48)" fg:x="260498" fg:w="72"/><text x="95.3594%" y="319.50"></text></g><g><title>core::ptr::write (62 samples, 0.02%)</title><rect x="95.1131%" y="293" width="0.0226%" height="15" fill="rgb(252,8,32)" fg:x="260508" fg:w="62"/><text x="95.3631%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (394 samples, 0.14%)</title><rect x="95.1361%" y="261" width="0.1439%" height="15" fill="rgb(223,20,43)" fg:x="260571" fg:w="394"/><text x="95.3861%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (394 samples, 0.14%)</title><rect x="95.1361%" y="245" width="0.1439%" height="15" fill="rgb(229,81,49)" fg:x="260571" fg:w="394"/><text x="95.3861%" y="255.50"></text></g><g><title>alloc::alloc::alloc (394 samples, 0.14%)</title><rect x="95.1361%" y="229" width="0.1439%" height="15" fill="rgb(236,28,36)" fg:x="260571" fg:w="394"/><text x="95.3861%" y="239.50"></text></g><g><title>malloc (374 samples, 0.14%)</title><rect x="95.1434%" y="213" width="0.1365%" height="15" fill="rgb(249,185,26)" fg:x="260591" fg:w="374"/><text x="95.3934%" y="223.50"></text></g><g><title>[libc.so.6] (122 samples, 0.04%)</title><rect x="95.2354%" y="197" width="0.0445%" height="15" fill="rgb(249,174,33)" fg:x="260843" fg:w="122"/><text x="95.4854%" y="207.50"></text></g><g><title>[libc.so.6] (58 samples, 0.02%)</title><rect x="95.2587%" y="181" width="0.0212%" height="15" fill="rgb(233,201,37)" fg:x="260907" fg:w="58"/><text x="95.5087%" y="191.50"></text></g><g><title>alloc::vec::from_elem (473 samples, 0.17%)</title><rect x="95.1087%" y="341" width="0.1727%" height="15" fill="rgb(221,78,26)" fg:x="260496" fg:w="473"/><text x="95.3587%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (473 samples, 0.17%)</title><rect x="95.1087%" y="325" width="0.1727%" height="15" fill="rgb(250,127,30)" fg:x="260496" fg:w="473"/><text x="95.3587%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (399 samples, 0.15%)</title><rect x="95.1357%" y="309" width="0.1457%" height="15" fill="rgb(230,49,44)" fg:x="260570" fg:w="399"/><text x="95.3857%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (399 samples, 0.15%)</title><rect x="95.1357%" y="293" width="0.1457%" height="15" fill="rgb(229,67,23)" fg:x="260570" fg:w="399"/><text x="95.3857%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (399 samples, 0.15%)</title><rect x="95.1357%" y="277" width="0.1457%" height="15" fill="rgb(249,83,47)" fg:x="260570" fg:w="399"/><text x="95.3857%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (39 samples, 0.01%)</title><rect x="95.2832%" y="277" width="0.0142%" height="15" fill="rgb(215,43,3)" fg:x="260974" fg:w="39"/><text x="95.5332%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (39 samples, 0.01%)</title><rect x="95.2832%" y="261" width="0.0142%" height="15" fill="rgb(238,154,13)" fg:x="260974" fg:w="39"/><text x="95.5332%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (39 samples, 0.01%)</title><rect x="95.2832%" y="245" width="0.0142%" height="15" fill="rgb(219,56,2)" fg:x="260974" fg:w="39"/><text x="95.5332%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 0.01%)</title><rect x="95.2832%" y="229" width="0.0142%" height="15" fill="rgb(233,0,4)" fg:x="260974" fg:w="39"/><text x="95.5332%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 0.01%)</title><rect x="95.2832%" y="213" width="0.0142%" height="15" fill="rgb(235,30,7)" fg:x="260974" fg:w="39"/><text x="95.5332%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (37 samples, 0.01%)</title><rect x="95.2839%" y="197" width="0.0135%" height="15" fill="rgb(250,79,13)" fg:x="260976" fg:w="37"/><text x="95.5339%" y="207.50"></text></g><g><title>isera::update_sptree::_{{closure}} (32 samples, 0.01%)</title><rect x="95.2858%" y="181" width="0.0117%" height="15" fill="rgb(211,146,34)" fg:x="260981" fg:w="32"/><text x="95.5358%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (84 samples, 0.03%)</title><rect x="95.2821%" y="341" width="0.0307%" height="15" fill="rgb(228,22,38)" fg:x="260971" fg:w="84"/><text x="95.5321%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (84 samples, 0.03%)</title><rect x="95.2821%" y="325" width="0.0307%" height="15" fill="rgb(235,168,5)" fg:x="260971" fg:w="84"/><text x="95.5321%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (84 samples, 0.03%)</title><rect x="95.2821%" y="309" width="0.0307%" height="15" fill="rgb(221,155,16)" fg:x="260971" fg:w="84"/><text x="95.5321%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (84 samples, 0.03%)</title><rect x="95.2821%" y="293" width="0.0307%" height="15" fill="rgb(215,215,53)" fg:x="260971" fg:w="84"/><text x="95.5321%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (42 samples, 0.02%)</title><rect x="95.2974%" y="277" width="0.0153%" height="15" fill="rgb(223,4,10)" fg:x="261013" fg:w="42"/><text x="95.5474%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (42 samples, 0.02%)</title><rect x="95.2974%" y="261" width="0.0153%" height="15" fill="rgb(234,103,6)" fg:x="261013" fg:w="42"/><text x="95.5474%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42 samples, 0.02%)</title><rect x="95.2974%" y="245" width="0.0153%" height="15" fill="rgb(227,97,0)" fg:x="261013" fg:w="42"/><text x="95.5474%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (42 samples, 0.02%)</title><rect x="95.2974%" y="229" width="0.0153%" height="15" fill="rgb(234,150,53)" fg:x="261013" fg:w="42"/><text x="95.5474%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.01%)</title><rect x="95.2982%" y="213" width="0.0146%" height="15" fill="rgb(228,201,54)" fg:x="261015" fg:w="40"/><text x="95.5482%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.01%)</title><rect x="95.2982%" y="197" width="0.0146%" height="15" fill="rgb(222,22,37)" fg:x="261015" fg:w="40"/><text x="95.5482%" y="207.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.01%)</title><rect x="95.2982%" y="181" width="0.0146%" height="15" fill="rgb(237,53,32)" fg:x="261015" fg:w="40"/><text x="95.5482%" y="191.50"></text></g><g><title>malloc (30 samples, 0.01%)</title><rect x="95.3018%" y="165" width="0.0110%" height="15" fill="rgb(233,25,53)" fg:x="261025" fg:w="30"/><text x="95.5518%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (54 samples, 0.02%)</title><rect x="95.3150%" y="325" width="0.0197%" height="15" fill="rgb(210,40,34)" fg:x="261061" fg:w="54"/><text x="95.5650%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (29 samples, 0.01%)</title><rect x="95.3241%" y="309" width="0.0106%" height="15" fill="rgb(241,220,44)" fg:x="261086" fg:w="29"/><text x="95.5741%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (29 samples, 0.01%)</title><rect x="95.3241%" y="293" width="0.0106%" height="15" fill="rgb(235,28,35)" fg:x="261086" fg:w="29"/><text x="95.5741%" y="303.50"></text></g><g><title>isera::update_sptree::_{{closure}} (29 samples, 0.01%)</title><rect x="95.3241%" y="277" width="0.0106%" height="15" fill="rgb(210,56,17)" fg:x="261086" fg:w="29"/><text x="95.5741%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (73 samples, 0.03%)</title><rect x="95.3383%" y="309" width="0.0267%" height="15" fill="rgb(224,130,29)" fg:x="261125" fg:w="73"/><text x="95.5883%" y="319.50"></text></g><g><title>isera::update_sptree::_{{closure}} (73 samples, 0.03%)</title><rect x="95.3383%" y="293" width="0.0267%" height="15" fill="rgb(235,212,8)" fg:x="261125" fg:w="73"/><text x="95.5883%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (186 samples, 0.07%)</title><rect x="95.3128%" y="341" width="0.0679%" height="15" fill="rgb(223,33,50)" fg:x="261055" fg:w="186"/><text x="95.5628%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (126 samples, 0.05%)</title><rect x="95.3347%" y="325" width="0.0460%" height="15" fill="rgb(219,149,13)" fg:x="261115" fg:w="126"/><text x="95.5847%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (43 samples, 0.02%)</title><rect x="95.3650%" y="309" width="0.0157%" height="15" fill="rgb(250,156,29)" fg:x="261198" fg:w="43"/><text x="95.6150%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.02%)</title><rect x="95.3650%" y="293" width="0.0157%" height="15" fill="rgb(216,193,19)" fg:x="261198" fg:w="43"/><text x="95.6150%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (43 samples, 0.02%)</title><rect x="95.3650%" y="277" width="0.0157%" height="15" fill="rgb(216,135,14)" fg:x="261198" fg:w="43"/><text x="95.6150%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.02%)</title><rect x="95.3650%" y="261" width="0.0157%" height="15" fill="rgb(241,47,5)" fg:x="261198" fg:w="43"/><text x="95.6150%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (43 samples, 0.02%)</title><rect x="95.3650%" y="245" width="0.0157%" height="15" fill="rgb(233,42,35)" fg:x="261198" fg:w="43"/><text x="95.6150%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.02%)</title><rect x="95.3650%" y="229" width="0.0157%" height="15" fill="rgb(231,13,6)" fg:x="261198" fg:w="43"/><text x="95.6150%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.02%)</title><rect x="95.3650%" y="213" width="0.0157%" height="15" fill="rgb(207,181,40)" fg:x="261198" fg:w="43"/><text x="95.6150%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.02%)</title><rect x="95.3650%" y="197" width="0.0157%" height="15" fill="rgb(254,173,49)" fg:x="261198" fg:w="43"/><text x="95.6150%" y="207.50"></text></g><g><title>cfree (39 samples, 0.01%)</title><rect x="95.3664%" y="181" width="0.0142%" height="15" fill="rgb(221,1,38)" fg:x="261202" fg:w="39"/><text x="95.6164%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (202 samples, 0.07%)</title><rect x="95.3883%" y="293" width="0.0738%" height="15" fill="rgb(206,124,46)" fg:x="261262" fg:w="202"/><text x="95.6383%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (202 samples, 0.07%)</title><rect x="95.3883%" y="277" width="0.0738%" height="15" fill="rgb(249,21,11)" fg:x="261262" fg:w="202"/><text x="95.6383%" y="287.50"></text></g><g><title>cfree (192 samples, 0.07%)</title><rect x="95.3920%" y="261" width="0.0701%" height="15" fill="rgb(222,201,40)" fg:x="261272" fg:w="192"/><text x="95.6420%" y="271.50"></text></g><g><title>[libc.so.6] (134 samples, 0.05%)</title><rect x="95.4132%" y="245" width="0.0489%" height="15" fill="rgb(235,61,29)" fg:x="261330" fg:w="134"/><text x="95.6632%" y="255.50"></text></g><g><title>[libc.so.6] (51 samples, 0.02%)</title><rect x="95.4435%" y="229" width="0.0186%" height="15" fill="rgb(219,207,3)" fg:x="261413" fg:w="51"/><text x="95.6935%" y="239.50"></text></g><g><title>[libc.so.6] (31 samples, 0.01%)</title><rect x="95.4508%" y="213" width="0.0113%" height="15" fill="rgb(222,56,46)" fg:x="261433" fg:w="31"/><text x="95.7008%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (208 samples, 0.08%)</title><rect x="95.3865%" y="341" width="0.0759%" height="15" fill="rgb(239,76,54)" fg:x="261257" fg:w="208"/><text x="95.6365%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (208 samples, 0.08%)</title><rect x="95.3865%" y="325" width="0.0759%" height="15" fill="rgb(231,124,27)" fg:x="261257" fg:w="208"/><text x="95.6365%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (208 samples, 0.08%)</title><rect x="95.3865%" y="309" width="0.0759%" height="15" fill="rgb(249,195,6)" fg:x="261257" fg:w="208"/><text x="95.6365%" y="319.50"></text></g><g><title>isera::min_cost (259,837 samples, 94.87%)</title><rect x="0.5955%" y="373" width="94.8681%" height="15" fill="rgb(237,174,47)" fg:x="1631" fg:w="259837"/><text x="0.8455%" y="383.50">isera::min_cost</text></g><g><title>isera::update_sptree (105,977 samples, 38.69%)</title><rect x="56.7707%" y="357" width="38.6928%" height="15" fill="rgb(206,201,31)" fg:x="155491" fg:w="105977"/><text x="57.0207%" y="367.50">isera::update_sptree</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (68 samples, 0.02%)</title><rect x="95.5311%" y="245" width="0.0248%" height="15" fill="rgb(231,57,52)" fg:x="261653" fg:w="68"/><text x="95.7811%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (68 samples, 0.02%)</title><rect x="95.5311%" y="229" width="0.0248%" height="15" fill="rgb(248,177,22)" fg:x="261653" fg:w="68"/><text x="95.7811%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (68 samples, 0.02%)</title><rect x="95.5311%" y="213" width="0.0248%" height="15" fill="rgb(215,211,37)" fg:x="261653" fg:w="68"/><text x="95.7811%" y="223.50"></text></g><g><title>[libc.so.6] (49 samples, 0.02%)</title><rect x="95.5380%" y="197" width="0.0179%" height="15" fill="rgb(241,128,51)" fg:x="261672" fg:w="49"/><text x="95.7880%" y="207.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (874 samples, 0.32%)</title><rect x="95.4738%" y="293" width="0.3191%" height="15" fill="rgb(227,165,31)" fg:x="261496" fg:w="874"/><text x="95.7238%" y="303.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (874 samples, 0.32%)</title><rect x="95.4738%" y="277" width="0.3191%" height="15" fill="rgb(228,167,24)" fg:x="261496" fg:w="874"/><text x="95.7238%" y="287.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (860 samples, 0.31%)</title><rect x="95.4789%" y="261" width="0.3140%" height="15" fill="rgb(228,143,12)" fg:x="261510" fg:w="860"/><text x="95.7289%" y="271.50"></text></g><g><title>core::slice::memchr::memchr (633 samples, 0.23%)</title><rect x="95.5618%" y="245" width="0.2311%" height="15" fill="rgb(249,149,8)" fg:x="261737" fg:w="633"/><text x="95.8118%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned (633 samples, 0.23%)</title><rect x="95.5618%" y="229" width="0.2311%" height="15" fill="rgb(243,35,44)" fg:x="261737" fg:w="633"/><text x="95.8118%" y="239.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,045 samples, 0.38%)</title><rect x="95.4738%" y="325" width="0.3815%" height="15" fill="rgb(246,89,9)" fg:x="261496" fg:w="1045"/><text x="95.7238%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,045 samples, 0.38%)</title><rect x="95.4738%" y="309" width="0.3815%" height="15" fill="rgb(233,213,13)" fg:x="261496" fg:w="1045"/><text x="95.7238%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (171 samples, 0.06%)</title><rect x="95.7929%" y="293" width="0.0624%" height="15" fill="rgb(233,141,41)" fg:x="262370" fg:w="171"/><text x="96.0429%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (171 samples, 0.06%)</title><rect x="95.7929%" y="277" width="0.0624%" height="15" fill="rgb(239,167,4)" fg:x="262370" fg:w="171"/><text x="96.0429%" y="287.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (171 samples, 0.06%)</title><rect x="95.7929%" y="261" width="0.0624%" height="15" fill="rgb(209,217,16)" fg:x="262370" fg:w="171"/><text x="96.0429%" y="271.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (171 samples, 0.06%)</title><rect x="95.7929%" y="245" width="0.0624%" height="15" fill="rgb(219,88,35)" fg:x="262370" fg:w="171"/><text x="96.0429%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (162 samples, 0.06%)</title><rect x="95.7962%" y="229" width="0.0591%" height="15" fill="rgb(220,193,23)" fg:x="262379" fg:w="162"/><text x="96.0462%" y="239.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (162 samples, 0.06%)</title><rect x="95.7962%" y="213" width="0.0591%" height="15" fill="rgb(230,90,52)" fg:x="262379" fg:w="162"/><text x="96.0462%" y="223.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (162 samples, 0.06%)</title><rect x="95.7962%" y="197" width="0.0591%" height="15" fill="rgb(252,106,19)" fg:x="262379" fg:w="162"/><text x="96.0462%" y="207.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (110 samples, 0.04%)</title><rect x="95.8152%" y="181" width="0.0402%" height="15" fill="rgb(206,74,20)" fg:x="262431" fg:w="110"/><text x="96.0652%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (110 samples, 0.04%)</title><rect x="95.8152%" y="165" width="0.0402%" height="15" fill="rgb(230,138,44)" fg:x="262431" fg:w="110"/><text x="96.0652%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (109 samples, 0.04%)</title><rect x="95.8155%" y="149" width="0.0398%" height="15" fill="rgb(235,182,43)" fg:x="262432" fg:w="109"/><text x="96.0655%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (109 samples, 0.04%)</title><rect x="95.8155%" y="133" width="0.0398%" height="15" fill="rgb(242,16,51)" fg:x="262432" fg:w="109"/><text x="96.0655%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (109 samples, 0.04%)</title><rect x="95.8155%" y="117" width="0.0398%" height="15" fill="rgb(248,9,4)" fg:x="262432" fg:w="109"/><text x="96.0655%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (37 samples, 0.01%)</title><rect x="95.8860%" y="293" width="0.0135%" height="15" fill="rgb(210,31,22)" fg:x="262625" fg:w="37"/><text x="96.1360%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (37 samples, 0.01%)</title><rect x="95.8860%" y="277" width="0.0135%" height="15" fill="rgb(239,54,39)" fg:x="262625" fg:w="37"/><text x="96.1360%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (32 samples, 0.01%)</title><rect x="95.8878%" y="261" width="0.0117%" height="15" fill="rgb(230,99,41)" fg:x="262630" fg:w="32"/><text x="96.1378%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (41 samples, 0.01%)</title><rect x="95.8995%" y="293" width="0.0150%" height="15" fill="rgb(253,106,12)" fg:x="262662" fg:w="41"/><text x="96.1495%" y="303.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (41 samples, 0.01%)</title><rect x="95.8995%" y="277" width="0.0150%" height="15" fill="rgb(213,46,41)" fg:x="262662" fg:w="41"/><text x="96.1495%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (41 samples, 0.01%)</title><rect x="95.8995%" y="261" width="0.0150%" height="15" fill="rgb(215,133,35)" fg:x="262662" fg:w="41"/><text x="96.1495%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (358 samples, 0.13%)</title><rect x="95.9280%" y="181" width="0.1307%" height="15" fill="rgb(213,28,5)" fg:x="262740" fg:w="358"/><text x="96.1780%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (358 samples, 0.13%)</title><rect x="95.9280%" y="165" width="0.1307%" height="15" fill="rgb(215,77,49)" fg:x="262740" fg:w="358"/><text x="96.1780%" y="175.50"></text></g><g><title>alloc::alloc::alloc (358 samples, 0.13%)</title><rect x="95.9280%" y="149" width="0.1307%" height="15" fill="rgb(248,100,22)" fg:x="262740" fg:w="358"/><text x="96.1780%" y="159.50"></text></g><g><title>malloc (310 samples, 0.11%)</title><rect x="95.9455%" y="133" width="0.1132%" height="15" fill="rgb(208,67,9)" fg:x="262788" fg:w="310"/><text x="96.1955%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (408 samples, 0.15%)</title><rect x="95.9145%" y="229" width="0.1490%" height="15" fill="rgb(219,133,21)" fg:x="262703" fg:w="408"/><text x="96.1645%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (408 samples, 0.15%)</title><rect x="95.9145%" y="213" width="0.1490%" height="15" fill="rgb(246,46,29)" fg:x="262703" fg:w="408"/><text x="96.1645%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (408 samples, 0.15%)</title><rect x="95.9145%" y="197" width="0.1490%" height="15" fill="rgb(246,185,52)" fg:x="262703" fg:w="408"/><text x="96.1645%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (509 samples, 0.19%)</title><rect x="95.9145%" y="293" width="0.1858%" height="15" fill="rgb(252,136,11)" fg:x="262703" fg:w="509"/><text x="96.1645%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (509 samples, 0.19%)</title><rect x="95.9145%" y="277" width="0.1858%" height="15" fill="rgb(219,138,53)" fg:x="262703" fg:w="509"/><text x="96.1645%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (509 samples, 0.19%)</title><rect x="95.9145%" y="261" width="0.1858%" height="15" fill="rgb(211,51,23)" fg:x="262703" fg:w="509"/><text x="96.1645%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (509 samples, 0.19%)</title><rect x="95.9145%" y="245" width="0.1858%" height="15" fill="rgb(247,221,28)" fg:x="262703" fg:w="509"/><text x="96.1645%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (101 samples, 0.04%)</title><rect x="96.0634%" y="229" width="0.0369%" height="15" fill="rgb(251,222,45)" fg:x="263111" fg:w="101"/><text x="96.3134%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (101 samples, 0.04%)</title><rect x="96.0634%" y="213" width="0.0369%" height="15" fill="rgb(217,162,53)" fg:x="263111" fg:w="101"/><text x="96.3134%" y="223.50"></text></g><g><title>[libc.so.6] (91 samples, 0.03%)</title><rect x="96.0671%" y="197" width="0.0332%" height="15" fill="rgb(229,93,14)" fg:x="263121" fg:w="91"/><text x="96.3171%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (47 samples, 0.02%)</title><rect x="96.4859%" y="149" width="0.0172%" height="15" fill="rgb(209,67,49)" fg:x="264268" fg:w="47"/><text x="96.7359%" y="159.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (45 samples, 0.02%)</title><rect x="96.5030%" y="149" width="0.0164%" height="15" fill="rgb(213,87,29)" fg:x="264315" fg:w="45"/><text x="96.7530%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (45 samples, 0.02%)</title><rect x="96.5030%" y="133" width="0.0164%" height="15" fill="rgb(205,151,52)" fg:x="264315" fg:w="45"/><text x="96.7530%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (45 samples, 0.02%)</title><rect x="96.5030%" y="117" width="0.0164%" height="15" fill="rgb(253,215,39)" fg:x="264315" fg:w="45"/><text x="96.7530%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (310 samples, 0.11%)</title><rect x="96.5194%" y="149" width="0.1132%" height="15" fill="rgb(221,220,41)" fg:x="264360" fg:w="310"/><text x="96.7694%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (310 samples, 0.11%)</title><rect x="96.5194%" y="133" width="0.1132%" height="15" fill="rgb(218,133,21)" fg:x="264360" fg:w="310"/><text x="96.7694%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (310 samples, 0.11%)</title><rect x="96.5194%" y="117" width="0.1132%" height="15" fill="rgb(221,193,43)" fg:x="264360" fg:w="310"/><text x="96.7694%" y="127.50"></text></g><g><title>[libc.so.6] (253 samples, 0.09%)</title><rect x="96.5403%" y="101" width="0.0924%" height="15" fill="rgb(240,128,52)" fg:x="264417" fg:w="253"/><text x="96.7903%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (39 samples, 0.01%)</title><rect x="96.6326%" y="149" width="0.0142%" height="15" fill="rgb(253,114,12)" fg:x="264670" fg:w="39"/><text x="96.8826%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (39 samples, 0.01%)</title><rect x="96.6326%" y="133" width="0.0142%" height="15" fill="rgb(215,223,47)" fg:x="264670" fg:w="39"/><text x="96.8826%" y="143.50"></text></g><g><title>core::slice::memchr::memchr_aligned (372 samples, 0.14%)</title><rect x="96.6805%" y="133" width="0.1358%" height="15" fill="rgb(248,225,23)" fg:x="264801" fg:w="372"/><text x="96.9305%" y="143.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,555 samples, 0.57%)</title><rect x="96.3321%" y="165" width="0.5677%" height="15" fill="rgb(250,108,0)" fg:x="263847" fg:w="1555"/><text x="96.5821%" y="175.50"></text></g><g><title>core::slice::memchr::memchr (693 samples, 0.25%)</title><rect x="96.6469%" y="149" width="0.2530%" height="15" fill="rgb(228,208,7)" fg:x="264709" fg:w="693"/><text x="96.8969%" y="159.50"></text></g><g><title>core::slice::memchr::memchr_naive (229 samples, 0.08%)</title><rect x="96.8163%" y="133" width="0.0836%" height="15" fill="rgb(244,45,10)" fg:x="265173" fg:w="229"/><text x="97.0663%" y="143.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,848 samples, 0.67%)</title><rect x="96.2478%" y="197" width="0.6747%" height="15" fill="rgb(207,125,25)" fg:x="263616" fg:w="1848"/><text x="96.4978%" y="207.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1,821 samples, 0.66%)</title><rect x="96.2577%" y="181" width="0.6649%" height="15" fill="rgb(210,195,18)" fg:x="263643" fg:w="1821"/><text x="96.5077%" y="191.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (49 samples, 0.02%)</title><rect x="96.9046%" y="165" width="0.0179%" height="15" fill="rgb(249,80,12)" fg:x="265415" fg:w="49"/><text x="97.1546%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (55 samples, 0.02%)</title><rect x="96.9225%" y="197" width="0.0201%" height="15" fill="rgb(221,65,9)" fg:x="265464" fg:w="55"/><text x="97.1725%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (55 samples, 0.02%)</title><rect x="96.9225%" y="181" width="0.0201%" height="15" fill="rgb(235,49,36)" fg:x="265464" fg:w="55"/><text x="97.1725%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (72 samples, 0.03%)</title><rect x="96.9612%" y="133" width="0.0263%" height="15" fill="rgb(225,32,20)" fg:x="265570" fg:w="72"/><text x="97.2112%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (40 samples, 0.01%)</title><rect x="96.9875%" y="133" width="0.0146%" height="15" fill="rgb(215,141,46)" fg:x="265642" fg:w="40"/><text x="97.2375%" y="143.50"></text></g><g><title>__rdl_realloc (148 samples, 0.05%)</title><rect x="97.0196%" y="69" width="0.0540%" height="15" fill="rgb(250,160,47)" fg:x="265730" fg:w="148"/><text x="97.2696%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,328 samples, 0.85%)</title><rect x="97.0101%" y="117" width="0.8500%" height="15" fill="rgb(216,222,40)" fg:x="265704" fg:w="2328"/><text x="97.2601%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,328 samples, 0.85%)</title><rect x="97.0101%" y="101" width="0.8500%" height="15" fill="rgb(234,217,39)" fg:x="265704" fg:w="2328"/><text x="97.2601%" y="111.50"></text></g><g><title>alloc::alloc::realloc (2,313 samples, 0.84%)</title><rect x="97.0156%" y="85" width="0.8445%" height="15" fill="rgb(207,178,40)" fg:x="265719" fg:w="2313"/><text x="97.2656%" y="95.50"></text></g><g><title>realloc (2,135 samples, 0.78%)</title><rect x="97.0806%" y="69" width="0.7795%" height="15" fill="rgb(221,136,13)" fg:x="265897" fg:w="2135"/><text x="97.3306%" y="79.50"></text></g><g><title>[libc.so.6] (1,755 samples, 0.64%)</title><rect x="97.2194%" y="53" width="0.6408%" height="15" fill="rgb(249,199,10)" fg:x="266277" fg:w="1755"/><text x="97.4694%" y="63.50"></text></g><g><title>[libc.so.6] (1,268 samples, 0.46%)</title><rect x="97.3972%" y="37" width="0.4630%" height="15" fill="rgb(249,222,13)" fg:x="266764" fg:w="1268"/><text x="97.6472%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,380 samples, 0.87%)</title><rect x="97.0028%" y="133" width="0.8690%" height="15" fill="rgb(244,185,38)" fg:x="265684" fg:w="2380"/><text x="97.2528%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (32 samples, 0.01%)</title><rect x="97.8601%" y="117" width="0.0117%" height="15" fill="rgb(236,202,9)" fg:x="268032" fg:w="32"/><text x="98.1101%" y="127.50"></text></g><g><title>core::cmp::max (98 samples, 0.04%)</title><rect x="97.8744%" y="133" width="0.0358%" height="15" fill="rgb(250,229,37)" fg:x="268071" fg:w="98"/><text x="98.1244%" y="143.50"></text></g><g><title>core::cmp::Ord::max (98 samples, 0.04%)</title><rect x="97.8744%" y="117" width="0.0358%" height="15" fill="rgb(206,174,23)" fg:x="268071" fg:w="98"/><text x="98.1244%" y="127.50"></text></g><g><title>core::cmp::max_by (98 samples, 0.04%)</title><rect x="97.8744%" y="101" width="0.0358%" height="15" fill="rgb(211,33,43)" fg:x="268071" fg:w="98"/><text x="98.1244%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,651 samples, 0.97%)</title><rect x="96.9426%" y="197" width="0.9679%" height="15" fill="rgb(245,58,50)" fg:x="265519" fg:w="2651"/><text x="97.1926%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,651 samples, 0.97%)</title><rect x="96.9426%" y="181" width="0.9679%" height="15" fill="rgb(244,68,36)" fg:x="265519" fg:w="2651"/><text x="97.1926%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,640 samples, 0.96%)</title><rect x="96.9466%" y="165" width="0.9639%" height="15" fill="rgb(232,229,15)" fg:x="265530" fg:w="2640"/><text x="97.1966%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,640 samples, 0.96%)</title><rect x="96.9466%" y="149" width="0.9639%" height="15" fill="rgb(254,30,23)" fg:x="265530" fg:w="2640"/><text x="97.1966%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5,308 samples, 1.94%)</title><rect x="96.1748%" y="229" width="1.9380%" height="15" fill="rgb(235,160,14)" fg:x="263416" fg:w="5308"/><text x="96.4248%" y="239.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (5,308 samples, 1.94%)</title><rect x="96.1748%" y="213" width="1.9380%" height="15" fill="rgb(212,155,44)" fg:x="263416" fg:w="5308"/><text x="96.4248%" y="223.50">a..</text></g><g><title>core::ptr::write (553 samples, 0.20%)</title><rect x="97.9109%" y="197" width="0.2019%" height="15" fill="rgb(226,2,50)" fg:x="268171" fg:w="553"/><text x="98.1609%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (68 samples, 0.02%)</title><rect x="98.1675%" y="181" width="0.0248%" height="15" fill="rgb(234,177,6)" fg:x="268874" fg:w="68"/><text x="98.4175%" y="191.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (68 samples, 0.02%)</title><rect x="98.1675%" y="165" width="0.0248%" height="15" fill="rgb(217,24,9)" fg:x="268874" fg:w="68"/><text x="98.4175%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (68 samples, 0.02%)</title><rect x="98.1675%" y="149" width="0.0248%" height="15" fill="rgb(220,13,46)" fg:x="268874" fg:w="68"/><text x="98.4175%" y="159.50"></text></g><g><title>[libc.so.6] (53 samples, 0.02%)</title><rect x="98.1730%" y="133" width="0.0194%" height="15" fill="rgb(239,221,27)" fg:x="268889" fg:w="53"/><text x="98.4230%" y="143.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (387 samples, 0.14%)</title><rect x="98.1128%" y="229" width="0.1413%" height="15" fill="rgb(222,198,25)" fg:x="268724" fg:w="387"/><text x="98.3628%" y="239.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (386 samples, 0.14%)</title><rect x="98.1131%" y="213" width="0.1409%" height="15" fill="rgb(211,99,13)" fg:x="268725" fg:w="386"/><text x="98.3631%" y="223.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (351 samples, 0.13%)</title><rect x="98.1259%" y="197" width="0.1282%" height="15" fill="rgb(232,111,31)" fg:x="268760" fg:w="351"/><text x="98.3759%" y="207.50"></text></g><g><title>core::slice::memchr::memchr (155 samples, 0.06%)</title><rect x="98.1975%" y="181" width="0.0566%" height="15" fill="rgb(245,82,37)" fg:x="268956" fg:w="155"/><text x="98.4475%" y="191.50"></text></g><g><title>core::slice::memchr::memchr_aligned (137 samples, 0.05%)</title><rect x="98.2040%" y="165" width="0.0500%" height="15" fill="rgb(227,149,46)" fg:x="268974" fg:w="137"/><text x="98.4540%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (468 samples, 0.17%)</title><rect x="98.2541%" y="229" width="0.1709%" height="15" fill="rgb(218,36,50)" fg:x="269111" fg:w="468"/><text x="98.5041%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (468 samples, 0.17%)</title><rect x="98.2541%" y="213" width="0.1709%" height="15" fill="rgb(226,80,48)" fg:x="269111" fg:w="468"/><text x="98.5041%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (468 samples, 0.17%)</title><rect x="98.2541%" y="197" width="0.1709%" height="15" fill="rgb(238,224,15)" fg:x="269111" fg:w="468"/><text x="98.5041%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (447 samples, 0.16%)</title><rect x="98.2617%" y="181" width="0.1632%" height="15" fill="rgb(241,136,10)" fg:x="269132" fg:w="447"/><text x="98.5117%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (447 samples, 0.16%)</title><rect x="98.2617%" y="165" width="0.1632%" height="15" fill="rgb(208,32,45)" fg:x="269132" fg:w="447"/><text x="98.5117%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (447 samples, 0.16%)</title><rect x="98.2617%" y="149" width="0.1632%" height="15" fill="rgb(207,135,9)" fg:x="269132" fg:w="447"/><text x="98.5117%" y="159.50"></text></g><g><title>alloc::alloc::alloc (447 samples, 0.16%)</title><rect x="98.2617%" y="133" width="0.1632%" height="15" fill="rgb(206,86,44)" fg:x="269132" fg:w="447"/><text x="98.5117%" y="143.50"></text></g><g><title>malloc (384 samples, 0.14%)</title><rect x="98.2847%" y="117" width="0.1402%" height="15" fill="rgb(245,177,15)" fg:x="269195" fg:w="384"/><text x="98.5347%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6,369 samples, 2.33%)</title><rect x="96.1003%" y="293" width="2.3254%" height="15" fill="rgb(206,64,50)" fg:x="263212" fg:w="6369"/><text x="96.3503%" y="303.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,369 samples, 2.33%)</title><rect x="96.1003%" y="277" width="2.3254%" height="15" fill="rgb(234,36,40)" fg:x="263212" fg:w="6369"/><text x="96.3503%" y="287.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,345 samples, 2.32%)</title><rect x="96.1091%" y="261" width="2.3166%" height="15" fill="rgb(213,64,8)" fg:x="263236" fg:w="6345"/><text x="96.3591%" y="271.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,317 samples, 2.31%)</title><rect x="96.1193%" y="245" width="2.3064%" height="15" fill="rgb(210,75,36)" fg:x="263264" fg:w="6317"/><text x="96.3693%" y="255.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (95 samples, 0.03%)</title><rect x="98.4257%" y="293" width="0.0347%" height="15" fill="rgb(229,88,21)" fg:x="269581" fg:w="95"/><text x="98.6757%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (95 samples, 0.03%)</title><rect x="98.4257%" y="277" width="0.0347%" height="15" fill="rgb(252,204,47)" fg:x="269581" fg:w="95"/><text x="98.6757%" y="287.50"></text></g><g><title>core::str::validations::next_code_point (95 samples, 0.03%)</title><rect x="98.4257%" y="261" width="0.0347%" height="15" fill="rgb(208,77,27)" fg:x="269581" fg:w="95"/><text x="98.6757%" y="271.50"></text></g><g><title>__rust_dealloc (35 samples, 0.01%)</title><rect x="98.4797%" y="213" width="0.0128%" height="15" fill="rgb(221,76,26)" fg:x="269729" fg:w="35"/><text x="98.7297%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,397 samples, 0.51%)</title><rect x="98.4647%" y="245" width="0.5101%" height="15" fill="rgb(225,139,18)" fg:x="269688" fg:w="1397"/><text x="98.7147%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1,397 samples, 0.51%)</title><rect x="98.4647%" y="229" width="0.5101%" height="15" fill="rgb(230,137,11)" fg:x="269688" fg:w="1397"/><text x="98.7147%" y="239.50"></text></g><g><title>cfree (1,321 samples, 0.48%)</title><rect x="98.4925%" y="213" width="0.4823%" height="15" fill="rgb(212,28,1)" fg:x="269764" fg:w="1321"/><text x="98.7425%" y="223.50"></text></g><g><title>[libc.so.6] (1,033 samples, 0.38%)</title><rect x="98.5976%" y="197" width="0.3772%" height="15" fill="rgb(248,164,17)" fg:x="270052" fg:w="1033"/><text x="98.8476%" y="207.50"></text></g><g><title>[libc.so.6] (135 samples, 0.05%)</title><rect x="98.9255%" y="181" width="0.0493%" height="15" fill="rgb(222,171,42)" fg:x="270950" fg:w="135"/><text x="99.1755%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (1,414 samples, 0.52%)</title><rect x="98.4603%" y="293" width="0.5163%" height="15" fill="rgb(243,84,45)" fg:x="269676" fg:w="1414"/><text x="98.7103%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (1,414 samples, 0.52%)</title><rect x="98.4603%" y="277" width="0.5163%" height="15" fill="rgb(252,49,23)" fg:x="269676" fg:w="1414"/><text x="98.7103%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,414 samples, 0.52%)</title><rect x="98.4603%" y="261" width="0.5163%" height="15" fill="rgb(215,19,7)" fg:x="269676" fg:w="1414"/><text x="98.7103%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (146 samples, 0.05%)</title><rect x="98.9766%" y="293" width="0.0533%" height="15" fill="rgb(238,81,41)" fg:x="271090" fg:w="146"/><text x="99.2266%" y="303.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for isize&gt;::from_str (838 samples, 0.31%)</title><rect x="99.0434%" y="277" width="0.3060%" height="15" fill="rgb(210,199,37)" fg:x="271273" fg:w="838"/><text x="99.2934%" y="287.50"></text></g><g><title>core::num::from_str_radix (703 samples, 0.26%)</title><rect x="99.0927%" y="261" width="0.2567%" height="15" fill="rgb(244,192,49)" fg:x="271408" fg:w="703"/><text x="99.3427%" y="271.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (596 samples, 0.22%)</title><rect x="99.3494%" y="277" width="0.2176%" height="15" fill="rgb(226,211,11)" fg:x="272111" fg:w="596"/><text x="99.5994%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,472 samples, 0.54%)</title><rect x="99.0299%" y="293" width="0.5374%" height="15" fill="rgb(236,162,54)" fg:x="271236" fg:w="1472"/><text x="99.2799%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (49 samples, 0.02%)</title><rect x="99.5673%" y="293" width="0.0179%" height="15" fill="rgb(220,229,9)" fg:x="272708" fg:w="49"/><text x="99.8173%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (74 samples, 0.03%)</title><rect x="99.8583%" y="277" width="0.0270%" height="15" fill="rgb(250,87,22)" fg:x="273505" fg:w="74"/><text x="100.1083%" y="287.50"></text></g><g><title>core::ptr::write (46 samples, 0.02%)</title><rect x="99.8686%" y="261" width="0.0168%" height="15" fill="rgb(239,43,17)" fg:x="273533" fg:w="46"/><text x="100.1186%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (904 samples, 0.33%)</title><rect x="99.5852%" y="293" width="0.3301%" height="15" fill="rgb(231,177,25)" fg:x="272757" fg:w="904"/><text x="99.8352%" y="303.50"></text></g><g><title>petgraph::graph_impl::index_twice (75 samples, 0.03%)</title><rect x="99.8879%" y="277" width="0.0274%" height="15" fill="rgb(219,179,1)" fg:x="273586" fg:w="75"/><text x="100.1379%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12,194 samples, 4.45%)</title><rect x="95.4636%" y="357" width="4.4521%" height="15" fill="rgb(238,219,53)" fg:x="261468" fg:w="12194"/><text x="95.7136%" y="367.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (12,194 samples, 4.45%)</title><rect x="95.4636%" y="341" width="4.4521%" height="15" fill="rgb(232,167,36)" fg:x="261468" fg:w="12194"/><text x="95.7136%" y="351.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (11,121 samples, 4.06%)</title><rect x="95.8553%" y="325" width="4.0603%" height="15" fill="rgb(244,19,51)" fg:x="262541" fg:w="11121"/><text x="96.1053%" y="335.50">core..</text></g><g><title>isera::parser::parsed_graph::_{{closure}} (11,121 samples, 4.06%)</title><rect x="95.8553%" y="309" width="4.0603%" height="15" fill="rgb(224,6,22)" fg:x="262541" fg:w="11121"/><text x="96.1053%" y="319.50">iser..</text></g><g><title>_start (272,144 samples, 99.36%)</title><rect x="0.5955%" y="517" width="99.3614%" height="15" fill="rgb(224,145,5)" fg:x="1631" fg:w="272144"/><text x="0.8455%" y="527.50">_start</text></g><g><title>__libc_start_main (272,144 samples, 99.36%)</title><rect x="0.5955%" y="501" width="99.3614%" height="15" fill="rgb(234,130,49)" fg:x="1631" fg:w="272144"/><text x="0.8455%" y="511.50">__libc_start_main</text></g><g><title>[libc.so.6] (272,144 samples, 99.36%)</title><rect x="0.5955%" y="485" width="99.3614%" height="15" fill="rgb(254,6,2)" fg:x="1631" fg:w="272144"/><text x="0.8455%" y="495.50">[libc.so.6]</text></g><g><title>main (272,144 samples, 99.36%)</title><rect x="0.5955%" y="469" width="99.3614%" height="15" fill="rgb(208,96,46)" fg:x="1631" fg:w="272144"/><text x="0.8455%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (272,144 samples, 99.36%)</title><rect x="0.5955%" y="453" width="99.3614%" height="15" fill="rgb(239,3,39)" fg:x="1631" fg:w="272144"/><text x="0.8455%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (272,144 samples, 99.36%)</title><rect x="0.5955%" y="437" width="99.3614%" height="15" fill="rgb(233,210,1)" fg:x="1631" fg:w="272144"/><text x="0.8455%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (272,144 samples, 99.36%)</title><rect x="0.5955%" y="421" width="99.3614%" height="15" fill="rgb(244,137,37)" fg:x="1631" fg:w="272144"/><text x="0.8455%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (272,144 samples, 99.36%)</title><rect x="0.5955%" y="405" width="99.3614%" height="15" fill="rgb(240,136,2)" fg:x="1631" fg:w="272144"/><text x="0.8455%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>isera::main (272,144 samples, 99.36%)</title><rect x="0.5955%" y="389" width="99.3614%" height="15" fill="rgb(239,18,37)" fg:x="1631" fg:w="272144"/><text x="0.8455%" y="399.50">isera::main</text></g><g><title>isera::parser::parsed_graph (12,307 samples, 4.49%)</title><rect x="95.4636%" y="373" width="4.4934%" height="15" fill="rgb(218,185,22)" fg:x="261468" fg:w="12307"/><text x="95.7136%" y="383.50">isera..</text></g><g><title>std::fs::read_to_string (113 samples, 0.04%)</title><rect x="99.9157%" y="357" width="0.0413%" height="15" fill="rgb(225,218,4)" fg:x="273662" fg:w="113"/><text x="100.1657%" y="367.50"></text></g><g><title>std::fs::read_to_string::inner (113 samples, 0.04%)</title><rect x="99.9157%" y="341" width="0.0413%" height="15" fill="rgb(230,182,32)" fg:x="273662" fg:w="113"/><text x="100.1657%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (113 samples, 0.04%)</title><rect x="99.9157%" y="325" width="0.0413%" height="15" fill="rgb(242,56,43)" fg:x="273662" fg:w="113"/><text x="100.1657%" y="335.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for isize&gt;::from_str (31 samples, 0.01%)</title><rect x="99.9664%" y="517" width="0.0113%" height="15" fill="rgb(233,99,24)" fg:x="273801" fg:w="31"/><text x="100.2164%" y="527.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (37 samples, 0.01%)</title><rect x="99.9777%" y="517" width="0.0135%" height="15" fill="rgb(234,209,42)" fg:x="273832" fg:w="37"/><text x="100.2277%" y="527.50"></text></g><g><title>all (273,893 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="273893"/><text x="0.2500%" y="559.50"></text></g><g><title>isera (273,893 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="273893"/><text x="0.2500%" y="543.50">isera</text></g></svg></svg>