<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="5596796"><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (837 samples, 0.01%)</title><rect x="0.0226%" y="357" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="1264" fg:w="837"/><text x="0.2726%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (837 samples, 0.01%)</title><rect x="0.0226%" y="341" width="0.0150%" height="15" fill="rgb(217,0,24)" fg:x="1264" fg:w="837"/><text x="0.2726%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (837 samples, 0.01%)</title><rect x="0.0226%" y="325" width="0.0150%" height="15" fill="rgb(221,193,54)" fg:x="1264" fg:w="837"/><text x="0.2726%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (837 samples, 0.01%)</title><rect x="0.0226%" y="309" width="0.0150%" height="15" fill="rgb(248,212,6)" fg:x="1264" fg:w="837"/><text x="0.2726%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (837 samples, 0.01%)</title><rect x="0.0226%" y="293" width="0.0150%" height="15" fill="rgb(208,68,35)" fg:x="1264" fg:w="837"/><text x="0.2726%" y="303.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (108,268 samples, 1.93%)</title><rect x="9.7380%" y="341" width="1.9345%" height="15" fill="rgb(232,128,0)" fg:x="545016" fg:w="108268"/><text x="9.9880%" y="351.50">&lt;..</text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (25,497 samples, 0.46%)</title><rect x="11.6725%" y="341" width="0.4556%" height="15" fill="rgb(207,160,47)" fg:x="653284" fg:w="25497"/><text x="11.9225%" y="351.50"></text></g><g><title>&lt;i64 as num_traits::sign::Signed&gt;::is_negative (4,257 samples, 0.08%)</title><rect x="12.1280%" y="341" width="0.0761%" height="15" fill="rgb(228,23,34)" fg:x="678781" fg:w="4257"/><text x="12.3780%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (40,357 samples, 0.72%)</title><rect x="12.2041%" y="341" width="0.7211%" height="15" fill="rgb(218,30,26)" fg:x="683038" fg:w="40357"/><text x="12.4541%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (7,473 samples, 0.13%)</title><rect x="12.9354%" y="309" width="0.1335%" height="15" fill="rgb(220,122,19)" fg:x="723969" fg:w="7473"/><text x="13.1854%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (7,473 samples, 0.13%)</title><rect x="12.9354%" y="293" width="0.1335%" height="15" fill="rgb(250,228,42)" fg:x="723969" fg:w="7473"/><text x="13.1854%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16,217 samples, 0.29%)</title><rect x="12.9252%" y="341" width="0.2898%" height="15" fill="rgb(240,193,28)" fg:x="723397" fg:w="16217"/><text x="13.1752%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16,217 samples, 0.29%)</title><rect x="12.9252%" y="325" width="0.2898%" height="15" fill="rgb(216,20,37)" fg:x="723397" fg:w="16217"/><text x="13.1752%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8,172 samples, 0.15%)</title><rect x="13.0689%" y="309" width="0.1460%" height="15" fill="rgb(206,188,39)" fg:x="731442" fg:w="8172"/><text x="13.3189%" y="319.50"></text></g><g><title>isera::_block_search_v1 (737,234 samples, 13.17%)</title><rect x="0.0427%" y="357" width="13.1724%" height="15" fill="rgb(217,207,13)" fg:x="2390" fg:w="737234"/><text x="0.2927%" y="367.50">isera::_block_search..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,965 samples, 0.05%)</title><rect x="14.7123%" y="341" width="0.0530%" height="15" fill="rgb(231,73,38)" fg:x="823415" fg:w="2965"/><text x="14.9623%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,965 samples, 0.05%)</title><rect x="14.7123%" y="325" width="0.0530%" height="15" fill="rgb(225,20,46)" fg:x="823415" fg:w="2965"/><text x="14.9623%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,965 samples, 0.05%)</title><rect x="14.7123%" y="309" width="0.0530%" height="15" fill="rgb(210,31,41)" fg:x="823415" fg:w="2965"/><text x="14.9623%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::arith::Sub&gt;::sub (8,578 samples, 0.15%)</title><rect x="14.7658%" y="341" width="0.1533%" height="15" fill="rgb(221,200,47)" fg:x="826412" fg:w="8578"/><text x="15.0158%" y="351.50"></text></g><g><title>isera::_compute_flowchange (97,960 samples, 1.75%)</title><rect x="13.2151%" y="357" width="1.7503%" height="15" fill="rgb(226,26,5)" fg:x="739624" fg:w="97960"/><text x="13.4651%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1,960 samples, 0.04%)</title><rect x="14.9304%" y="341" width="0.0350%" height="15" fill="rgb(249,33,26)" fg:x="835624" fg:w="1960"/><text x="15.1804%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,121 samples, 0.02%)</title><rect x="15.0285%" y="197" width="0.0200%" height="15" fill="rgb(235,183,28)" fg:x="841117" fg:w="1121"/><text x="15.2785%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3,994 samples, 0.07%)</title><rect x="14.9772%" y="277" width="0.0714%" height="15" fill="rgb(221,5,38)" fg:x="838245" fg:w="3994"/><text x="15.2272%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,994 samples, 0.07%)</title><rect x="14.9772%" y="261" width="0.0714%" height="15" fill="rgb(247,18,42)" fg:x="838245" fg:w="3994"/><text x="15.2272%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (1,135 samples, 0.02%)</title><rect x="15.0283%" y="245" width="0.0203%" height="15" fill="rgb(241,131,45)" fg:x="841104" fg:w="1135"/><text x="15.2783%" y="255.50"></text></g><g><title>isera::initialization::_{{closure}}::_{{closure}} (1,135 samples, 0.02%)</title><rect x="15.0283%" y="229" width="0.0203%" height="15" fill="rgb(249,31,29)" fg:x="841104" fg:w="1135"/><text x="15.2783%" y="239.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_weight (1,122 samples, 0.02%)</title><rect x="15.0285%" y="213" width="0.0200%" height="15" fill="rgb(225,111,53)" fg:x="841117" fg:w="1122"/><text x="15.2785%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4,638 samples, 0.08%)</title><rect x="14.9659%" y="341" width="0.0829%" height="15" fill="rgb(238,160,17)" fg:x="837612" fg:w="4638"/><text x="15.2159%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4,638 samples, 0.08%)</title><rect x="14.9659%" y="325" width="0.0829%" height="15" fill="rgb(214,148,48)" fg:x="837612" fg:w="4638"/><text x="15.2159%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4,589 samples, 0.08%)</title><rect x="14.9668%" y="309" width="0.0820%" height="15" fill="rgb(232,36,49)" fg:x="837661" fg:w="4589"/><text x="15.2168%" y="319.50"></text></g><g><title>isera::initialization::_{{closure}} (4,589 samples, 0.08%)</title><rect x="14.9668%" y="293" width="0.0820%" height="15" fill="rgb(209,103,24)" fg:x="837661" fg:w="4589"/><text x="15.2168%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (8,059 samples, 0.14%)</title><rect x="15.0761%" y="213" width="0.1440%" height="15" fill="rgb(229,88,8)" fg:x="843780" fg:w="8059"/><text x="15.3261%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (8,059 samples, 0.14%)</title><rect x="15.0761%" y="197" width="0.1440%" height="15" fill="rgb(213,181,19)" fg:x="843780" fg:w="8059"/><text x="15.3261%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (9,449 samples, 0.17%)</title><rect x="15.0513%" y="229" width="0.1688%" height="15" fill="rgb(254,191,54)" fg:x="842391" fg:w="9449"/><text x="15.3013%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9,514 samples, 0.17%)</title><rect x="15.0505%" y="325" width="0.1700%" height="15" fill="rgb(241,83,37)" fg:x="842343" fg:w="9514"/><text x="15.3005%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,514 samples, 0.17%)</title><rect x="15.0505%" y="309" width="0.1700%" height="15" fill="rgb(233,36,39)" fg:x="842343" fg:w="9514"/><text x="15.3005%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,514 samples, 0.17%)</title><rect x="15.0505%" y="293" width="0.1700%" height="15" fill="rgb(226,3,54)" fg:x="842343" fg:w="9514"/><text x="15.3005%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9,510 samples, 0.17%)</title><rect x="15.0505%" y="277" width="0.1699%" height="15" fill="rgb(245,192,40)" fg:x="842347" fg:w="9510"/><text x="15.3005%" y="287.50"></text></g><g><title>isera::compute_node_potentials::_{{closure}} (9,510 samples, 0.17%)</title><rect x="15.0505%" y="261" width="0.1699%" height="15" fill="rgb(238,167,29)" fg:x="842347" fg:w="9510"/><text x="15.3005%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (9,503 samples, 0.17%)</title><rect x="15.0506%" y="245" width="0.1698%" height="15" fill="rgb(232,182,51)" fg:x="842354" fg:w="9503"/><text x="15.3006%" y="255.50"></text></g><g><title>isera::compute_node_potentials (9,863 samples, 0.18%)</title><rect x="15.0488%" y="341" width="0.1762%" height="15" fill="rgb(231,60,39)" fg:x="842250" fg:w="9863"/><text x="15.2988%" y="351.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (8,430 samples, 0.15%)</title><rect x="15.2491%" y="309" width="0.1506%" height="15" fill="rgb(208,69,12)" fg:x="853463" fg:w="8430"/><text x="15.4991%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (8,430 samples, 0.15%)</title><rect x="15.2491%" y="293" width="0.1506%" height="15" fill="rgb(235,93,37)" fg:x="853463" fg:w="8430"/><text x="15.4991%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (9,737 samples, 0.17%)</title><rect x="15.2259%" y="325" width="0.1740%" height="15" fill="rgb(213,116,39)" fg:x="852163" fg:w="9737"/><text x="15.4759%" y="335.50"></text></g><g><title>isera::initialization (24,337 samples, 0.43%)</title><rect x="14.9654%" y="357" width="0.4348%" height="15" fill="rgb(222,207,29)" fg:x="837584" fg:w="24337"/><text x="15.2154%" y="367.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (9,765 samples, 0.17%)</title><rect x="15.2258%" y="341" width="0.1745%" height="15" fill="rgb(206,96,30)" fg:x="852156" fg:w="9765"/><text x="15.4758%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,929 samples, 0.07%)</title><rect x="38.8194%" y="341" width="0.0702%" height="15" fill="rgb(218,138,4)" fg:x="2172645" fg:w="3929"/><text x="39.0694%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,929 samples, 0.07%)</title><rect x="38.8194%" y="325" width="0.0702%" height="15" fill="rgb(250,191,14)" fg:x="2172645" fg:w="3929"/><text x="39.0694%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,929 samples, 0.07%)</title><rect x="38.8194%" y="309" width="0.0702%" height="15" fill="rgb(239,60,40)" fg:x="2172645" fg:w="3929"/><text x="39.0694%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (306,410 samples, 5.47%)</title><rect x="38.8918%" y="341" width="5.4747%" height="15" fill="rgb(206,27,48)" fg:x="2176696" fg:w="306410"/><text x="39.1418%" y="351.50">&lt;i64 as..</text></g><g><title>isera::update_node_potentials (1,621,386 samples, 28.97%)</title><rect x="15.4003%" y="357" width="28.9699%" height="15" fill="rgb(225,35,8)" fg:x="861921" fg:w="1621386"/><text x="15.6503%" y="367.50">isera::update_node_potentials</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11,119 samples, 0.20%)</title><rect x="70.8069%" y="341" width="0.1987%" height="15" fill="rgb(250,213,24)" fg:x="3962916" fg:w="11119"/><text x="71.0569%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11,119 samples, 0.20%)</title><rect x="70.8069%" y="325" width="0.1987%" height="15" fill="rgb(247,123,22)" fg:x="3962916" fg:w="11119"/><text x="71.0569%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11,119 samples, 0.20%)</title><rect x="70.8069%" y="309" width="0.1987%" height="15" fill="rgb(231,138,38)" fg:x="3962916" fg:w="11119"/><text x="71.0569%" y="319.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (996 samples, 0.02%)</title><rect x="92.9431%" y="293" width="0.0178%" height="15" fill="rgb(231,145,46)" fg:x="5201833" fg:w="996"/><text x="93.1931%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1,229,454 samples, 21.97%)</title><rect x="71.0058%" y="341" width="21.9671%" height="15" fill="rgb(251,118,11)" fg:x="3974047" fg:w="1229454"/><text x="71.2558%" y="351.50">&lt;core::iter::adapters::take::Take&lt;I..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (1,229,454 samples, 21.97%)</title><rect x="71.0058%" y="325" width="21.9671%" height="15" fill="rgb(217,147,25)" fg:x="3974047" fg:w="1229454"/><text x="71.2558%" y="335.50">&lt;core::iter::adapters::take::Take&lt;I..</text></g><g><title>isera::update_sptree::_{{closure}} (1,229,447 samples, 21.97%)</title><rect x="71.0059%" y="309" width="21.9670%" height="15" fill="rgb(247,81,37)" fg:x="3974054" fg:w="1229447"/><text x="71.2559%" y="319.50">isera::update_sptree::_{{closure}}</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,619 samples, 0.03%)</title><rect x="93.0777%" y="325" width="0.0289%" height="15" fill="rgb(209,12,38)" fg:x="5209369" fg:w="1619"/><text x="93.3277%" y="335.50"></text></g><g><title>&lt;&amp;usize as core::ops::arith::Add&lt;usize&gt;&gt;::add (13,357 samples, 0.24%)</title><rect x="93.2584%" y="309" width="0.2387%" height="15" fill="rgb(227,1,9)" fg:x="5219481" fg:w="13357"/><text x="93.5084%" y="319.50"></text></g><g><title>&lt;usize as core::ops::arith::Add&gt;::add (1,747 samples, 0.03%)</title><rect x="93.4658%" y="293" width="0.0312%" height="15" fill="rgb(248,47,43)" fg:x="5231091" fg:w="1747"/><text x="93.7158%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (333,576 samples, 5.96%)</title><rect x="93.4983%" y="309" width="5.9601%" height="15" fill="rgb(221,10,30)" fg:x="5232909" fg:w="333576"/><text x="93.7483%" y="319.50">core::op..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (366,612 samples, 6.55%)</title><rect x="92.9737%" y="341" width="6.5504%" height="15" fill="rgb(210,229,1)" fg:x="5203547" fg:w="366612"/><text x="93.2237%" y="351.50">&lt;core::sl..</text></g><g><title>isera::update_sptree::_{{closure}} (359,171 samples, 6.42%)</title><rect x="93.1066%" y="325" width="6.4174%" height="15" fill="rgb(222,148,37)" fg:x="5210988" fg:w="359171"/><text x="93.3566%" y="335.50">isera::u..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3,674 samples, 0.07%)</title><rect x="99.4584%" y="309" width="0.0656%" height="15" fill="rgb(234,67,33)" fg:x="5566485" fg:w="3674"/><text x="99.7084%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,674 samples, 0.07%)</title><rect x="99.4584%" y="293" width="0.0656%" height="15" fill="rgb(247,98,35)" fg:x="5566485" fg:w="3674"/><text x="99.7084%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3,674 samples, 0.07%)</title><rect x="99.4584%" y="277" width="0.0656%" height="15" fill="rgb(247,138,52)" fg:x="5566485" fg:w="3674"/><text x="99.7084%" y="287.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (4,960 samples, 0.09%)</title><rect x="99.5241%" y="341" width="0.0886%" height="15" fill="rgb(213,79,30)" fg:x="5570159" fg:w="4960"/><text x="99.7741%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,976 samples, 0.04%)</title><rect x="99.7067%" y="277" width="0.0353%" height="15" fill="rgb(246,177,23)" fg:x="5580382" fg:w="1976"/><text x="99.9567%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,976 samples, 0.04%)</title><rect x="99.7067%" y="261" width="0.0353%" height="15" fill="rgb(230,62,27)" fg:x="5580382" fg:w="1976"/><text x="99.9567%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1,975 samples, 0.04%)</title><rect x="99.7067%" y="245" width="0.0353%" height="15" fill="rgb(216,154,8)" fg:x="5580383" fg:w="1975"/><text x="99.9567%" y="255.50"></text></g><g><title>realloc (1,913 samples, 0.03%)</title><rect x="99.7079%" y="229" width="0.0342%" height="15" fill="rgb(244,35,45)" fg:x="5580445" fg:w="1913"/><text x="99.9579%" y="239.50"></text></g><g><title>[libc.so.6] (1,563 samples, 0.03%)</title><rect x="99.7141%" y="213" width="0.0279%" height="15" fill="rgb(251,115,12)" fg:x="5580795" fg:w="1563"/><text x="99.9641%" y="223.50"></text></g><g><title>[libc.so.6] (1,450 samples, 0.03%)</title><rect x="99.7161%" y="197" width="0.0259%" height="15" fill="rgb(240,54,50)" fg:x="5580908" fg:w="1450"/><text x="99.9661%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,150 samples, 0.04%)</title><rect x="99.7062%" y="293" width="0.0384%" height="15" fill="rgb(233,84,52)" fg:x="5580354" fg:w="2150"/><text x="99.9562%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,192 samples, 0.04%)</title><rect x="99.7058%" y="325" width="0.0392%" height="15" fill="rgb(207,117,47)" fg:x="5580329" fg:w="2192"/><text x="99.9558%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,192 samples, 0.04%)</title><rect x="99.7058%" y="309" width="0.0392%" height="15" fill="rgb(249,43,39)" fg:x="5580329" fg:w="2192"/><text x="99.9558%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,846 samples, 0.14%)</title><rect x="99.6138%" y="341" width="0.1402%" height="15" fill="rgb(209,38,44)" fg:x="5575182" fg:w="7846"/><text x="99.8638%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,704 samples, 0.03%)</title><rect x="99.7613%" y="261" width="0.0304%" height="15" fill="rgb(236,212,23)" fg:x="5583437" fg:w="1704"/><text x="100.0113%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,704 samples, 0.03%)</title><rect x="99.7613%" y="245" width="0.0304%" height="15" fill="rgb(242,79,21)" fg:x="5583437" fg:w="1704"/><text x="100.0113%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1,704 samples, 0.03%)</title><rect x="99.7613%" y="229" width="0.0304%" height="15" fill="rgb(211,96,35)" fg:x="5583437" fg:w="1704"/><text x="100.0113%" y="239.50"></text></g><g><title>malloc (1,588 samples, 0.03%)</title><rect x="99.7634%" y="213" width="0.0284%" height="15" fill="rgb(253,215,40)" fg:x="5583553" fg:w="1588"/><text x="100.0134%" y="223.50"></text></g><g><title>alloc::vec::from_elem (2,071 samples, 0.04%)</title><rect x="99.7548%" y="341" width="0.0370%" height="15" fill="rgb(211,81,21)" fg:x="5583075" fg:w="2071"/><text x="100.0048%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,071 samples, 0.04%)</title><rect x="99.7548%" y="325" width="0.0370%" height="15" fill="rgb(208,190,38)" fg:x="5583075" fg:w="2071"/><text x="100.0048%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,717 samples, 0.03%)</title><rect x="99.7612%" y="309" width="0.0307%" height="15" fill="rgb(235,213,38)" fg:x="5583429" fg:w="1717"/><text x="100.0112%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,717 samples, 0.03%)</title><rect x="99.7612%" y="293" width="0.0307%" height="15" fill="rgb(237,122,38)" fg:x="5583429" fg:w="1717"/><text x="100.0112%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,717 samples, 0.03%)</title><rect x="99.7612%" y="277" width="0.0307%" height="15" fill="rgb(244,218,35)" fg:x="5583429" fg:w="1717"/><text x="100.0112%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (759 samples, 0.01%)</title><rect x="99.8027%" y="309" width="0.0136%" height="15" fill="rgb(240,68,47)" fg:x="5585754" fg:w="759"/><text x="100.0527%" y="319.50"></text></g><g><title>isera::update_sptree::_{{closure}} (759 samples, 0.01%)</title><rect x="99.8027%" y="293" width="0.0136%" height="15" fill="rgb(210,16,53)" fg:x="5585754" fg:w="759"/><text x="100.0527%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,217 samples, 0.02%)</title><rect x="99.7985%" y="341" width="0.0217%" height="15" fill="rgb(235,124,12)" fg:x="5585518" fg:w="1217"/><text x="100.0485%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,019 samples, 0.02%)</title><rect x="99.8020%" y="325" width="0.0182%" height="15" fill="rgb(224,169,11)" fg:x="5585716" fg:w="1019"/><text x="100.0520%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (805 samples, 0.01%)</title><rect x="99.8223%" y="293" width="0.0144%" height="15" fill="rgb(250,166,2)" fg:x="5586848" fg:w="805"/><text x="100.0723%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (805 samples, 0.01%)</title><rect x="99.8223%" y="277" width="0.0144%" height="15" fill="rgb(242,216,29)" fg:x="5586848" fg:w="805"/><text x="100.0723%" y="287.50"></text></g><g><title>cfree (766 samples, 0.01%)</title><rect x="99.8230%" y="261" width="0.0137%" height="15" fill="rgb(230,116,27)" fg:x="5586887" fg:w="766"/><text x="100.0730%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (824 samples, 0.01%)</title><rect x="99.8220%" y="341" width="0.0147%" height="15" fill="rgb(228,99,48)" fg:x="5586834" fg:w="824"/><text x="100.0720%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (824 samples, 0.01%)</title><rect x="99.8220%" y="325" width="0.0147%" height="15" fill="rgb(253,11,6)" fg:x="5586834" fg:w="824"/><text x="100.0720%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (824 samples, 0.01%)</title><rect x="99.8220%" y="309" width="0.0147%" height="15" fill="rgb(247,143,39)" fg:x="5586834" fg:w="824"/><text x="100.0720%" y="319.50"></text></g><g><title>isera::min_cost (5,586,542 samples, 99.82%)</title><rect x="0.0209%" y="373" width="99.8168%" height="15" fill="rgb(236,97,10)" fg:x="1168" fg:w="5586542"/><text x="0.2709%" y="383.50">isera::min_cost</text></g><g><title>isera::update_sptree (3,104,403 samples, 55.47%)</title><rect x="44.3702%" y="357" width="55.4675%" height="15" fill="rgb(233,208,19)" fg:x="2483307" fg:w="3104403"/><text x="44.6202%" y="367.50">isera::update_sptree</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,015 samples, 0.02%)</title><rect x="99.8583%" y="165" width="0.0181%" height="15" fill="rgb(216,164,2)" fg:x="5588865" fg:w="1015"/><text x="100.1083%" y="175.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,196 samples, 0.02%)</title><rect x="99.8557%" y="197" width="0.0214%" height="15" fill="rgb(220,129,5)" fg:x="5588720" fg:w="1196"/><text x="100.1057%" y="207.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1,180 samples, 0.02%)</title><rect x="99.8560%" y="181" width="0.0211%" height="15" fill="rgb(242,17,10)" fg:x="5588736" fg:w="1180"/><text x="100.1060%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,283 samples, 0.02%)</title><rect x="99.8797%" y="117" width="0.0229%" height="15" fill="rgb(242,107,0)" fg:x="5590064" fg:w="1283"/><text x="100.1297%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,283 samples, 0.02%)</title><rect x="99.8797%" y="101" width="0.0229%" height="15" fill="rgb(251,28,31)" fg:x="5590064" fg:w="1283"/><text x="100.1297%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1,277 samples, 0.02%)</title><rect x="99.8798%" y="85" width="0.0228%" height="15" fill="rgb(233,223,10)" fg:x="5590070" fg:w="1277"/><text x="100.1298%" y="95.50"></text></g><g><title>realloc (1,193 samples, 0.02%)</title><rect x="99.8813%" y="69" width="0.0213%" height="15" fill="rgb(215,21,27)" fg:x="5590154" fg:w="1193"/><text x="100.1313%" y="79.50"></text></g><g><title>[libc.so.6] (962 samples, 0.02%)</title><rect x="99.8855%" y="53" width="0.0172%" height="15" fill="rgb(232,23,21)" fg:x="5590385" fg:w="962"/><text x="100.1355%" y="63.50"></text></g><g><title>[libc.so.6] (683 samples, 0.01%)</title><rect x="99.8904%" y="37" width="0.0122%" height="15" fill="rgb(244,5,23)" fg:x="5590664" fg:w="683"/><text x="100.1404%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,320 samples, 0.02%)</title><rect x="99.8796%" y="133" width="0.0236%" height="15" fill="rgb(226,81,46)" fg:x="5590056" fg:w="1320"/><text x="100.1296%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,473 samples, 0.03%)</title><rect x="99.8777%" y="197" width="0.0263%" height="15" fill="rgb(247,70,30)" fg:x="5589949" fg:w="1473"/><text x="100.1277%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,473 samples, 0.03%)</title><rect x="99.8777%" y="181" width="0.0263%" height="15" fill="rgb(212,68,19)" fg:x="5589949" fg:w="1473"/><text x="100.1277%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,465 samples, 0.03%)</title><rect x="99.8778%" y="165" width="0.0262%" height="15" fill="rgb(240,187,13)" fg:x="5589957" fg:w="1465"/><text x="100.1278%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,465 samples, 0.03%)</title><rect x="99.8778%" y="149" width="0.0262%" height="15" fill="rgb(223,113,26)" fg:x="5589957" fg:w="1465"/><text x="100.1278%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,103 samples, 0.06%)</title><rect x="99.8535%" y="229" width="0.0554%" height="15" fill="rgb(206,192,2)" fg:x="5588597" fg:w="3103"/><text x="100.1035%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,103 samples, 0.06%)</title><rect x="99.8535%" y="213" width="0.0554%" height="15" fill="rgb(241,108,4)" fg:x="5588597" fg:w="3103"/><text x="100.1035%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,683 samples, 0.07%)</title><rect x="99.8516%" y="293" width="0.0658%" height="15" fill="rgb(247,173,49)" fg:x="5588490" fg:w="3683"/><text x="100.1016%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,683 samples, 0.07%)</title><rect x="99.8516%" y="277" width="0.0658%" height="15" fill="rgb(224,114,35)" fg:x="5588490" fg:w="3683"/><text x="100.1016%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,681 samples, 0.07%)</title><rect x="99.8516%" y="261" width="0.0658%" height="15" fill="rgb(245,159,27)" fg:x="5588492" fg:w="3681"/><text x="100.1016%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,668 samples, 0.07%)</title><rect x="99.8519%" y="245" width="0.0655%" height="15" fill="rgb(245,172,44)" fg:x="5588505" fg:w="3668"/><text x="100.1019%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (907 samples, 0.02%)</title><rect x="99.9183%" y="245" width="0.0162%" height="15" fill="rgb(236,23,11)" fg:x="5592223" fg:w="907"/><text x="100.1683%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (907 samples, 0.02%)</title><rect x="99.9183%" y="229" width="0.0162%" height="15" fill="rgb(205,117,38)" fg:x="5592223" fg:w="907"/><text x="100.1683%" y="239.50"></text></g><g><title>cfree (864 samples, 0.02%)</title><rect x="99.9191%" y="213" width="0.0154%" height="15" fill="rgb(237,72,25)" fg:x="5592266" fg:w="864"/><text x="100.1691%" y="223.50"></text></g><g><title>[libc.so.6] (689 samples, 0.01%)</title><rect x="99.9222%" y="197" width="0.0123%" height="15" fill="rgb(244,70,9)" fg:x="5592441" fg:w="689"/><text x="100.1722%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (923 samples, 0.02%)</title><rect x="99.9182%" y="293" width="0.0165%" height="15" fill="rgb(217,125,39)" fg:x="5592216" fg:w="923"/><text x="100.1682%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (923 samples, 0.02%)</title><rect x="99.9182%" y="277" width="0.0165%" height="15" fill="rgb(235,36,10)" fg:x="5592216" fg:w="923"/><text x="100.1682%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (923 samples, 0.02%)</title><rect x="99.9182%" y="261" width="0.0165%" height="15" fill="rgb(251,123,47)" fg:x="5592216" fg:w="923"/><text x="100.1682%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (772 samples, 0.01%)</title><rect x="99.9356%" y="293" width="0.0138%" height="15" fill="rgb(221,13,13)" fg:x="5593192" fg:w="772"/><text x="100.1856%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2,612 samples, 0.05%)</title><rect x="99.9502%" y="293" width="0.0467%" height="15" fill="rgb(238,131,9)" fg:x="5594007" fg:w="2612"/><text x="100.2002%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,921 samples, 0.16%)</title><rect x="99.8377%" y="357" width="0.1594%" height="15" fill="rgb(211,50,8)" fg:x="5587710" fg:w="8921"/><text x="100.0877%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,921 samples, 0.16%)</title><rect x="99.8377%" y="341" width="0.1594%" height="15" fill="rgb(245,182,24)" fg:x="5587710" fg:w="8921"/><text x="100.0877%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8,475 samples, 0.15%)</title><rect x="99.8456%" y="325" width="0.1514%" height="15" fill="rgb(242,14,37)" fg:x="5588156" fg:w="8475"/><text x="100.0956%" y="335.50"></text></g><g><title>isera::parser::parsed_graph::_{{closure}} (8,475 samples, 0.15%)</title><rect x="99.8456%" y="309" width="0.1514%" height="15" fill="rgb(246,228,12)" fg:x="5588156" fg:w="8475"/><text x="100.0956%" y="319.50"></text></g><g><title>_start (5,595,528 samples, 99.98%)</title><rect x="0.0209%" y="517" width="99.9773%" height="15" fill="rgb(213,55,15)" fg:x="1167" fg:w="5595528"/><text x="0.2709%" y="527.50">_start</text></g><g><title>__libc_start_main (5,595,528 samples, 99.98%)</title><rect x="0.0209%" y="501" width="99.9773%" height="15" fill="rgb(209,9,3)" fg:x="1167" fg:w="5595528"/><text x="0.2709%" y="511.50">__libc_start_main</text></g><g><title>[libc.so.6] (5,595,528 samples, 99.98%)</title><rect x="0.0209%" y="485" width="99.9773%" height="15" fill="rgb(230,59,30)" fg:x="1167" fg:w="5595528"/><text x="0.2709%" y="495.50">[libc.so.6]</text></g><g><title>main (5,595,528 samples, 99.98%)</title><rect x="0.0209%" y="469" width="99.9773%" height="15" fill="rgb(209,121,21)" fg:x="1167" fg:w="5595528"/><text x="0.2709%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (5,595,528 samples, 99.98%)</title><rect x="0.0209%" y="453" width="99.9773%" height="15" fill="rgb(220,109,13)" fg:x="1167" fg:w="5595528"/><text x="0.2709%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (5,595,527 samples, 99.98%)</title><rect x="0.0209%" y="437" width="99.9773%" height="15" fill="rgb(232,18,1)" fg:x="1168" fg:w="5595527"/><text x="0.2709%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,595,527 samples, 99.98%)</title><rect x="0.0209%" y="421" width="99.9773%" height="15" fill="rgb(215,41,42)" fg:x="1168" fg:w="5595527"/><text x="0.2709%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,595,527 samples, 99.98%)</title><rect x="0.0209%" y="405" width="99.9773%" height="15" fill="rgb(224,123,36)" fg:x="1168" fg:w="5595527"/><text x="0.2709%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>isera::main (5,595,527 samples, 99.98%)</title><rect x="0.0209%" y="389" width="99.9773%" height="15" fill="rgb(240,125,3)" fg:x="1168" fg:w="5595527"/><text x="0.2709%" y="399.50">isera::main</text></g><g><title>isera::parser::parsed_graph (8,985 samples, 0.16%)</title><rect x="99.8377%" y="373" width="0.1605%" height="15" fill="rgb(205,98,50)" fg:x="5587710" fg:w="8985"/><text x="100.0877%" y="383.50"></text></g><g><title>all (5,596,796 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="5596796"/><text x="0.2500%" y="559.50"></text></g><g><title>isera (5,596,796 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="5596796"/><text x="0.2500%" y="543.50">isera</text></g></svg></svg>