<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="3055"><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.13%)</title><rect x="0.0000%" y="501" width="0.1309%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.1309%" y="485" width="0.0327%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.3809%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="0.1637%" y="485" width="0.0327%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.4137%" y="495.50"></text></g><g><title>[[heap]] (82 samples, 2.68%)</title><rect x="0.1309%" y="501" width="2.6841%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="82"/><text x="0.3809%" y="511.50">[[..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (80 samples, 2.62%)</title><rect x="0.1964%" y="485" width="2.6187%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="80"/><text x="0.4464%" y="495.50">co..</text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="2.8151%" y="485" width="0.0327%" height="15" fill="rgb(232,128,0)" fg:x="86" fg:w="1"/><text x="3.0651%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="2.8478%" y="485" width="0.0327%" height="15" fill="rgb(207,160,47)" fg:x="87" fg:w="1"/><text x="3.0978%" y="495.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="2.8805%" y="485" width="0.0327%" height="15" fill="rgb(228,23,34)" fg:x="88" fg:w="1"/><text x="3.1305%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="2.9133%" y="485" width="0.0327%" height="15" fill="rgb(218,30,26)" fg:x="89" fg:w="1"/><text x="3.1633%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (60 samples, 1.96%)</title><rect x="2.9460%" y="485" width="1.9640%" height="15" fill="rgb(220,122,19)" fg:x="90" fg:w="60"/><text x="3.1960%" y="495.50">c..</text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="4.9100%" y="485" width="0.0655%" height="15" fill="rgb(250,228,42)" fg:x="150" fg:w="2"/><text x="5.1600%" y="495.50"></text></g><g><title>[[stack]] (67 samples, 2.19%)</title><rect x="2.8151%" y="501" width="2.1931%" height="15" fill="rgb(240,193,28)" fg:x="86" fg:w="67"/><text x="3.0651%" y="511.50">[..</text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="4.9755%" y="485" width="0.0327%" height="15" fill="rgb(216,20,37)" fg:x="152" fg:w="1"/><text x="5.2255%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.26%)</title><rect x="5.0082%" y="501" width="0.2619%" height="15" fill="rgb(206,188,39)" fg:x="153" fg:w="8"/><text x="5.2582%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.07%)</title><rect x="5.2046%" y="485" width="0.0655%" height="15" fill="rgb(217,207,13)" fg:x="159" fg:w="2"/><text x="5.4546%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.07%)</title><rect x="5.2046%" y="469" width="0.0655%" height="15" fill="rgb(231,73,38)" fg:x="159" fg:w="2"/><text x="5.4546%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.07%)</title><rect x="5.2046%" y="453" width="0.0655%" height="15" fill="rgb(225,20,46)" fg:x="159" fg:w="2"/><text x="5.4546%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.07%)</title><rect x="5.2046%" y="437" width="0.0655%" height="15" fill="rgb(210,31,41)" fg:x="159" fg:w="2"/><text x="5.4546%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67 samples, 2.19%)</title><rect x="5.2700%" y="485" width="2.1931%" height="15" fill="rgb(221,200,47)" fg:x="161" fg:w="67"/><text x="5.5200%" y="495.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 2.16%)</title><rect x="5.3028%" y="469" width="2.1604%" height="15" fill="rgb(226,26,5)" fg:x="162" fg:w="66"/><text x="5.5528%" y="479.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (66 samples, 2.16%)</title><rect x="5.3028%" y="453" width="2.1604%" height="15" fill="rgb(249,33,26)" fg:x="162" fg:w="66"/><text x="5.5528%" y="463.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (66 samples, 2.16%)</title><rect x="5.3028%" y="437" width="2.1604%" height="15" fill="rgb(235,183,28)" fg:x="162" fg:w="66"/><text x="5.5528%" y="447.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (66 samples, 2.16%)</title><rect x="5.3028%" y="421" width="2.1604%" height="15" fill="rgb(221,5,38)" fg:x="162" fg:w="66"/><text x="5.5528%" y="431.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (66 samples, 2.16%)</title><rect x="5.3028%" y="405" width="2.1604%" height="15" fill="rgb(247,18,42)" fg:x="162" fg:w="66"/><text x="5.5528%" y="415.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (66 samples, 2.16%)</title><rect x="5.3028%" y="389" width="2.1604%" height="15" fill="rgb(241,131,45)" fg:x="162" fg:w="66"/><text x="5.5528%" y="399.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (66 samples, 2.16%)</title><rect x="5.3028%" y="373" width="2.1604%" height="15" fill="rgb(249,31,29)" fg:x="162" fg:w="66"/><text x="5.5528%" y="383.50">c..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (66 samples, 2.16%)</title><rect x="5.3028%" y="357" width="2.1604%" height="15" fill="rgb(225,111,53)" fg:x="162" fg:w="66"/><text x="5.5528%" y="367.50">&lt;..</text></g><g><title>[libc.so.6] (8 samples, 0.26%)</title><rect x="7.4632%" y="485" width="0.2619%" height="15" fill="rgb(238,160,17)" fg:x="228" fg:w="8"/><text x="7.7132%" y="495.50"></text></g><g><title>__rdl_realloc (2 samples, 0.07%)</title><rect x="7.7250%" y="485" width="0.0655%" height="15" fill="rgb(214,148,48)" fg:x="236" fg:w="2"/><text x="7.9750%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="7.7905%" y="485" width="0.0327%" height="15" fill="rgb(232,36,49)" fg:x="238" fg:w="1"/><text x="8.0405%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="7.7905%" y="469" width="0.0327%" height="15" fill="rgb(209,103,24)" fg:x="238" fg:w="1"/><text x="8.0405%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="7.7905%" y="453" width="0.0327%" height="15" fill="rgb(229,88,8)" fg:x="238" fg:w="1"/><text x="8.0405%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="7.7905%" y="437" width="0.0327%" height="15" fill="rgb(213,181,19)" fg:x="238" fg:w="1"/><text x="8.0405%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="7.8232%" y="485" width="0.0327%" height="15" fill="rgb(254,191,54)" fg:x="239" fg:w="1"/><text x="8.0732%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="7.8232%" y="469" width="0.0327%" height="15" fill="rgb(241,83,37)" fg:x="239" fg:w="1"/><text x="8.0732%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="7.8232%" y="453" width="0.0327%" height="15" fill="rgb(233,36,39)" fg:x="239" fg:w="1"/><text x="8.0732%" y="463.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="7.8232%" y="437" width="0.0327%" height="15" fill="rgb(226,3,54)" fg:x="239" fg:w="1"/><text x="8.0732%" y="447.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="7.8560%" y="485" width="0.0327%" height="15" fill="rgb(245,192,40)" fg:x="240" fg:w="1"/><text x="8.1060%" y="495.50"></text></g><g><title>[unknown] (81 samples, 2.65%)</title><rect x="5.2700%" y="501" width="2.6514%" height="15" fill="rgb(238,167,29)" fg:x="161" fg:w="81"/><text x="5.5200%" y="511.50">[u..</text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="7.8887%" y="485" width="0.0327%" height="15" fill="rgb(232,182,51)" fg:x="241" fg:w="1"/><text x="8.1387%" y="495.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="7.9869%" y="261" width="0.0327%" height="15" fill="rgb(231,60,39)" fg:x="244" fg:w="1"/><text x="8.2369%" y="271.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="7.9869%" y="245" width="0.0327%" height="15" fill="rgb(208,69,12)" fg:x="244" fg:w="1"/><text x="8.2369%" y="255.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="7.9869%" y="341" width="0.0655%" height="15" fill="rgb(235,93,37)" fg:x="244" fg:w="2"/><text x="8.2369%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="7.9869%" y="325" width="0.0655%" height="15" fill="rgb(213,116,39)" fg:x="244" fg:w="2"/><text x="8.2369%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="7.9869%" y="309" width="0.0655%" height="15" fill="rgb(222,207,29)" fg:x="244" fg:w="2"/><text x="8.2369%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="7.9869%" y="293" width="0.0655%" height="15" fill="rgb(206,96,30)" fg:x="244" fg:w="2"/><text x="8.2369%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="7.9869%" y="277" width="0.0655%" height="15" fill="rgb(218,138,4)" fg:x="244" fg:w="2"/><text x="8.2369%" y="287.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.03%)</title><rect x="8.0196%" y="261" width="0.0327%" height="15" fill="rgb(250,191,14)" fg:x="245" fg:w="1"/><text x="8.2696%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="8.0524%" y="341" width="0.0655%" height="15" fill="rgb(239,60,40)" fg:x="246" fg:w="2"/><text x="8.3024%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.07%)</title><rect x="8.0524%" y="325" width="0.0655%" height="15" fill="rgb(206,27,48)" fg:x="246" fg:w="2"/><text x="8.3024%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.07%)</title><rect x="8.0524%" y="309" width="0.0655%" height="15" fill="rgb(225,35,8)" fg:x="246" fg:w="2"/><text x="8.3024%" y="319.50"></text></g><g><title>main::min_cost::_{{closure}} (2 samples, 0.07%)</title><rect x="8.0524%" y="293" width="0.0655%" height="15" fill="rgb(250,213,24)" fg:x="246" fg:w="2"/><text x="8.3024%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (4 samples, 0.13%)</title><rect x="14.9918%" y="85" width="0.1309%" height="15" fill="rgb(247,123,22)" fg:x="458" fg:w="4"/><text x="15.2418%" y="95.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.13%)</title><rect x="14.9918%" y="69" width="0.1309%" height="15" fill="rgb(231,138,38)" fg:x="458" fg:w="4"/><text x="15.2418%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="15.1882%" y="69" width="0.0327%" height="15" fill="rgb(231,145,46)" fg:x="464" fg:w="1"/><text x="15.4382%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="15.1882%" y="53" width="0.0327%" height="15" fill="rgb(251,118,11)" fg:x="464" fg:w="1"/><text x="15.4382%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="15.1882%" y="37" width="0.0327%" height="15" fill="rgb(217,147,25)" fg:x="464" fg:w="1"/><text x="15.4382%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (8 samples, 0.26%)</title><rect x="14.9918%" y="149" width="0.2619%" height="15" fill="rgb(247,81,37)" fg:x="458" fg:w="8"/><text x="15.2418%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (8 samples, 0.26%)</title><rect x="14.9918%" y="133" width="0.2619%" height="15" fill="rgb(209,12,38)" fg:x="458" fg:w="8"/><text x="15.2418%" y="143.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (8 samples, 0.26%)</title><rect x="14.9918%" y="117" width="0.2619%" height="15" fill="rgb(227,1,9)" fg:x="458" fg:w="8"/><text x="15.2418%" y="127.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8 samples, 0.26%)</title><rect x="14.9918%" y="101" width="0.2619%" height="15" fill="rgb(248,47,43)" fg:x="458" fg:w="8"/><text x="15.2418%" y="111.50"></text></g><g><title>main::_find_block_search::_{{closure}} (4 samples, 0.13%)</title><rect x="15.1227%" y="85" width="0.1309%" height="15" fill="rgb(221,10,30)" fg:x="462" fg:w="4"/><text x="15.3727%" y="95.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.03%)</title><rect x="15.2209%" y="69" width="0.0327%" height="15" fill="rgb(210,229,1)" fg:x="465" fg:w="1"/><text x="15.4709%" y="79.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::from_try (134 samples, 4.39%)</title><rect x="18.2324%" y="117" width="4.3863%" height="15" fill="rgb(222,148,37)" fg:x="557" fg:w="134"/><text x="18.4824%" y="127.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (198 samples, 6.48%)</title><rect x="22.7823%" y="85" width="6.4812%" height="15" fill="rgb(234,67,33)" fg:x="696" fg:w="198"/><text x="23.0323%" y="95.50">core::it..</text></g><g><title>core::cmp::min_by (198 samples, 6.48%)</title><rect x="22.7823%" y="69" width="6.4812%" height="15" fill="rgb(247,98,35)" fg:x="696" fg:w="198"/><text x="23.0323%" y="79.50">core::cm..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (141 samples, 4.62%)</title><rect x="36.3993%" y="53" width="4.6154%" height="15" fill="rgb(247,138,52)" fg:x="1112" fg:w="141"/><text x="36.6493%" y="63.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (214 samples, 7.00%)</title><rect x="36.3993%" y="69" width="7.0049%" height="15" fill="rgb(213,79,30)" fg:x="1112" fg:w="214"/><text x="36.6493%" y="79.50">&lt;alloc::v..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (73 samples, 2.39%)</title><rect x="41.0147%" y="53" width="2.3895%" height="15" fill="rgb(246,177,23)" fg:x="1253" fg:w="73"/><text x="41.2647%" y="63.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (73 samples, 2.39%)</title><rect x="41.0147%" y="37" width="2.3895%" height="15" fill="rgb(230,62,27)" fg:x="1253" fg:w="73"/><text x="41.2647%" y="47.50">&lt;u..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (76 samples, 2.49%)</title><rect x="43.4043%" y="69" width="2.4877%" height="15" fill="rgb(216,154,8)" fg:x="1326" fg:w="76"/><text x="43.6543%" y="79.50">&lt;i..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (182 samples, 5.96%)</title><rect x="45.8920%" y="69" width="5.9574%" height="15" fill="rgb(244,35,45)" fg:x="1402" fg:w="182"/><text x="46.1420%" y="79.50">&lt;i32 as ..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1,422 samples, 46.55%)</title><rect x="8.2488%" y="165" width="46.5466%" height="15" fill="rgb(251,115,12)" fg:x="252" fg:w="1422"/><text x="8.4988%" y="175.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterat..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,208 samples, 39.54%)</title><rect x="15.2537%" y="149" width="39.5417%" height="15" fill="rgb(240,54,50)" fg:x="466" fg:w="1208"/><text x="15.5037%" y="159.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; f..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (1,199 samples, 39.25%)</title><rect x="15.5483%" y="133" width="39.2471%" height="15" fill="rgb(233,84,52)" fg:x="475" fg:w="1199"/><text x="15.7983%" y="143.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iter..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (983 samples, 32.18%)</title><rect x="22.6187%" y="117" width="32.1768%" height="15" fill="rgb(207,117,47)" fg:x="691" fg:w="983"/><text x="22.8687%" y="127.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (983 samples, 32.18%)</title><rect x="22.6187%" y="101" width="32.1768%" height="15" fill="rgb(249,43,39)" fg:x="691" fg:w="983"/><text x="22.8687%" y="111.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>main::_find_block_search::_{{closure}} (780 samples, 25.53%)</title><rect x="29.2635%" y="85" width="25.5319%" height="15" fill="rgb(209,38,44)" fg:x="894" fg:w="780"/><text x="29.5135%" y="95.50">main::_find_block_search::_{{closure}}</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (90 samples, 2.95%)</title><rect x="51.8494%" y="69" width="2.9460%" height="15" fill="rgb(236,212,23)" fg:x="1584" fg:w="90"/><text x="52.0994%" y="79.50">&lt;i..</text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (61 samples, 2.00%)</title><rect x="54.7954%" y="165" width="1.9967%" height="15" fill="rgb(242,79,21)" fg:x="1674" fg:w="61"/><text x="55.0454%" y="175.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,488 samples, 48.71%)</title><rect x="8.2160%" y="293" width="48.7070%" height="15" fill="rgb(211,96,35)" fg:x="251" fg:w="1488"/><text x="8.4660%" y="303.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,488 samples, 48.71%)</title><rect x="8.2160%" y="277" width="48.7070%" height="15" fill="rgb(253,215,40)" fg:x="251" fg:w="1488"/><text x="8.4660%" y="287.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (1,488 samples, 48.71%)</title><rect x="8.2160%" y="261" width="48.7070%" height="15" fill="rgb(211,81,21)" fg:x="251" fg:w="1488"/><text x="8.4660%" y="271.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::s..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,488 samples, 48.71%)</title><rect x="8.2160%" y="245" width="48.7070%" height="15" fill="rgb(208,190,38)" fg:x="251" fg:w="1488"/><text x="8.4660%" y="255.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,488 samples, 48.71%)</title><rect x="8.2160%" y="229" width="48.7070%" height="15" fill="rgb(235,213,38)" fg:x="251" fg:w="1488"/><text x="8.4660%" y="239.50">&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,488 samples, 48.71%)</title><rect x="8.2160%" y="213" width="48.7070%" height="15" fill="rgb(237,122,38)" fg:x="251" fg:w="1488"/><text x="8.4660%" y="223.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,488 samples, 48.71%)</title><rect x="8.2160%" y="197" width="48.7070%" height="15" fill="rgb(244,218,35)" fg:x="251" fg:w="1488"/><text x="8.4660%" y="207.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,488 samples, 48.71%)</title><rect x="8.2160%" y="181" width="48.7070%" height="15" fill="rgb(240,68,47)" fg:x="251" fg:w="1488"/><text x="8.4660%" y="191.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.13%)</title><rect x="56.7921%" y="165" width="0.1309%" height="15" fill="rgb(210,16,53)" fg:x="1735" fg:w="4"/><text x="57.0421%" y="175.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.13%)</title><rect x="56.7921%" y="149" width="0.1309%" height="15" fill="rgb(235,124,12)" fg:x="1735" fg:w="4"/><text x="57.0421%" y="159.50"></text></g><g><title>main::_find_block_search (1,494 samples, 48.90%)</title><rect x="8.1178%" y="341" width="48.9034%" height="15" fill="rgb(224,169,11)" fg:x="248" fg:w="1494"/><text x="8.3678%" y="351.50">main::_find_block_search</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (1,493 samples, 48.87%)</title><rect x="8.1506%" y="325" width="48.8707%" height="15" fill="rgb(250,166,2)" fg:x="249" fg:w="1493"/><text x="8.4006%" y="335.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1,493 samples, 48.87%)</title><rect x="8.1506%" y="309" width="48.8707%" height="15" fill="rgb(242,216,29)" fg:x="249" fg:w="1493"/><text x="8.4006%" y="319.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="56.9231%" y="293" width="0.0982%" height="15" fill="rgb(230,116,27)" fg:x="1739" fg:w="3"/><text x="57.1731%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.10%)</title><rect x="56.9231%" y="277" width="0.0982%" height="15" fill="rgb(228,99,48)" fg:x="1739" fg:w="3"/><text x="57.1731%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.07%)</title><rect x="56.9558%" y="261" width="0.0655%" height="15" fill="rgb(253,11,6)" fg:x="1740" fg:w="2"/><text x="57.2058%" y="271.50"></text></g><g><title>main::_find_block_search::_{{closure}} (2 samples, 0.07%)</title><rect x="56.9558%" y="245" width="0.0655%" height="15" fill="rgb(247,143,39)" fg:x="1740" fg:w="2"/><text x="57.2058%" y="255.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (1 samples, 0.03%)</title><rect x="56.9885%" y="229" width="0.0327%" height="15" fill="rgb(236,97,10)" fg:x="1741" fg:w="1"/><text x="57.2385%" y="239.50"></text></g><g><title>main::_find_first_arc (1 samples, 0.03%)</title><rect x="57.0213%" y="341" width="0.0327%" height="15" fill="rgb(233,208,19)" fg:x="1742" fg:w="1"/><text x="57.2713%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (42 samples, 1.37%)</title><rect x="76.8249%" y="325" width="1.3748%" height="15" fill="rgb(216,164,2)" fg:x="2347" fg:w="42"/><text x="77.0749%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (42 samples, 1.37%)</title><rect x="76.8249%" y="309" width="1.3748%" height="15" fill="rgb(220,129,5)" fg:x="2347" fg:w="42"/><text x="77.0749%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (42 samples, 1.37%)</title><rect x="76.8249%" y="293" width="1.3748%" height="15" fill="rgb(242,17,10)" fg:x="2347" fg:w="42"/><text x="77.0749%" y="303.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (38 samples, 1.24%)</title><rect x="78.1997%" y="325" width="1.2439%" height="15" fill="rgb(242,107,0)" fg:x="2389" fg:w="38"/><text x="78.4497%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (2 samples, 0.07%)</title><rect x="79.4435%" y="325" width="0.0655%" height="15" fill="rgb(251,28,31)" fg:x="2427" fg:w="2"/><text x="79.6935%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (2 samples, 0.07%)</title><rect x="79.5090%" y="325" width="0.0655%" height="15" fill="rgb(233,223,10)" fg:x="2429" fg:w="2"/><text x="79.7590%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (3 samples, 0.10%)</title><rect x="79.5745%" y="325" width="0.0982%" height="15" fill="rgb(215,21,27)" fg:x="2431" fg:w="3"/><text x="79.8245%" y="335.50"></text></g><g><title>main::compute_flowchange (713 samples, 23.34%)</title><rect x="57.0540%" y="341" width="23.3388%" height="15" fill="rgb(232,23,21)" fg:x="1743" fg:w="713"/><text x="57.3040%" y="351.50">main::compute_flowchange</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (22 samples, 0.72%)</title><rect x="79.6727%" y="325" width="0.7201%" height="15" fill="rgb(244,5,23)" fg:x="2434" fg:w="22"/><text x="79.9227%" y="335.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.03%)</title><rect x="80.3928%" y="325" width="0.0327%" height="15" fill="rgb(226,81,46)" fg:x="2456" fg:w="1"/><text x="80.6428%" y="335.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.03%)</title><rect x="80.3928%" y="309" width="0.0327%" height="15" fill="rgb(247,70,30)" fg:x="2456" fg:w="1"/><text x="80.6428%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.03%)</title><rect x="80.3928%" y="293" width="0.0327%" height="15" fill="rgb(212,68,19)" fg:x="2456" fg:w="1"/><text x="80.6428%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="80.3928%" y="277" width="0.0327%" height="15" fill="rgb(240,187,13)" fg:x="2456" fg:w="1"/><text x="80.6428%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.03%)</title><rect x="80.3928%" y="261" width="0.0327%" height="15" fill="rgb(223,113,26)" fg:x="2456" fg:w="1"/><text x="80.6428%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="80.3928%" y="245" width="0.0327%" height="15" fill="rgb(206,192,2)" fg:x="2456" fg:w="1"/><text x="80.6428%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.03%)</title><rect x="80.3928%" y="229" width="0.0327%" height="15" fill="rgb(241,108,4)" fg:x="2456" fg:w="1"/><text x="80.6428%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="80.3928%" y="213" width="0.0327%" height="15" fill="rgb(247,173,49)" fg:x="2456" fg:w="1"/><text x="80.6428%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.03%)</title><rect x="80.4255%" y="325" width="0.0327%" height="15" fill="rgb(224,114,35)" fg:x="2457" fg:w="1"/><text x="80.6755%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.03%)</title><rect x="80.4255%" y="309" width="0.0327%" height="15" fill="rgb(245,159,27)" fg:x="2457" fg:w="1"/><text x="80.6755%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (1 samples, 0.03%)</title><rect x="80.4255%" y="293" width="0.0327%" height="15" fill="rgb(245,172,44)" fg:x="2457" fg:w="1"/><text x="80.6755%" y="303.50"></text></g><g><title>main::initialization::_{{closure}} (1 samples, 0.03%)</title><rect x="80.4255%" y="277" width="0.0327%" height="15" fill="rgb(236,23,11)" fg:x="2457" fg:w="1"/><text x="80.6755%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_weight (1 samples, 0.03%)</title><rect x="80.4255%" y="261" width="0.0327%" height="15" fill="rgb(205,117,38)" fg:x="2457" fg:w="1"/><text x="80.6755%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="80.4255%" y="245" width="0.0327%" height="15" fill="rgb(237,72,25)" fg:x="2457" fg:w="1"/><text x="80.6755%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="80.4255%" y="229" width="0.0327%" height="15" fill="rgb(244,70,9)" fg:x="2457" fg:w="1"/><text x="80.6755%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="80.4583%" y="325" width="0.0655%" height="15" fill="rgb(217,125,39)" fg:x="2458" fg:w="2"/><text x="80.7083%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.07%)</title><rect x="80.4583%" y="309" width="0.0655%" height="15" fill="rgb(235,36,10)" fg:x="2458" fg:w="2"/><text x="80.7083%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.07%)</title><rect x="80.4583%" y="293" width="0.0655%" height="15" fill="rgb(251,123,47)" fg:x="2458" fg:w="2"/><text x="80.7083%" y="303.50"></text></g><g><title>main::initialization::_{{closure}} (2 samples, 0.07%)</title><rect x="80.4583%" y="277" width="0.0655%" height="15" fill="rgb(221,13,13)" fg:x="2458" fg:w="2"/><text x="80.7083%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.03%)</title><rect x="80.5237%" y="229" width="0.0327%" height="15" fill="rgb(238,131,9)" fg:x="2460" fg:w="1"/><text x="80.7737%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="80.5237%" y="213" width="0.0327%" height="15" fill="rgb(211,50,8)" fg:x="2460" fg:w="1"/><text x="80.7737%" y="223.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="80.5237%" y="197" width="0.0327%" height="15" fill="rgb(245,182,24)" fg:x="2460" fg:w="1"/><text x="80.7737%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.07%)</title><rect x="80.5237%" y="309" width="0.0655%" height="15" fill="rgb(242,14,37)" fg:x="2460" fg:w="2"/><text x="80.7737%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="80.5237%" y="293" width="0.0655%" height="15" fill="rgb(246,228,12)" fg:x="2460" fg:w="2"/><text x="80.7737%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="80.5237%" y="277" width="0.0655%" height="15" fill="rgb(213,55,15)" fg:x="2460" fg:w="2"/><text x="80.7737%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="80.5237%" y="261" width="0.0655%" height="15" fill="rgb(209,9,3)" fg:x="2460" fg:w="2"/><text x="80.7737%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="80.5237%" y="245" width="0.0655%" height="15" fill="rgb(230,59,30)" fg:x="2460" fg:w="2"/><text x="80.7737%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.03%)</title><rect x="80.5565%" y="229" width="0.0327%" height="15" fill="rgb(209,121,21)" fg:x="2461" fg:w="1"/><text x="80.8065%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.03%)</title><rect x="80.5565%" y="213" width="0.0327%" height="15" fill="rgb(220,109,13)" fg:x="2461" fg:w="1"/><text x="80.8065%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="80.5565%" y="197" width="0.0327%" height="15" fill="rgb(232,18,1)" fg:x="2461" fg:w="1"/><text x="80.8065%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (1 samples, 0.03%)</title><rect x="80.5565%" y="181" width="0.0327%" height="15" fill="rgb(215,41,42)" fg:x="2461" fg:w="1"/><text x="80.8065%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="80.5565%" y="165" width="0.0327%" height="15" fill="rgb(224,123,36)" fg:x="2461" fg:w="1"/><text x="80.8065%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (1 samples, 0.03%)</title><rect x="80.5565%" y="149" width="0.0327%" height="15" fill="rgb(240,125,3)" fg:x="2461" fg:w="1"/><text x="80.8065%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="80.5565%" y="133" width="0.0327%" height="15" fill="rgb(205,98,50)" fg:x="2461" fg:w="1"/><text x="80.8065%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.03%)</title><rect x="80.5892%" y="309" width="0.0327%" height="15" fill="rgb(205,185,37)" fg:x="2462" fg:w="1"/><text x="80.8392%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="80.5892%" y="293" width="0.0327%" height="15" fill="rgb(238,207,15)" fg:x="2462" fg:w="1"/><text x="80.8392%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="80.5892%" y="277" width="0.0327%" height="15" fill="rgb(213,199,42)" fg:x="2462" fg:w="1"/><text x="80.8392%" y="287.50"></text></g><g><title>itertools::Itertools::sorted_by_key (1 samples, 0.03%)</title><rect x="80.6219%" y="309" width="0.0327%" height="15" fill="rgb(235,201,11)" fg:x="2463" fg:w="1"/><text x="80.8719%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.03%)</title><rect x="80.6219%" y="293" width="0.0327%" height="15" fill="rgb(207,46,11)" fg:x="2463" fg:w="1"/><text x="80.8719%" y="303.50"></text></g><g><title>alloc::slice::stable_sort (1 samples, 0.03%)</title><rect x="80.6219%" y="277" width="0.0327%" height="15" fill="rgb(241,35,35)" fg:x="2463" fg:w="1"/><text x="80.8719%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.03%)</title><rect x="80.6219%" y="261" width="0.0327%" height="15" fill="rgb(243,32,47)" fg:x="2463" fg:w="1"/><text x="80.8719%" y="271.50"></text></g><g><title>core::slice::sort::merge (1 samples, 0.03%)</title><rect x="80.6219%" y="245" width="0.0327%" height="15" fill="rgb(247,202,23)" fg:x="2463" fg:w="1"/><text x="80.8719%" y="255.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (3 samples, 0.10%)</title><rect x="80.6547%" y="309" width="0.0982%" height="15" fill="rgb(219,102,11)" fg:x="2464" fg:w="3"/><text x="80.9047%" y="319.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (2 samples, 0.07%)</title><rect x="80.6874%" y="293" width="0.0655%" height="15" fill="rgb(243,110,44)" fg:x="2465" fg:w="2"/><text x="80.9374%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (1 samples, 0.03%)</title><rect x="80.7201%" y="277" width="0.0327%" height="15" fill="rgb(222,74,54)" fg:x="2466" fg:w="1"/><text x="80.9701%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1 samples, 0.03%)</title><rect x="80.7529%" y="277" width="0.0327%" height="15" fill="rgb(216,99,12)" fg:x="2467" fg:w="1"/><text x="81.0029%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="80.7529%" y="261" width="0.0327%" height="15" fill="rgb(226,22,26)" fg:x="2467" fg:w="1"/><text x="81.0029%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="80.7529%" y="245" width="0.0327%" height="15" fill="rgb(217,163,10)" fg:x="2467" fg:w="1"/><text x="81.0029%" y="255.50"></text></g><g><title>main::compute_node_potentials (9 samples, 0.29%)</title><rect x="80.5237%" y="325" width="0.2946%" height="15" fill="rgb(213,25,53)" fg:x="2460" fg:w="9"/><text x="80.7737%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (2 samples, 0.07%)</title><rect x="80.7529%" y="309" width="0.0655%" height="15" fill="rgb(252,105,26)" fg:x="2467" fg:w="2"/><text x="81.0029%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (2 samples, 0.07%)</title><rect x="80.7529%" y="293" width="0.0655%" height="15" fill="rgb(220,39,43)" fg:x="2467" fg:w="2"/><text x="81.0029%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (1 samples, 0.03%)</title><rect x="80.7856%" y="277" width="0.0327%" height="15" fill="rgb(229,68,48)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="80.7856%" y="261" width="0.0327%" height="15" fill="rgb(252,8,32)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="80.7856%" y="245" width="0.0327%" height="15" fill="rgb(223,20,43)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="80.7856%" y="229" width="0.0327%" height="15" fill="rgb(229,81,49)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="80.7856%" y="213" width="0.0327%" height="15" fill="rgb(236,28,36)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="80.7856%" y="197" width="0.0327%" height="15" fill="rgb(249,185,26)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="80.7856%" y="181" width="0.0327%" height="15" fill="rgb(249,174,33)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="191.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="80.7856%" y="165" width="0.0327%" height="15" fill="rgb(233,201,37)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="175.50"></text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="80.7856%" y="149" width="0.0327%" height="15" fill="rgb(221,78,26)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="80.7856%" y="133" width="0.0327%" height="15" fill="rgb(250,127,30)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="80.7856%" y="117" width="0.0327%" height="15" fill="rgb(230,49,44)" fg:x="2468" fg:w="1"/><text x="81.0356%" y="127.50"></text></g><g><title>main::initialization (14 samples, 0.46%)</title><rect x="80.3928%" y="341" width="0.4583%" height="15" fill="rgb(229,67,23)" fg:x="2456" fg:w="14"/><text x="80.6428%" y="351.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1 samples, 0.03%)</title><rect x="80.8183%" y="325" width="0.0327%" height="15" fill="rgb(249,83,47)" fg:x="2469" fg:w="1"/><text x="81.0683%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="81.6694%" y="325" width="0.0327%" height="15" fill="rgb(215,43,3)" fg:x="2495" fg:w="1"/><text x="81.9194%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="81.6694%" y="309" width="0.0327%" height="15" fill="rgb(238,154,13)" fg:x="2495" fg:w="1"/><text x="81.9194%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="81.6694%" y="293" width="0.0327%" height="15" fill="rgb(219,56,2)" fg:x="2495" fg:w="1"/><text x="81.9194%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="81.7021%" y="325" width="0.0327%" height="15" fill="rgb(233,0,4)" fg:x="2496" fg:w="1"/><text x="81.9521%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="81.7021%" y="309" width="0.0327%" height="15" fill="rgb(235,30,7)" fg:x="2496" fg:w="1"/><text x="81.9521%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="81.7021%" y="293" width="0.0327%" height="15" fill="rgb(250,79,13)" fg:x="2496" fg:w="1"/><text x="81.9521%" y="303.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="81.7349%" y="325" width="0.0327%" height="15" fill="rgb(211,146,34)" fg:x="2497" fg:w="1"/><text x="81.9849%" y="335.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="81.7349%" y="309" width="0.0327%" height="15" fill="rgb(228,22,38)" fg:x="2497" fg:w="1"/><text x="81.9849%" y="319.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (15 samples, 0.49%)</title><rect x="81.7676%" y="325" width="0.4910%" height="15" fill="rgb(235,168,5)" fg:x="2498" fg:w="15"/><text x="82.0176%" y="335.50"></text></g><g><title>main::update_node_potentials (45 samples, 1.47%)</title><rect x="80.8511%" y="341" width="1.4730%" height="15" fill="rgb(221,155,16)" fg:x="2470" fg:w="45"/><text x="81.1011%" y="351.50"></text></g><g><title>main::get_reduced_cost_edgeindex (2 samples, 0.07%)</title><rect x="82.2586%" y="325" width="0.0655%" height="15" fill="rgb(215,215,53)" fg:x="2513" fg:w="2"/><text x="82.5086%" y="335.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1 samples, 0.03%)</title><rect x="82.2913%" y="309" width="0.0327%" height="15" fill="rgb(223,4,10)" fg:x="2514" fg:w="1"/><text x="82.5413%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="85.5974%" y="325" width="0.0327%" height="15" fill="rgb(234,103,6)" fg:x="2615" fg:w="1"/><text x="85.8474%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.36%)</title><rect x="85.6301%" y="309" width="0.3601%" height="15" fill="rgb(227,97,0)" fg:x="2616" fg:w="11"/><text x="85.8801%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (6 samples, 0.20%)</title><rect x="85.7938%" y="293" width="0.1964%" height="15" fill="rgb(234,150,53)" fg:x="2621" fg:w="6"/><text x="86.0438%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.20%)</title><rect x="85.7938%" y="277" width="0.1964%" height="15" fill="rgb(228,201,54)" fg:x="2621" fg:w="6"/><text x="86.0438%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.69%)</title><rect x="85.6301%" y="325" width="0.6874%" height="15" fill="rgb(222,22,37)" fg:x="2616" fg:w="21"/><text x="85.8801%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (10 samples, 0.33%)</title><rect x="85.9902%" y="309" width="0.3273%" height="15" fill="rgb(237,53,32)" fg:x="2627" fg:w="10"/><text x="86.2402%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.33%)</title><rect x="85.9902%" y="293" width="0.3273%" height="15" fill="rgb(233,25,53)" fg:x="2627" fg:w="10"/><text x="86.2402%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="86.3175%" y="325" width="0.0327%" height="15" fill="rgb(210,40,34)" fg:x="2637" fg:w="1"/><text x="86.5675%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="86.3175%" y="309" width="0.0327%" height="15" fill="rgb(241,220,44)" fg:x="2637" fg:w="1"/><text x="86.5675%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="86.3175%" y="293" width="0.0327%" height="15" fill="rgb(235,28,35)" fg:x="2637" fg:w="1"/><text x="86.5675%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="87.1031%" y="261" width="0.0327%" height="15" fill="rgb(210,56,17)" fg:x="2661" fg:w="1"/><text x="87.3531%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.16%)</title><rect x="87.1031%" y="277" width="0.1637%" height="15" fill="rgb(224,130,29)" fg:x="2661" fg:w="5"/><text x="87.3531%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.13%)</title><rect x="87.1358%" y="261" width="0.1309%" height="15" fill="rgb(235,212,8)" fg:x="2662" fg:w="4"/><text x="87.3858%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.13%)</title><rect x="87.1358%" y="245" width="0.1309%" height="15" fill="rgb(223,33,50)" fg:x="2662" fg:w="4"/><text x="87.3858%" y="255.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (1 samples, 0.03%)</title><rect x="87.2668%" y="277" width="0.0327%" height="15" fill="rgb(219,149,13)" fg:x="2666" fg:w="1"/><text x="87.5168%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (30 samples, 0.98%)</title><rect x="86.3502%" y="325" width="0.9820%" height="15" fill="rgb(250,156,29)" fg:x="2638" fg:w="30"/><text x="86.6002%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (30 samples, 0.98%)</title><rect x="86.3502%" y="309" width="0.9820%" height="15" fill="rgb(216,193,19)" fg:x="2638" fg:w="30"/><text x="86.6002%" y="319.50"></text></g><g><title>main::update_sptree::_{{closure}} (30 samples, 0.98%)</title><rect x="86.3502%" y="293" width="0.9820%" height="15" fill="rgb(216,135,14)" fg:x="2638" fg:w="30"/><text x="86.6002%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="87.2995%" y="277" width="0.0327%" height="15" fill="rgb(241,47,5)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="87.2995%" y="261" width="0.0327%" height="15" fill="rgb(233,42,35)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="87.2995%" y="245" width="0.0327%" height="15" fill="rgb(231,13,6)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="87.2995%" y="229" width="0.0327%" height="15" fill="rgb(207,181,40)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="87.2995%" y="213" width="0.0327%" height="15" fill="rgb(254,173,49)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="87.2995%" y="197" width="0.0327%" height="15" fill="rgb(221,1,38)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="87.2995%" y="181" width="0.0327%" height="15" fill="rgb(206,124,46)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="191.50"></text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="87.2995%" y="165" width="0.0327%" height="15" fill="rgb(249,21,11)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="87.2995%" y="149" width="0.0327%" height="15" fill="rgb(222,201,40)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="87.2995%" y="133" width="0.0327%" height="15" fill="rgb(235,61,29)" fg:x="2667" fg:w="1"/><text x="87.5495%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="87.7578%" y="293" width="0.0327%" height="15" fill="rgb(219,207,3)" fg:x="2681" fg:w="1"/><text x="88.0078%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="87.7578%" y="277" width="0.0327%" height="15" fill="rgb(222,56,46)" fg:x="2681" fg:w="1"/><text x="88.0078%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="87.7578%" y="261" width="0.0327%" height="15" fill="rgb(239,76,54)" fg:x="2681" fg:w="1"/><text x="88.0078%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (17 samples, 0.56%)</title><rect x="87.3322%" y="325" width="0.5565%" height="15" fill="rgb(231,124,27)" fg:x="2668" fg:w="17"/><text x="87.5822%" y="335.50"></text></g><g><title>main::update_sptree::_{{closure}} (17 samples, 0.56%)</title><rect x="87.3322%" y="309" width="0.5565%" height="15" fill="rgb(249,195,6)" fg:x="2668" fg:w="17"/><text x="87.5822%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (3 samples, 0.10%)</title><rect x="87.7905%" y="293" width="0.0982%" height="15" fill="rgb(237,174,47)" fg:x="2682" fg:w="3"/><text x="88.0405%" y="303.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.07%)</title><rect x="87.8887%" y="325" width="0.0655%" height="15" fill="rgb(206,201,31)" fg:x="2685" fg:w="2"/><text x="88.1387%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.07%)</title><rect x="87.9542%" y="325" width="0.0655%" height="15" fill="rgb(231,57,52)" fg:x="2687" fg:w="2"/><text x="88.2042%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.10%)</title><rect x="88.5106%" y="277" width="0.0982%" height="15" fill="rgb(248,177,22)" fg:x="2704" fg:w="3"/><text x="88.7606%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.07%)</title><rect x="88.6088%" y="277" width="0.0655%" height="15" fill="rgb(215,211,37)" fg:x="2707" fg:w="2"/><text x="88.8588%" y="287.50"></text></g><g><title>__rdl_realloc (2 samples, 0.07%)</title><rect x="88.7398%" y="213" width="0.0655%" height="15" fill="rgb(241,128,51)" fg:x="2711" fg:w="2"/><text x="88.9898%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (87 samples, 2.85%)</title><rect x="88.7398%" y="261" width="2.8478%" height="15" fill="rgb(227,165,31)" fg:x="2711" fg:w="87"/><text x="88.9898%" y="271.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (87 samples, 2.85%)</title><rect x="88.7398%" y="245" width="2.8478%" height="15" fill="rgb(228,167,24)" fg:x="2711" fg:w="87"/><text x="88.9898%" y="255.50">al..</text></g><g><title>alloc::alloc::realloc (87 samples, 2.85%)</title><rect x="88.7398%" y="229" width="2.8478%" height="15" fill="rgb(228,143,12)" fg:x="2711" fg:w="87"/><text x="88.9898%" y="239.50">al..</text></g><g><title>realloc (85 samples, 2.78%)</title><rect x="88.8052%" y="213" width="2.7823%" height="15" fill="rgb(249,149,8)" fg:x="2713" fg:w="85"/><text x="89.0552%" y="223.50">re..</text></g><g><title>[libc.so.6] (80 samples, 2.62%)</title><rect x="88.9689%" y="197" width="2.6187%" height="15" fill="rgb(243,35,44)" fg:x="2718" fg:w="80"/><text x="89.2189%" y="207.50">[l..</text></g><g><title>[libc.so.6] (71 samples, 2.32%)</title><rect x="89.2635%" y="181" width="2.3241%" height="15" fill="rgb(246,89,9)" fg:x="2727" fg:w="71"/><text x="89.5135%" y="191.50">[..</text></g><g><title>[libc.so.6] (15 samples, 0.49%)</title><rect x="91.0966%" y="165" width="0.4910%" height="15" fill="rgb(233,213,13)" fg:x="2783" fg:w="15"/><text x="91.3466%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="91.5876%" y="261" width="0.0327%" height="15" fill="rgb(233,141,41)" fg:x="2798" fg:w="1"/><text x="91.8376%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (99 samples, 3.24%)</title><rect x="88.6743%" y="277" width="3.2406%" height="15" fill="rgb(239,167,4)" fg:x="2709" fg:w="99"/><text x="88.9243%" y="287.50">all..</text></g><g><title>malloc (9 samples, 0.29%)</title><rect x="91.6203%" y="261" width="0.2946%" height="15" fill="rgb(209,217,16)" fg:x="2799" fg:w="9"/><text x="91.8703%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.03%)</title><rect x="91.9149%" y="277" width="0.0327%" height="15" fill="rgb(219,88,35)" fg:x="2808" fg:w="1"/><text x="92.1649%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.03%)</title><rect x="91.9149%" y="261" width="0.0327%" height="15" fill="rgb(220,193,23)" fg:x="2808" fg:w="1"/><text x="92.1649%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (107 samples, 3.50%)</title><rect x="88.4779%" y="309" width="3.5025%" height="15" fill="rgb(230,90,52)" fg:x="2703" fg:w="107"/><text x="88.7279%" y="319.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (107 samples, 3.50%)</title><rect x="88.4779%" y="293" width="3.5025%" height="15" fill="rgb(252,106,19)" fg:x="2703" fg:w="107"/><text x="88.7279%" y="303.50">all..</text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="91.9476%" y="277" width="0.0327%" height="15" fill="rgb(206,74,20)" fg:x="2809" fg:w="1"/><text x="92.1976%" y="287.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="91.9476%" y="261" width="0.0327%" height="15" fill="rgb(230,138,44)" fg:x="2809" fg:w="1"/><text x="92.1976%" y="271.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="91.9476%" y="245" width="0.0327%" height="15" fill="rgb(235,182,43)" fg:x="2809" fg:w="1"/><text x="92.1976%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.10%)</title><rect x="91.9804%" y="309" width="0.0982%" height="15" fill="rgb(242,16,51)" fg:x="2810" fg:w="3"/><text x="92.2304%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.10%)</title><rect x="91.9804%" y="293" width="0.0982%" height="15" fill="rgb(248,9,4)" fg:x="2810" fg:w="3"/><text x="92.2304%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (135 samples, 4.42%)</title><rect x="88.0196%" y="325" width="4.4190%" height="15" fill="rgb(210,31,22)" fg:x="2689" fg:w="135"/><text x="88.2696%" y="335.50">alloc..</text></g><g><title>core::ptr::write (11 samples, 0.36%)</title><rect x="92.0786%" y="309" width="0.3601%" height="15" fill="rgb(239,54,39)" fg:x="2813" fg:w="11"/><text x="92.3286%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="92.4386%" y="325" width="0.0327%" height="15" fill="rgb(230,99,41)" fg:x="2824" fg:w="1"/><text x="92.6886%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="92.4714%" y="261" width="0.0655%" height="15" fill="rgb(253,106,12)" fg:x="2825" fg:w="2"/><text x="92.7214%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.07%)</title><rect x="92.4714%" y="245" width="0.0655%" height="15" fill="rgb(213,46,41)" fg:x="2825" fg:w="2"/><text x="92.7214%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="92.4714%" y="229" width="0.0655%" height="15" fill="rgb(215,133,35)" fg:x="2825" fg:w="2"/><text x="92.7214%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="92.4714%" y="213" width="0.0655%" height="15" fill="rgb(213,28,5)" fg:x="2825" fg:w="2"/><text x="92.7214%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="92.4714%" y="197" width="0.0655%" height="15" fill="rgb(215,77,49)" fg:x="2825" fg:w="2"/><text x="92.7214%" y="207.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.07%)</title><rect x="92.4714%" y="181" width="0.0655%" height="15" fill="rgb(248,100,22)" fg:x="2825" fg:w="2"/><text x="92.7214%" y="191.50"></text></g><g><title>main::update_sptree::_{{closure}} (2 samples, 0.07%)</title><rect x="92.4714%" y="165" width="0.0655%" height="15" fill="rgb(208,67,9)" fg:x="2825" fg:w="2"/><text x="92.7214%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="92.5041%" y="149" width="0.0327%" height="15" fill="rgb(219,133,21)" fg:x="2826" fg:w="1"/><text x="92.7541%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="92.5041%" y="133" width="0.0327%" height="15" fill="rgb(246,46,29)" fg:x="2826" fg:w="1"/><text x="92.7541%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.16%)</title><rect x="92.4714%" y="325" width="0.1637%" height="15" fill="rgb(246,185,52)" fg:x="2825" fg:w="5"/><text x="92.7214%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.16%)</title><rect x="92.4714%" y="309" width="0.1637%" height="15" fill="rgb(252,136,11)" fg:x="2825" fg:w="5"/><text x="92.7214%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.16%)</title><rect x="92.4714%" y="293" width="0.1637%" height="15" fill="rgb(219,138,53)" fg:x="2825" fg:w="5"/><text x="92.7214%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.16%)</title><rect x="92.4714%" y="277" width="0.1637%" height="15" fill="rgb(211,51,23)" fg:x="2825" fg:w="5"/><text x="92.7214%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.10%)</title><rect x="92.5368%" y="261" width="0.0982%" height="15" fill="rgb(247,221,28)" fg:x="2827" fg:w="3"/><text x="92.7868%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.10%)</title><rect x="92.5368%" y="245" width="0.0982%" height="15" fill="rgb(251,222,45)" fg:x="2827" fg:w="3"/><text x="92.7868%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.10%)</title><rect x="92.5368%" y="229" width="0.0982%" height="15" fill="rgb(217,162,53)" fg:x="2827" fg:w="3"/><text x="92.7868%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.10%)</title><rect x="92.5368%" y="213" width="0.0982%" height="15" fill="rgb(229,93,14)" fg:x="2827" fg:w="3"/><text x="92.7868%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.10%)</title><rect x="92.5368%" y="197" width="0.0982%" height="15" fill="rgb(209,67,49)" fg:x="2827" fg:w="3"/><text x="92.7868%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.10%)</title><rect x="92.5368%" y="181" width="0.0982%" height="15" fill="rgb(213,87,29)" fg:x="2827" fg:w="3"/><text x="92.7868%" y="191.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.10%)</title><rect x="92.5368%" y="165" width="0.0982%" height="15" fill="rgb(205,151,52)" fg:x="2827" fg:w="3"/><text x="92.7868%" y="175.50"></text></g><g><title>malloc (3 samples, 0.10%)</title><rect x="92.5368%" y="149" width="0.0982%" height="15" fill="rgb(253,215,39)" fg:x="2827" fg:w="3"/><text x="92.7868%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.10%)</title><rect x="92.6678%" y="293" width="0.0982%" height="15" fill="rgb(221,220,41)" fg:x="2831" fg:w="3"/><text x="92.9178%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.10%)</title><rect x="92.6678%" y="277" width="0.0982%" height="15" fill="rgb(218,133,21)" fg:x="2831" fg:w="3"/><text x="92.9178%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.16%)</title><rect x="92.6350%" y="309" width="0.1637%" height="15" fill="rgb(221,193,43)" fg:x="2830" fg:w="5"/><text x="92.8850%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="92.7660%" y="293" width="0.0327%" height="15" fill="rgb(240,128,52)" fg:x="2834" fg:w="1"/><text x="93.0160%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.03%)</title><rect x="92.7660%" y="277" width="0.0327%" height="15" fill="rgb(253,114,12)" fg:x="2834" fg:w="1"/><text x="93.0160%" y="287.50"></text></g><g><title>main::update_sptree::_{{closure}} (1 samples, 0.03%)</title><rect x="92.7660%" y="261" width="0.0327%" height="15" fill="rgb(215,223,47)" fg:x="2834" fg:w="1"/><text x="93.0160%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.03%)</title><rect x="92.7660%" y="245" width="0.0327%" height="15" fill="rgb(248,225,23)" fg:x="2834" fg:w="1"/><text x="93.0160%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="92.7987%" y="293" width="0.0655%" height="15" fill="rgb(250,108,0)" fg:x="2835" fg:w="2"/><text x="93.0487%" y="303.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="92.8314%" y="277" width="0.0327%" height="15" fill="rgb(228,208,7)" fg:x="2836" fg:w="1"/><text x="93.0814%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.26%)</title><rect x="92.6350%" y="325" width="0.2619%" height="15" fill="rgb(244,45,10)" fg:x="2830" fg:w="8"/><text x="92.8850%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.10%)</title><rect x="92.7987%" y="309" width="0.0982%" height="15" fill="rgb(207,125,25)" fg:x="2835" fg:w="3"/><text x="93.0487%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (1 samples, 0.03%)</title><rect x="92.8642%" y="293" width="0.0327%" height="15" fill="rgb(210,195,18)" fg:x="2837" fg:w="1"/><text x="93.1142%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="92.8642%" y="277" width="0.0327%" height="15" fill="rgb(249,80,12)" fg:x="2837" fg:w="1"/><text x="93.1142%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (1 samples, 0.03%)</title><rect x="92.8642%" y="261" width="0.0327%" height="15" fill="rgb(221,65,9)" fg:x="2837" fg:w="1"/><text x="93.1142%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="92.8642%" y="245" width="0.0327%" height="15" fill="rgb(235,49,36)" fg:x="2837" fg:w="1"/><text x="93.1142%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.03%)</title><rect x="92.8642%" y="229" width="0.0327%" height="15" fill="rgb(225,32,20)" fg:x="2837" fg:w="1"/><text x="93.1142%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="92.8642%" y="213" width="0.0327%" height="15" fill="rgb(215,141,46)" fg:x="2837" fg:w="1"/><text x="93.1142%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="92.8642%" y="197" width="0.0327%" height="15" fill="rgb(250,160,47)" fg:x="2837" fg:w="1"/><text x="93.1142%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="92.8642%" y="181" width="0.0327%" height="15" fill="rgb(216,222,40)" fg:x="2837" fg:w="1"/><text x="93.1142%" y="191.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="92.8642%" y="165" width="0.0327%" height="15" fill="rgb(234,217,39)" fg:x="2837" fg:w="1"/><text x="93.1142%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (193 samples, 6.32%)</title><rect x="92.8969%" y="325" width="6.3175%" height="15" fill="rgb(207,178,40)" fg:x="2838" fg:w="193"/><text x="93.1469%" y="335.50">core::op..</text></g><g><title>core::option::Option&lt;T&gt;::is_some (193 samples, 6.32%)</title><rect x="92.8969%" y="309" width="6.3175%" height="15" fill="rgb(221,136,13)" fg:x="2838" fg:w="193"/><text x="93.1469%" y="319.50">core::op..</text></g><g><title>main::min_cost (2,805 samples, 91.82%)</title><rect x="7.9869%" y="357" width="91.8167%" height="15" fill="rgb(249,199,10)" fg:x="244" fg:w="2805"/><text x="8.2369%" y="367.50">main::min_cost</text></g><g><title>main::update_sptree (534 samples, 17.48%)</title><rect x="82.3241%" y="341" width="17.4795%" height="15" fill="rgb(249,222,13)" fg:x="2515" fg:w="534"/><text x="82.5741%" y="351.50">main::update_sptree</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (18 samples, 0.59%)</title><rect x="99.2144%" y="325" width="0.5892%" height="15" fill="rgb(244,185,38)" fg:x="3031" fg:w="18"/><text x="99.4644%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (18 samples, 0.59%)</title><rect x="99.2144%" y="309" width="0.5892%" height="15" fill="rgb(236,202,9)" fg:x="3031" fg:w="18"/><text x="99.4644%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.59%)</title><rect x="99.2144%" y="293" width="0.5892%" height="15" fill="rgb(250,229,37)" fg:x="3031" fg:w="18"/><text x="99.4644%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.56%)</title><rect x="99.2471%" y="277" width="0.5565%" height="15" fill="rgb(206,174,23)" fg:x="3032" fg:w="17"/><text x="99.4971%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.56%)</title><rect x="99.2471%" y="261" width="0.5565%" height="15" fill="rgb(211,33,43)" fg:x="3032" fg:w="17"/><text x="99.4971%" y="271.50"></text></g><g><title>cfree (17 samples, 0.56%)</title><rect x="99.2471%" y="245" width="0.5565%" height="15" fill="rgb(245,58,50)" fg:x="3032" fg:w="17"/><text x="99.4971%" y="255.50"></text></g><g><title>[libc.so.6] (13 samples, 0.43%)</title><rect x="99.3781%" y="229" width="0.4255%" height="15" fill="rgb(244,68,36)" fg:x="3036" fg:w="13"/><text x="99.6281%" y="239.50"></text></g><g><title>[libc.so.6] (7 samples, 0.23%)</title><rect x="99.5745%" y="213" width="0.2291%" height="15" fill="rgb(232,229,15)" fg:x="3042" fg:w="7"/><text x="99.8245%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (1 samples, 0.03%)</title><rect x="99.8036%" y="357" width="0.0327%" height="15" fill="rgb(254,30,23)" fg:x="3049" fg:w="1"/><text x="100.0536%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="99.8036%" y="341" width="0.0327%" height="15" fill="rgb(235,160,14)" fg:x="3049" fg:w="1"/><text x="100.0536%" y="351.50"></text></g><g><title>_start (2,809 samples, 91.95%)</title><rect x="7.9214%" y="501" width="91.9476%" height="15" fill="rgb(212,155,44)" fg:x="242" fg:w="2809"/><text x="8.1714%" y="511.50">_start</text></g><g><title>__libc_start_main (2,809 samples, 91.95%)</title><rect x="7.9214%" y="485" width="91.9476%" height="15" fill="rgb(226,2,50)" fg:x="242" fg:w="2809"/><text x="8.1714%" y="495.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,809 samples, 91.95%)</title><rect x="7.9214%" y="469" width="91.9476%" height="15" fill="rgb(234,177,6)" fg:x="242" fg:w="2809"/><text x="8.1714%" y="479.50">[libc.so.6]</text></g><g><title>main (2,809 samples, 91.95%)</title><rect x="7.9214%" y="453" width="91.9476%" height="15" fill="rgb(217,24,9)" fg:x="242" fg:w="2809"/><text x="8.1714%" y="463.50">main</text></g><g><title>std::rt::lang_start_internal (2,809 samples, 91.95%)</title><rect x="7.9214%" y="437" width="91.9476%" height="15" fill="rgb(220,13,46)" fg:x="242" fg:w="2809"/><text x="8.1714%" y="447.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (2,809 samples, 91.95%)</title><rect x="7.9214%" y="421" width="91.9476%" height="15" fill="rgb(239,221,27)" fg:x="242" fg:w="2809"/><text x="8.1714%" y="431.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,809 samples, 91.95%)</title><rect x="7.9214%" y="405" width="91.9476%" height="15" fill="rgb(222,198,25)" fg:x="242" fg:w="2809"/><text x="8.1714%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,809 samples, 91.95%)</title><rect x="7.9214%" y="389" width="91.9476%" height="15" fill="rgb(211,99,13)" fg:x="242" fg:w="2809"/><text x="8.1714%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (2,809 samples, 91.95%)</title><rect x="7.9214%" y="373" width="91.9476%" height="15" fill="rgb(232,111,31)" fg:x="242" fg:w="2809"/><text x="8.1714%" y="383.50">main::main</text></g><g><title>rand::rng::Rng::gen (1 samples, 0.03%)</title><rect x="99.8363%" y="357" width="0.0327%" height="15" fill="rgb(245,82,37)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="367.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.03%)</title><rect x="99.8363%" y="341" width="0.0327%" height="15" fill="rgb(227,149,46)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="351.50"></text></g><g><title>rand::rng::Rng::gen (1 samples, 0.03%)</title><rect x="99.8363%" y="325" width="0.0327%" height="15" fill="rgb(218,36,50)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="335.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.03%)</title><rect x="99.8363%" y="309" width="0.0327%" height="15" fill="rgb(226,80,48)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="319.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (1 samples, 0.03%)</title><rect x="99.8363%" y="293" width="0.0327%" height="15" fill="rgb(238,224,15)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="303.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.03%)</title><rect x="99.8363%" y="277" width="0.0327%" height="15" fill="rgb(241,136,10)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="287.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.03%)</title><rect x="99.8363%" y="261" width="0.0327%" height="15" fill="rgb(208,32,45)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="271.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.03%)</title><rect x="99.8363%" y="245" width="0.0327%" height="15" fill="rgb(207,135,9)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="255.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.03%)</title><rect x="99.8363%" y="229" width="0.0327%" height="15" fill="rgb(206,86,44)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="239.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.03%)</title><rect x="99.8363%" y="213" width="0.0327%" height="15" fill="rgb(245,177,15)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="223.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1 samples, 0.03%)</title><rect x="99.8363%" y="197" width="0.0327%" height="15" fill="rgb(206,64,50)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.03%)</title><rect x="99.8363%" y="181" width="0.0327%" height="15" fill="rgb(234,36,40)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1 samples, 0.03%)</title><rect x="99.8363%" y="165" width="0.0327%" height="15" fill="rgb(213,64,8)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (1 samples, 0.03%)</title><rect x="99.8363%" y="149" width="0.0327%" height="15" fill="rgb(210,75,36)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="159.50"></text></g><g><title>rand_chacha::guts::diagonalize (1 samples, 0.03%)</title><rect x="99.8363%" y="133" width="0.0327%" height="15" fill="rgb(229,88,21)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="143.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (1 samples, 0.03%)</title><rect x="99.8363%" y="117" width="0.0327%" height="15" fill="rgb(252,204,47)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (1 samples, 0.03%)</title><rect x="99.8363%" y="101" width="0.0327%" height="15" fill="rgb(208,77,27)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (1 samples, 0.03%)</title><rect x="99.8363%" y="85" width="0.0327%" height="15" fill="rgb(221,76,26)" fg:x="3050" fg:w="1"/><text x="100.0863%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.10%)</title><rect x="99.8691%" y="501" width="0.0982%" height="15" fill="rgb(225,139,18)" fg:x="3051" fg:w="3"/><text x="100.1191%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="99.9345%" y="485" width="0.0327%" height="15" fill="rgb(230,137,11)" fg:x="3053" fg:w="1"/><text x="100.1845%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="99.9345%" y="469" width="0.0327%" height="15" fill="rgb(212,28,1)" fg:x="3053" fg:w="1"/><text x="100.1845%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="99.9345%" y="453" width="0.0327%" height="15" fill="rgb(248,164,17)" fg:x="3053" fg:w="1"/><text x="100.1845%" y="463.50"></text></g><g><title>all (3,055 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(222,171,42)" fg:x="0" fg:w="3055"/><text x="0.2500%" y="543.50"></text></g><g><title>main (3,055 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="3055"/><text x="0.2500%" y="527.50">main</text></g><g><title>main::min_cost (1 samples, 0.03%)</title><rect x="99.9673%" y="501" width="0.0327%" height="15" fill="rgb(252,49,23)" fg:x="3054" fg:w="1"/><text x="100.2173%" y="511.50"></text></g><g><title>main::update_sptree (1 samples, 0.03%)</title><rect x="99.9673%" y="485" width="0.0327%" height="15" fill="rgb(215,19,7)" fg:x="3054" fg:w="1"/><text x="100.2173%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="99.9673%" y="469" width="0.0327%" height="15" fill="rgb(238,81,41)" fg:x="3054" fg:w="1"/><text x="100.2173%" y="479.50"></text></g></svg></svg>