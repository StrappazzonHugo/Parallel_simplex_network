<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="27141"><g><title>[libc.so.6] (7 samples, 0.03%)</title><rect x="0.0000%" y="517" width="0.0258%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.03%)</title><rect x="0.0258%" y="517" width="0.0258%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="7"/><text x="0.2758%" y="527.50"></text></g><g><title>cfree (3 samples, 0.01%)</title><rect x="0.0516%" y="517" width="0.0111%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="3"/><text x="0.3016%" y="527.50"></text></g><g><title>[[heap]] (19 samples, 0.07%)</title><rect x="0.0000%" y="533" width="0.0700%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="19"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.03%)</title><rect x="0.0700%" y="517" width="0.0258%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="7"/><text x="0.3200%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.01%)</title><rect x="0.0995%" y="517" width="0.0111%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="3"/><text x="0.3495%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="0.0995%" y="501" width="0.0111%" height="15" fill="rgb(207,160,47)" fg:x="27" fg:w="3"/><text x="0.3495%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.01%)</title><rect x="0.0995%" y="485" width="0.0111%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="3"/><text x="0.3495%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.01%)</title><rect x="0.0995%" y="469" width="0.0111%" height="15" fill="rgb(218,30,26)" fg:x="27" fg:w="3"/><text x="0.3495%" y="479.50"></text></g><g><title>[[stack]] (22 samples, 0.08%)</title><rect x="0.0700%" y="533" width="0.0811%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="22"/><text x="0.3200%" y="543.50"></text></g><g><title>realloc (10 samples, 0.04%)</title><rect x="0.1142%" y="517" width="0.0368%" height="15" fill="rgb(250,228,42)" fg:x="31" fg:w="10"/><text x="0.3642%" y="527.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="0.1511%" y="517" width="0.0221%" height="15" fill="rgb(240,193,28)" fg:x="41" fg:w="6"/><text x="0.4011%" y="527.50"></text></g><g><title>[anon] (13 samples, 0.05%)</title><rect x="0.1511%" y="533" width="0.0479%" height="15" fill="rgb(216,20,37)" fg:x="41" fg:w="13"/><text x="0.4011%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.03%)</title><rect x="0.1990%" y="533" width="0.0332%" height="15" fill="rgb(206,188,39)" fg:x="54" fg:w="9"/><text x="0.4490%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.01%)</title><rect x="0.2211%" y="517" width="0.0111%" height="15" fill="rgb(217,207,13)" fg:x="60" fg:w="3"/><text x="0.4711%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.01%)</title><rect x="0.2211%" y="501" width="0.0111%" height="15" fill="rgb(231,73,38)" fg:x="60" fg:w="3"/><text x="0.4711%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.01%)</title><rect x="0.2211%" y="485" width="0.0111%" height="15" fill="rgb(225,20,46)" fg:x="60" fg:w="3"/><text x="0.4711%" y="495.50"></text></g><g><title>[libc.so.6] (52 samples, 0.19%)</title><rect x="0.2469%" y="517" width="0.1916%" height="15" fill="rgb(210,31,41)" fg:x="67" fg:w="52"/><text x="0.4969%" y="527.50"></text></g><g><title>__rdl_realloc (5 samples, 0.02%)</title><rect x="0.4385%" y="517" width="0.0184%" height="15" fill="rgb(221,200,47)" fg:x="119" fg:w="5"/><text x="0.6885%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.02%)</title><rect x="0.4569%" y="517" width="0.0221%" height="15" fill="rgb(226,26,5)" fg:x="124" fg:w="6"/><text x="0.7069%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.02%)</title><rect x="0.4569%" y="501" width="0.0221%" height="15" fill="rgb(249,33,26)" fg:x="124" fg:w="6"/><text x="0.7069%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.01%)</title><rect x="0.4642%" y="485" width="0.0147%" height="15" fill="rgb(235,183,28)" fg:x="126" fg:w="4"/><text x="0.7142%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (4 samples, 0.01%)</title><rect x="0.4642%" y="469" width="0.0147%" height="15" fill="rgb(221,5,38)" fg:x="126" fg:w="4"/><text x="0.7142%" y="479.50"></text></g><g><title>[unknown] (74 samples, 0.27%)</title><rect x="0.2432%" y="533" width="0.2727%" height="15" fill="rgb(247,18,42)" fg:x="66" fg:w="74"/><text x="0.4932%" y="543.50"></text></g><g><title>realloc (7 samples, 0.03%)</title><rect x="0.4900%" y="517" width="0.0258%" height="15" fill="rgb(241,131,45)" fg:x="133" fg:w="7"/><text x="0.7400%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (42 samples, 0.15%)</title><rect x="0.5564%" y="373" width="0.1547%" height="15" fill="rgb(249,31,29)" fg:x="151" fg:w="42"/><text x="0.8064%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (42 samples, 0.15%)</title><rect x="0.5564%" y="357" width="0.1547%" height="15" fill="rgb(225,111,53)" fg:x="151" fg:w="42"/><text x="0.8064%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.15%)</title><rect x="0.5564%" y="341" width="0.1547%" height="15" fill="rgb(238,160,17)" fg:x="151" fg:w="42"/><text x="0.8064%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.15%)</title><rect x="0.5564%" y="325" width="0.1547%" height="15" fill="rgb(214,148,48)" fg:x="151" fg:w="42"/><text x="0.8064%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.15%)</title><rect x="0.5564%" y="309" width="0.1547%" height="15" fill="rgb(232,36,49)" fg:x="151" fg:w="42"/><text x="0.8064%" y="319.50"></text></g><g><title>cfree (40 samples, 0.15%)</title><rect x="0.5637%" y="293" width="0.1474%" height="15" fill="rgb(209,103,24)" fg:x="153" fg:w="40"/><text x="0.8137%" y="303.50"></text></g><g><title>[libc.so.6] (21 samples, 0.08%)</title><rect x="0.6337%" y="277" width="0.0774%" height="15" fill="rgb(229,88,8)" fg:x="172" fg:w="21"/><text x="0.8837%" y="287.50"></text></g><g><title>[libc.so.6] (9 samples, 0.03%)</title><rect x="0.6779%" y="261" width="0.0332%" height="15" fill="rgb(213,181,19)" fg:x="184" fg:w="9"/><text x="0.9279%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.02%)</title><rect x="1.3411%" y="357" width="0.0221%" height="15" fill="rgb(254,191,54)" fg:x="364" fg:w="6"/><text x="1.5911%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.02%)</title><rect x="1.3411%" y="341" width="0.0221%" height="15" fill="rgb(241,83,37)" fg:x="364" fg:w="6"/><text x="1.5911%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.02%)</title><rect x="1.3411%" y="325" width="0.0221%" height="15" fill="rgb(233,36,39)" fg:x="364" fg:w="6"/><text x="1.5911%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.01%)</title><rect x="1.3633%" y="357" width="0.0147%" height="15" fill="rgb(226,3,54)" fg:x="370" fg:w="4"/><text x="1.6133%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.01%)</title><rect x="1.3633%" y="341" width="0.0147%" height="15" fill="rgb(245,192,40)" fg:x="370" fg:w="4"/><text x="1.6133%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.01%)</title><rect x="1.3633%" y="325" width="0.0147%" height="15" fill="rgb(238,167,29)" fg:x="370" fg:w="4"/><text x="1.6133%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="1.3780%" y="357" width="0.0111%" height="15" fill="rgb(232,182,51)" fg:x="374" fg:w="3"/><text x="1.6280%" y="367.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="1.3780%" y="341" width="0.0111%" height="15" fill="rgb(231,60,39)" fg:x="374" fg:w="3"/><text x="1.6280%" y="351.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (109 samples, 0.40%)</title><rect x="1.3890%" y="357" width="0.4016%" height="15" fill="rgb(208,69,12)" fg:x="377" fg:w="109"/><text x="1.6390%" y="367.50"></text></g><g><title>main::get_reduced_cost_edgeindex (10 samples, 0.04%)</title><rect x="1.7906%" y="357" width="0.0368%" height="15" fill="rgb(235,93,37)" fg:x="486" fg:w="10"/><text x="2.0406%" y="367.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (8 samples, 0.03%)</title><rect x="1.8275%" y="357" width="0.0295%" height="15" fill="rgb(213,116,39)" fg:x="496" fg:w="8"/><text x="2.0775%" y="367.50"></text></g><g><title>main::__update_node_potentials (312 samples, 1.15%)</title><rect x="0.7111%" y="373" width="1.1496%" height="15" fill="rgb(222,207,29)" fg:x="193" fg:w="312"/><text x="0.9611%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (70 samples, 0.26%)</title><rect x="3.3565%" y="117" width="0.2579%" height="15" fill="rgb(206,96,30)" fg:x="911" fg:w="70"/><text x="3.6065%" y="127.50"></text></g><g><title>core::cmp::min_by (70 samples, 0.26%)</title><rect x="3.3565%" y="101" width="0.2579%" height="15" fill="rgb(218,138,4)" fg:x="911" fg:w="70"/><text x="3.6065%" y="111.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (36 samples, 0.13%)</title><rect x="3.6476%" y="101" width="0.1326%" height="15" fill="rgb(250,191,14)" fg:x="990" fg:w="36"/><text x="3.8976%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (15 samples, 0.06%)</title><rect x="3.7803%" y="69" width="0.0553%" height="15" fill="rgb(239,60,40)" fg:x="1026" fg:w="15"/><text x="4.0303%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (15 samples, 0.06%)</title><rect x="3.7803%" y="53" width="0.0553%" height="15" fill="rgb(206,27,48)" fg:x="1026" fg:w="15"/><text x="4.0303%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (15 samples, 0.06%)</title><rect x="3.7803%" y="37" width="0.0553%" height="15" fill="rgb(225,35,8)" fg:x="1026" fg:w="15"/><text x="4.0303%" y="47.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (21 samples, 0.08%)</title><rect x="3.7803%" y="101" width="0.0774%" height="15" fill="rgb(250,213,24)" fg:x="1026" fg:w="21"/><text x="4.0303%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.08%)</title><rect x="3.7803%" y="85" width="0.0774%" height="15" fill="rgb(247,123,22)" fg:x="1026" fg:w="21"/><text x="4.0303%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.02%)</title><rect x="3.8355%" y="69" width="0.0221%" height="15" fill="rgb(231,138,38)" fg:x="1041" fg:w="6"/><text x="4.0855%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.02%)</title><rect x="3.8355%" y="53" width="0.0221%" height="15" fill="rgb(231,145,46)" fg:x="1041" fg:w="6"/><text x="4.0855%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.04%)</title><rect x="3.9129%" y="69" width="0.0368%" height="15" fill="rgb(251,118,11)" fg:x="1062" fg:w="10"/><text x="4.1629%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (30 samples, 0.11%)</title><rect x="3.9129%" y="85" width="0.1105%" height="15" fill="rgb(217,147,25)" fg:x="1062" fg:w="30"/><text x="4.1629%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (20 samples, 0.07%)</title><rect x="3.9497%" y="69" width="0.0737%" height="15" fill="rgb(247,81,37)" fg:x="1072" fg:w="20"/><text x="4.1997%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (20 samples, 0.07%)</title><rect x="3.9497%" y="53" width="0.0737%" height="15" fill="rgb(209,12,38)" fg:x="1072" fg:w="20"/><text x="4.1997%" y="63.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (12 samples, 0.04%)</title><rect x="4.0234%" y="85" width="0.0442%" height="15" fill="rgb(227,1,9)" fg:x="1092" fg:w="12"/><text x="4.2734%" y="95.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (6 samples, 0.02%)</title><rect x="4.0676%" y="85" width="0.0221%" height="15" fill="rgb(248,47,43)" fg:x="1104" fg:w="6"/><text x="4.3176%" y="95.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (21 samples, 0.08%)</title><rect x="4.0898%" y="85" width="0.0774%" height="15" fill="rgb(221,10,30)" fg:x="1110" fg:w="21"/><text x="4.3398%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (239 samples, 0.88%)</title><rect x="3.2902%" y="181" width="0.8806%" height="15" fill="rgb(210,229,1)" fg:x="893" fg:w="239"/><text x="3.5402%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (239 samples, 0.88%)</title><rect x="3.2902%" y="165" width="0.8806%" height="15" fill="rgb(222,148,37)" fg:x="893" fg:w="239"/><text x="3.5402%" y="175.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (221 samples, 0.81%)</title><rect x="3.3565%" y="149" width="0.8143%" height="15" fill="rgb(234,67,33)" fg:x="911" fg:w="221"/><text x="3.6065%" y="159.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (221 samples, 0.81%)</title><rect x="3.3565%" y="133" width="0.8143%" height="15" fill="rgb(247,98,35)" fg:x="911" fg:w="221"/><text x="3.6065%" y="143.50"></text></g><g><title>main::_find_block_search::_{{closure}} (151 samples, 0.56%)</title><rect x="3.6145%" y="117" width="0.5564%" height="15" fill="rgb(247,138,52)" fg:x="981" fg:w="151"/><text x="3.8645%" y="127.50"></text></g><g><title>main::get_reduced_cost_edgeindex (85 samples, 0.31%)</title><rect x="3.8576%" y="101" width="0.3132%" height="15" fill="rgb(213,79,30)" fg:x="1047" fg:w="85"/><text x="4.1076%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (1,601 samples, 5.90%)</title><rect x="6.2341%" y="117" width="5.8988%" height="15" fill="rgb(246,177,23)" fg:x="1692" fg:w="1601"/><text x="6.4841%" y="127.50">core::i..</text></g><g><title>core::cmp::min_by (1,601 samples, 5.90%)</title><rect x="6.2341%" y="101" width="5.8988%" height="15" fill="rgb(230,62,27)" fg:x="1692" fg:w="1601"/><text x="6.4841%" y="111.50">core::c..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1,208 samples, 4.45%)</title><rect x="13.7173%" y="101" width="4.4508%" height="15" fill="rgb(216,154,8)" fg:x="3723" fg:w="1208"/><text x="13.9673%" y="111.50">&lt;i32 ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (372 samples, 1.37%)</title><rect x="18.1681%" y="69" width="1.3706%" height="15" fill="rgb(244,35,45)" fg:x="4931" fg:w="372"/><text x="18.4181%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (372 samples, 1.37%)</title><rect x="18.1681%" y="53" width="1.3706%" height="15" fill="rgb(251,115,12)" fg:x="4931" fg:w="372"/><text x="18.4181%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (372 samples, 1.37%)</title><rect x="18.1681%" y="37" width="1.3706%" height="15" fill="rgb(240,54,50)" fg:x="4931" fg:w="372"/><text x="18.4181%" y="47.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (662 samples, 2.44%)</title><rect x="18.1681%" y="101" width="2.4391%" height="15" fill="rgb(233,84,52)" fg:x="4931" fg:w="662"/><text x="18.4181%" y="111.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (662 samples, 2.44%)</title><rect x="18.1681%" y="85" width="2.4391%" height="15" fill="rgb(207,117,47)" fg:x="4931" fg:w="662"/><text x="18.4181%" y="95.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (290 samples, 1.07%)</title><rect x="19.5387%" y="69" width="1.0685%" height="15" fill="rgb(249,43,39)" fg:x="5303" fg:w="290"/><text x="19.7887%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (290 samples, 1.07%)</title><rect x="19.5387%" y="53" width="1.0685%" height="15" fill="rgb(209,38,44)" fg:x="5303" fg:w="290"/><text x="19.7887%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (203 samples, 0.75%)</title><rect x="22.0220%" y="69" width="0.7479%" height="15" fill="rgb(236,212,23)" fg:x="5977" fg:w="203"/><text x="22.2720%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (748 samples, 2.76%)</title><rect x="22.0220%" y="85" width="2.7560%" height="15" fill="rgb(242,79,21)" fg:x="5977" fg:w="748"/><text x="22.2720%" y="95.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (545 samples, 2.01%)</title><rect x="22.7700%" y="69" width="2.0080%" height="15" fill="rgb(211,96,35)" fg:x="6180" fg:w="545"/><text x="23.0200%" y="79.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (545 samples, 2.01%)</title><rect x="22.7700%" y="53" width="2.0080%" height="15" fill="rgb(253,215,40)" fg:x="6180" fg:w="545"/><text x="23.0200%" y="63.50">&lt;..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (631 samples, 2.32%)</title><rect x="24.7780%" y="85" width="2.3249%" height="15" fill="rgb(211,81,21)" fg:x="6725" fg:w="631"/><text x="25.0280%" y="95.50">&lt;..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1,417 samples, 5.22%)</title><rect x="27.1029%" y="85" width="5.2209%" height="15" fill="rgb(208,190,38)" fg:x="7356" fg:w="1417"/><text x="27.3529%" y="95.50">&lt;i32 a..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (770 samples, 2.84%)</title><rect x="32.3238%" y="85" width="2.8370%" height="15" fill="rgb(235,213,38)" fg:x="8773" fg:w="770"/><text x="32.5738%" y="95.50">pe..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (9,031 samples, 33.27%)</title><rect x="2.3617%" y="197" width="33.2744%" height="15" fill="rgb(237,122,38)" fg:x="641" fg:w="9031"/><text x="2.6117%" y="207.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8,540 samples, 31.47%)</title><rect x="4.1708%" y="181" width="31.4653%" height="15" fill="rgb(244,218,35)" fg:x="1132" fg:w="8540"/><text x="4.4208%" y="191.50">core::ops::function::impls::&lt;impl core::ops::functi..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (8,410 samples, 30.99%)</title><rect x="4.6498%" y="165" width="30.9863%" height="15" fill="rgb(240,68,47)" fg:x="1262" fg:w="8410"/><text x="4.8998%" y="175.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (7,980 samples, 29.40%)</title><rect x="6.2341%" y="149" width="29.4020%" height="15" fill="rgb(210,16,53)" fg:x="1692" fg:w="7980"/><text x="6.4841%" y="159.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wra..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7,980 samples, 29.40%)</title><rect x="6.2341%" y="133" width="29.4020%" height="15" fill="rgb(235,124,12)" fg:x="1692" fg:w="7980"/><text x="6.4841%" y="143.50">core::iter::adapters::map::map_fold::_{{closure..</text></g><g><title>main::_find_block_search::_{{closure}} (6,379 samples, 23.50%)</title><rect x="12.1329%" y="117" width="23.5032%" height="15" fill="rgb(224,169,11)" fg:x="3293" fg:w="6379"/><text x="12.3829%" y="127.50">main::_find_block_search::_{{closure}}</text></g><g><title>main::get_reduced_cost_edgeindex (4,079 samples, 15.03%)</title><rect x="20.6072%" y="101" width="15.0289%" height="15" fill="rgb(250,166,2)" fg:x="5593" fg:w="4079"/><text x="20.8572%" y="111.50">main::get_reduced_cost_..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (129 samples, 0.48%)</title><rect x="35.1608%" y="85" width="0.4753%" height="15" fill="rgb(242,216,29)" fg:x="9543" fg:w="129"/><text x="35.4108%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,240 samples, 34.04%)</title><rect x="1.8791%" y="325" width="34.0444%" height="15" fill="rgb(230,116,27)" fg:x="510" fg:w="9240"/><text x="2.1291%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,239 samples, 34.04%)</title><rect x="1.8828%" y="309" width="34.0408%" height="15" fill="rgb(228,99,48)" fg:x="511" fg:w="9239"/><text x="2.1328%" y="319.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (9,239 samples, 34.04%)</title><rect x="1.8828%" y="293" width="34.0408%" height="15" fill="rgb(253,11,6)" fg:x="511" fg:w="9239"/><text x="2.1328%" y="303.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::ada..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,239 samples, 34.04%)</title><rect x="1.8828%" y="277" width="34.0408%" height="15" fill="rgb(247,143,39)" fg:x="511" fg:w="9239"/><text x="2.1328%" y="287.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,239 samples, 34.04%)</title><rect x="1.8828%" y="261" width="34.0408%" height="15" fill="rgb(236,97,10)" fg:x="511" fg:w="9239"/><text x="2.1328%" y="271.50">&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,238 samples, 34.04%)</title><rect x="1.8864%" y="245" width="34.0371%" height="15" fill="rgb(233,208,19)" fg:x="512" fg:w="9238"/><text x="2.1364%" y="255.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::t..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,238 samples, 34.04%)</title><rect x="1.8864%" y="229" width="34.0371%" height="15" fill="rgb(216,164,2)" fg:x="512" fg:w="9238"/><text x="2.1364%" y="239.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core:..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9,238 samples, 34.04%)</title><rect x="1.8864%" y="213" width="34.0371%" height="15" fill="rgb(220,129,5)" fg:x="512" fg:w="9238"/><text x="2.1364%" y="223.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.29%)</title><rect x="35.6361%" y="197" width="0.2874%" height="15" fill="rgb(242,17,10)" fg:x="9672" fg:w="78"/><text x="35.8861%" y="207.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (12 samples, 0.04%)</title><rect x="35.8793%" y="181" width="0.0442%" height="15" fill="rgb(242,107,0)" fg:x="9738" fg:w="12"/><text x="36.1293%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (12 samples, 0.04%)</title><rect x="35.8793%" y="165" width="0.0442%" height="15" fill="rgb(251,28,31)" fg:x="9738" fg:w="12"/><text x="36.1293%" y="175.50"></text></g><g><title>main::_find_block_search (9,255 samples, 34.10%)</title><rect x="1.8607%" y="373" width="34.0997%" height="15" fill="rgb(233,223,10)" fg:x="505" fg:w="9255"/><text x="2.1107%" y="383.50">main::_find_block_search</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (9,250 samples, 34.08%)</title><rect x="1.8791%" y="357" width="34.0813%" height="15" fill="rgb(215,21,27)" fg:x="510" fg:w="9250"/><text x="2.1291%" y="367.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (9,250 samples, 34.08%)</title><rect x="1.8791%" y="341" width="34.0813%" height="15" fill="rgb(232,23,21)" fg:x="510" fg:w="9250"/><text x="2.1291%" y="351.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="35.9235%" y="325" width="0.0368%" height="15" fill="rgb(244,5,23)" fg:x="9750" fg:w="10"/><text x="36.1735%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 0.03%)</title><rect x="35.9272%" y="309" width="0.0332%" height="15" fill="rgb(226,81,46)" fg:x="9751" fg:w="9"/><text x="36.1772%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 0.02%)</title><rect x="35.9419%" y="293" width="0.0184%" height="15" fill="rgb(247,70,30)" fg:x="9755" fg:w="5"/><text x="36.1919%" y="303.50"></text></g><g><title>main::_find_block_search::_{{closure}} (5 samples, 0.02%)</title><rect x="35.9419%" y="277" width="0.0184%" height="15" fill="rgb(212,68,19)" fg:x="9755" fg:w="5"/><text x="36.1919%" y="287.50"></text></g><g><title>main::get_reduced_cost_edgeindex (5 samples, 0.02%)</title><rect x="35.9419%" y="261" width="0.0184%" height="15" fill="rgb(240,187,13)" fg:x="9755" fg:w="5"/><text x="36.1919%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (3 samples, 0.01%)</title><rect x="35.9751%" y="357" width="0.0111%" height="15" fill="rgb(223,113,26)" fg:x="9764" fg:w="3"/><text x="36.2251%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.01%)</title><rect x="35.9751%" y="341" width="0.0111%" height="15" fill="rgb(206,192,2)" fg:x="9764" fg:w="3"/><text x="36.2251%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.01%)</title><rect x="35.9861%" y="357" width="0.0111%" height="15" fill="rgb(241,108,4)" fg:x="9767" fg:w="3"/><text x="36.2361%" y="367.50"></text></g><g><title>[libc.so.6] (9 samples, 0.03%)</title><rect x="36.0046%" y="245" width="0.0332%" height="15" fill="rgb(247,173,49)" fg:x="9772" fg:w="9"/><text x="36.2546%" y="255.50"></text></g><g><title>__libc_calloc (30 samples, 0.11%)</title><rect x="36.0377%" y="245" width="0.1105%" height="15" fill="rgb(224,114,35)" fg:x="9781" fg:w="30"/><text x="36.2877%" y="255.50"></text></g><g><title>[libc.so.6] (26 samples, 0.10%)</title><rect x="36.0525%" y="229" width="0.0958%" height="15" fill="rgb(245,159,27)" fg:x="9785" fg:w="26"/><text x="36.3025%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (42 samples, 0.15%)</title><rect x="35.9972%" y="325" width="0.1547%" height="15" fill="rgb(245,172,44)" fg:x="9770" fg:w="42"/><text x="36.2472%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (42 samples, 0.15%)</title><rect x="35.9972%" y="309" width="0.1547%" height="15" fill="rgb(236,23,11)" fg:x="9770" fg:w="42"/><text x="36.2472%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (40 samples, 0.15%)</title><rect x="36.0046%" y="293" width="0.1474%" height="15" fill="rgb(205,117,38)" fg:x="9772" fg:w="40"/><text x="36.2546%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.15%)</title><rect x="36.0046%" y="277" width="0.1474%" height="15" fill="rgb(237,72,25)" fg:x="9772" fg:w="40"/><text x="36.2546%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (40 samples, 0.15%)</title><rect x="36.0046%" y="261" width="0.1474%" height="15" fill="rgb(244,70,9)" fg:x="9772" fg:w="40"/><text x="36.2546%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.03%)</title><rect x="36.1667%" y="309" width="0.0258%" height="15" fill="rgb(217,125,39)" fg:x="9816" fg:w="7"/><text x="36.4167%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.03%)</title><rect x="36.1667%" y="293" width="0.0258%" height="15" fill="rgb(235,36,10)" fg:x="9816" fg:w="7"/><text x="36.4167%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 0.07%)</title><rect x="36.1519%" y="325" width="0.0663%" height="15" fill="rgb(251,123,47)" fg:x="9812" fg:w="18"/><text x="36.4019%" y="335.50"></text></g><g><title>core::ptr::write (6 samples, 0.02%)</title><rect x="36.1962%" y="309" width="0.0221%" height="15" fill="rgb(221,13,13)" fg:x="9824" fg:w="6"/><text x="36.4462%" y="319.50"></text></g><g><title>alloc::vec::from_elem (116 samples, 0.43%)</title><rect x="35.9972%" y="357" width="0.4274%" height="15" fill="rgb(238,131,9)" fg:x="9770" fg:w="116"/><text x="36.2472%" y="367.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (116 samples, 0.43%)</title><rect x="35.9972%" y="341" width="0.4274%" height="15" fill="rgb(211,50,8)" fg:x="9770" fg:w="116"/><text x="36.2472%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (56 samples, 0.21%)</title><rect x="36.2183%" y="325" width="0.2063%" height="15" fill="rgb(245,182,24)" fg:x="9830" fg:w="56"/><text x="36.4683%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (56 samples, 0.21%)</title><rect x="36.2183%" y="309" width="0.2063%" height="15" fill="rgb(242,14,37)" fg:x="9830" fg:w="56"/><text x="36.4683%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (56 samples, 0.21%)</title><rect x="36.2183%" y="293" width="0.2063%" height="15" fill="rgb(246,228,12)" fg:x="9830" fg:w="56"/><text x="36.4683%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55 samples, 0.20%)</title><rect x="36.2220%" y="277" width="0.2026%" height="15" fill="rgb(213,55,15)" fg:x="9831" fg:w="55"/><text x="36.4720%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.20%)</title><rect x="36.2220%" y="261" width="0.2026%" height="15" fill="rgb(209,9,3)" fg:x="9831" fg:w="55"/><text x="36.4720%" y="271.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.20%)</title><rect x="36.2220%" y="245" width="0.2026%" height="15" fill="rgb(230,59,30)" fg:x="9831" fg:w="55"/><text x="36.4720%" y="255.50"></text></g><g><title>malloc (52 samples, 0.19%)</title><rect x="36.2330%" y="229" width="0.1916%" height="15" fill="rgb(209,121,21)" fg:x="9834" fg:w="52"/><text x="36.4830%" y="239.50"></text></g><g><title>[libc.so.6] (38 samples, 0.14%)</title><rect x="36.2846%" y="213" width="0.1400%" height="15" fill="rgb(220,109,13)" fg:x="9848" fg:w="38"/><text x="36.5346%" y="223.50"></text></g><g><title>[libc.so.6] (5 samples, 0.02%)</title><rect x="36.4062%" y="197" width="0.0184%" height="15" fill="rgb(232,18,1)" fg:x="9881" fg:w="5"/><text x="36.6562%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (7 samples, 0.03%)</title><rect x="37.3678%" y="261" width="0.0258%" height="15" fill="rgb(215,41,42)" fg:x="10142" fg:w="7"/><text x="37.6178%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (7 samples, 0.03%)</title><rect x="37.3678%" y="245" width="0.0258%" height="15" fill="rgb(224,123,36)" fg:x="10142" fg:w="7"/><text x="37.6178%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (7 samples, 0.03%)</title><rect x="37.3678%" y="229" width="0.0258%" height="15" fill="rgb(240,125,3)" fg:x="10142" fg:w="7"/><text x="37.6178%" y="239.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (50 samples, 0.18%)</title><rect x="37.3936%" y="261" width="0.1842%" height="15" fill="rgb(205,98,50)" fg:x="10149" fg:w="50"/><text x="37.6436%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (47 samples, 0.17%)</title><rect x="37.5778%" y="261" width="0.1732%" height="15" fill="rgb(205,185,37)" fg:x="10199" fg:w="47"/><text x="37.8278%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (47 samples, 0.17%)</title><rect x="37.5778%" y="245" width="0.1732%" height="15" fill="rgb(238,207,15)" fg:x="10199" fg:w="47"/><text x="37.8278%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (47 samples, 0.17%)</title><rect x="37.5778%" y="229" width="0.1732%" height="15" fill="rgb(213,199,42)" fg:x="10199" fg:w="47"/><text x="37.8278%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (47 samples, 0.17%)</title><rect x="37.5778%" y="213" width="0.1732%" height="15" fill="rgb(235,201,11)" fg:x="10199" fg:w="47"/><text x="37.8278%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (374 samples, 1.38%)</title><rect x="36.4283%" y="325" width="1.3780%" height="15" fill="rgb(207,46,11)" fg:x="9887" fg:w="374"/><text x="36.6783%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (317 samples, 1.17%)</title><rect x="36.6383%" y="309" width="1.1680%" height="15" fill="rgb(241,35,35)" fg:x="9944" fg:w="317"/><text x="36.8883%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (317 samples, 1.17%)</title><rect x="36.6383%" y="293" width="1.1680%" height="15" fill="rgb(243,32,47)" fg:x="9944" fg:w="317"/><text x="36.8883%" y="303.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (317 samples, 1.17%)</title><rect x="36.6383%" y="277" width="1.1680%" height="15" fill="rgb(247,202,23)" fg:x="9944" fg:w="317"/><text x="36.8883%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (15 samples, 0.06%)</title><rect x="37.7510%" y="261" width="0.0553%" height="15" fill="rgb(219,102,11)" fg:x="10246" fg:w="15"/><text x="38.0010%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (80 samples, 0.29%)</title><rect x="38.2558%" y="261" width="0.2948%" height="15" fill="rgb(243,110,44)" fg:x="10383" fg:w="80"/><text x="38.5058%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (80 samples, 0.29%)</title><rect x="38.2558%" y="245" width="0.2948%" height="15" fill="rgb(222,74,54)" fg:x="10383" fg:w="80"/><text x="38.5058%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (80 samples, 0.29%)</title><rect x="38.2558%" y="229" width="0.2948%" height="15" fill="rgb(216,99,12)" fg:x="10383" fg:w="80"/><text x="38.5058%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (50 samples, 0.18%)</title><rect x="38.5505%" y="245" width="0.1842%" height="15" fill="rgb(226,22,26)" fg:x="10463" fg:w="50"/><text x="38.8005%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (50 samples, 0.18%)</title><rect x="38.5505%" y="229" width="0.1842%" height="15" fill="rgb(217,163,10)" fg:x="10463" fg:w="50"/><text x="38.8005%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (683 samples, 2.52%)</title><rect x="42.2755%" y="229" width="2.5165%" height="15" fill="rgb(213,25,53)" fg:x="11474" fg:w="683"/><text x="42.5255%" y="239.50">&lt;p..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (683 samples, 2.52%)</title><rect x="42.2755%" y="213" width="2.5165%" height="15" fill="rgb(252,105,26)" fg:x="11474" fg:w="683"/><text x="42.5255%" y="223.50">co..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1,919 samples, 7.07%)</title><rect x="37.8063%" y="309" width="7.0705%" height="15" fill="rgb(220,39,43)" fg:x="10261" fg:w="1919"/><text x="38.0563%" y="319.50">&lt;core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1,874 samples, 6.90%)</title><rect x="37.9721%" y="293" width="6.9047%" height="15" fill="rgb(229,68,48)" fg:x="10306" fg:w="1874"/><text x="38.2221%" y="303.50">core::ite..</text></g><g><title>main::compute_flowchange::_{{closure}} (1,874 samples, 6.90%)</title><rect x="37.9721%" y="277" width="6.9047%" height="15" fill="rgb(252,8,32)" fg:x="10306" fg:w="1874"/><text x="38.2221%" y="287.50">main::com..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (1,717 samples, 6.33%)</title><rect x="38.5505%" y="261" width="6.3262%" height="15" fill="rgb(223,20,43)" fg:x="10463" fg:w="1717"/><text x="38.8005%" y="271.50">petgraph..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (1,667 samples, 6.14%)</title><rect x="38.7348%" y="245" width="6.1420%" height="15" fill="rgb(229,81,49)" fg:x="10513" fg:w="1667"/><text x="38.9848%" y="255.50">petgraph..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (23 samples, 0.08%)</title><rect x="44.7920%" y="229" width="0.0847%" height="15" fill="rgb(236,28,36)" fg:x="12157" fg:w="23"/><text x="45.0420%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (23 samples, 0.08%)</title><rect x="44.7920%" y="213" width="0.0847%" height="15" fill="rgb(249,185,26)" fg:x="12157" fg:w="23"/><text x="45.0420%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (23 samples, 0.08%)</title><rect x="44.9247%" y="277" width="0.0847%" height="15" fill="rgb(249,174,33)" fg:x="12193" fg:w="23"/><text x="45.1747%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,368 samples, 8.72%)</title><rect x="36.4283%" y="357" width="8.7248%" height="15" fill="rgb(233,201,37)" fg:x="9887" fg:w="2368"/><text x="36.6783%" y="367.50">core::iter::..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,368 samples, 8.72%)</title><rect x="36.4283%" y="341" width="8.7248%" height="15" fill="rgb(221,78,26)" fg:x="9887" fg:w="2368"/><text x="36.6783%" y="351.50">&lt;core::iter:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,994 samples, 7.35%)</title><rect x="37.8063%" y="325" width="7.3468%" height="15" fill="rgb(250,127,30)" fg:x="10261" fg:w="1994"/><text x="38.0563%" y="335.50">core::iter..</text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.28%)</title><rect x="44.8768%" y="309" width="0.2763%" height="15" fill="rgb(230,49,44)" fg:x="12180" fg:w="75"/><text x="45.1268%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.25%)</title><rect x="44.8989%" y="293" width="0.2542%" height="15" fill="rgb(229,67,23)" fg:x="12186" fg:w="69"/><text x="45.1489%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (39 samples, 0.14%)</title><rect x="45.0094%" y="277" width="0.1437%" height="15" fill="rgb(249,83,47)" fg:x="12216" fg:w="39"/><text x="45.2594%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (39 samples, 0.14%)</title><rect x="45.0094%" y="261" width="0.1437%" height="15" fill="rgb(215,43,3)" fg:x="12216" fg:w="39"/><text x="45.2594%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (101 samples, 0.37%)</title><rect x="45.1973%" y="293" width="0.3721%" height="15" fill="rgb(238,154,13)" fg:x="12267" fg:w="101"/><text x="45.4473%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (101 samples, 0.37%)</title><rect x="45.1973%" y="277" width="0.3721%" height="15" fill="rgb(219,56,2)" fg:x="12267" fg:w="101"/><text x="45.4473%" y="287.50"></text></g><g><title>core::cmp::min_by (101 samples, 0.37%)</title><rect x="45.1973%" y="261" width="0.3721%" height="15" fill="rgb(233,0,4)" fg:x="12267" fg:w="101"/><text x="45.4473%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (14 samples, 0.05%)</title><rect x="45.5179%" y="245" width="0.0516%" height="15" fill="rgb(235,30,7)" fg:x="12354" fg:w="14"/><text x="45.7679%" y="255.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (14 samples, 0.05%)</title><rect x="45.5179%" y="229" width="0.0516%" height="15" fill="rgb(250,79,13)" fg:x="12354" fg:w="14"/><text x="45.7679%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (118 samples, 0.43%)</title><rect x="45.1531%" y="357" width="0.4348%" height="15" fill="rgb(211,146,34)" fg:x="12255" fg:w="118"/><text x="45.4031%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (118 samples, 0.43%)</title><rect x="45.1531%" y="341" width="0.4348%" height="15" fill="rgb(228,22,38)" fg:x="12255" fg:w="118"/><text x="45.4031%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (118 samples, 0.43%)</title><rect x="45.1531%" y="325" width="0.4348%" height="15" fill="rgb(235,168,5)" fg:x="12255" fg:w="118"/><text x="45.4031%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (118 samples, 0.43%)</title><rect x="45.1531%" y="309" width="0.4348%" height="15" fill="rgb(221,155,16)" fg:x="12255" fg:w="118"/><text x="45.4031%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (5 samples, 0.02%)</title><rect x="45.5694%" y="293" width="0.0184%" height="15" fill="rgb(215,215,53)" fg:x="12368" fg:w="5"/><text x="45.8194%" y="303.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="45.5952%" y="277" width="0.0111%" height="15" fill="rgb(223,4,10)" fg:x="12375" fg:w="3"/><text x="45.8452%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (27 samples, 0.10%)</title><rect x="45.5879%" y="357" width="0.0995%" height="15" fill="rgb(234,103,6)" fg:x="12373" fg:w="27"/><text x="45.8379%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (27 samples, 0.10%)</title><rect x="45.5879%" y="341" width="0.0995%" height="15" fill="rgb(227,97,0)" fg:x="12373" fg:w="27"/><text x="45.8379%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.10%)</title><rect x="45.5879%" y="325" width="0.0995%" height="15" fill="rgb(234,150,53)" fg:x="12373" fg:w="27"/><text x="45.8379%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.10%)</title><rect x="45.5879%" y="309" width="0.0995%" height="15" fill="rgb(228,201,54)" fg:x="12373" fg:w="27"/><text x="45.8379%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.10%)</title><rect x="45.5879%" y="293" width="0.0995%" height="15" fill="rgb(222,22,37)" fg:x="12373" fg:w="27"/><text x="45.8379%" y="303.50"></text></g><g><title>cfree (21 samples, 0.08%)</title><rect x="45.6100%" y="277" width="0.0774%" height="15" fill="rgb(237,53,32)" fg:x="12379" fg:w="21"/><text x="45.8600%" y="287.50"></text></g><g><title>[libc.so.6] (15 samples, 0.06%)</title><rect x="45.6321%" y="261" width="0.0553%" height="15" fill="rgb(233,25,53)" fg:x="12385" fg:w="15"/><text x="45.8821%" y="271.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="45.6726%" y="245" width="0.0147%" height="15" fill="rgb(210,40,34)" fg:x="12396" fg:w="4"/><text x="45.9226%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (14 samples, 0.05%)</title><rect x="45.6873%" y="357" width="0.0516%" height="15" fill="rgb(241,220,44)" fg:x="12400" fg:w="14"/><text x="45.9373%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (14 samples, 0.05%)</title><rect x="45.6873%" y="341" width="0.0516%" height="15" fill="rgb(235,28,35)" fg:x="12400" fg:w="14"/><text x="45.9373%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.05%)</title><rect x="45.6873%" y="325" width="0.0516%" height="15" fill="rgb(210,56,17)" fg:x="12400" fg:w="14"/><text x="45.9373%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.05%)</title><rect x="45.6873%" y="309" width="0.0516%" height="15" fill="rgb(224,130,29)" fg:x="12400" fg:w="14"/><text x="45.9373%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.05%)</title><rect x="45.6873%" y="293" width="0.0516%" height="15" fill="rgb(235,212,8)" fg:x="12400" fg:w="14"/><text x="45.9373%" y="303.50"></text></g><g><title>cfree (14 samples, 0.05%)</title><rect x="45.6873%" y="277" width="0.0516%" height="15" fill="rgb(223,33,50)" fg:x="12400" fg:w="14"/><text x="45.9373%" y="287.50"></text></g><g><title>[libc.so.6] (12 samples, 0.04%)</title><rect x="45.6947%" y="261" width="0.0442%" height="15" fill="rgb(219,149,13)" fg:x="12402" fg:w="12"/><text x="45.9447%" y="271.50"></text></g><g><title>[libc.so.6] (8 samples, 0.03%)</title><rect x="45.7094%" y="245" width="0.0295%" height="15" fill="rgb(250,156,29)" fg:x="12406" fg:w="8"/><text x="45.9594%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.01%)</title><rect x="45.7279%" y="229" width="0.0111%" height="15" fill="rgb(216,193,19)" fg:x="12411" fg:w="3"/><text x="45.9779%" y="239.50"></text></g><g><title>main::compute_flowchange (2,657 samples, 9.79%)</title><rect x="35.9604%" y="373" width="9.7896%" height="15" fill="rgb(216,135,14)" fg:x="9760" fg:w="2657"/><text x="36.2104%" y="383.50">main::compute_..</text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (3 samples, 0.01%)</title><rect x="45.7389%" y="357" width="0.0111%" height="15" fill="rgb(241,47,5)" fg:x="12414" fg:w="3"/><text x="45.9889%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (3 samples, 0.01%)</title><rect x="45.7389%" y="341" width="0.0111%" height="15" fill="rgb(233,42,35)" fg:x="12414" fg:w="3"/><text x="45.9889%" y="351.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (4 samples, 0.01%)</title><rect x="45.7647%" y="357" width="0.0147%" height="15" fill="rgb(231,13,6)" fg:x="12421" fg:w="4"/><text x="46.0147%" y="367.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (3 samples, 0.01%)</title><rect x="45.7684%" y="341" width="0.0111%" height="15" fill="rgb(207,181,40)" fg:x="12422" fg:w="3"/><text x="46.0184%" y="351.50"></text></g><g><title>main::compute_node_potentials (10 samples, 0.04%)</title><rect x="45.7500%" y="373" width="0.0368%" height="15" fill="rgb(254,173,49)" fg:x="12417" fg:w="10"/><text x="46.0000%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (60 samples, 0.22%)</title><rect x="48.4654%" y="357" width="0.2211%" height="15" fill="rgb(221,1,38)" fg:x="13154" fg:w="60"/><text x="48.7154%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (60 samples, 0.22%)</title><rect x="48.4654%" y="341" width="0.2211%" height="15" fill="rgb(206,124,46)" fg:x="13154" fg:w="60"/><text x="48.7154%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (60 samples, 0.22%)</title><rect x="48.4654%" y="325" width="0.2211%" height="15" fill="rgb(249,21,11)" fg:x="13154" fg:w="60"/><text x="48.7154%" y="335.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.05%)</title><rect x="48.6865%" y="357" width="0.0479%" height="15" fill="rgb(222,201,40)" fg:x="13214" fg:w="13"/><text x="48.9365%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.05%)</title><rect x="48.6865%" y="341" width="0.0479%" height="15" fill="rgb(235,61,29)" fg:x="13214" fg:w="13"/><text x="48.9365%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.05%)</title><rect x="48.6865%" y="325" width="0.0479%" height="15" fill="rgb(219,207,3)" fg:x="13214" fg:w="13"/><text x="48.9365%" y="335.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.05%)</title><rect x="48.6865%" y="309" width="0.0479%" height="15" fill="rgb(222,56,46)" fg:x="13214" fg:w="13"/><text x="48.9365%" y="319.50"></text></g><g><title>malloc (12 samples, 0.04%)</title><rect x="48.6902%" y="293" width="0.0442%" height="15" fill="rgb(239,76,54)" fg:x="13215" fg:w="12"/><text x="48.9402%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.01%)</title><rect x="48.8744%" y="309" width="0.0111%" height="15" fill="rgb(231,124,27)" fg:x="13265" fg:w="3"/><text x="49.1244%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (3 samples, 0.01%)</title><rect x="48.8855%" y="309" width="0.0111%" height="15" fill="rgb(249,195,6)" fg:x="13268" fg:w="3"/><text x="49.1355%" y="319.50"></text></g><g><title>__rdl_realloc (3 samples, 0.01%)</title><rect x="48.9039%" y="245" width="0.0111%" height="15" fill="rgb(237,174,47)" fg:x="13273" fg:w="3"/><text x="49.1539%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (270 samples, 0.99%)</title><rect x="48.9002%" y="293" width="0.9948%" height="15" fill="rgb(206,201,31)" fg:x="13272" fg:w="270"/><text x="49.1502%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (270 samples, 0.99%)</title><rect x="48.9002%" y="277" width="0.9948%" height="15" fill="rgb(231,57,52)" fg:x="13272" fg:w="270"/><text x="49.1502%" y="287.50"></text></g><g><title>alloc::alloc::realloc (269 samples, 0.99%)</title><rect x="48.9039%" y="261" width="0.9911%" height="15" fill="rgb(248,177,22)" fg:x="13273" fg:w="269"/><text x="49.1539%" y="271.50"></text></g><g><title>realloc (265 samples, 0.98%)</title><rect x="48.9186%" y="245" width="0.9764%" height="15" fill="rgb(215,211,37)" fg:x="13277" fg:w="265"/><text x="49.1686%" y="255.50"></text></g><g><title>[libc.so.6] (237 samples, 0.87%)</title><rect x="49.0218%" y="229" width="0.8732%" height="15" fill="rgb(241,128,51)" fg:x="13305" fg:w="237"/><text x="49.2718%" y="239.50"></text></g><g><title>[libc.so.6] (211 samples, 0.78%)</title><rect x="49.1176%" y="213" width="0.7774%" height="15" fill="rgb(227,165,31)" fg:x="13331" fg:w="211"/><text x="49.3676%" y="223.50"></text></g><g><title>[libc.so.6] (40 samples, 0.15%)</title><rect x="49.7476%" y="197" width="0.1474%" height="15" fill="rgb(228,167,24)" fg:x="13502" fg:w="40"/><text x="49.9976%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (273 samples, 1.01%)</title><rect x="48.8965%" y="309" width="1.0059%" height="15" fill="rgb(228,143,12)" fg:x="13271" fg:w="273"/><text x="49.1465%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (288 samples, 1.06%)</title><rect x="48.8560%" y="341" width="1.0611%" height="15" fill="rgb(249,149,8)" fg:x="13260" fg:w="288"/><text x="49.1060%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (288 samples, 1.06%)</title><rect x="48.8560%" y="325" width="1.0611%" height="15" fill="rgb(243,35,44)" fg:x="13260" fg:w="288"/><text x="49.1060%" y="335.50"></text></g><g><title>core::cmp::max (4 samples, 0.01%)</title><rect x="49.9024%" y="309" width="0.0147%" height="15" fill="rgb(246,89,9)" fg:x="13544" fg:w="4"/><text x="50.1524%" y="319.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.01%)</title><rect x="49.9024%" y="293" width="0.0147%" height="15" fill="rgb(233,213,13)" fg:x="13544" fg:w="4"/><text x="50.1524%" y="303.50"></text></g><g><title>core::cmp::max_by (4 samples, 0.01%)</title><rect x="49.9024%" y="277" width="0.0147%" height="15" fill="rgb(233,141,41)" fg:x="13544" fg:w="4"/><text x="50.1524%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.10%)</title><rect x="49.9171%" y="341" width="0.0995%" height="15" fill="rgb(239,167,4)" fg:x="13548" fg:w="27"/><text x="50.1671%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (27 samples, 0.10%)</title><rect x="49.9171%" y="325" width="0.0995%" height="15" fill="rgb(209,217,16)" fg:x="13548" fg:w="27"/><text x="50.1671%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (373 samples, 1.37%)</title><rect x="48.7344%" y="357" width="1.3743%" height="15" fill="rgb(219,88,35)" fg:x="13227" fg:w="373"/><text x="48.9844%" y="367.50"></text></g><g><title>core::ptr::write (25 samples, 0.09%)</title><rect x="50.0166%" y="341" width="0.0921%" height="15" fill="rgb(220,193,23)" fg:x="13575" fg:w="25"/><text x="50.2666%" y="351.50"></text></g><g><title>core::cmp::PartialEq::ne (29 samples, 0.11%)</title><rect x="50.1087%" y="357" width="0.1068%" height="15" fill="rgb(230,90,52)" fg:x="13600" fg:w="29"/><text x="50.3587%" y="367.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (29 samples, 0.11%)</title><rect x="50.1087%" y="341" width="0.1068%" height="15" fill="rgb(252,106,19)" fg:x="13600" fg:w="29"/><text x="50.3587%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (29 samples, 0.11%)</title><rect x="50.1087%" y="325" width="0.1068%" height="15" fill="rgb(206,74,20)" fg:x="13600" fg:w="29"/><text x="50.3587%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (6 samples, 0.02%)</title><rect x="50.2155%" y="293" width="0.0221%" height="15" fill="rgb(230,138,44)" fg:x="13629" fg:w="6"/><text x="50.4655%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="50.2155%" y="277" width="0.0221%" height="15" fill="rgb(235,182,43)" fg:x="13629" fg:w="6"/><text x="50.4655%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (52 samples, 0.19%)</title><rect x="50.3445%" y="197" width="0.1916%" height="15" fill="rgb(242,16,51)" fg:x="13664" fg:w="52"/><text x="50.5945%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (52 samples, 0.19%)</title><rect x="50.3445%" y="181" width="0.1916%" height="15" fill="rgb(248,9,4)" fg:x="13664" fg:w="52"/><text x="50.5945%" y="191.50"></text></g><g><title>alloc::alloc::realloc (52 samples, 0.19%)</title><rect x="50.3445%" y="165" width="0.1916%" height="15" fill="rgb(210,31,22)" fg:x="13664" fg:w="52"/><text x="50.5945%" y="175.50"></text></g><g><title>realloc (52 samples, 0.19%)</title><rect x="50.3445%" y="149" width="0.1916%" height="15" fill="rgb(239,54,39)" fg:x="13664" fg:w="52"/><text x="50.5945%" y="159.50"></text></g><g><title>[libc.so.6] (48 samples, 0.18%)</title><rect x="50.3592%" y="133" width="0.1769%" height="15" fill="rgb(230,99,41)" fg:x="13668" fg:w="48"/><text x="50.6092%" y="143.50"></text></g><g><title>[libc.so.6] (43 samples, 0.16%)</title><rect x="50.3777%" y="117" width="0.1584%" height="15" fill="rgb(253,106,12)" fg:x="13673" fg:w="43"/><text x="50.6277%" y="127.50"></text></g><g><title>[libc.so.6] (13 samples, 0.05%)</title><rect x="50.4882%" y="101" width="0.0479%" height="15" fill="rgb(213,46,41)" fg:x="13703" fg:w="13"/><text x="50.7382%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (54 samples, 0.20%)</title><rect x="50.3445%" y="245" width="0.1990%" height="15" fill="rgb(215,133,35)" fg:x="13664" fg:w="54"/><text x="50.5945%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (54 samples, 0.20%)</title><rect x="50.3445%" y="229" width="0.1990%" height="15" fill="rgb(213,28,5)" fg:x="13664" fg:w="54"/><text x="50.5945%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (54 samples, 0.20%)</title><rect x="50.3445%" y="213" width="0.1990%" height="15" fill="rgb(215,77,49)" fg:x="13664" fg:w="54"/><text x="50.5945%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11 samples, 0.04%)</title><rect x="50.5435%" y="245" width="0.0405%" height="15" fill="rgb(248,100,22)" fg:x="13718" fg:w="11"/><text x="50.7935%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.04%)</title><rect x="50.5435%" y="229" width="0.0405%" height="15" fill="rgb(208,67,9)" fg:x="13718" fg:w="11"/><text x="50.7935%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (167 samples, 0.62%)</title><rect x="50.2155%" y="325" width="0.6153%" height="15" fill="rgb(219,133,21)" fg:x="13629" fg:w="167"/><text x="50.4655%" y="335.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (167 samples, 0.62%)</title><rect x="50.2155%" y="309" width="0.6153%" height="15" fill="rgb(246,46,29)" fg:x="13629" fg:w="167"/><text x="50.4655%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (161 samples, 0.59%)</title><rect x="50.2376%" y="293" width="0.5932%" height="15" fill="rgb(246,185,52)" fg:x="13635" fg:w="161"/><text x="50.4876%" y="303.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (161 samples, 0.59%)</title><rect x="50.2376%" y="277" width="0.5932%" height="15" fill="rgb(252,136,11)" fg:x="13635" fg:w="161"/><text x="50.4876%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (161 samples, 0.59%)</title><rect x="50.2376%" y="261" width="0.5932%" height="15" fill="rgb(219,138,53)" fg:x="13635" fg:w="161"/><text x="50.4876%" y="271.50"></text></g><g><title>core::ptr::write (67 samples, 0.25%)</title><rect x="50.5840%" y="245" width="0.2469%" height="15" fill="rgb(211,51,23)" fg:x="13729" fg:w="67"/><text x="50.8340%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (169 samples, 0.62%)</title><rect x="50.2155%" y="357" width="0.6227%" height="15" fill="rgb(247,221,28)" fg:x="13629" fg:w="169"/><text x="50.4655%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (169 samples, 0.62%)</title><rect x="50.2155%" y="341" width="0.6227%" height="15" fill="rgb(251,222,45)" fg:x="13629" fg:w="169"/><text x="50.4655%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (205 samples, 0.76%)</title><rect x="50.8382%" y="357" width="0.7553%" height="15" fill="rgb(217,162,53)" fg:x="13798" fg:w="205"/><text x="51.0882%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (13 samples, 0.05%)</title><rect x="51.5935%" y="357" width="0.0479%" height="15" fill="rgb(229,93,14)" fg:x="14003" fg:w="13"/><text x="51.8435%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (13 samples, 0.05%)</title><rect x="51.5935%" y="341" width="0.0479%" height="15" fill="rgb(209,67,49)" fg:x="14003" fg:w="13"/><text x="51.8435%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="51.5935%" y="325" width="0.0479%" height="15" fill="rgb(213,87,29)" fg:x="14003" fg:w="13"/><text x="51.8435%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.05%)</title><rect x="51.5935%" y="309" width="0.0479%" height="15" fill="rgb(205,151,52)" fg:x="14003" fg:w="13"/><text x="51.8435%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.05%)</title><rect x="51.5935%" y="293" width="0.0479%" height="15" fill="rgb(253,215,39)" fg:x="14003" fg:w="13"/><text x="51.8435%" y="303.50"></text></g><g><title>cfree (13 samples, 0.05%)</title><rect x="51.5935%" y="277" width="0.0479%" height="15" fill="rgb(221,220,41)" fg:x="14003" fg:w="13"/><text x="51.8435%" y="287.50"></text></g><g><title>[libc.so.6] (11 samples, 0.04%)</title><rect x="51.6009%" y="261" width="0.0405%" height="15" fill="rgb(218,133,21)" fg:x="14005" fg:w="11"/><text x="51.8509%" y="271.50"></text></g><g><title>[libc.so.6] (5 samples, 0.02%)</title><rect x="51.6230%" y="245" width="0.0184%" height="15" fill="rgb(221,193,43)" fg:x="14011" fg:w="5"/><text x="51.8730%" y="255.50"></text></g><g><title>main::find_cycle_with_arc (1,616 samples, 5.95%)</title><rect x="45.7868%" y="373" width="5.9541%" height="15" fill="rgb(240,128,52)" fg:x="12427" fg:w="1616"/><text x="46.0368%" y="383.50">main::fi..</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (25 samples, 0.09%)</title><rect x="51.6488%" y="357" width="0.0921%" height="15" fill="rgb(253,114,12)" fg:x="14018" fg:w="25"/><text x="51.8988%" y="367.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (25 samples, 0.09%)</title><rect x="51.6488%" y="341" width="0.0921%" height="15" fill="rgb(215,223,47)" fg:x="14018" fg:w="25"/><text x="51.8988%" y="351.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="51.7409%" y="357" width="0.0147%" height="15" fill="rgb(248,225,23)" fg:x="14043" fg:w="4"/><text x="51.9909%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="51.7409%" y="341" width="0.0147%" height="15" fill="rgb(250,108,0)" fg:x="14043" fg:w="4"/><text x="51.9909%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.01%)</title><rect x="51.7409%" y="325" width="0.0147%" height="15" fill="rgb(228,208,7)" fg:x="14043" fg:w="4"/><text x="51.9909%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.01%)</title><rect x="51.7409%" y="309" width="0.0147%" height="15" fill="rgb(244,45,10)" fg:x="14043" fg:w="4"/><text x="51.9909%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.01%)</title><rect x="51.7409%" y="293" width="0.0147%" height="15" fill="rgb(207,125,25)" fg:x="14043" fg:w="4"/><text x="51.9909%" y="303.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.01%)</title><rect x="51.7446%" y="277" width="0.0111%" height="15" fill="rgb(210,195,18)" fg:x="14044" fg:w="3"/><text x="51.9946%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::IndexMut&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index_mut (4 samples, 0.01%)</title><rect x="51.7630%" y="293" width="0.0147%" height="15" fill="rgb(249,80,12)" fg:x="14049" fg:w="4"/><text x="52.0130%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.01%)</title><rect x="51.7630%" y="277" width="0.0147%" height="15" fill="rgb(221,65,9)" fg:x="14049" fg:w="4"/><text x="52.0130%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.01%)</title><rect x="51.7630%" y="261" width="0.0147%" height="15" fill="rgb(235,49,36)" fg:x="14049" fg:w="4"/><text x="52.0130%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.01%)</title><rect x="51.7630%" y="245" width="0.0147%" height="15" fill="rgb(225,32,20)" fg:x="14049" fg:w="4"/><text x="52.0130%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 0.03%)</title><rect x="51.7630%" y="357" width="0.0332%" height="15" fill="rgb(215,141,46)" fg:x="14049" fg:w="9"/><text x="52.0130%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.03%)</title><rect x="51.7630%" y="341" width="0.0332%" height="15" fill="rgb(250,160,47)" fg:x="14049" fg:w="9"/><text x="52.0130%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9 samples, 0.03%)</title><rect x="51.7630%" y="325" width="0.0332%" height="15" fill="rgb(216,222,40)" fg:x="14049" fg:w="9"/><text x="52.0130%" y="335.50"></text></g><g><title>main::initialization::_{{closure}} (9 samples, 0.03%)</title><rect x="51.7630%" y="309" width="0.0332%" height="15" fill="rgb(234,217,39)" fg:x="14049" fg:w="9"/><text x="52.0130%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.02%)</title><rect x="51.7778%" y="293" width="0.0184%" height="15" fill="rgb(207,178,40)" fg:x="14053" fg:w="5"/><text x="52.0278%" y="303.50"></text></g><g><title>main::initialization (17 samples, 0.06%)</title><rect x="51.7409%" y="373" width="0.0626%" height="15" fill="rgb(221,136,13)" fg:x="14043" fg:w="17"/><text x="51.9909%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (47 samples, 0.17%)</title><rect x="54.3679%" y="357" width="0.1732%" height="15" fill="rgb(249,199,10)" fg:x="14756" fg:w="47"/><text x="54.6179%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (44 samples, 0.16%)</title><rect x="54.3790%" y="341" width="0.1621%" height="15" fill="rgb(249,222,13)" fg:x="14759" fg:w="44"/><text x="54.6290%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (44 samples, 0.16%)</title><rect x="54.3790%" y="325" width="0.1621%" height="15" fill="rgb(244,185,38)" fg:x="14759" fg:w="44"/><text x="54.6290%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.07%)</title><rect x="55.1196%" y="309" width="0.0663%" height="15" fill="rgb(236,202,9)" fg:x="14960" fg:w="18"/><text x="55.3696%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (33 samples, 0.12%)</title><rect x="55.1859%" y="309" width="0.1216%" height="15" fill="rgb(250,229,37)" fg:x="14978" fg:w="33"/><text x="55.4359%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (33 samples, 0.12%)</title><rect x="55.1859%" y="293" width="0.1216%" height="15" fill="rgb(206,174,23)" fg:x="14978" fg:w="33"/><text x="55.4359%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (33 samples, 0.12%)</title><rect x="55.1859%" y="277" width="0.1216%" height="15" fill="rgb(211,33,43)" fg:x="14978" fg:w="33"/><text x="55.4359%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,037 samples, 3.82%)</title><rect x="55.3885%" y="293" width="3.8208%" height="15" fill="rgb(245,58,50)" fg:x="15033" fg:w="1037"/><text x="55.6385%" y="303.50">&lt;cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1,693 samples, 6.24%)</title><rect x="55.3112%" y="309" width="6.2378%" height="15" fill="rgb(244,68,36)" fg:x="15012" fg:w="1693"/><text x="55.5612%" y="319.50">&lt;core::s..</text></g><g><title>main::update_sptree::_{{closure}}::_{{closure}} (635 samples, 2.34%)</title><rect x="59.2093%" y="293" width="2.3396%" height="15" fill="rgb(232,229,15)" fg:x="16070" fg:w="635"/><text x="59.4593%" y="303.50">m..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (635 samples, 2.34%)</title><rect x="59.2093%" y="277" width="2.3396%" height="15" fill="rgb(254,30,23)" fg:x="16070" fg:w="635"/><text x="59.4593%" y="287.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (635 samples, 2.34%)</title><rect x="59.2093%" y="261" width="2.3396%" height="15" fill="rgb(235,160,14)" fg:x="16070" fg:w="635"/><text x="59.4593%" y="271.50">c..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1,910 samples, 7.04%)</title><rect x="54.5448%" y="357" width="7.0373%" height="15" fill="rgb(212,155,44)" fg:x="14804" fg:w="1910"/><text x="54.7948%" y="367.50">&lt;core::it..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (1,910 samples, 7.04%)</title><rect x="54.5448%" y="341" width="7.0373%" height="15" fill="rgb(226,2,50)" fg:x="14804" fg:w="1910"/><text x="54.7948%" y="351.50">&lt;core::it..</text></g><g><title>main::update_sptree::_{{closure}} (1,907 samples, 7.03%)</title><rect x="54.5558%" y="325" width="7.0263%" height="15" fill="rgb(234,177,6)" fg:x="14807" fg:w="1907"/><text x="54.8058%" y="335.50">main::upd..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (9 samples, 0.03%)</title><rect x="61.5489%" y="309" width="0.0332%" height="15" fill="rgb(217,24,9)" fg:x="16705" fg:w="9"/><text x="61.7989%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="61.5821%" y="357" width="0.0111%" height="15" fill="rgb(220,13,46)" fg:x="16714" fg:w="3"/><text x="61.8321%" y="367.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="61.5821%" y="341" width="0.0111%" height="15" fill="rgb(239,221,27)" fg:x="16714" fg:w="3"/><text x="61.8321%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (30 samples, 0.11%)</title><rect x="61.9395%" y="325" width="0.1105%" height="15" fill="rgb(222,198,25)" fg:x="16811" fg:w="30"/><text x="62.1895%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (30 samples, 0.11%)</title><rect x="61.9395%" y="309" width="0.1105%" height="15" fill="rgb(211,99,13)" fg:x="16811" fg:w="30"/><text x="62.1895%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (30 samples, 0.11%)</title><rect x="61.9395%" y="293" width="0.1105%" height="15" fill="rgb(232,111,31)" fg:x="16811" fg:w="30"/><text x="62.1895%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (142 samples, 0.52%)</title><rect x="61.5932%" y="357" width="0.5232%" height="15" fill="rgb(245,82,37)" fg:x="16717" fg:w="142"/><text x="61.8432%" y="367.50"></text></g><g><title>main::update_sptree::_{{closure}} (139 samples, 0.51%)</title><rect x="61.6042%" y="341" width="0.5121%" height="15" fill="rgb(227,149,46)" fg:x="16720" fg:w="139"/><text x="61.8542%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (18 samples, 0.07%)</title><rect x="62.0500%" y="325" width="0.0663%" height="15" fill="rgb(218,36,50)" fg:x="16841" fg:w="18"/><text x="62.3000%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,680 samples, 9.87%)</title><rect x="63.9807%" y="341" width="9.8744%" height="15" fill="rgb(226,80,48)" fg:x="17365" fg:w="2680"/><text x="64.2307%" y="351.50">&lt;core::slice::..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,287 samples, 4.74%)</title><rect x="69.1131%" y="325" width="4.7419%" height="15" fill="rgb(238,224,15)" fg:x="18758" fg:w="1287"/><text x="69.3631%" y="335.50">&lt;core:..</text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (2,910 samples, 10.72%)</title><rect x="73.8551%" y="325" width="10.7218%" height="15" fill="rgb(241,136,10)" fg:x="20045" fg:w="2910"/><text x="74.1051%" y="335.50">&lt;petgraph::graph..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (2,910 samples, 10.72%)</title><rect x="73.8551%" y="309" width="10.7218%" height="15" fill="rgb(208,32,45)" fg:x="20045" fg:w="2910"/><text x="74.1051%" y="319.50">core::cmp::impls..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (9,327 samples, 34.36%)</title><rect x="62.1164%" y="357" width="34.3650%" height="15" fill="rgb(207,135,9)" fg:x="16859" fg:w="9327"/><text x="62.3664%" y="367.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::itera..</text></g><g><title>main::update_sptree::_{{closure}} (6,141 samples, 22.63%)</title><rect x="73.8551%" y="341" width="22.6263%" height="15" fill="rgb(206,86,44)" fg:x="20045" fg:w="6141"/><text x="74.1051%" y="351.50">main::update_sptree::_{{closure}}</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (3,231 samples, 11.90%)</title><rect x="84.5768%" y="325" width="11.9045%" height="15" fill="rgb(245,177,15)" fg:x="22955" fg:w="3231"/><text x="84.8268%" y="335.50">&lt;petgraph::graph_i..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (3,231 samples, 11.90%)</title><rect x="84.5768%" y="309" width="11.9045%" height="15" fill="rgb(206,64,50)" fg:x="22955" fg:w="3231"/><text x="84.8268%" y="319.50">core::cmp::impls::..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as petgraph::graph_impl::IndexType&gt;::index (11 samples, 0.04%)</title><rect x="96.4813%" y="357" width="0.0405%" height="15" fill="rgb(234,36,40)" fg:x="26186" fg:w="11"/><text x="96.7313%" y="367.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (11 samples, 0.04%)</title><rect x="96.4813%" y="341" width="0.0405%" height="15" fill="rgb(213,64,8)" fg:x="26186" fg:w="11"/><text x="96.7313%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.01%)</title><rect x="96.5256%" y="357" width="0.0111%" height="15" fill="rgb(210,75,36)" fg:x="26198" fg:w="3"/><text x="96.7756%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.02%)</title><rect x="96.9087%" y="309" width="0.0184%" height="15" fill="rgb(229,88,21)" fg:x="26302" fg:w="5"/><text x="97.1587%" y="319.50"></text></g><g><title>__rdl_realloc (4 samples, 0.01%)</title><rect x="96.9677%" y="245" width="0.0147%" height="15" fill="rgb(252,204,47)" fg:x="26318" fg:w="4"/><text x="97.2177%" y="255.50"></text></g><g><title>__rust_realloc (4 samples, 0.01%)</title><rect x="96.9824%" y="245" width="0.0147%" height="15" fill="rgb(208,77,27)" fg:x="26322" fg:w="4"/><text x="97.2324%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (250 samples, 0.92%)</title><rect x="96.9640%" y="293" width="0.9211%" height="15" fill="rgb(221,76,26)" fg:x="26317" fg:w="250"/><text x="97.2140%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (250 samples, 0.92%)</title><rect x="96.9640%" y="277" width="0.9211%" height="15" fill="rgb(225,139,18)" fg:x="26317" fg:w="250"/><text x="97.2140%" y="287.50"></text></g><g><title>alloc::alloc::realloc (250 samples, 0.92%)</title><rect x="96.9640%" y="261" width="0.9211%" height="15" fill="rgb(230,137,11)" fg:x="26317" fg:w="250"/><text x="97.2140%" y="271.50"></text></g><g><title>realloc (241 samples, 0.89%)</title><rect x="96.9972%" y="245" width="0.8880%" height="15" fill="rgb(212,28,1)" fg:x="26326" fg:w="241"/><text x="97.2472%" y="255.50"></text></g><g><title>[libc.so.6] (222 samples, 0.82%)</title><rect x="97.0672%" y="229" width="0.8180%" height="15" fill="rgb(248,164,17)" fg:x="26345" fg:w="222"/><text x="97.3172%" y="239.50"></text></g><g><title>[libc.so.6] (195 samples, 0.72%)</title><rect x="97.1666%" y="213" width="0.7185%" height="15" fill="rgb(222,171,42)" fg:x="26372" fg:w="195"/><text x="97.4166%" y="223.50"></text></g><g><title>[libc.so.6] (51 samples, 0.19%)</title><rect x="97.6972%" y="197" width="0.1879%" height="15" fill="rgb(243,84,45)" fg:x="26516" fg:w="51"/><text x="97.9472%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.01%)</title><rect x="97.8851%" y="293" width="0.0147%" height="15" fill="rgb(252,49,23)" fg:x="26567" fg:w="4"/><text x="98.1351%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (271 samples, 1.00%)</title><rect x="96.9345%" y="309" width="0.9985%" height="15" fill="rgb(215,19,7)" fg:x="26309" fg:w="271"/><text x="97.1845%" y="319.50"></text></g><g><title>malloc (9 samples, 0.03%)</title><rect x="97.8999%" y="293" width="0.0332%" height="15" fill="rgb(238,81,41)" fg:x="26571" fg:w="9"/><text x="98.1499%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (284 samples, 1.05%)</title><rect x="96.9051%" y="341" width="1.0464%" height="15" fill="rgb(210,199,37)" fg:x="26301" fg:w="284"/><text x="97.1551%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (284 samples, 1.05%)</title><rect x="96.9051%" y="325" width="1.0464%" height="15" fill="rgb(244,192,49)" fg:x="26301" fg:w="284"/><text x="97.1551%" y="335.50"></text></g><g><title>core::cmp::max (4 samples, 0.01%)</title><rect x="97.9367%" y="309" width="0.0147%" height="15" fill="rgb(226,211,11)" fg:x="26581" fg:w="4"/><text x="98.1867%" y="319.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.01%)</title><rect x="97.9367%" y="293" width="0.0147%" height="15" fill="rgb(236,162,54)" fg:x="26581" fg:w="4"/><text x="98.1867%" y="303.50"></text></g><g><title>core::cmp::max_by (4 samples, 0.01%)</title><rect x="97.9367%" y="277" width="0.0147%" height="15" fill="rgb(220,229,9)" fg:x="26581" fg:w="4"/><text x="98.1867%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (12 samples, 0.04%)</title><rect x="97.9514%" y="341" width="0.0442%" height="15" fill="rgb(250,87,22)" fg:x="26585" fg:w="12"/><text x="98.2014%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (12 samples, 0.04%)</title><rect x="97.9514%" y="325" width="0.0442%" height="15" fill="rgb(239,43,17)" fg:x="26585" fg:w="12"/><text x="98.2014%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (413 samples, 1.52%)</title><rect x="96.5366%" y="357" width="1.5217%" height="15" fill="rgb(231,177,25)" fg:x="26201" fg:w="413"/><text x="96.7866%" y="367.50"></text></g><g><title>core::ptr::write (17 samples, 0.06%)</title><rect x="97.9957%" y="341" width="0.0626%" height="15" fill="rgb(219,179,1)" fg:x="26597" fg:w="17"/><text x="98.2457%" y="351.50"></text></g><g><title>core::intrinsics::copy (310 samples, 1.14%)</title><rect x="98.0583%" y="341" width="1.1422%" height="15" fill="rgb(238,219,53)" fg:x="26614" fg:w="310"/><text x="98.3083%" y="351.50"></text></g><g><title>[libc.so.6] (310 samples, 1.14%)</title><rect x="98.0583%" y="325" width="1.1422%" height="15" fill="rgb(232,167,36)" fg:x="26614" fg:w="310"/><text x="98.3083%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (313 samples, 1.15%)</title><rect x="98.0583%" y="357" width="1.1532%" height="15" fill="rgb(244,19,51)" fg:x="26614" fg:w="313"/><text x="98.3083%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.01%)</title><rect x="99.2005%" y="341" width="0.0111%" height="15" fill="rgb(224,6,22)" fg:x="26924" fg:w="3"/><text x="99.4505%" y="351.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.01%)</title><rect x="99.2152%" y="357" width="0.0111%" height="15" fill="rgb(224,145,5)" fg:x="26928" fg:w="3"/><text x="99.4652%" y="367.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="99.2152%" y="341" width="0.0111%" height="15" fill="rgb(234,130,49)" fg:x="26928" fg:w="3"/><text x="99.4652%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (3 samples, 0.01%)</title><rect x="99.2152%" y="325" width="0.0111%" height="15" fill="rgb(254,6,2)" fg:x="26928" fg:w="3"/><text x="99.4652%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.01%)</title><rect x="99.2263%" y="325" width="0.0147%" height="15" fill="rgb(208,96,46)" fg:x="26931" fg:w="4"/><text x="99.4763%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.01%)</title><rect x="99.2263%" y="309" width="0.0147%" height="15" fill="rgb(239,3,39)" fg:x="26931" fg:w="4"/><text x="99.4763%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (4 samples, 0.01%)</title><rect x="99.2263%" y="293" width="0.0147%" height="15" fill="rgb(233,210,1)" fg:x="26931" fg:w="4"/><text x="99.4763%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.01%)</title><rect x="99.2263%" y="277" width="0.0147%" height="15" fill="rgb(244,137,37)" fg:x="26931" fg:w="4"/><text x="99.4763%" y="287.50"></text></g><g><title>main::update_sptree::_{{closure}} (4 samples, 0.01%)</title><rect x="99.2263%" y="261" width="0.0147%" height="15" fill="rgb(240,136,2)" fg:x="26931" fg:w="4"/><text x="99.4763%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 0.03%)</title><rect x="99.2263%" y="357" width="0.0332%" height="15" fill="rgb(239,18,37)" fg:x="26931" fg:w="9"/><text x="99.4763%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.03%)</title><rect x="99.2263%" y="341" width="0.0332%" height="15" fill="rgb(218,185,22)" fg:x="26931" fg:w="9"/><text x="99.4763%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.02%)</title><rect x="99.2410%" y="325" width="0.0184%" height="15" fill="rgb(225,218,4)" fg:x="26935" fg:w="5"/><text x="99.4910%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 0.02%)</title><rect x="99.2410%" y="309" width="0.0184%" height="15" fill="rgb(230,182,32)" fg:x="26935" fg:w="5"/><text x="99.4910%" y="319.50"></text></g><g><title>main::update_sptree::_{{closure}} (5 samples, 0.02%)</title><rect x="99.2410%" y="293" width="0.0184%" height="15" fill="rgb(242,56,43)" fg:x="26935" fg:w="5"/><text x="99.4910%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (109 samples, 0.40%)</title><rect x="99.2594%" y="357" width="0.4016%" height="15" fill="rgb(233,99,24)" fg:x="26940" fg:w="109"/><text x="99.5094%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (109 samples, 0.40%)</title><rect x="99.2594%" y="341" width="0.4016%" height="15" fill="rgb(234,209,42)" fg:x="26940" fg:w="109"/><text x="99.5094%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40 samples, 0.15%)</title><rect x="99.6610%" y="309" width="0.1474%" height="15" fill="rgb(227,7,12)" fg:x="27049" fg:w="40"/><text x="99.9110%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (40 samples, 0.15%)</title><rect x="99.6610%" y="293" width="0.1474%" height="15" fill="rgb(245,203,43)" fg:x="27049" fg:w="40"/><text x="99.9110%" y="303.50"></text></g><g><title>cfree (39 samples, 0.14%)</title><rect x="99.6647%" y="277" width="0.1437%" height="15" fill="rgb(238,205,33)" fg:x="27050" fg:w="39"/><text x="99.9147%" y="287.50"></text></g><g><title>[libc.so.6] (23 samples, 0.08%)</title><rect x="99.7237%" y="261" width="0.0847%" height="15" fill="rgb(231,56,7)" fg:x="27066" fg:w="23"/><text x="99.9737%" y="271.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="99.7863%" y="245" width="0.0221%" height="15" fill="rgb(244,186,29)" fg:x="27083" fg:w="6"/><text x="100.0363%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (41 samples, 0.15%)</title><rect x="99.6610%" y="357" width="0.1511%" height="15" fill="rgb(234,111,31)" fg:x="27049" fg:w="41"/><text x="99.9110%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (41 samples, 0.15%)</title><rect x="99.6610%" y="341" width="0.1511%" height="15" fill="rgb(241,149,10)" fg:x="27049" fg:w="41"/><text x="99.9110%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.15%)</title><rect x="99.6610%" y="325" width="0.1511%" height="15" fill="rgb(249,206,44)" fg:x="27049" fg:w="41"/><text x="99.9110%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (19 samples, 0.07%)</title><rect x="99.8121%" y="357" width="0.0700%" height="15" fill="rgb(251,153,30)" fg:x="27090" fg:w="19"/><text x="100.0621%" y="367.50"></text></g><g><title>main::min_cost (26,969 samples, 99.37%)</title><rect x="0.5269%" y="389" width="99.3663%" height="15" fill="rgb(239,152,38)" fg:x="143" fg:w="26969"/><text x="0.7769%" y="399.50">main::min_cost</text></g><g><title>main::update_sptree (13,052 samples, 48.09%)</title><rect x="51.8035%" y="373" width="48.0896%" height="15" fill="rgb(249,139,47)" fg:x="14060" fg:w="13052"/><text x="52.0535%" y="383.50">main::update_sptree</text></g><g><title>_start (26,975 samples, 99.39%)</title><rect x="0.5232%" y="533" width="99.3884%" height="15" fill="rgb(244,64,35)" fg:x="142" fg:w="26975"/><text x="0.7732%" y="543.50">_start</text></g><g><title>__libc_start_main (26,975 samples, 99.39%)</title><rect x="0.5232%" y="517" width="99.3884%" height="15" fill="rgb(216,46,15)" fg:x="142" fg:w="26975"/><text x="0.7732%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (26,975 samples, 99.39%)</title><rect x="0.5232%" y="501" width="99.3884%" height="15" fill="rgb(250,74,19)" fg:x="142" fg:w="26975"/><text x="0.7732%" y="511.50">[libc.so.6]</text></g><g><title>main (26,975 samples, 99.39%)</title><rect x="0.5232%" y="485" width="99.3884%" height="15" fill="rgb(249,42,33)" fg:x="142" fg:w="26975"/><text x="0.7732%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (26,975 samples, 99.39%)</title><rect x="0.5232%" y="469" width="99.3884%" height="15" fill="rgb(242,149,17)" fg:x="142" fg:w="26975"/><text x="0.7732%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (26,975 samples, 99.39%)</title><rect x="0.5232%" y="453" width="99.3884%" height="15" fill="rgb(244,29,21)" fg:x="142" fg:w="26975"/><text x="0.7732%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (26,975 samples, 99.39%)</title><rect x="0.5232%" y="437" width="99.3884%" height="15" fill="rgb(220,130,37)" fg:x="142" fg:w="26975"/><text x="0.7732%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (26,975 samples, 99.39%)</title><rect x="0.5232%" y="421" width="99.3884%" height="15" fill="rgb(211,67,2)" fg:x="142" fg:w="26975"/><text x="0.7732%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (26,975 samples, 99.39%)</title><rect x="0.5232%" y="405" width="99.3884%" height="15" fill="rgb(235,68,52)" fg:x="142" fg:w="26975"/><text x="0.7732%" y="415.50">main::main</text></g><g><title>rand::rng::Rng::gen (3 samples, 0.01%)</title><rect x="99.9005%" y="389" width="0.0111%" height="15" fill="rgb(246,142,3)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="399.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (3 samples, 0.01%)</title><rect x="99.9005%" y="373" width="0.0111%" height="15" fill="rgb(241,25,7)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="383.50"></text></g><g><title>rand::rng::Rng::gen (3 samples, 0.01%)</title><rect x="99.9005%" y="357" width="0.0111%" height="15" fill="rgb(242,119,39)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="367.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (3 samples, 0.01%)</title><rect x="99.9005%" y="341" width="0.0111%" height="15" fill="rgb(241,98,45)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="351.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (3 samples, 0.01%)</title><rect x="99.9005%" y="325" width="0.0111%" height="15" fill="rgb(254,28,30)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="335.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (3 samples, 0.01%)</title><rect x="99.9005%" y="309" width="0.0111%" height="15" fill="rgb(241,142,54)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="319.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (3 samples, 0.01%)</title><rect x="99.9005%" y="293" width="0.0111%" height="15" fill="rgb(222,85,15)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="303.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (3 samples, 0.01%)</title><rect x="99.9005%" y="277" width="0.0111%" height="15" fill="rgb(210,85,47)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="287.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.01%)</title><rect x="99.9005%" y="261" width="0.0111%" height="15" fill="rgb(224,206,25)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="271.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.01%)</title><rect x="99.9005%" y="245" width="0.0111%" height="15" fill="rgb(243,201,19)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="255.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (3 samples, 0.01%)</title><rect x="99.9005%" y="229" width="0.0111%" height="15" fill="rgb(236,59,4)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide (3 samples, 0.01%)</title><rect x="99.9005%" y="213" width="0.0111%" height="15" fill="rgb(254,179,45)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (3 samples, 0.01%)</title><rect x="99.9005%" y="197" width="0.0111%" height="15" fill="rgb(226,14,10)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (3 samples, 0.01%)</title><rect x="99.9005%" y="181" width="0.0111%" height="15" fill="rgb(244,27,41)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (3 samples, 0.01%)</title><rect x="99.9005%" y="165" width="0.0111%" height="15" fill="rgb(235,35,32)" fg:x="27114" fg:w="3"/><text x="100.1505%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (8 samples, 0.03%)</title><rect x="99.9189%" y="469" width="0.0295%" height="15" fill="rgb(218,68,31)" fg:x="27119" fg:w="8"/><text x="100.1689%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.03%)</title><rect x="99.9189%" y="453" width="0.0295%" height="15" fill="rgb(207,120,37)" fg:x="27119" fg:w="8"/><text x="100.1689%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (8 samples, 0.03%)</title><rect x="99.9189%" y="437" width="0.0295%" height="15" fill="rgb(227,98,0)" fg:x="27119" fg:w="8"/><text x="100.1689%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.03%)</title><rect x="99.9189%" y="421" width="0.0295%" height="15" fill="rgb(207,7,3)" fg:x="27119" fg:w="8"/><text x="100.1689%" y="431.50"></text></g><g><title>alloc::alloc::alloc_zeroed (8 samples, 0.03%)</title><rect x="99.9189%" y="405" width="0.0295%" height="15" fill="rgb(206,98,19)" fg:x="27119" fg:w="8"/><text x="100.1689%" y="415.50"></text></g><g><title>alloc::vec::from_elem (9 samples, 0.03%)</title><rect x="99.9189%" y="501" width="0.0332%" height="15" fill="rgb(217,5,26)" fg:x="27119" fg:w="9"/><text x="100.1689%" y="511.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9 samples, 0.03%)</title><rect x="99.9189%" y="485" width="0.0332%" height="15" fill="rgb(235,190,38)" fg:x="27119" fg:w="9"/><text x="100.1689%" y="495.50"></text></g><g><title>main::compute_flowchange (10 samples, 0.04%)</title><rect x="99.9189%" y="517" width="0.0368%" height="15" fill="rgb(247,86,24)" fg:x="27119" fg:w="10"/><text x="100.1689%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.01%)</title><rect x="99.9632%" y="501" width="0.0147%" height="15" fill="rgb(205,101,16)" fg:x="27131" fg:w="4"/><text x="100.2132%" y="511.50"></text></g><g><title>all (27,141 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(246,168,33)" fg:x="0" fg:w="27141"/><text x="0.2500%" y="575.50"></text></g><g><title>main (27,141 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(231,114,1)" fg:x="0" fg:w="27141"/><text x="0.2500%" y="559.50">main</text></g><g><title>main::min_cost (23 samples, 0.08%)</title><rect x="99.9153%" y="533" width="0.0847%" height="15" fill="rgb(207,184,53)" fg:x="27118" fg:w="23"/><text x="100.1653%" y="543.50"></text></g><g><title>main::update_sptree (10 samples, 0.04%)</title><rect x="99.9632%" y="517" width="0.0368%" height="15" fill="rgb(224,95,51)" fg:x="27131" fg:w="10"/><text x="100.2132%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (6 samples, 0.02%)</title><rect x="99.9779%" y="501" width="0.0221%" height="15" fill="rgb(212,188,45)" fg:x="27135" fg:w="6"/><text x="100.2279%" y="511.50"></text></g><g><title>core::intrinsics::copy (6 samples, 0.02%)</title><rect x="99.9779%" y="485" width="0.0221%" height="15" fill="rgb(223,154,38)" fg:x="27135" fg:w="6"/><text x="100.2279%" y="495.50"></text></g></svg></svg>