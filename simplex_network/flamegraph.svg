<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="15769"><g><title>[libc.so.6] (88 samples, 0.56%)</title><rect x="0.0000%" y="453" width="0.5581%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="88"/><text x="0.2500%" y="463.50"></text></g><g><title>__libc_calloc (2 samples, 0.01%)</title><rect x="0.5581%" y="453" width="0.0127%" height="15" fill="rgb(217,0,24)" fg:x="88" fg:w="2"/><text x="0.8081%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.04%)</title><rect x="0.5707%" y="453" width="0.0380%" height="15" fill="rgb(221,193,54)" fg:x="90" fg:w="6"/><text x="0.8207%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.04%)</title><rect x="0.5707%" y="437" width="0.0380%" height="15" fill="rgb(248,212,6)" fg:x="90" fg:w="6"/><text x="0.8207%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.03%)</title><rect x="0.5771%" y="421" width="0.0317%" height="15" fill="rgb(208,68,35)" fg:x="91" fg:w="5"/><text x="0.8271%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (5 samples, 0.03%)</title><rect x="0.5771%" y="405" width="0.0317%" height="15" fill="rgb(232,128,0)" fg:x="91" fg:w="5"/><text x="0.8271%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.05%)</title><rect x="0.6088%" y="453" width="0.0507%" height="15" fill="rgb(207,160,47)" fg:x="96" fg:w="8"/><text x="0.8588%" y="463.50"></text></g><g><title>main::_find_first_arc (2 samples, 0.01%)</title><rect x="0.6595%" y="453" width="0.0127%" height="15" fill="rgb(228,23,34)" fg:x="104" fg:w="2"/><text x="0.9095%" y="463.50"></text></g><g><title>main::compute_flowchange (3 samples, 0.02%)</title><rect x="0.6722%" y="453" width="0.0190%" height="15" fill="rgb(218,30,26)" fg:x="106" fg:w="3"/><text x="0.9222%" y="463.50"></text></g><g><title>main::find_cycle_with_arc (4 samples, 0.03%)</title><rect x="0.6912%" y="453" width="0.0254%" height="15" fill="rgb(220,122,19)" fg:x="109" fg:w="4"/><text x="0.9412%" y="463.50"></text></g><g><title>main::update_node_potentials (11 samples, 0.07%)</title><rect x="0.7166%" y="453" width="0.0698%" height="15" fill="rgb(250,228,42)" fg:x="113" fg:w="11"/><text x="0.9666%" y="463.50"></text></g><g><title>[[heap]] (127 samples, 0.81%)</title><rect x="0.0000%" y="469" width="0.8054%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="127"/><text x="0.2500%" y="479.50"></text></g><g><title>main::update_sptree (3 samples, 0.02%)</title><rect x="0.7864%" y="453" width="0.0190%" height="15" fill="rgb(216,20,37)" fg:x="124" fg:w="3"/><text x="1.0364%" y="463.50"></text></g><g><title>[libc.so.6] (8 samples, 0.05%)</title><rect x="0.8117%" y="453" width="0.0507%" height="15" fill="rgb(206,188,39)" fg:x="128" fg:w="8"/><text x="1.0617%" y="463.50"></text></g><g><title>__libc_calloc (2 samples, 0.01%)</title><rect x="0.8625%" y="453" width="0.0127%" height="15" fill="rgb(217,207,13)" fg:x="136" fg:w="2"/><text x="1.1125%" y="463.50"></text></g><g><title>__rdl_alloc_zeroed (2 samples, 0.01%)</title><rect x="0.8751%" y="453" width="0.0127%" height="15" fill="rgb(231,73,38)" fg:x="138" fg:w="2"/><text x="1.1251%" y="463.50"></text></g><g><title>__rdl_realloc (15 samples, 0.10%)</title><rect x="0.8878%" y="453" width="0.0951%" height="15" fill="rgb(225,20,46)" fg:x="140" fg:w="15"/><text x="1.1378%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.11%)</title><rect x="0.9829%" y="453" width="0.1078%" height="15" fill="rgb(210,31,41)" fg:x="155" fg:w="17"/><text x="1.2329%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.03%)</title><rect x="1.0590%" y="437" width="0.0317%" height="15" fill="rgb(221,200,47)" fg:x="167" fg:w="5"/><text x="1.3090%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.03%)</title><rect x="1.0590%" y="421" width="0.0317%" height="15" fill="rgb(226,26,5)" fg:x="167" fg:w="5"/><text x="1.3090%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (5 samples, 0.03%)</title><rect x="1.0590%" y="405" width="0.0317%" height="15" fill="rgb(249,33,26)" fg:x="167" fg:w="5"/><text x="1.3090%" y="415.50"></text></g><g><title>cfree (9 samples, 0.06%)</title><rect x="1.0907%" y="453" width="0.0571%" height="15" fill="rgb(235,183,28)" fg:x="172" fg:w="9"/><text x="1.3407%" y="463.50"></text></g><g><title>main::update_node_potentials (2 samples, 0.01%)</title><rect x="1.1478%" y="453" width="0.0127%" height="15" fill="rgb(221,5,38)" fg:x="181" fg:w="2"/><text x="1.3978%" y="463.50"></text></g><g><title>malloc (11 samples, 0.07%)</title><rect x="1.1605%" y="453" width="0.0698%" height="15" fill="rgb(247,18,42)" fg:x="183" fg:w="11"/><text x="1.4105%" y="463.50"></text></g><g><title>[[stack]] (96 samples, 0.61%)</title><rect x="0.8054%" y="469" width="0.6088%" height="15" fill="rgb(241,131,45)" fg:x="127" fg:w="96"/><text x="1.0554%" y="479.50"></text></g><g><title>realloc (29 samples, 0.18%)</title><rect x="1.2303%" y="453" width="0.1839%" height="15" fill="rgb(249,31,29)" fg:x="194" fg:w="29"/><text x="1.4803%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.05%)</title><rect x="1.4142%" y="469" width="0.0507%" height="15" fill="rgb(225,111,53)" fg:x="223" fg:w="8"/><text x="1.6642%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="1.4522%" y="453" width="0.0127%" height="15" fill="rgb(238,160,17)" fg:x="229" fg:w="2"/><text x="1.7022%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="1.4522%" y="437" width="0.0127%" height="15" fill="rgb(214,148,48)" fg:x="229" fg:w="2"/><text x="1.7022%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="1.4522%" y="421" width="0.0127%" height="15" fill="rgb(232,36,49)" fg:x="229" fg:w="2"/><text x="1.7022%" y="431.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="1.6171%" y="453" width="0.0380%" height="15" fill="rgb(209,103,24)" fg:x="255" fg:w="6"/><text x="1.8671%" y="463.50"></text></g><g><title>[libc.so.6] (31 samples, 0.20%)</title><rect x="1.4649%" y="469" width="0.1966%" height="15" fill="rgb(229,88,8)" fg:x="231" fg:w="31"/><text x="1.7149%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.01%)</title><rect x="1.6615%" y="453" width="0.0127%" height="15" fill="rgb(213,181,19)" fg:x="262" fg:w="2"/><text x="1.9115%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.01%)</title><rect x="1.6615%" y="437" width="0.0127%" height="15" fill="rgb(254,191,54)" fg:x="262" fg:w="2"/><text x="1.9115%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.01%)</title><rect x="1.6615%" y="421" width="0.0127%" height="15" fill="rgb(241,83,37)" fg:x="262" fg:w="2"/><text x="1.9115%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.01%)</title><rect x="1.6615%" y="405" width="0.0127%" height="15" fill="rgb(233,36,39)" fg:x="262" fg:w="2"/><text x="1.9115%" y="415.50"></text></g><g><title>[main] (7 samples, 0.04%)</title><rect x="1.6615%" y="469" width="0.0444%" height="15" fill="rgb(226,3,54)" fg:x="262" fg:w="7"/><text x="1.9115%" y="479.50"></text></g><g><title>malloc (5 samples, 0.03%)</title><rect x="1.6742%" y="453" width="0.0317%" height="15" fill="rgb(245,192,40)" fg:x="264" fg:w="5"/><text x="1.9242%" y="463.50"></text></g><g><title>[libc.so.6] (185 samples, 1.17%)</title><rect x="1.7059%" y="453" width="1.1732%" height="15" fill="rgb(238,167,29)" fg:x="269" fg:w="185"/><text x="1.9559%" y="463.50"></text></g><g><title>__libc_calloc (6 samples, 0.04%)</title><rect x="2.8791%" y="453" width="0.0380%" height="15" fill="rgb(232,182,51)" fg:x="454" fg:w="6"/><text x="3.1291%" y="463.50"></text></g><g><title>__rdl_realloc (23 samples, 0.15%)</title><rect x="2.9171%" y="453" width="0.1459%" height="15" fill="rgb(231,60,39)" fg:x="460" fg:w="23"/><text x="3.1671%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 0.19%)</title><rect x="3.0630%" y="453" width="0.1902%" height="15" fill="rgb(208,69,12)" fg:x="483" fg:w="30"/><text x="3.3130%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (26 samples, 0.16%)</title><rect x="3.0883%" y="437" width="0.1649%" height="15" fill="rgb(235,93,37)" fg:x="487" fg:w="26"/><text x="3.3383%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (19 samples, 0.12%)</title><rect x="3.1327%" y="421" width="0.1205%" height="15" fill="rgb(213,116,39)" fg:x="494" fg:w="19"/><text x="3.3827%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (19 samples, 0.12%)</title><rect x="3.1327%" y="405" width="0.1205%" height="15" fill="rgb(222,207,29)" fg:x="494" fg:w="19"/><text x="3.3827%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (35 samples, 0.22%)</title><rect x="3.2532%" y="453" width="0.2220%" height="15" fill="rgb(206,96,30)" fg:x="513" fg:w="35"/><text x="3.5032%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12 samples, 0.08%)</title><rect x="3.3991%" y="437" width="0.0761%" height="15" fill="rgb(218,138,4)" fg:x="536" fg:w="12"/><text x="3.6491%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 0.08%)</title><rect x="3.3991%" y="421" width="0.0761%" height="15" fill="rgb(250,191,14)" fg:x="536" fg:w="12"/><text x="3.6491%" y="431.50"></text></g><g><title>alloc::alloc::realloc (12 samples, 0.08%)</title><rect x="3.3991%" y="405" width="0.0761%" height="15" fill="rgb(239,60,40)" fg:x="536" fg:w="12"/><text x="3.6491%" y="415.50"></text></g><g><title>cfree (16 samples, 0.10%)</title><rect x="3.4752%" y="453" width="0.1015%" height="15" fill="rgb(206,27,48)" fg:x="548" fg:w="16"/><text x="3.7252%" y="463.50"></text></g><g><title>main::_find_first_arc (4 samples, 0.03%)</title><rect x="3.5766%" y="453" width="0.0254%" height="15" fill="rgb(225,35,8)" fg:x="564" fg:w="4"/><text x="3.8266%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (5 samples, 0.03%)</title><rect x="3.6337%" y="437" width="0.0317%" height="15" fill="rgb(250,213,24)" fg:x="573" fg:w="5"/><text x="3.8837%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (5 samples, 0.03%)</title><rect x="3.6337%" y="421" width="0.0317%" height="15" fill="rgb(247,123,22)" fg:x="573" fg:w="5"/><text x="3.8837%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="3.6337%" y="405" width="0.0317%" height="15" fill="rgb(231,138,38)" fg:x="573" fg:w="5"/><text x="3.8837%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.03%)</title><rect x="3.6337%" y="389" width="0.0317%" height="15" fill="rgb(231,145,46)" fg:x="573" fg:w="5"/><text x="3.8837%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.03%)</title><rect x="3.6337%" y="373" width="0.0317%" height="15" fill="rgb(251,118,11)" fg:x="573" fg:w="5"/><text x="3.8837%" y="383.50"></text></g><g><title>main::compute_flowchange (11 samples, 0.07%)</title><rect x="3.6020%" y="453" width="0.0698%" height="15" fill="rgb(217,147,25)" fg:x="568" fg:w="11"/><text x="3.8520%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.01%)</title><rect x="3.6781%" y="437" width="0.0127%" height="15" fill="rgb(247,81,37)" fg:x="580" fg:w="2"/><text x="3.9281%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="3.6781%" y="421" width="0.0127%" height="15" fill="rgb(209,12,38)" fg:x="580" fg:w="2"/><text x="3.9281%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="3.6781%" y="405" width="0.0127%" height="15" fill="rgb(227,1,9)" fg:x="580" fg:w="2"/><text x="3.9281%" y="415.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="3.6781%" y="389" width="0.0127%" height="15" fill="rgb(248,47,43)" fg:x="580" fg:w="2"/><text x="3.9281%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.03%)</title><rect x="3.6908%" y="437" width="0.0254%" height="15" fill="rgb(221,10,30)" fg:x="582" fg:w="4"/><text x="3.9408%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.03%)</title><rect x="3.7162%" y="437" width="0.0317%" height="15" fill="rgb(210,229,1)" fg:x="586" fg:w="5"/><text x="3.9662%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.03%)</title><rect x="3.7162%" y="421" width="0.0317%" height="15" fill="rgb(222,148,37)" fg:x="586" fg:w="5"/><text x="3.9662%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.03%)</title><rect x="3.7162%" y="405" width="0.0317%" height="15" fill="rgb(234,67,33)" fg:x="586" fg:w="5"/><text x="3.9662%" y="415.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (5 samples, 0.03%)</title><rect x="3.7162%" y="389" width="0.0317%" height="15" fill="rgb(247,98,35)" fg:x="586" fg:w="5"/><text x="3.9662%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 0.03%)</title><rect x="3.7162%" y="373" width="0.0317%" height="15" fill="rgb(247,138,52)" fg:x="586" fg:w="5"/><text x="3.9662%" y="383.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (5 samples, 0.03%)</title><rect x="3.7162%" y="357" width="0.0317%" height="15" fill="rgb(213,79,30)" fg:x="586" fg:w="5"/><text x="3.9662%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.03%)</title><rect x="3.7162%" y="341" width="0.0317%" height="15" fill="rgb(246,177,23)" fg:x="586" fg:w="5"/><text x="3.9662%" y="351.50"></text></g><g><title>main::find_cycle_with_arc (17 samples, 0.11%)</title><rect x="3.6718%" y="453" width="0.1078%" height="15" fill="rgb(230,62,27)" fg:x="579" fg:w="17"/><text x="3.9218%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (5 samples, 0.03%)</title><rect x="3.7479%" y="437" width="0.0317%" height="15" fill="rgb(216,154,8)" fg:x="591" fg:w="5"/><text x="3.9979%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (5 samples, 0.03%)</title><rect x="3.7479%" y="421" width="0.0317%" height="15" fill="rgb(244,35,45)" fg:x="591" fg:w="5"/><text x="3.9979%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="3.7479%" y="405" width="0.0317%" height="15" fill="rgb(251,115,12)" fg:x="591" fg:w="5"/><text x="3.9979%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.03%)</title><rect x="3.7479%" y="389" width="0.0317%" height="15" fill="rgb(240,54,50)" fg:x="591" fg:w="5"/><text x="3.9979%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.03%)</title><rect x="3.7479%" y="373" width="0.0317%" height="15" fill="rgb(233,84,52)" fg:x="591" fg:w="5"/><text x="3.9979%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.08%)</title><rect x="3.7859%" y="437" width="0.0761%" height="15" fill="rgb(207,117,47)" fg:x="597" fg:w="12"/><text x="4.0359%" y="447.50"></text></g><g><title>main::update_sptree (16 samples, 0.10%)</title><rect x="3.7859%" y="453" width="0.1015%" height="15" fill="rgb(249,43,39)" fg:x="597" fg:w="16"/><text x="4.0359%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (4 samples, 0.03%)</title><rect x="3.8620%" y="437" width="0.0254%" height="15" fill="rgb(209,38,44)" fg:x="609" fg:w="4"/><text x="4.1120%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (4 samples, 0.03%)</title><rect x="3.8620%" y="421" width="0.0254%" height="15" fill="rgb(236,212,23)" fg:x="609" fg:w="4"/><text x="4.1120%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="3.8620%" y="405" width="0.0254%" height="15" fill="rgb(242,79,21)" fg:x="609" fg:w="4"/><text x="4.1120%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.03%)</title><rect x="3.8620%" y="389" width="0.0254%" height="15" fill="rgb(211,96,35)" fg:x="609" fg:w="4"/><text x="4.1120%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.03%)</title><rect x="3.8620%" y="373" width="0.0254%" height="15" fill="rgb(253,215,40)" fg:x="609" fg:w="4"/><text x="4.1120%" y="383.50"></text></g><g><title>malloc (7 samples, 0.04%)</title><rect x="3.8874%" y="453" width="0.0444%" height="15" fill="rgb(211,81,21)" fg:x="613" fg:w="7"/><text x="4.1374%" y="463.50"></text></g><g><title>[unknown] (399 samples, 2.53%)</title><rect x="1.7059%" y="469" width="2.5303%" height="15" fill="rgb(208,190,38)" fg:x="269" fg:w="399"/><text x="1.9559%" y="479.50">[u..</text></g><g><title>realloc (48 samples, 0.30%)</title><rect x="3.9318%" y="453" width="0.3044%" height="15" fill="rgb(235,213,38)" fg:x="620" fg:w="48"/><text x="4.1818%" y="463.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="4.3630%" y="229" width="0.0127%" height="15" fill="rgb(237,122,38)" fg:x="688" fg:w="2"/><text x="4.6130%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (81 samples, 0.51%)</title><rect x="4.3440%" y="261" width="0.5137%" height="15" fill="rgb(244,218,35)" fg:x="685" fg:w="81"/><text x="4.5940%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (81 samples, 0.51%)</title><rect x="4.3440%" y="245" width="0.5137%" height="15" fill="rgb(240,68,47)" fg:x="685" fg:w="81"/><text x="4.5940%" y="255.50"></text></g><g><title>cfree (76 samples, 0.48%)</title><rect x="4.3757%" y="229" width="0.4820%" height="15" fill="rgb(210,16,53)" fg:x="690" fg:w="76"/><text x="4.6257%" y="239.50"></text></g><g><title>[libc.so.6] (61 samples, 0.39%)</title><rect x="4.4708%" y="213" width="0.3868%" height="15" fill="rgb(235,124,12)" fg:x="705" fg:w="61"/><text x="4.7208%" y="223.50"></text></g><g><title>[libc.so.6] (35 samples, 0.22%)</title><rect x="4.6357%" y="197" width="0.2220%" height="15" fill="rgb(224,169,11)" fg:x="731" fg:w="35"/><text x="4.8857%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="4.8323%" y="181" width="0.0254%" height="15" fill="rgb(250,166,2)" fg:x="762" fg:w="4"/><text x="5.0823%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (86 samples, 0.55%)</title><rect x="4.3186%" y="309" width="0.5454%" height="15" fill="rgb(242,216,29)" fg:x="681" fg:w="86"/><text x="4.5686%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (86 samples, 0.55%)</title><rect x="4.3186%" y="293" width="0.5454%" height="15" fill="rgb(230,116,27)" fg:x="681" fg:w="86"/><text x="4.5686%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.55%)</title><rect x="4.3186%" y="277" width="0.5454%" height="15" fill="rgb(228,99,48)" fg:x="681" fg:w="86"/><text x="4.5686%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 0.25%)</title><rect x="5.8215%" y="293" width="0.2473%" height="15" fill="rgb(253,11,6)" fg:x="918" fg:w="39"/><text x="6.0715%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (39 samples, 0.25%)</title><rect x="5.8215%" y="277" width="0.2473%" height="15" fill="rgb(247,143,39)" fg:x="918" fg:w="39"/><text x="6.0715%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (39 samples, 0.25%)</title><rect x="5.8215%" y="261" width="0.2473%" height="15" fill="rgb(236,97,10)" fg:x="918" fg:w="39"/><text x="6.0715%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (31 samples, 0.20%)</title><rect x="6.0689%" y="293" width="0.1966%" height="15" fill="rgb(233,208,19)" fg:x="957" fg:w="31"/><text x="6.3189%" y="303.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (45 samples, 0.29%)</title><rect x="6.2655%" y="293" width="0.2854%" height="15" fill="rgb(216,164,2)" fg:x="988" fg:w="45"/><text x="6.5155%" y="303.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (81 samples, 0.51%)</title><rect x="6.5508%" y="293" width="0.5137%" height="15" fill="rgb(220,129,5)" fg:x="1033" fg:w="81"/><text x="6.8008%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.04%)</title><rect x="7.0645%" y="293" width="0.0380%" height="15" fill="rgb(242,17,10)" fg:x="1114" fg:w="6"/><text x="7.3145%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.03%)</title><rect x="7.1025%" y="293" width="0.0254%" height="15" fill="rgb(242,107,0)" fg:x="1120" fg:w="4"/><text x="7.3525%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.03%)</title><rect x="7.1025%" y="277" width="0.0254%" height="15" fill="rgb(251,28,31)" fg:x="1120" fg:w="4"/><text x="7.3525%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.02%)</title><rect x="7.1089%" y="261" width="0.0190%" height="15" fill="rgb(233,223,10)" fg:x="1121" fg:w="3"/><text x="7.3589%" y="271.50"></text></g><g><title>main::_find_first_arc (358 samples, 2.27%)</title><rect x="4.8640%" y="309" width="2.2703%" height="15" fill="rgb(215,21,27)" fg:x="767" fg:w="358"/><text x="5.1140%" y="319.50">m..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="7.2421%" y="277" width="0.0127%" height="15" fill="rgb(232,23,21)" fg:x="1142" fg:w="2"/><text x="7.4921%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.03%)</title><rect x="7.2421%" y="293" width="0.0254%" height="15" fill="rgb(244,5,23)" fg:x="1142" fg:w="4"/><text x="7.4921%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="7.2547%" y="277" width="0.0127%" height="15" fill="rgb(226,81,46)" fg:x="1144" fg:w="2"/><text x="7.5047%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="7.2547%" y="261" width="0.0127%" height="15" fill="rgb(247,70,30)" fg:x="1144" fg:w="2"/><text x="7.5047%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.02%)</title><rect x="7.2674%" y="293" width="0.0190%" height="15" fill="rgb(212,68,19)" fg:x="1146" fg:w="3"/><text x="7.5174%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 0.19%)</title><rect x="7.2991%" y="277" width="0.1902%" height="15" fill="rgb(240,187,13)" fg:x="1151" fg:w="30"/><text x="7.5491%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (30 samples, 0.19%)</title><rect x="7.2991%" y="261" width="0.1902%" height="15" fill="rgb(223,113,26)" fg:x="1151" fg:w="30"/><text x="7.5491%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (29 samples, 0.18%)</title><rect x="7.3055%" y="245" width="0.1839%" height="15" fill="rgb(206,192,2)" fg:x="1152" fg:w="29"/><text x="7.5555%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (29 samples, 0.18%)</title><rect x="7.3055%" y="229" width="0.1839%" height="15" fill="rgb(241,108,4)" fg:x="1152" fg:w="29"/><text x="7.5555%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (29 samples, 0.18%)</title><rect x="7.3055%" y="213" width="0.1839%" height="15" fill="rgb(247,173,49)" fg:x="1152" fg:w="29"/><text x="7.5555%" y="223.50"></text></g><g><title>alloc::alloc::realloc (29 samples, 0.18%)</title><rect x="7.3055%" y="197" width="0.1839%" height="15" fill="rgb(224,114,35)" fg:x="1152" fg:w="29"/><text x="7.5555%" y="207.50"></text></g><g><title>realloc (29 samples, 0.18%)</title><rect x="7.3055%" y="181" width="0.1839%" height="15" fill="rgb(245,159,27)" fg:x="1152" fg:w="29"/><text x="7.5555%" y="191.50"></text></g><g><title>[libc.so.6] (28 samples, 0.18%)</title><rect x="7.3118%" y="165" width="0.1776%" height="15" fill="rgb(245,172,44)" fg:x="1153" fg:w="28"/><text x="7.5618%" y="175.50"></text></g><g><title>[libc.so.6] (26 samples, 0.16%)</title><rect x="7.3245%" y="149" width="0.1649%" height="15" fill="rgb(236,23,11)" fg:x="1155" fg:w="26"/><text x="7.5745%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (34 samples, 0.22%)</title><rect x="7.2864%" y="293" width="0.2156%" height="15" fill="rgb(205,117,38)" fg:x="1149" fg:w="34"/><text x="7.5364%" y="303.50"></text></g><g><title>core::ptr::write (2 samples, 0.01%)</title><rect x="7.4894%" y="277" width="0.0127%" height="15" fill="rgb(237,72,25)" fg:x="1181" fg:w="2"/><text x="7.7394%" y="287.50"></text></g><g><title>[libc.so.6] (16 samples, 0.10%)</title><rect x="7.5782%" y="181" width="0.1015%" height="15" fill="rgb(244,70,9)" fg:x="1195" fg:w="16"/><text x="7.8282%" y="191.50"></text></g><g><title>__libc_calloc (133 samples, 0.84%)</title><rect x="7.6796%" y="181" width="0.8434%" height="15" fill="rgb(217,125,39)" fg:x="1211" fg:w="133"/><text x="7.9296%" y="191.50"></text></g><g><title>[libc.so.6] (119 samples, 0.75%)</title><rect x="7.7684%" y="165" width="0.7546%" height="15" fill="rgb(235,36,10)" fg:x="1225" fg:w="119"/><text x="8.0184%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="8.5040%" y="149" width="0.0190%" height="15" fill="rgb(251,123,47)" fg:x="1341" fg:w="3"/><text x="8.7540%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (154 samples, 0.98%)</title><rect x="7.5655%" y="229" width="0.9766%" height="15" fill="rgb(221,13,13)" fg:x="1193" fg:w="154"/><text x="7.8155%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (154 samples, 0.98%)</title><rect x="7.5655%" y="213" width="0.9766%" height="15" fill="rgb(238,131,9)" fg:x="1193" fg:w="154"/><text x="7.8155%" y="223.50"></text></g><g><title>alloc::alloc::alloc_zeroed (154 samples, 0.98%)</title><rect x="7.5655%" y="197" width="0.9766%" height="15" fill="rgb(211,50,8)" fg:x="1193" fg:w="154"/><text x="7.8155%" y="207.50"></text></g><g><title>__rdl_alloc_zeroed (3 samples, 0.02%)</title><rect x="8.5231%" y="181" width="0.0190%" height="15" fill="rgb(245,182,24)" fg:x="1344" fg:w="3"/><text x="8.7731%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (157 samples, 1.00%)</title><rect x="7.5528%" y="261" width="0.9956%" height="15" fill="rgb(242,14,37)" fg:x="1191" fg:w="157"/><text x="7.8028%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (157 samples, 1.00%)</title><rect x="7.5528%" y="245" width="0.9956%" height="15" fill="rgb(246,228,12)" fg:x="1191" fg:w="157"/><text x="7.8028%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.05%)</title><rect x="8.5484%" y="245" width="0.0507%" height="15" fill="rgb(213,55,15)" fg:x="1348" fg:w="8"/><text x="8.7984%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8 samples, 0.05%)</title><rect x="8.5484%" y="229" width="0.0507%" height="15" fill="rgb(209,9,3)" fg:x="1348" fg:w="8"/><text x="8.7984%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (69 samples, 0.44%)</title><rect x="8.5484%" y="261" width="0.4376%" height="15" fill="rgb(230,59,30)" fg:x="1348" fg:w="69"/><text x="8.7984%" y="271.50"></text></g><g><title>core::ptr::write (61 samples, 0.39%)</title><rect x="8.5992%" y="245" width="0.3868%" height="15" fill="rgb(209,121,21)" fg:x="1356" fg:w="61"/><text x="8.8492%" y="255.50"></text></g><g><title>__rdl_alloc (3 samples, 0.02%)</title><rect x="9.0177%" y="165" width="0.0190%" height="15" fill="rgb(220,109,13)" fg:x="1422" fg:w="3"/><text x="9.2677%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (147 samples, 0.93%)</title><rect x="9.0050%" y="213" width="0.9322%" height="15" fill="rgb(232,18,1)" fg:x="1420" fg:w="147"/><text x="9.2550%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (147 samples, 0.93%)</title><rect x="9.0050%" y="197" width="0.9322%" height="15" fill="rgb(215,41,42)" fg:x="1420" fg:w="147"/><text x="9.2550%" y="207.50"></text></g><g><title>alloc::alloc::alloc (147 samples, 0.93%)</title><rect x="9.0050%" y="181" width="0.9322%" height="15" fill="rgb(224,123,36)" fg:x="1420" fg:w="147"/><text x="9.2550%" y="191.50"></text></g><g><title>malloc (140 samples, 0.89%)</title><rect x="9.0494%" y="165" width="0.8878%" height="15" fill="rgb(240,125,3)" fg:x="1427" fg:w="140"/><text x="9.2994%" y="175.50"></text></g><g><title>[libc.so.6] (54 samples, 0.34%)</title><rect x="9.5948%" y="149" width="0.3424%" height="15" fill="rgb(205,98,50)" fg:x="1513" fg:w="54"/><text x="9.8448%" y="159.50"></text></g><g><title>[libc.so.6] (15 samples, 0.10%)</title><rect x="9.8421%" y="133" width="0.0951%" height="15" fill="rgb(205,185,37)" fg:x="1552" fg:w="15"/><text x="10.0921%" y="143.50"></text></g><g><title>alloc::vec::from_elem (385 samples, 2.44%)</title><rect x="7.5021%" y="293" width="2.4415%" height="15" fill="rgb(238,207,15)" fg:x="1183" fg:w="385"/><text x="7.7521%" y="303.50">al..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (385 samples, 2.44%)</title><rect x="7.5021%" y="277" width="2.4415%" height="15" fill="rgb(213,199,42)" fg:x="1183" fg:w="385"/><text x="7.7521%" y="287.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (151 samples, 0.96%)</title><rect x="8.9860%" y="261" width="0.9576%" height="15" fill="rgb(235,201,11)" fg:x="1417" fg:w="151"/><text x="9.2360%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (151 samples, 0.96%)</title><rect x="8.9860%" y="245" width="0.9576%" height="15" fill="rgb(207,46,11)" fg:x="1417" fg:w="151"/><text x="9.2360%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (151 samples, 0.96%)</title><rect x="8.9860%" y="229" width="0.9576%" height="15" fill="rgb(241,35,35)" fg:x="1417" fg:w="151"/><text x="9.2360%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (18 samples, 0.11%)</title><rect x="9.9436%" y="293" width="0.1141%" height="15" fill="rgb(243,32,47)" fg:x="1568" fg:w="18"/><text x="10.1936%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (87 samples, 0.55%)</title><rect x="12.9114%" y="197" width="0.5517%" height="15" fill="rgb(247,202,23)" fg:x="2036" fg:w="87"/><text x="13.1614%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (87 samples, 0.55%)</title><rect x="12.9114%" y="181" width="0.5517%" height="15" fill="rgb(219,102,11)" fg:x="2036" fg:w="87"/><text x="13.1614%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (87 samples, 0.55%)</title><rect x="12.9114%" y="165" width="0.5517%" height="15" fill="rgb(243,110,44)" fg:x="2036" fg:w="87"/><text x="13.1614%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (26 samples, 0.16%)</title><rect x="13.4631%" y="197" width="0.1649%" height="15" fill="rgb(222,74,54)" fg:x="2123" fg:w="26"/><text x="13.7131%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (26 samples, 0.16%)</title><rect x="13.4631%" y="181" width="0.1649%" height="15" fill="rgb(216,99,12)" fg:x="2123" fg:w="26"/><text x="13.7131%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (26 samples, 0.16%)</title><rect x="13.4631%" y="165" width="0.1649%" height="15" fill="rgb(226,22,26)" fg:x="2123" fg:w="26"/><text x="13.7131%" y="175.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (69 samples, 0.44%)</title><rect x="13.6280%" y="197" width="0.4376%" height="15" fill="rgb(217,163,10)" fg:x="2149" fg:w="69"/><text x="13.8780%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (650 samples, 4.12%)</title><rect x="10.0577%" y="261" width="4.1220%" height="15" fill="rgb(213,25,53)" fg:x="1586" fg:w="650"/><text x="10.3077%" y="271.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (577 samples, 3.66%)</title><rect x="10.5206%" y="245" width="3.6591%" height="15" fill="rgb(252,105,26)" fg:x="1659" fg:w="577"/><text x="10.7706%" y="255.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (570 samples, 3.61%)</title><rect x="10.5650%" y="229" width="3.6147%" height="15" fill="rgb(220,39,43)" fg:x="1666" fg:w="570"/><text x="10.8150%" y="239.50">core..</text></g><g><title>main::compute_flowchange::_{{closure}} (570 samples, 3.61%)</title><rect x="10.5650%" y="213" width="3.6147%" height="15" fill="rgb(229,68,48)" fg:x="1666" fg:w="570"/><text x="10.8150%" y="223.50">main..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (18 samples, 0.11%)</title><rect x="14.0656%" y="197" width="0.1141%" height="15" fill="rgb(252,8,32)" fg:x="2218" fg:w="18"/><text x="14.3156%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (212 samples, 1.34%)</title><rect x="15.9110%" y="197" width="1.3444%" height="15" fill="rgb(223,20,43)" fg:x="2509" fg:w="212"/><text x="16.1610%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (212 samples, 1.34%)</title><rect x="15.9110%" y="181" width="1.3444%" height="15" fill="rgb(229,81,49)" fg:x="2509" fg:w="212"/><text x="16.1610%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (212 samples, 1.34%)</title><rect x="15.9110%" y="165" width="1.3444%" height="15" fill="rgb(236,28,36)" fg:x="2509" fg:w="212"/><text x="16.1610%" y="175.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (3 samples, 0.02%)</title><rect x="17.2554%" y="197" width="0.0190%" height="15" fill="rgb(249,185,26)" fg:x="2721" fg:w="3"/><text x="17.5054%" y="207.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (3 samples, 0.02%)</title><rect x="17.2554%" y="181" width="0.0190%" height="15" fill="rgb(249,174,33)" fg:x="2721" fg:w="3"/><text x="17.5054%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (11 samples, 0.07%)</title><rect x="17.2744%" y="181" width="0.0698%" height="15" fill="rgb(233,201,37)" fg:x="2724" fg:w="11"/><text x="17.5244%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (11 samples, 0.07%)</title><rect x="17.2744%" y="165" width="0.0698%" height="15" fill="rgb(221,78,26)" fg:x="2724" fg:w="11"/><text x="17.5244%" y="175.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1,207 samples, 7.65%)</title><rect x="27.1672%" y="165" width="7.6543%" height="15" fill="rgb(250,127,30)" fg:x="4284" fg:w="1207"/><text x="27.4172%" y="175.50">&lt;petgraph:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1,207 samples, 7.65%)</title><rect x="27.1672%" y="149" width="7.6543%" height="15" fill="rgb(230,49,44)" fg:x="4284" fg:w="1207"/><text x="27.4172%" y="159.50">core::cmp:..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (2,841 samples, 18.02%)</title><rect x="17.2744%" y="197" width="18.0164%" height="15" fill="rgb(229,67,23)" fg:x="2724" fg:w="2841"/><text x="17.5244%" y="207.50">petgraph::graph_impl::Graph&lt;..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (2,830 samples, 17.95%)</title><rect x="17.3442%" y="181" width="17.9466%" height="15" fill="rgb(249,83,47)" fg:x="2735" fg:w="2830"/><text x="17.5942%" y="191.50">petgraph::graph_impl::Graph&lt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (74 samples, 0.47%)</title><rect x="34.8215%" y="165" width="0.4693%" height="15" fill="rgb(215,43,3)" fg:x="5491" fg:w="74"/><text x="35.0715%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (74 samples, 0.47%)</title><rect x="34.8215%" y="149" width="0.4693%" height="15" fill="rgb(238,154,13)" fg:x="5491" fg:w="74"/><text x="35.0715%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (3,293 samples, 20.88%)</title><rect x="14.6427%" y="245" width="20.8827%" height="15" fill="rgb(219,56,2)" fg:x="2309" fg:w="3293"/><text x="14.8927%" y="255.50">&lt;core::iter::adapters::enumerate:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,256 samples, 20.65%)</title><rect x="14.8773%" y="229" width="20.6481%" height="15" fill="rgb(233,0,4)" fg:x="2346" fg:w="3256"/><text x="15.1273%" y="239.50">core::iter::traits::iterator::It..</text></g><g><title>main::compute_flowchange::_{{closure}} (3,256 samples, 20.65%)</title><rect x="14.8773%" y="213" width="20.6481%" height="15" fill="rgb(235,30,7)" fg:x="2346" fg:w="3256"/><text x="15.1273%" y="223.50">main::compute_flowchange::_{{clo..</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::new (37 samples, 0.23%)</title><rect x="35.2908%" y="197" width="0.2346%" height="15" fill="rgb(250,79,13)" fg:x="5565" fg:w="37"/><text x="35.5408%" y="207.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::new (37 samples, 0.23%)</title><rect x="35.2908%" y="181" width="0.2346%" height="15" fill="rgb(211,146,34)" fg:x="5565" fg:w="37"/><text x="35.5408%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 0.10%)</title><rect x="35.8361%" y="213" width="0.1015%" height="15" fill="rgb(228,22,38)" fg:x="5651" fg:w="16"/><text x="36.0861%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4,083 samples, 25.89%)</title><rect x="10.0577%" y="293" width="25.8926%" height="15" fill="rgb(235,168,5)" fg:x="1586" fg:w="4083"/><text x="10.3077%" y="303.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,083 samples, 25.89%)</title><rect x="10.0577%" y="277" width="25.8926%" height="15" fill="rgb(221,155,16)" fg:x="1586" fg:w="4083"/><text x="10.3077%" y="287.50">&lt;core::iter::adapters::enumerate::Enumera..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,433 samples, 21.77%)</title><rect x="14.1797%" y="261" width="21.7706%" height="15" fill="rgb(215,215,53)" fg:x="2236" fg:w="3433"/><text x="14.4297%" y="271.50">core::iter::traits::iterator::Iter..</text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.42%)</title><rect x="35.5254%" y="245" width="0.4249%" height="15" fill="rgb(223,4,10)" fg:x="5602" fg:w="67"/><text x="35.7754%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.41%)</title><rect x="35.5381%" y="229" width="0.4122%" height="15" fill="rgb(234,103,6)" fg:x="5604" fg:w="65"/><text x="35.7881%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.01%)</title><rect x="35.9376%" y="213" width="0.0127%" height="15" fill="rgb(227,97,0)" fg:x="5667" fg:w="2"/><text x="36.1876%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (2 samples, 0.01%)</title><rect x="35.9376%" y="197" width="0.0127%" height="15" fill="rgb(234,150,53)" fg:x="5667" fg:w="2"/><text x="36.1876%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (133 samples, 0.84%)</title><rect x="36.2483%" y="229" width="0.8434%" height="15" fill="rgb(228,201,54)" fg:x="5716" fg:w="133"/><text x="36.4983%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (130 samples, 0.82%)</title><rect x="36.2674%" y="213" width="0.8244%" height="15" fill="rgb(222,22,37)" fg:x="5719" fg:w="130"/><text x="36.5174%" y="223.50"></text></g><g><title>core::cmp::min_by (130 samples, 0.82%)</title><rect x="36.2674%" y="197" width="0.8244%" height="15" fill="rgb(237,53,32)" fg:x="5719" fg:w="130"/><text x="36.5174%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (11 samples, 0.07%)</title><rect x="37.0220%" y="181" width="0.0698%" height="15" fill="rgb(233,25,53)" fg:x="5838" fg:w="11"/><text x="37.2720%" y="191.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (11 samples, 0.07%)</title><rect x="37.0220%" y="165" width="0.0698%" height="15" fill="rgb(210,40,34)" fg:x="5838" fg:w="11"/><text x="37.2720%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (181 samples, 1.15%)</title><rect x="35.9503%" y="293" width="1.1478%" height="15" fill="rgb(241,220,44)" fg:x="5669" fg:w="181"/><text x="36.2003%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (181 samples, 1.15%)</title><rect x="35.9503%" y="277" width="1.1478%" height="15" fill="rgb(235,28,35)" fg:x="5669" fg:w="181"/><text x="36.2003%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (176 samples, 1.12%)</title><rect x="35.9820%" y="261" width="1.1161%" height="15" fill="rgb(210,56,17)" fg:x="5674" fg:w="176"/><text x="36.2320%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (176 samples, 1.12%)</title><rect x="35.9820%" y="245" width="1.1161%" height="15" fill="rgb(224,130,29)" fg:x="5674" fg:w="176"/><text x="36.2320%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (3 samples, 0.02%)</title><rect x="37.0981%" y="293" width="0.0190%" height="15" fill="rgb(235,212,8)" fg:x="5850" fg:w="3"/><text x="37.3481%" y="303.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.01%)</title><rect x="37.1425%" y="213" width="0.0127%" height="15" fill="rgb(223,33,50)" fg:x="5857" fg:w="2"/><text x="37.3925%" y="223.50"></text></g><g><title>__rust_dealloc (4 samples, 0.03%)</title><rect x="37.1552%" y="213" width="0.0254%" height="15" fill="rgb(219,149,13)" fg:x="5859" fg:w="4"/><text x="37.4052%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (115 samples, 0.73%)</title><rect x="37.1171%" y="245" width="0.7293%" height="15" fill="rgb(250,156,29)" fg:x="5853" fg:w="115"/><text x="37.3671%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (115 samples, 0.73%)</title><rect x="37.1171%" y="229" width="0.7293%" height="15" fill="rgb(216,193,19)" fg:x="5853" fg:w="115"/><text x="37.3671%" y="239.50"></text></g><g><title>cfree (105 samples, 0.67%)</title><rect x="37.1805%" y="213" width="0.6659%" height="15" fill="rgb(216,135,14)" fg:x="5863" fg:w="105"/><text x="37.4305%" y="223.50"></text></g><g><title>[libc.so.6] (70 samples, 0.44%)</title><rect x="37.4025%" y="197" width="0.4439%" height="15" fill="rgb(241,47,5)" fg:x="5898" fg:w="70"/><text x="37.6525%" y="207.50"></text></g><g><title>[libc.so.6] (17 samples, 0.11%)</title><rect x="37.7386%" y="181" width="0.1078%" height="15" fill="rgb(233,42,35)" fg:x="5951" fg:w="17"/><text x="37.9886%" y="191.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="37.8147%" y="165" width="0.0317%" height="15" fill="rgb(231,13,6)" fg:x="5963" fg:w="5"/><text x="38.0647%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (117 samples, 0.74%)</title><rect x="37.1171%" y="293" width="0.7420%" height="15" fill="rgb(207,181,40)" fg:x="5853" fg:w="117"/><text x="37.3671%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (117 samples, 0.74%)</title><rect x="37.1171%" y="277" width="0.7420%" height="15" fill="rgb(254,173,49)" fg:x="5853" fg:w="117"/><text x="37.3671%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.74%)</title><rect x="37.1171%" y="261" width="0.7420%" height="15" fill="rgb(221,1,38)" fg:x="5853" fg:w="117"/><text x="37.3671%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="37.8464%" y="245" width="0.0127%" height="15" fill="rgb(206,124,46)" fg:x="5968" fg:w="2"/><text x="38.0964%" y="255.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.02%)</title><rect x="37.8654%" y="213" width="0.0190%" height="15" fill="rgb(249,21,11)" fg:x="5971" fg:w="3"/><text x="38.1154%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (38 samples, 0.24%)</title><rect x="37.8591%" y="245" width="0.2410%" height="15" fill="rgb(222,201,40)" fg:x="5970" fg:w="38"/><text x="38.1091%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.24%)</title><rect x="37.8591%" y="229" width="0.2410%" height="15" fill="rgb(235,61,29)" fg:x="5970" fg:w="38"/><text x="38.1091%" y="239.50"></text></g><g><title>cfree (34 samples, 0.22%)</title><rect x="37.8845%" y="213" width="0.2156%" height="15" fill="rgb(219,207,3)" fg:x="5974" fg:w="34"/><text x="38.1345%" y="223.50"></text></g><g><title>[libc.so.6] (26 samples, 0.16%)</title><rect x="37.9352%" y="197" width="0.1649%" height="15" fill="rgb(222,56,46)" fg:x="5982" fg:w="26"/><text x="38.1852%" y="207.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="38.0874%" y="181" width="0.0127%" height="15" fill="rgb(239,76,54)" fg:x="6006" fg:w="2"/><text x="38.3374%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (39 samples, 0.25%)</title><rect x="37.8591%" y="293" width="0.2473%" height="15" fill="rgb(231,124,27)" fg:x="5970" fg:w="39"/><text x="38.1091%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (39 samples, 0.25%)</title><rect x="37.8591%" y="277" width="0.2473%" height="15" fill="rgb(249,195,6)" fg:x="5970" fg:w="39"/><text x="38.1091%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.25%)</title><rect x="37.8591%" y="261" width="0.2473%" height="15" fill="rgb(237,174,47)" fg:x="5970" fg:w="39"/><text x="38.1091%" y="271.50"></text></g><g><title>core::ptr::read (3 samples, 0.02%)</title><rect x="38.1191%" y="229" width="0.0190%" height="15" fill="rgb(206,201,31)" fg:x="6011" fg:w="3"/><text x="38.3691%" y="239.50"></text></g><g><title>main::compute_flowchange (4,890 samples, 31.01%)</title><rect x="7.1343%" y="309" width="31.0102%" height="15" fill="rgb(231,57,52)" fg:x="1125" fg:w="4890"/><text x="7.3843%" y="319.50">main::compute_flowchange</text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (6 samples, 0.04%)</title><rect x="38.1064%" y="293" width="0.0380%" height="15" fill="rgb(248,177,22)" fg:x="6009" fg:w="6"/><text x="38.3564%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (6 samples, 0.04%)</title><rect x="38.1064%" y="277" width="0.0380%" height="15" fill="rgb(215,211,37)" fg:x="6009" fg:w="6"/><text x="38.3564%" y="287.50"></text></g><g><title>core::mem::swap (4 samples, 0.03%)</title><rect x="38.1191%" y="261" width="0.0254%" height="15" fill="rgb(241,128,51)" fg:x="6011" fg:w="4"/><text x="38.3691%" y="271.50"></text></g><g><title>core::mem::swap_simple (4 samples, 0.03%)</title><rect x="38.1191%" y="245" width="0.0254%" height="15" fill="rgb(227,165,31)" fg:x="6011" fg:w="4"/><text x="38.3691%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.06%)</title><rect x="43.6870%" y="293" width="0.0571%" height="15" fill="rgb(228,167,24)" fg:x="6889" fg:w="9"/><text x="43.9370%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (83 samples, 0.53%)</title><rect x="43.7441%" y="293" width="0.5263%" height="15" fill="rgb(228,143,12)" fg:x="6898" fg:w="83"/><text x="43.9941%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (82 samples, 0.52%)</title><rect x="43.7504%" y="277" width="0.5200%" height="15" fill="rgb(249,149,8)" fg:x="6899" fg:w="82"/><text x="44.0004%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (82 samples, 0.52%)</title><rect x="43.7504%" y="261" width="0.5200%" height="15" fill="rgb(243,35,44)" fg:x="6899" fg:w="82"/><text x="44.0004%" y="271.50"></text></g><g><title>__rdl_alloc (4 samples, 0.03%)</title><rect x="44.2894%" y="229" width="0.0254%" height="15" fill="rgb(246,89,9)" fg:x="6984" fg:w="4"/><text x="44.5394%" y="239.50"></text></g><g><title>__rust_alloc (2 samples, 0.01%)</title><rect x="44.3148%" y="229" width="0.0127%" height="15" fill="rgb(233,213,13)" fg:x="6988" fg:w="2"/><text x="44.5648%" y="239.50"></text></g><g><title>core::ptr::read_volatile (4 samples, 0.03%)</title><rect x="44.3275%" y="229" width="0.0254%" height="15" fill="rgb(233,141,41)" fg:x="6990" fg:w="4"/><text x="44.5775%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (53 samples, 0.34%)</title><rect x="44.2704%" y="293" width="0.3361%" height="15" fill="rgb(239,167,4)" fg:x="6981" fg:w="53"/><text x="44.5204%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.33%)</title><rect x="44.2767%" y="277" width="0.3298%" height="15" fill="rgb(209,217,16)" fg:x="6982" fg:w="52"/><text x="44.5267%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.33%)</title><rect x="44.2767%" y="261" width="0.3298%" height="15" fill="rgb(219,88,35)" fg:x="6982" fg:w="52"/><text x="44.5267%" y="271.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.33%)</title><rect x="44.2767%" y="245" width="0.3298%" height="15" fill="rgb(220,193,23)" fg:x="6982" fg:w="52"/><text x="44.5267%" y="255.50"></text></g><g><title>malloc (40 samples, 0.25%)</title><rect x="44.3528%" y="229" width="0.2537%" height="15" fill="rgb(230,90,52)" fg:x="6994" fg:w="40"/><text x="44.6028%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (3 samples, 0.02%)</title><rect x="44.6065%" y="293" width="0.0190%" height="15" fill="rgb(252,106,19)" fg:x="7034" fg:w="3"/><text x="44.8565%" y="303.50"></text></g><g><title>alloc::slice::hack::into_vec (3 samples, 0.02%)</title><rect x="44.6065%" y="277" width="0.0190%" height="15" fill="rgb(206,74,20)" fg:x="7034" fg:w="3"/><text x="44.8565%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (3 samples, 0.02%)</title><rect x="44.6065%" y="261" width="0.0190%" height="15" fill="rgb(230,138,44)" fg:x="7034" fg:w="3"/><text x="44.8565%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (22 samples, 0.14%)</title><rect x="45.2407%" y="245" width="0.1395%" height="15" fill="rgb(235,182,43)" fg:x="7134" fg:w="22"/><text x="45.4907%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.04%)</title><rect x="45.3802%" y="245" width="0.0444%" height="15" fill="rgb(242,16,51)" fg:x="7156" fg:w="7"/><text x="45.6302%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (2 samples, 0.01%)</title><rect x="45.4119%" y="229" width="0.0127%" height="15" fill="rgb(248,9,4)" fg:x="7161" fg:w="2"/><text x="45.6619%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (3 samples, 0.02%)</title><rect x="45.4246%" y="245" width="0.0190%" height="15" fill="rgb(210,31,22)" fg:x="7163" fg:w="3"/><text x="45.6746%" y="255.50"></text></g><g><title>__rdl_realloc (14 samples, 0.09%)</title><rect x="45.5958%" y="181" width="0.0888%" height="15" fill="rgb(239,54,39)" fg:x="7190" fg:w="14"/><text x="45.8458%" y="191.50"></text></g><g><title>__rust_realloc (6 samples, 0.04%)</title><rect x="45.6846%" y="181" width="0.0380%" height="15" fill="rgb(230,99,41)" fg:x="7204" fg:w="6"/><text x="45.9346%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (880 samples, 5.58%)</title><rect x="45.5577%" y="229" width="5.5806%" height="15" fill="rgb(253,106,12)" fg:x="7184" fg:w="880"/><text x="45.8077%" y="239.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::grow_impl (880 samples, 5.58%)</title><rect x="45.5577%" y="213" width="5.5806%" height="15" fill="rgb(213,46,41)" fg:x="7184" fg:w="880"/><text x="45.8077%" y="223.50">alloc::..</text></g><g><title>alloc::alloc::realloc (880 samples, 5.58%)</title><rect x="45.5577%" y="197" width="5.5806%" height="15" fill="rgb(215,133,35)" fg:x="7184" fg:w="880"/><text x="45.8077%" y="207.50">alloc::..</text></g><g><title>realloc (854 samples, 5.42%)</title><rect x="45.7226%" y="181" width="5.4157%" height="15" fill="rgb(213,28,5)" fg:x="7210" fg:w="854"/><text x="45.9726%" y="191.50">realloc</text></g><g><title>[libc.so.6] (751 samples, 4.76%)</title><rect x="46.3758%" y="165" width="4.7625%" height="15" fill="rgb(215,77,49)" fg:x="7313" fg:w="751"/><text x="46.6258%" y="175.50">[libc...</text></g><g><title>[libc.so.6] (644 samples, 4.08%)</title><rect x="47.0543%" y="149" width="4.0840%" height="15" fill="rgb(248,100,22)" fg:x="7420" fg:w="644"/><text x="47.3043%" y="159.50">[lib..</text></g><g><title>[libc.so.6] (112 samples, 0.71%)</title><rect x="50.4281%" y="133" width="0.7103%" height="15" fill="rgb(208,67,9)" fg:x="7952" fg:w="112"/><text x="50.6781%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="51.1256%" y="117" width="0.0127%" height="15" fill="rgb(219,133,21)" fg:x="8062" fg:w="2"/><text x="51.3756%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (909 samples, 5.76%)</title><rect x="45.4436%" y="245" width="5.7645%" height="15" fill="rgb(246,46,29)" fg:x="7166" fg:w="909"/><text x="45.6936%" y="255.50">alloc::..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (11 samples, 0.07%)</title><rect x="51.1383%" y="229" width="0.0698%" height="15" fill="rgb(246,185,52)" fg:x="8064" fg:w="11"/><text x="51.3883%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (11 samples, 0.07%)</title><rect x="51.2081%" y="245" width="0.0698%" height="15" fill="rgb(252,136,11)" fg:x="8075" fg:w="11"/><text x="51.4581%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (11 samples, 0.07%)</title><rect x="51.2081%" y="229" width="0.0698%" height="15" fill="rgb(219,138,53)" fg:x="8075" fg:w="11"/><text x="51.4581%" y="239.50"></text></g><g><title>core::cmp::max (13 samples, 0.08%)</title><rect x="51.2778%" y="245" width="0.0824%" height="15" fill="rgb(211,51,23)" fg:x="8086" fg:w="13"/><text x="51.5278%" y="255.50"></text></g><g><title>core::cmp::Ord::max (13 samples, 0.08%)</title><rect x="51.2778%" y="229" width="0.0824%" height="15" fill="rgb(247,221,28)" fg:x="8086" fg:w="13"/><text x="51.5278%" y="239.50"></text></g><g><title>core::cmp::max_by (13 samples, 0.08%)</title><rect x="51.2778%" y="213" width="0.0824%" height="15" fill="rgb(251,222,45)" fg:x="8086" fg:w="13"/><text x="51.5278%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (979 samples, 6.21%)</title><rect x="45.1582%" y="277" width="6.2084%" height="15" fill="rgb(217,162,53)" fg:x="7121" fg:w="979"/><text x="45.4082%" y="287.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (979 samples, 6.21%)</title><rect x="45.1582%" y="261" width="6.2084%" height="15" fill="rgb(229,93,14)" fg:x="7121" fg:w="979"/><text x="45.4082%" y="271.50">alloc::r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (19 samples, 0.12%)</title><rect x="51.3666%" y="277" width="0.1205%" height="15" fill="rgb(209,67,49)" fg:x="8100" fg:w="19"/><text x="51.6166%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (19 samples, 0.12%)</title><rect x="51.3666%" y="261" width="0.1205%" height="15" fill="rgb(213,87,29)" fg:x="8100" fg:w="19"/><text x="51.6166%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,145 samples, 7.26%)</title><rect x="44.6255%" y="293" width="7.2611%" height="15" fill="rgb(205,151,52)" fg:x="7037" fg:w="1145"/><text x="44.8755%" y="303.50">alloc::vec..</text></g><g><title>core::ptr::write (63 samples, 0.40%)</title><rect x="51.4871%" y="277" width="0.3995%" height="15" fill="rgb(253,215,39)" fg:x="8119" fg:w="63"/><text x="51.7371%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (13 samples, 0.08%)</title><rect x="51.9247%" y="229" width="0.0824%" height="15" fill="rgb(221,220,41)" fg:x="8188" fg:w="13"/><text x="52.1747%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.08%)</title><rect x="51.9247%" y="213" width="0.0824%" height="15" fill="rgb(218,133,21)" fg:x="8188" fg:w="13"/><text x="52.1747%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="52.2417%" y="149" width="0.0190%" height="15" fill="rgb(221,193,43)" fg:x="8238" fg:w="3"/><text x="52.4917%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="52.2608%" y="149" width="0.0127%" height="15" fill="rgb(240,128,52)" fg:x="8241" fg:w="2"/><text x="52.5108%" y="159.50"></text></g><g><title>__rust_realloc (2 samples, 0.01%)</title><rect x="52.3115%" y="85" width="0.0127%" height="15" fill="rgb(253,114,12)" fg:x="8249" fg:w="2"/><text x="52.5615%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (172 samples, 1.09%)</title><rect x="52.2925%" y="133" width="1.0907%" height="15" fill="rgb(215,223,47)" fg:x="8246" fg:w="172"/><text x="52.5425%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (172 samples, 1.09%)</title><rect x="52.2925%" y="117" width="1.0907%" height="15" fill="rgb(248,225,23)" fg:x="8246" fg:w="172"/><text x="52.5425%" y="127.50"></text></g><g><title>alloc::alloc::realloc (171 samples, 1.08%)</title><rect x="52.2988%" y="101" width="1.0844%" height="15" fill="rgb(250,108,0)" fg:x="8247" fg:w="171"/><text x="52.5488%" y="111.50"></text></g><g><title>realloc (167 samples, 1.06%)</title><rect x="52.3242%" y="85" width="1.0590%" height="15" fill="rgb(228,208,7)" fg:x="8251" fg:w="167"/><text x="52.5742%" y="95.50"></text></g><g><title>[libc.so.6] (154 samples, 0.98%)</title><rect x="52.4066%" y="69" width="0.9766%" height="15" fill="rgb(244,45,10)" fg:x="8264" fg:w="154"/><text x="52.6566%" y="79.50"></text></g><g><title>[libc.so.6] (130 samples, 0.82%)</title><rect x="52.5588%" y="53" width="0.8244%" height="15" fill="rgb(207,125,25)" fg:x="8288" fg:w="130"/><text x="52.8088%" y="63.50"></text></g><g><title>[libc.so.6] (31 samples, 0.20%)</title><rect x="53.1866%" y="37" width="0.1966%" height="15" fill="rgb(210,195,18)" fg:x="8387" fg:w="31"/><text x="53.4366%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (176 samples, 1.12%)</title><rect x="52.2798%" y="149" width="1.1161%" height="15" fill="rgb(249,80,12)" fg:x="8244" fg:w="176"/><text x="52.5298%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="53.3832%" y="133" width="0.0127%" height="15" fill="rgb(221,65,9)" fg:x="8418" fg:w="2"/><text x="53.6332%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (186 samples, 1.18%)</title><rect x="52.2354%" y="181" width="1.1795%" height="15" fill="rgb(235,49,36)" fg:x="8237" fg:w="186"/><text x="52.4854%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (186 samples, 1.18%)</title><rect x="52.2354%" y="165" width="1.1795%" height="15" fill="rgb(225,32,20)" fg:x="8237" fg:w="186"/><text x="52.4854%" y="175.50"></text></g><g><title>core::cmp::max (2 samples, 0.01%)</title><rect x="53.4022%" y="149" width="0.0127%" height="15" fill="rgb(215,141,46)" fg:x="8421" fg:w="2"/><text x="53.6522%" y="159.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.01%)</title><rect x="53.4022%" y="133" width="0.0127%" height="15" fill="rgb(250,160,47)" fg:x="8421" fg:w="2"/><text x="53.6522%" y="143.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.01%)</title><rect x="53.4022%" y="117" width="0.0127%" height="15" fill="rgb(216,222,40)" fg:x="8421" fg:w="2"/><text x="53.6522%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (20 samples, 0.13%)</title><rect x="53.4149%" y="181" width="0.1268%" height="15" fill="rgb(234,217,39)" fg:x="8423" fg:w="20"/><text x="53.6649%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (20 samples, 0.13%)</title><rect x="53.4149%" y="165" width="0.1268%" height="15" fill="rgb(207,178,40)" fg:x="8423" fg:w="20"/><text x="53.6649%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (363 samples, 2.30%)</title><rect x="51.8866%" y="261" width="2.3020%" height="15" fill="rgb(221,136,13)" fg:x="8182" fg:w="363"/><text x="52.1366%" y="271.50">&lt;..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (363 samples, 2.30%)</title><rect x="51.8866%" y="245" width="2.3020%" height="15" fill="rgb(249,199,10)" fg:x="8182" fg:w="363"/><text x="52.1366%" y="255.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (344 samples, 2.18%)</title><rect x="52.0071%" y="229" width="2.1815%" height="15" fill="rgb(249,222,13)" fg:x="8201" fg:w="344"/><text x="52.2571%" y="239.50">c..</text></g><g><title>main::find_cycle_with_arc::_{{closure}} (344 samples, 2.18%)</title><rect x="52.0071%" y="213" width="2.1815%" height="15" fill="rgb(244,185,38)" fg:x="8201" fg:w="344"/><text x="52.2571%" y="223.50">m..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (344 samples, 2.18%)</title><rect x="52.0071%" y="197" width="2.1815%" height="15" fill="rgb(236,202,9)" fg:x="8201" fg:w="344"/><text x="52.2571%" y="207.50">a..</text></g><g><title>core::ptr::write (102 samples, 0.65%)</title><rect x="53.5418%" y="181" width="0.6468%" height="15" fill="rgb(250,229,37)" fg:x="8443" fg:w="102"/><text x="53.7918%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (364 samples, 2.31%)</title><rect x="51.8866%" y="293" width="2.3083%" height="15" fill="rgb(206,174,23)" fg:x="8182" fg:w="364"/><text x="52.1366%" y="303.50">c..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (364 samples, 2.31%)</title><rect x="51.8866%" y="277" width="2.3083%" height="15" fill="rgb(211,33,43)" fg:x="8182" fg:w="364"/><text x="52.1366%" y="287.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::expect (393 samples, 2.49%)</title><rect x="54.1949%" y="293" width="2.4922%" height="15" fill="rgb(245,58,50)" fg:x="8546" fg:w="393"/><text x="54.4449%" y="303.50">co..</text></g><g><title>main::find_cycle_with_arc (2,972 samples, 18.85%)</title><rect x="38.1445%" y="309" width="18.8471%" height="15" fill="rgb(244,68,36)" fg:x="6015" fg:w="2972"/><text x="38.3945%" y="319.50">main::find_cycle_with_arc</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (48 samples, 0.30%)</title><rect x="56.6872%" y="293" width="0.3044%" height="15" fill="rgb(232,229,15)" fg:x="8939" fg:w="48"/><text x="56.9372%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (48 samples, 0.30%)</title><rect x="56.6872%" y="277" width="0.3044%" height="15" fill="rgb(254,30,23)" fg:x="8939" fg:w="48"/><text x="56.9372%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.30%)</title><rect x="56.6872%" y="261" width="0.3044%" height="15" fill="rgb(235,160,14)" fg:x="8939" fg:w="48"/><text x="56.9372%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 0.30%)</title><rect x="56.6872%" y="245" width="0.3044%" height="15" fill="rgb(212,155,44)" fg:x="8939" fg:w="48"/><text x="56.9372%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (48 samples, 0.30%)</title><rect x="56.6872%" y="229" width="0.3044%" height="15" fill="rgb(226,2,50)" fg:x="8939" fg:w="48"/><text x="56.9372%" y="239.50"></text></g><g><title>cfree (47 samples, 0.30%)</title><rect x="56.6935%" y="213" width="0.2981%" height="15" fill="rgb(234,177,6)" fg:x="8940" fg:w="47"/><text x="56.9435%" y="223.50"></text></g><g><title>[libc.so.6] (34 samples, 0.22%)</title><rect x="56.7760%" y="197" width="0.2156%" height="15" fill="rgb(217,24,9)" fg:x="8953" fg:w="34"/><text x="57.0260%" y="207.50"></text></g><g><title>[libc.so.6] (13 samples, 0.08%)</title><rect x="56.9091%" y="181" width="0.0824%" height="15" fill="rgb(220,13,46)" fg:x="8974" fg:w="13"/><text x="57.1591%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="56.9662%" y="165" width="0.0254%" height="15" fill="rgb(239,221,27)" fg:x="8983" fg:w="4"/><text x="57.2162%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.02%)</title><rect x="57.0042%" y="293" width="0.0190%" height="15" fill="rgb(222,198,25)" fg:x="8989" fg:w="3"/><text x="57.2542%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.02%)</title><rect x="57.0042%" y="277" width="0.0190%" height="15" fill="rgb(211,99,13)" fg:x="8989" fg:w="3"/><text x="57.2542%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.01%)</title><rect x="57.0106%" y="261" width="0.0127%" height="15" fill="rgb(232,111,31)" fg:x="8990" fg:w="2"/><text x="57.2606%" y="271.50"></text></g><g><title>main::initialization::_{{closure}} (2 samples, 0.01%)</title><rect x="57.0106%" y="245" width="0.0127%" height="15" fill="rgb(245,82,37)" fg:x="8990" fg:w="2"/><text x="57.2606%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="57.0233%" y="277" width="0.0190%" height="15" fill="rgb(227,149,46)" fg:x="8992" fg:w="3"/><text x="57.2733%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="57.0233%" y="261" width="0.0190%" height="15" fill="rgb(218,36,50)" fg:x="8992" fg:w="3"/><text x="57.2733%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="57.0233%" y="245" width="0.0190%" height="15" fill="rgb(226,80,48)" fg:x="8992" fg:w="3"/><text x="57.2733%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="57.0233%" y="229" width="0.0190%" height="15" fill="rgb(238,224,15)" fg:x="8992" fg:w="3"/><text x="57.2733%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="57.0233%" y="213" width="0.0190%" height="15" fill="rgb(241,136,10)" fg:x="8992" fg:w="3"/><text x="57.2733%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.01%)</title><rect x="57.0296%" y="197" width="0.0127%" height="15" fill="rgb(208,32,45)" fg:x="8993" fg:w="2"/><text x="57.2796%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="57.0296%" y="181" width="0.0127%" height="15" fill="rgb(207,135,9)" fg:x="8993" fg:w="2"/><text x="57.2796%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="57.0296%" y="165" width="0.0127%" height="15" fill="rgb(206,86,44)" fg:x="8993" fg:w="2"/><text x="57.2796%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="57.0423%" y="277" width="0.0127%" height="15" fill="rgb(245,177,15)" fg:x="8995" fg:w="2"/><text x="57.2923%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="57.0423%" y="261" width="0.0127%" height="15" fill="rgb(206,64,50)" fg:x="8995" fg:w="2"/><text x="57.2923%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="57.0423%" y="245" width="0.0127%" height="15" fill="rgb(234,36,40)" fg:x="8995" fg:w="2"/><text x="57.2923%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.01%)</title><rect x="57.0423%" y="229" width="0.0127%" height="15" fill="rgb(213,64,8)" fg:x="8995" fg:w="2"/><text x="57.2923%" y="239.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (2 samples, 0.01%)</title><rect x="57.0423%" y="213" width="0.0127%" height="15" fill="rgb(210,75,36)" fg:x="8995" fg:w="2"/><text x="57.2923%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (2 samples, 0.01%)</title><rect x="57.0423%" y="197" width="0.0127%" height="15" fill="rgb(229,88,21)" fg:x="8995" fg:w="2"/><text x="57.2923%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (2 samples, 0.01%)</title><rect x="57.0423%" y="181" width="0.0127%" height="15" fill="rgb(252,204,47)" fg:x="8995" fg:w="2"/><text x="57.2923%" y="191.50"></text></g><g><title>itertools::Itertools::sorted_by_key (2 samples, 0.01%)</title><rect x="57.0550%" y="277" width="0.0127%" height="15" fill="rgb(208,77,27)" fg:x="8997" fg:w="2"/><text x="57.3050%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (2 samples, 0.01%)</title><rect x="57.0550%" y="261" width="0.0127%" height="15" fill="rgb(221,76,26)" fg:x="8997" fg:w="2"/><text x="57.3050%" y="271.50"></text></g><g><title>alloc::slice::stable_sort (2 samples, 0.01%)</title><rect x="57.0550%" y="245" width="0.0127%" height="15" fill="rgb(225,139,18)" fg:x="8997" fg:w="2"/><text x="57.3050%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.01%)</title><rect x="57.0550%" y="229" width="0.0127%" height="15" fill="rgb(230,137,11)" fg:x="8997" fg:w="2"/><text x="57.3050%" y="239.50"></text></g><g><title>core::slice::sort::merge (2 samples, 0.01%)</title><rect x="57.0550%" y="213" width="0.0127%" height="15" fill="rgb(212,28,1)" fg:x="8997" fg:w="2"/><text x="57.3050%" y="223.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (3 samples, 0.02%)</title><rect x="57.0677%" y="277" width="0.0190%" height="15" fill="rgb(248,164,17)" fg:x="8999" fg:w="3"/><text x="57.3177%" y="287.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (2 samples, 0.01%)</title><rect x="57.0740%" y="261" width="0.0127%" height="15" fill="rgb(222,171,42)" fg:x="9000" fg:w="2"/><text x="57.3240%" y="271.50"></text></g><g><title>main::compute_node_potentials (12 samples, 0.08%)</title><rect x="57.0233%" y="293" width="0.0761%" height="15" fill="rgb(243,84,45)" fg:x="8992" fg:w="12"/><text x="57.2733%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (2 samples, 0.01%)</title><rect x="57.0867%" y="277" width="0.0127%" height="15" fill="rgb(252,49,23)" fg:x="9002" fg:w="2"/><text x="57.3367%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (2 samples, 0.01%)</title><rect x="57.0867%" y="261" width="0.0127%" height="15" fill="rgb(215,19,7)" fg:x="9002" fg:w="2"/><text x="57.3367%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.01%)</title><rect x="57.0867%" y="245" width="0.0127%" height="15" fill="rgb(238,81,41)" fg:x="9002" fg:w="2"/><text x="57.3367%" y="255.50"></text></g><g><title>main::initialization (18 samples, 0.11%)</title><rect x="56.9916%" y="309" width="0.1141%" height="15" fill="rgb(210,199,37)" fg:x="8987" fg:w="18"/><text x="57.2416%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (19 samples, 0.12%)</title><rect x="59.1096%" y="293" width="0.1205%" height="15" fill="rgb(244,192,49)" fg:x="9321" fg:w="19"/><text x="59.3596%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18 samples, 0.11%)</title><rect x="59.1160%" y="277" width="0.1141%" height="15" fill="rgb(226,211,11)" fg:x="9322" fg:w="18"/><text x="59.3660%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18 samples, 0.11%)</title><rect x="59.1160%" y="261" width="0.1141%" height="15" fill="rgb(236,162,54)" fg:x="9322" fg:w="18"/><text x="59.3660%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.03%)</title><rect x="59.2301%" y="293" width="0.0317%" height="15" fill="rgb(220,229,9)" fg:x="9340" fg:w="5"/><text x="59.4801%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.03%)</title><rect x="59.2301%" y="277" width="0.0317%" height="15" fill="rgb(250,87,22)" fg:x="9340" fg:w="5"/><text x="59.4801%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.03%)</title><rect x="59.2301%" y="261" width="0.0317%" height="15" fill="rgb(239,43,17)" fg:x="9340" fg:w="5"/><text x="59.4801%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.04%)</title><rect x="59.2618%" y="293" width="0.0380%" height="15" fill="rgb(231,177,25)" fg:x="9345" fg:w="6"/><text x="59.5118%" y="303.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (6 samples, 0.04%)</title><rect x="59.2618%" y="277" width="0.0380%" height="15" fill="rgb(219,179,1)" fg:x="9345" fg:w="6"/><text x="59.5118%" y="287.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (287 samples, 1.82%)</title><rect x="59.2999%" y="293" width="1.8200%" height="15" fill="rgb(238,219,53)" fg:x="9351" fg:w="287"/><text x="59.5499%" y="303.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.03%)</title><rect x="61.1516%" y="277" width="0.0254%" height="15" fill="rgb(232,167,36)" fg:x="9643" fg:w="4"/><text x="61.4016%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="61.1580%" y="261" width="0.0190%" height="15" fill="rgb(244,19,51)" fg:x="9644" fg:w="3"/><text x="61.4080%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="61.1580%" y="245" width="0.0190%" height="15" fill="rgb(224,6,22)" fg:x="9644" fg:w="3"/><text x="61.4080%" y="255.50"></text></g><g><title>main::update_node_potentials (648 samples, 4.11%)</title><rect x="57.1057%" y="309" width="4.1093%" height="15" fill="rgb(224,145,5)" fg:x="9005" fg:w="648"/><text x="57.3557%" y="319.50">main..</text></g><g><title>main::get_reduced_cost_edgeindex (15 samples, 0.10%)</title><rect x="61.1199%" y="293" width="0.0951%" height="15" fill="rgb(234,130,49)" fg:x="9638" fg:w="15"/><text x="61.3699%" y="303.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (6 samples, 0.04%)</title><rect x="61.1770%" y="277" width="0.0380%" height="15" fill="rgb(254,6,2)" fg:x="9647" fg:w="6"/><text x="61.4270%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="69.3956%" y="293" width="0.0380%" height="15" fill="rgb(208,96,46)" fg:x="10943" fg:w="6"/><text x="69.6456%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="69.4464%" y="277" width="0.0254%" height="15" fill="rgb(239,3,39)" fg:x="10951" fg:w="4"/><text x="69.6964%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (183 samples, 1.16%)</title><rect x="69.4337%" y="293" width="1.1605%" height="15" fill="rgb(233,210,1)" fg:x="10949" fg:w="183"/><text x="69.6837%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (177 samples, 1.12%)</title><rect x="69.4717%" y="277" width="1.1225%" height="15" fill="rgb(244,137,37)" fg:x="10955" fg:w="177"/><text x="69.7217%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (177 samples, 1.12%)</title><rect x="69.4717%" y="261" width="1.1225%" height="15" fill="rgb(240,136,2)" fg:x="10955" fg:w="177"/><text x="69.7217%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="70.5942%" y="293" width="0.0254%" height="15" fill="rgb(239,18,37)" fg:x="11132" fg:w="4"/><text x="70.8442%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.03%)</title><rect x="70.5942%" y="277" width="0.0254%" height="15" fill="rgb(218,185,22)" fg:x="11132" fg:w="4"/><text x="70.8442%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="70.5942%" y="261" width="0.0254%" height="15" fill="rgb(225,218,4)" fg:x="11132" fg:w="4"/><text x="70.8442%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (55 samples, 0.35%)</title><rect x="72.8011%" y="245" width="0.3488%" height="15" fill="rgb(230,182,32)" fg:x="11480" fg:w="55"/><text x="73.0511%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (55 samples, 0.35%)</title><rect x="72.8011%" y="229" width="0.3488%" height="15" fill="rgb(242,56,43)" fg:x="11480" fg:w="55"/><text x="73.0511%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (55 samples, 0.35%)</title><rect x="72.8011%" y="213" width="0.3488%" height="15" fill="rgb(233,99,24)" fg:x="11480" fg:w="55"/><text x="73.0511%" y="223.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (15 samples, 0.10%)</title><rect x="73.1499%" y="245" width="0.0951%" height="15" fill="rgb(234,209,42)" fg:x="11535" fg:w="15"/><text x="73.3999%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (43 samples, 0.27%)</title><rect x="73.2577%" y="229" width="0.2727%" height="15" fill="rgb(227,7,12)" fg:x="11552" fg:w="43"/><text x="73.5077%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (43 samples, 0.27%)</title><rect x="73.2577%" y="213" width="0.2727%" height="15" fill="rgb(245,203,43)" fg:x="11552" fg:w="43"/><text x="73.5077%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (42 samples, 0.27%)</title><rect x="73.2640%" y="197" width="0.2663%" height="15" fill="rgb(238,205,33)" fg:x="11553" fg:w="42"/><text x="73.5140%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (42 samples, 0.27%)</title><rect x="73.2640%" y="181" width="0.2663%" height="15" fill="rgb(231,56,7)" fg:x="11553" fg:w="42"/><text x="73.5140%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (42 samples, 0.27%)</title><rect x="73.2640%" y="165" width="0.2663%" height="15" fill="rgb(244,186,29)" fg:x="11553" fg:w="42"/><text x="73.5140%" y="175.50"></text></g><g><title>alloc::alloc::realloc (42 samples, 0.27%)</title><rect x="73.2640%" y="149" width="0.2663%" height="15" fill="rgb(234,111,31)" fg:x="11553" fg:w="42"/><text x="73.5140%" y="159.50"></text></g><g><title>realloc (41 samples, 0.26%)</title><rect x="73.2703%" y="133" width="0.2600%" height="15" fill="rgb(241,149,10)" fg:x="11554" fg:w="41"/><text x="73.5203%" y="143.50"></text></g><g><title>[libc.so.6] (40 samples, 0.25%)</title><rect x="73.2767%" y="117" width="0.2537%" height="15" fill="rgb(249,206,44)" fg:x="11555" fg:w="40"/><text x="73.5267%" y="127.50"></text></g><g><title>[libc.so.6] (32 samples, 0.20%)</title><rect x="73.3274%" y="101" width="0.2029%" height="15" fill="rgb(251,153,30)" fg:x="11563" fg:w="32"/><text x="73.5774%" y="111.50"></text></g><g><title>[libc.so.6] (9 samples, 0.06%)</title><rect x="73.4733%" y="85" width="0.0571%" height="15" fill="rgb(239,152,38)" fg:x="11586" fg:w="9"/><text x="73.7233%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (49 samples, 0.31%)</title><rect x="73.2450%" y="245" width="0.3107%" height="15" fill="rgb(249,139,47)" fg:x="11550" fg:w="49"/><text x="73.4950%" y="255.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="73.5367%" y="229" width="0.0190%" height="15" fill="rgb(244,64,35)" fg:x="11596" fg:w="3"/><text x="73.7867%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (465 samples, 2.95%)</title><rect x="70.6196%" y="293" width="2.9488%" height="15" fill="rgb(216,46,15)" fg:x="11136" fg:w="465"/><text x="70.8696%" y="303.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (465 samples, 2.95%)</title><rect x="70.6196%" y="277" width="2.9488%" height="15" fill="rgb(250,74,19)" fg:x="11136" fg:w="465"/><text x="70.8696%" y="287.50">&lt;c..</text></g><g><title>main::update_sptree::_{{closure}} (462 samples, 2.93%)</title><rect x="70.6386%" y="261" width="2.9298%" height="15" fill="rgb(249,42,33)" fg:x="11139" fg:w="462"/><text x="70.8886%" y="271.50">ma..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.01%)</title><rect x="73.5557%" y="245" width="0.0127%" height="15" fill="rgb(242,149,17)" fg:x="11599" fg:w="2"/><text x="73.8057%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.04%)</title><rect x="73.5684%" y="293" width="0.0380%" height="15" fill="rgb(244,29,21)" fg:x="11601" fg:w="6"/><text x="73.8184%" y="303.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (6 samples, 0.04%)</title><rect x="73.5684%" y="277" width="0.0380%" height="15" fill="rgb(220,130,37)" fg:x="11601" fg:w="6"/><text x="73.8184%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.16%)</title><rect x="73.6572%" y="277" width="0.1649%" height="15" fill="rgb(211,67,2)" fg:x="11615" fg:w="26"/><text x="73.9072%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (80 samples, 0.51%)</title><rect x="74.8304%" y="261" width="0.5073%" height="15" fill="rgb(235,68,52)" fg:x="11800" fg:w="80"/><text x="75.0804%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (80 samples, 0.51%)</title><rect x="74.8304%" y="245" width="0.5073%" height="15" fill="rgb(246,142,3)" fg:x="11800" fg:w="80"/><text x="75.0804%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (80 samples, 0.51%)</title><rect x="74.8304%" y="229" width="0.5073%" height="15" fill="rgb(241,25,7)" fg:x="11800" fg:w="80"/><text x="75.0804%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (365 samples, 2.31%)</title><rect x="73.6064%" y="293" width="2.3147%" height="15" fill="rgb(242,119,39)" fg:x="11607" fg:w="365"/><text x="73.8564%" y="303.50">&lt;..</text></g><g><title>main::update_sptree::_{{closure}} (331 samples, 2.10%)</title><rect x="73.8221%" y="277" width="2.0991%" height="15" fill="rgb(241,98,45)" fg:x="11641" fg:w="331"/><text x="74.0721%" y="287.50">m..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (91 samples, 0.58%)</title><rect x="75.3440%" y="261" width="0.5771%" height="15" fill="rgb(254,28,30)" fg:x="11881" fg:w="91"/><text x="75.5940%" y="271.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (20 samples, 0.13%)</title><rect x="75.9211%" y="293" width="0.1268%" height="15" fill="rgb(241,142,54)" fg:x="11972" fg:w="20"/><text x="76.1711%" y="303.50"></text></g><g><title>__rust_alloc (2 samples, 0.01%)</title><rect x="76.0796%" y="229" width="0.0127%" height="15" fill="rgb(222,85,15)" fg:x="11997" fg:w="2"/><text x="76.3296%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.08%)</title><rect x="76.0479%" y="293" width="0.0761%" height="15" fill="rgb(210,85,47)" fg:x="11992" fg:w="12"/><text x="76.2979%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.07%)</title><rect x="76.0543%" y="277" width="0.0698%" height="15" fill="rgb(224,206,25)" fg:x="11993" fg:w="11"/><text x="76.3043%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.07%)</title><rect x="76.0543%" y="261" width="0.0698%" height="15" fill="rgb(243,201,19)" fg:x="11993" fg:w="11"/><text x="76.3043%" y="271.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.07%)</title><rect x="76.0543%" y="245" width="0.0698%" height="15" fill="rgb(236,59,4)" fg:x="11993" fg:w="11"/><text x="76.3043%" y="255.50"></text></g><g><title>malloc (5 samples, 0.03%)</title><rect x="76.0923%" y="229" width="0.0317%" height="15" fill="rgb(254,179,45)" fg:x="11999" fg:w="5"/><text x="76.3423%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (3 samples, 0.02%)</title><rect x="76.1240%" y="293" width="0.0190%" height="15" fill="rgb(226,14,10)" fg:x="12004" fg:w="3"/><text x="76.3740%" y="303.50"></text></g><g><title>alloc::slice::hack::into_vec (3 samples, 0.02%)</title><rect x="76.1240%" y="277" width="0.0190%" height="15" fill="rgb(244,27,41)" fg:x="12004" fg:w="3"/><text x="76.3740%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (3 samples, 0.02%)</title><rect x="76.1240%" y="261" width="0.0190%" height="15" fill="rgb(235,35,32)" fg:x="12004" fg:w="3"/><text x="76.3740%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.03%)</title><rect x="76.1431%" y="293" width="0.0254%" height="15" fill="rgb(218,68,31)" fg:x="12007" fg:w="4"/><text x="76.3931%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.11%)</title><rect x="78.1914%" y="245" width="0.1141%" height="15" fill="rgb(207,120,37)" fg:x="12330" fg:w="18"/><text x="78.4414%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (11 samples, 0.07%)</title><rect x="78.3055%" y="245" width="0.0698%" height="15" fill="rgb(227,98,0)" fg:x="12348" fg:w="11"/><text x="78.5555%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (2 samples, 0.01%)</title><rect x="78.3626%" y="229" width="0.0127%" height="15" fill="rgb(207,7,3)" fg:x="12357" fg:w="2"/><text x="78.6126%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (5 samples, 0.03%)</title><rect x="78.3753%" y="245" width="0.0317%" height="15" fill="rgb(206,98,19)" fg:x="12359" fg:w="5"/><text x="78.6253%" y="255.50"></text></g><g><title>__rdl_realloc (16 samples, 0.10%)</title><rect x="78.6099%" y="181" width="0.1015%" height="15" fill="rgb(217,5,26)" fg:x="12396" fg:w="16"/><text x="78.8599%" y="191.50"></text></g><g><title>__rust_realloc (7 samples, 0.04%)</title><rect x="78.7114%" y="181" width="0.0444%" height="15" fill="rgb(235,190,38)" fg:x="12412" fg:w="7"/><text x="78.9614%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,155 samples, 7.32%)</title><rect x="78.6036%" y="229" width="7.3245%" height="15" fill="rgb(247,86,24)" fg:x="12395" fg:w="1155"/><text x="78.8536%" y="239.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::grow_impl (1,155 samples, 7.32%)</title><rect x="78.6036%" y="213" width="7.3245%" height="15" fill="rgb(205,101,16)" fg:x="12395" fg:w="1155"/><text x="78.8536%" y="223.50">alloc::all..</text></g><g><title>alloc::alloc::realloc (1,155 samples, 7.32%)</title><rect x="78.6036%" y="197" width="7.3245%" height="15" fill="rgb(246,168,33)" fg:x="12395" fg:w="1155"/><text x="78.8536%" y="207.50">alloc::all..</text></g><g><title>realloc (1,131 samples, 7.17%)</title><rect x="78.7558%" y="181" width="7.1723%" height="15" fill="rgb(231,114,1)" fg:x="12419" fg:w="1131"/><text x="79.0058%" y="191.50">realloc</text></g><g><title>[libc.so.6] (1,032 samples, 6.54%)</title><rect x="79.3836%" y="165" width="6.5445%" height="15" fill="rgb(207,184,53)" fg:x="12518" fg:w="1032"/><text x="79.6336%" y="175.50">[libc.so...</text></g><g><title>[libc.so.6] (907 samples, 5.75%)</title><rect x="80.1763%" y="149" width="5.7518%" height="15" fill="rgb(224,95,51)" fg:x="12643" fg:w="907"/><text x="80.4263%" y="159.50">[libc.s..</text></g><g><title>[libc.so.6] (285 samples, 1.81%)</title><rect x="84.1207%" y="133" width="1.8073%" height="15" fill="rgb(212,188,45)" fg:x="13265" fg:w="285"/><text x="84.3707%" y="143.50">[..</text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="85.9154%" y="117" width="0.0127%" height="15" fill="rgb(223,154,38)" fg:x="13548" fg:w="2"/><text x="86.1654%" y="127.50"></text></g><g><title>__rdl_alloc (4 samples, 0.03%)</title><rect x="85.9281%" y="229" width="0.0254%" height="15" fill="rgb(251,22,52)" fg:x="13550" fg:w="4"/><text x="86.1781%" y="239.50"></text></g><g><title>__rust_alloc (4 samples, 0.03%)</title><rect x="85.9535%" y="229" width="0.0254%" height="15" fill="rgb(229,209,22)" fg:x="13554" fg:w="4"/><text x="86.2035%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (16 samples, 0.10%)</title><rect x="85.9788%" y="229" width="0.1015%" height="15" fill="rgb(234,138,34)" fg:x="13558" fg:w="16"/><text x="86.2288%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,262 samples, 8.00%)</title><rect x="78.4070%" y="245" width="8.0030%" height="15" fill="rgb(212,95,11)" fg:x="12364" fg:w="1262"/><text x="78.6570%" y="255.50">alloc::raw_..</text></g><g><title>malloc (52 samples, 0.33%)</title><rect x="86.0803%" y="229" width="0.3298%" height="15" fill="rgb(240,179,47)" fg:x="13574" fg:w="52"/><text x="86.3303%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (12 samples, 0.08%)</title><rect x="86.4100%" y="245" width="0.0761%" height="15" fill="rgb(240,163,11)" fg:x="13626" fg:w="12"/><text x="86.6600%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (12 samples, 0.08%)</title><rect x="86.4100%" y="229" width="0.0761%" height="15" fill="rgb(236,37,12)" fg:x="13626" fg:w="12"/><text x="86.6600%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,353 samples, 8.58%)</title><rect x="78.0709%" y="277" width="8.5801%" height="15" fill="rgb(232,164,16)" fg:x="12311" fg:w="1353"/><text x="78.3209%" y="287.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,353 samples, 8.58%)</title><rect x="78.0709%" y="261" width="8.5801%" height="15" fill="rgb(244,205,15)" fg:x="12311" fg:w="1353"/><text x="78.3209%" y="271.50">alloc::raw_v..</text></g><g><title>core::cmp::max (26 samples, 0.16%)</title><rect x="86.4861%" y="245" width="0.1649%" height="15" fill="rgb(223,117,47)" fg:x="13638" fg:w="26"/><text x="86.7361%" y="255.50"></text></g><g><title>core::cmp::Ord::max (26 samples, 0.16%)</title><rect x="86.4861%" y="229" width="0.1649%" height="15" fill="rgb(244,107,35)" fg:x="13638" fg:w="26"/><text x="86.7361%" y="239.50"></text></g><g><title>core::cmp::max_by (26 samples, 0.16%)</title><rect x="86.4861%" y="213" width="0.1649%" height="15" fill="rgb(205,140,8)" fg:x="13638" fg:w="26"/><text x="86.7361%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (92 samples, 0.58%)</title><rect x="86.6510%" y="277" width="0.5834%" height="15" fill="rgb(228,84,46)" fg:x="13664" fg:w="92"/><text x="86.9010%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (92 samples, 0.58%)</title><rect x="86.6510%" y="261" width="0.5834%" height="15" fill="rgb(254,188,9)" fg:x="13664" fg:w="92"/><text x="86.9010%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,878 samples, 11.91%)</title><rect x="76.1684%" y="293" width="11.9094%" height="15" fill="rgb(206,112,54)" fg:x="12011" fg:w="1878"/><text x="76.4184%" y="303.50">alloc::vec::Vec&lt;T,..</text></g><g><title>core::ptr::write (133 samples, 0.84%)</title><rect x="87.2344%" y="277" width="0.8434%" height="15" fill="rgb(216,84,49)" fg:x="13756" fg:w="133"/><text x="87.4844%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (26 samples, 0.16%)</title><rect x="88.0779%" y="293" width="0.1649%" height="15" fill="rgb(214,194,35)" fg:x="13889" fg:w="26"/><text x="88.3279%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.04%)</title><rect x="88.2428%" y="261" width="0.0380%" height="15" fill="rgb(249,28,3)" fg:x="13915" fg:w="6"/><text x="88.4928%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.04%)</title><rect x="88.2428%" y="245" width="0.0380%" height="15" fill="rgb(222,56,52)" fg:x="13915" fg:w="6"/><text x="88.4928%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (3 samples, 0.02%)</title><rect x="88.2618%" y="229" width="0.0190%" height="15" fill="rgb(245,217,50)" fg:x="13918" fg:w="3"/><text x="88.5118%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.02%)</title><rect x="88.2618%" y="213" width="0.0190%" height="15" fill="rgb(213,201,24)" fg:x="13918" fg:w="3"/><text x="88.5118%" y="223.50"></text></g><g><title>main::update_sptree::_{{closure}} (3 samples, 0.02%)</title><rect x="88.2618%" y="197" width="0.0190%" height="15" fill="rgb(248,116,28)" fg:x="13918" fg:w="3"/><text x="88.5118%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.08%)</title><rect x="88.2428%" y="277" width="0.0824%" height="15" fill="rgb(219,72,43)" fg:x="13915" fg:w="13"/><text x="88.4928%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.04%)</title><rect x="88.2808%" y="261" width="0.0444%" height="15" fill="rgb(209,138,14)" fg:x="13921" fg:w="7"/><text x="88.5308%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 0.04%)</title><rect x="88.2808%" y="245" width="0.0444%" height="15" fill="rgb(222,18,33)" fg:x="13921" fg:w="7"/><text x="88.5308%" y="255.50"></text></g><g><title>main::update_sptree::_{{closure}} (7 samples, 0.04%)</title><rect x="88.2808%" y="229" width="0.0444%" height="15" fill="rgb(213,199,7)" fg:x="13921" fg:w="7"/><text x="88.5308%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="88.3252%" y="245" width="0.0127%" height="15" fill="rgb(250,110,10)" fg:x="13928" fg:w="2"/><text x="88.5752%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.06%)</title><rect x="88.3252%" y="261" width="0.0634%" height="15" fill="rgb(248,123,6)" fg:x="13928" fg:w="10"/><text x="88.5752%" y="271.50"></text></g><g><title>core::ptr::read (8 samples, 0.05%)</title><rect x="88.3379%" y="245" width="0.0507%" height="15" fill="rgb(206,91,31)" fg:x="13930" fg:w="8"/><text x="88.5879%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="88.4837%" y="229" width="0.0190%" height="15" fill="rgb(211,154,13)" fg:x="13953" fg:w="3"/><text x="88.7337%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="88.4837%" y="213" width="0.0190%" height="15" fill="rgb(225,148,7)" fg:x="13953" fg:w="3"/><text x="88.7337%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="88.4837%" y="197" width="0.0190%" height="15" fill="rgb(220,160,43)" fg:x="13953" fg:w="3"/><text x="88.7337%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="88.5028%" y="229" width="0.0254%" height="15" fill="rgb(213,52,39)" fg:x="13956" fg:w="4"/><text x="88.7528%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.03%)</title><rect x="88.5028%" y="213" width="0.0254%" height="15" fill="rgb(243,137,7)" fg:x="13956" fg:w="4"/><text x="88.7528%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="88.5028%" y="197" width="0.0254%" height="15" fill="rgb(230,79,13)" fg:x="13956" fg:w="4"/><text x="88.7528%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (26 samples, 0.16%)</title><rect x="88.3886%" y="261" width="0.1649%" height="15" fill="rgb(247,105,23)" fg:x="13938" fg:w="26"/><text x="88.6386%" y="271.50"></text></g><g><title>main::update_sptree::_{{closure}} (26 samples, 0.16%)</title><rect x="88.3886%" y="245" width="0.1649%" height="15" fill="rgb(223,179,41)" fg:x="13938" fg:w="26"/><text x="88.6386%" y="255.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (4 samples, 0.03%)</title><rect x="88.5281%" y="229" width="0.0254%" height="15" fill="rgb(218,9,34)" fg:x="13960" fg:w="4"/><text x="88.7781%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.15%)</title><rect x="88.5535%" y="165" width="0.1522%" height="15" fill="rgb(222,106,8)" fg:x="13964" fg:w="24"/><text x="88.8035%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.15%)</title><rect x="88.5535%" y="149" width="0.1522%" height="15" fill="rgb(211,220,0)" fg:x="13964" fg:w="24"/><text x="88.8035%" y="159.50"></text></g><g><title>cfree (22 samples, 0.14%)</title><rect x="88.5662%" y="133" width="0.1395%" height="15" fill="rgb(229,52,16)" fg:x="13966" fg:w="22"/><text x="88.8162%" y="143.50"></text></g><g><title>[libc.so.6] (13 samples, 0.08%)</title><rect x="88.6232%" y="117" width="0.0824%" height="15" fill="rgb(212,155,18)" fg:x="13975" fg:w="13"/><text x="88.8732%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="88.6930%" y="101" width="0.0127%" height="15" fill="rgb(242,21,14)" fg:x="13986" fg:w="2"/><text x="88.9430%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (74 samples, 0.47%)</title><rect x="88.2428%" y="293" width="0.4693%" height="15" fill="rgb(222,19,48)" fg:x="13915" fg:w="74"/><text x="88.4928%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (61 samples, 0.39%)</title><rect x="88.3252%" y="277" width="0.3868%" height="15" fill="rgb(232,45,27)" fg:x="13928" fg:w="61"/><text x="88.5752%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (25 samples, 0.16%)</title><rect x="88.5535%" y="261" width="0.1585%" height="15" fill="rgb(249,103,42)" fg:x="13964" fg:w="25"/><text x="88.8035%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.16%)</title><rect x="88.5535%" y="245" width="0.1585%" height="15" fill="rgb(246,81,33)" fg:x="13964" fg:w="25"/><text x="88.8035%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (25 samples, 0.16%)</title><rect x="88.5535%" y="229" width="0.1585%" height="15" fill="rgb(252,33,42)" fg:x="13964" fg:w="25"/><text x="88.8035%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.16%)</title><rect x="88.5535%" y="213" width="0.1585%" height="15" fill="rgb(209,212,41)" fg:x="13964" fg:w="25"/><text x="88.8035%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (25 samples, 0.16%)</title><rect x="88.5535%" y="197" width="0.1585%" height="15" fill="rgb(207,154,6)" fg:x="13964" fg:w="25"/><text x="88.8035%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.16%)</title><rect x="88.5535%" y="181" width="0.1585%" height="15" fill="rgb(223,64,47)" fg:x="13964" fg:w="25"/><text x="88.8035%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1,554 samples, 9.85%)</title><rect x="88.7120%" y="293" width="9.8548%" height="15" fill="rgb(211,161,38)" fg:x="13989" fg:w="1554"/><text x="88.9620%" y="303.50">core::option::..</text></g><g><title>core::option::Option&lt;T&gt;::is_some (1,554 samples, 9.85%)</title><rect x="88.7120%" y="277" width="9.8548%" height="15" fill="rgb(219,138,40)" fg:x="13989" fg:w="1554"/><text x="88.9620%" y="287.50">core::option::..</text></g><g><title>__rdl_dealloc (3 samples, 0.02%)</title><rect x="98.5795%" y="213" width="0.0190%" height="15" fill="rgb(241,228,46)" fg:x="15545" fg:w="3"/><text x="98.8295%" y="223.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="98.5985%" y="213" width="0.0127%" height="15" fill="rgb(223,209,38)" fg:x="15548" fg:w="2"/><text x="98.8485%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (151 samples, 0.96%)</title><rect x="98.5731%" y="245" width="0.9576%" height="15" fill="rgb(236,164,45)" fg:x="15544" fg:w="151"/><text x="98.8231%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (151 samples, 0.96%)</title><rect x="98.5731%" y="229" width="0.9576%" height="15" fill="rgb(231,15,5)" fg:x="15544" fg:w="151"/><text x="98.8231%" y="239.50"></text></g><g><title>cfree (145 samples, 0.92%)</title><rect x="98.6112%" y="213" width="0.9195%" height="15" fill="rgb(252,35,15)" fg:x="15550" fg:w="145"/><text x="98.8612%" y="223.50"></text></g><g><title>[libc.so.6] (122 samples, 0.77%)</title><rect x="98.7571%" y="197" width="0.7737%" height="15" fill="rgb(248,181,18)" fg:x="15573" fg:w="122"/><text x="99.0071%" y="207.50"></text></g><g><title>[libc.so.6] (74 samples, 0.47%)</title><rect x="99.0614%" y="181" width="0.4693%" height="15" fill="rgb(233,39,42)" fg:x="15621" fg:w="74"/><text x="99.3114%" y="191.50"></text></g><g><title>[libc.so.6] (8 samples, 0.05%)</title><rect x="99.4800%" y="165" width="0.0507%" height="15" fill="rgb(238,110,33)" fg:x="15687" fg:w="8"/><text x="99.7300%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (154 samples, 0.98%)</title><rect x="98.5668%" y="293" width="0.9766%" height="15" fill="rgb(233,195,10)" fg:x="15543" fg:w="154"/><text x="98.8168%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (154 samples, 0.98%)</title><rect x="98.5668%" y="277" width="0.9766%" height="15" fill="rgb(254,105,3)" fg:x="15543" fg:w="154"/><text x="98.8168%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (154 samples, 0.98%)</title><rect x="98.5668%" y="261" width="0.9766%" height="15" fill="rgb(221,225,9)" fg:x="15543" fg:w="154"/><text x="98.8168%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="99.5307%" y="245" width="0.0127%" height="15" fill="rgb(224,227,45)" fg:x="15695" fg:w="2"/><text x="99.7807%" y="255.50"></text></g><g><title>main::min_cost (15,090 samples, 95.69%)</title><rect x="4.2362%" y="325" width="95.6941%" height="15" fill="rgb(229,198,43)" fg:x="668" fg:w="15090"/><text x="4.4862%" y="335.50">main::min_cost</text></g><g><title>main::update_sptree (6,105 samples, 38.72%)</title><rect x="61.2150%" y="309" width="38.7152%" height="15" fill="rgb(206,209,35)" fg:x="9653" fg:w="6105"/><text x="61.4650%" y="319.50">main::update_sptree</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (61 samples, 0.39%)</title><rect x="99.5434%" y="293" width="0.3868%" height="15" fill="rgb(245,195,53)" fg:x="15697" fg:w="61"/><text x="99.7934%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.01%)</title><rect x="99.9302%" y="325" width="0.0127%" height="15" fill="rgb(240,92,26)" fg:x="15758" fg:w="2"/><text x="100.1802%" y="335.50"></text></g><g><title>_start (15,094 samples, 95.72%)</title><rect x="4.2362%" y="469" width="95.7194%" height="15" fill="rgb(207,40,23)" fg:x="668" fg:w="15094"/><text x="4.4862%" y="479.50">_start</text></g><g><title>__libc_start_main (15,094 samples, 95.72%)</title><rect x="4.2362%" y="453" width="95.7194%" height="15" fill="rgb(223,111,35)" fg:x="668" fg:w="15094"/><text x="4.4862%" y="463.50">__libc_start_main</text></g><g><title>[libc.so.6] (15,094 samples, 95.72%)</title><rect x="4.2362%" y="437" width="95.7194%" height="15" fill="rgb(229,147,28)" fg:x="668" fg:w="15094"/><text x="4.4862%" y="447.50">[libc.so.6]</text></g><g><title>main (15,094 samples, 95.72%)</title><rect x="4.2362%" y="421" width="95.7194%" height="15" fill="rgb(211,29,28)" fg:x="668" fg:w="15094"/><text x="4.4862%" y="431.50">main</text></g><g><title>std::rt::lang_start_internal (15,094 samples, 95.72%)</title><rect x="4.2362%" y="405" width="95.7194%" height="15" fill="rgb(228,72,33)" fg:x="668" fg:w="15094"/><text x="4.4862%" y="415.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (15,094 samples, 95.72%)</title><rect x="4.2362%" y="389" width="95.7194%" height="15" fill="rgb(205,214,31)" fg:x="668" fg:w="15094"/><text x="4.4862%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (15,094 samples, 95.72%)</title><rect x="4.2362%" y="373" width="95.7194%" height="15" fill="rgb(224,111,15)" fg:x="668" fg:w="15094"/><text x="4.4862%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (15,094 samples, 95.72%)</title><rect x="4.2362%" y="357" width="95.7194%" height="15" fill="rgb(253,21,26)" fg:x="668" fg:w="15094"/><text x="4.4862%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (15,094 samples, 95.72%)</title><rect x="4.2362%" y="341" width="95.7194%" height="15" fill="rgb(245,139,43)" fg:x="668" fg:w="15094"/><text x="4.4862%" y="351.50">main::main</text></g><g><title>rand::rng::Rng::gen (2 samples, 0.01%)</title><rect x="99.9429%" y="325" width="0.0127%" height="15" fill="rgb(252,170,7)" fg:x="15760" fg:w="2"/><text x="100.1929%" y="335.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.01%)</title><rect x="99.9429%" y="309" width="0.0127%" height="15" fill="rgb(231,118,14)" fg:x="15760" fg:w="2"/><text x="100.1929%" y="319.50"></text></g><g><title>rand::rng::Rng::gen (2 samples, 0.01%)</title><rect x="99.9429%" y="293" width="0.0127%" height="15" fill="rgb(238,83,0)" fg:x="15760" fg:w="2"/><text x="100.1929%" y="303.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.01%)</title><rect x="99.9429%" y="277" width="0.0127%" height="15" fill="rgb(221,39,39)" fg:x="15760" fg:w="2"/><text x="100.1929%" y="287.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (2 samples, 0.01%)</title><rect x="99.9429%" y="261" width="0.0127%" height="15" fill="rgb(222,119,46)" fg:x="15760" fg:w="2"/><text x="100.1929%" y="271.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (2 samples, 0.01%)</title><rect x="99.9429%" y="245" width="0.0127%" height="15" fill="rgb(222,165,49)" fg:x="15760" fg:w="2"/><text x="100.1929%" y="255.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (2 samples, 0.01%)</title><rect x="99.9429%" y="229" width="0.0127%" height="15" fill="rgb(219,113,52)" fg:x="15760" fg:w="2"/><text x="100.1929%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.01%)</title><rect x="99.9556%" y="469" width="0.0127%" height="15" fill="rgb(214,7,15)" fg:x="15762" fg:w="2"/><text x="100.2056%" y="479.50"></text></g><g><title>all (15,769 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(235,32,4)" fg:x="0" fg:w="15769"/><text x="0.2500%" y="511.50"></text></g><g><title>main (15,769 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(238,90,54)" fg:x="0" fg:w="15769"/><text x="0.2500%" y="495.50">main</text></g><g><title>main::min_cost (5 samples, 0.03%)</title><rect x="99.9683%" y="469" width="0.0317%" height="15" fill="rgb(213,208,19)" fg:x="15764" fg:w="5"/><text x="100.2183%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.01%)</title><rect x="99.9873%" y="453" width="0.0127%" height="15" fill="rgb(233,156,4)" fg:x="15767" fg:w="2"/><text x="100.2373%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.01%)</title><rect x="99.9873%" y="437" width="0.0127%" height="15" fill="rgb(207,194,5)" fg:x="15767" fg:w="2"/><text x="100.2373%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.9873%" y="421" width="0.0127%" height="15" fill="rgb(206,111,30)" fg:x="15767" fg:w="2"/><text x="100.2373%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="99.9873%" y="405" width="0.0127%" height="15" fill="rgb(243,70,54)" fg:x="15767" fg:w="2"/><text x="100.2373%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="99.9873%" y="389" width="0.0127%" height="15" fill="rgb(242,28,8)" fg:x="15767" fg:w="2"/><text x="100.2373%" y="399.50"></text></g></svg></svg>