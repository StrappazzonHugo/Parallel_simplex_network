<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="33763"><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0178%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="463.50"></text></g><g><title>[[heap]] (8 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0237%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="8"/><text x="0.2500%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="0.0296%" y="453" width="0.0118%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="4"/><text x="0.2796%" y="463.50"></text></g><g><title>[[stack]] (14 samples, 0.04%)</title><rect x="0.0237%" y="469" width="0.0415%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="14"/><text x="0.2737%" y="479.50"></text></g><g><title>realloc (4 samples, 0.01%)</title><rect x="0.0533%" y="453" width="0.0118%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="4"/><text x="0.3033%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.03%)</title><rect x="0.0652%" y="469" width="0.0267%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="9"/><text x="0.3152%" y="479.50"></text></g><g><title>[libc.so.6] (15 samples, 0.04%)</title><rect x="0.1066%" y="453" width="0.0444%" height="15" fill="rgb(207,160,47)" fg:x="36" fg:w="15"/><text x="0.3566%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.01%)</title><rect x="0.1599%" y="453" width="0.0148%" height="15" fill="rgb(228,23,34)" fg:x="54" fg:w="5"/><text x="0.4099%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.01%)</title><rect x="0.1599%" y="437" width="0.0148%" height="15" fill="rgb(218,30,26)" fg:x="54" fg:w="5"/><text x="0.4099%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.01%)</title><rect x="0.1599%" y="421" width="0.0148%" height="15" fill="rgb(220,122,19)" fg:x="54" fg:w="5"/><text x="0.4099%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (5 samples, 0.01%)</title><rect x="0.1599%" y="405" width="0.0148%" height="15" fill="rgb(250,228,42)" fg:x="54" fg:w="5"/><text x="0.4099%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="0.1747%" y="453" width="0.0118%" height="15" fill="rgb(240,193,28)" fg:x="59" fg:w="4"/><text x="0.4247%" y="463.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (4 samples, 0.01%)</title><rect x="0.1925%" y="453" width="0.0118%" height="15" fill="rgb(216,20,37)" fg:x="65" fg:w="4"/><text x="0.4425%" y="463.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (4 samples, 0.01%)</title><rect x="0.1925%" y="437" width="0.0118%" height="15" fill="rgb(206,188,39)" fg:x="65" fg:w="4"/><text x="0.4425%" y="447.50"></text></g><g><title>[unknown] (41 samples, 0.12%)</title><rect x="0.0977%" y="469" width="0.1214%" height="15" fill="rgb(217,207,13)" fg:x="33" fg:w="41"/><text x="0.3477%" y="479.50"></text></g><g><title>realloc (5 samples, 0.01%)</title><rect x="0.2044%" y="453" width="0.0148%" height="15" fill="rgb(231,73,38)" fg:x="69" fg:w="5"/><text x="0.4544%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="0.2369%" y="261" width="0.0178%" height="15" fill="rgb(225,20,46)" fg:x="80" fg:w="6"/><text x="0.4869%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="0.2369%" y="245" width="0.0178%" height="15" fill="rgb(210,31,41)" fg:x="80" fg:w="6"/><text x="0.4869%" y="255.50"></text></g><g><title>cfree (6 samples, 0.02%)</title><rect x="0.2369%" y="229" width="0.0178%" height="15" fill="rgb(221,200,47)" fg:x="80" fg:w="6"/><text x="0.4869%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (7 samples, 0.02%)</title><rect x="0.2369%" y="309" width="0.0207%" height="15" fill="rgb(226,26,5)" fg:x="80" fg:w="7"/><text x="0.4869%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (7 samples, 0.02%)</title><rect x="0.2369%" y="293" width="0.0207%" height="15" fill="rgb(249,33,26)" fg:x="80" fg:w="7"/><text x="0.4869%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="0.2369%" y="277" width="0.0207%" height="15" fill="rgb(235,183,28)" fg:x="80" fg:w="7"/><text x="0.4869%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (895 samples, 2.65%)</title><rect x="5.3639%" y="277" width="2.6508%" height="15" fill="rgb(221,5,38)" fg:x="1811" fg:w="895"/><text x="5.6139%" y="287.50">&lt;c..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (895 samples, 2.65%)</title><rect x="5.3639%" y="261" width="2.6508%" height="15" fill="rgb(247,18,42)" fg:x="1811" fg:w="895"/><text x="5.6139%" y="271.50">&lt;c..</text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (4,090 samples, 12.11%)</title><rect x="18.0020%" y="261" width="12.1139%" height="15" fill="rgb(241,131,45)" fg:x="6078" fg:w="4090"/><text x="18.2520%" y="271.50">&lt;i64 as core::ops:..</text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (923 samples, 2.73%)</title><rect x="30.1158%" y="261" width="2.7338%" height="15" fill="rgb(249,31,29)" fg:x="10168" fg:w="923"/><text x="30.3658%" y="271.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (923 samples, 2.73%)</title><rect x="30.1158%" y="245" width="2.7338%" height="15" fill="rgb(225,111,53)" fg:x="10168" fg:w="923"/><text x="30.3658%" y="255.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (923 samples, 2.73%)</title><rect x="30.1158%" y="229" width="2.7338%" height="15" fill="rgb(238,160,17)" fg:x="10168" fg:w="923"/><text x="30.3658%" y="239.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (923 samples, 2.73%)</title><rect x="30.1158%" y="213" width="2.7338%" height="15" fill="rgb(214,148,48)" fg:x="10168" fg:w="923"/><text x="30.3658%" y="223.50">&lt;u..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (454 samples, 1.34%)</title><rect x="34.4223%" y="245" width="1.3447%" height="15" fill="rgb(232,36,49)" fg:x="11622" fg:w="454"/><text x="34.6723%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (454 samples, 1.34%)</title><rect x="34.4223%" y="229" width="1.3447%" height="15" fill="rgb(209,103,24)" fg:x="11622" fg:w="454"/><text x="34.6723%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (454 samples, 1.34%)</title><rect x="34.4223%" y="213" width="1.3447%" height="15" fill="rgb(229,88,8)" fg:x="11622" fg:w="454"/><text x="34.6723%" y="223.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (1,420 samples, 4.21%)</title><rect x="35.7670%" y="245" width="4.2058%" height="15" fill="rgb(213,181,19)" fg:x="12076" fg:w="1420"/><text x="36.0170%" y="255.50">&lt;i64 ..</text></g><g><title>&lt;i64 as core::ops::arith::Sub&gt;::sub (3,197 samples, 9.47%)</title><rect x="39.9728%" y="245" width="9.4689%" height="15" fill="rgb(254,191,54)" fg:x="13496" fg:w="3197"/><text x="40.2228%" y="255.50">&lt;i64 as core::..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (5,697 samples, 16.87%)</title><rect x="49.4417%" y="245" width="16.8735%" height="15" fill="rgb(241,83,37)" fg:x="16693" fg:w="5697"/><text x="49.6917%" y="255.50">petgraph::graph_impl::Edge..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (23,425 samples, 69.38%)</title><rect x="0.2666%" y="293" width="69.3807%" height="15" fill="rgb(233,36,39)" fg:x="90" fg:w="23425"/><text x="0.5166%" y="303.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find</text></g><g><title>main::_find_first_arc::_{{closure}} (20,809 samples, 61.63%)</title><rect x="8.0147%" y="277" width="61.6326%" height="15" fill="rgb(226,3,54)" fg:x="2706" fg:w="20809"/><text x="8.2647%" y="287.50">main::_find_first_arc::_{{closure}}</text></g><g><title>main::get_reduced_cost_edgeindex (12,423 samples, 36.79%)</title><rect x="32.8525%" y="261" width="36.7947%" height="15" fill="rgb(245,192,40)" fg:x="11092" fg:w="12423"/><text x="33.1025%" y="271.50">main::get_reduced_cost_edgeindex</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (1,125 samples, 3.33%)</title><rect x="66.3152%" y="245" width="3.3320%" height="15" fill="rgb(238,167,29)" fg:x="22390" fg:w="1125"/><text x="66.5652%" y="255.50">pet..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,081 samples, 3.20%)</title><rect x="75.8078%" y="149" width="3.2017%" height="15" fill="rgb(232,182,51)" fg:x="25595" fg:w="1081"/><text x="76.0578%" y="159.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1,081 samples, 3.20%)</title><rect x="75.8078%" y="133" width="3.2017%" height="15" fill="rgb(231,60,39)" fg:x="25595" fg:w="1081"/><text x="76.0578%" y="143.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1,081 samples, 3.20%)</title><rect x="75.8078%" y="117" width="3.2017%" height="15" fill="rgb(208,69,12)" fg:x="25595" fg:w="1081"/><text x="76.0578%" y="127.50">all..</text></g><g><title>core::ptr::write (1,081 samples, 3.20%)</title><rect x="75.8078%" y="101" width="3.2017%" height="15" fill="rgb(235,93,37)" fg:x="25595" fg:w="1081"/><text x="76.0578%" y="111.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,157 samples, 9.35%)</title><rect x="69.6621%" y="229" width="9.3505%" height="15" fill="rgb(213,116,39)" fg:x="23520" fg:w="3157"/><text x="69.9121%" y="239.50">&lt;alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3,157 samples, 9.35%)</title><rect x="69.6621%" y="213" width="9.3505%" height="15" fill="rgb(222,207,29)" fg:x="23520" fg:w="3157"/><text x="69.9121%" y="223.50">alloc::vec::V..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,157 samples, 9.35%)</title><rect x="69.6621%" y="197" width="9.3505%" height="15" fill="rgb(206,96,30)" fg:x="23520" fg:w="3157"/><text x="69.9121%" y="207.50">core::iter::t..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,157 samples, 9.35%)</title><rect x="69.6621%" y="181" width="9.3505%" height="15" fill="rgb(218,138,4)" fg:x="23520" fg:w="3157"/><text x="69.9121%" y="191.50">&lt;core::iter::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,157 samples, 9.35%)</title><rect x="69.6621%" y="165" width="9.3505%" height="15" fill="rgb(250,191,14)" fg:x="23520" fg:w="3157"/><text x="69.9121%" y="175.50">&lt;core::slice:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,163 samples, 9.37%)</title><rect x="69.6472%" y="293" width="9.3682%" height="15" fill="rgb(239,60,40)" fg:x="23515" fg:w="3163"/><text x="69.8972%" y="303.50">core::iter::t..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,163 samples, 9.37%)</title><rect x="69.6472%" y="277" width="9.3682%" height="15" fill="rgb(206,27,48)" fg:x="23515" fg:w="3163"/><text x="69.8972%" y="287.50">&lt;alloc::vec::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,163 samples, 9.37%)</title><rect x="69.6472%" y="261" width="9.3682%" height="15" fill="rgb(225,35,8)" fg:x="23515" fg:w="3163"/><text x="69.8972%" y="271.50">&lt;alloc::vec::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,163 samples, 9.37%)</title><rect x="69.6472%" y="245" width="9.3682%" height="15" fill="rgb(250,213,24)" fg:x="23515" fg:w="3163"/><text x="69.8972%" y="255.50">&lt;alloc::vec::..</text></g><g><title>main::_find_first_arc (26,603 samples, 78.79%)</title><rect x="0.2606%" y="309" width="78.7934%" height="15" fill="rgb(247,123,22)" fg:x="88" fg:w="26603"/><text x="0.5106%" y="319.50">main::_find_first_arc</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;petgraph::graph_impl::EdgeIndex&gt;&gt; (13 samples, 0.04%)</title><rect x="79.0155%" y="293" width="0.0385%" height="15" fill="rgb(231,138,38)" fg:x="26678" fg:w="13"/><text x="79.2655%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;petgraph::graph_impl::EdgeIndex&gt;&gt; (13 samples, 0.04%)</title><rect x="79.0155%" y="277" width="0.0385%" height="15" fill="rgb(231,145,46)" fg:x="26678" fg:w="13"/><text x="79.2655%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.04%)</title><rect x="79.0155%" y="261" width="0.0385%" height="15" fill="rgb(251,118,11)" fg:x="26678" fg:w="13"/><text x="79.2655%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.03%)</title><rect x="79.0244%" y="245" width="0.0296%" height="15" fill="rgb(217,147,25)" fg:x="26681" fg:w="10"/><text x="79.2744%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.03%)</title><rect x="79.0244%" y="229" width="0.0296%" height="15" fill="rgb(247,81,37)" fg:x="26681" fg:w="10"/><text x="79.2744%" y="239.50"></text></g><g><title>cfree (10 samples, 0.03%)</title><rect x="79.0244%" y="213" width="0.0296%" height="15" fill="rgb(209,12,38)" fg:x="26681" fg:w="10"/><text x="79.2744%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (5 samples, 0.01%)</title><rect x="79.0629%" y="261" width="0.0148%" height="15" fill="rgb(227,1,9)" fg:x="26694" fg:w="5"/><text x="79.3129%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.01%)</title><rect x="79.0629%" y="245" width="0.0148%" height="15" fill="rgb(248,47,43)" fg:x="26694" fg:w="5"/><text x="79.3129%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (5 samples, 0.01%)</title><rect x="79.0629%" y="229" width="0.0148%" height="15" fill="rgb(221,10,30)" fg:x="26694" fg:w="5"/><text x="79.3129%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.01%)</title><rect x="79.0629%" y="213" width="0.0148%" height="15" fill="rgb(210,229,1)" fg:x="26694" fg:w="5"/><text x="79.3129%" y="223.50"></text></g><g><title>alloc::alloc::alloc_zeroed (5 samples, 0.01%)</title><rect x="79.0629%" y="197" width="0.0148%" height="15" fill="rgb(222,148,37)" fg:x="26694" fg:w="5"/><text x="79.3129%" y="207.50"></text></g><g><title>__libc_calloc (5 samples, 0.01%)</title><rect x="79.0629%" y="181" width="0.0148%" height="15" fill="rgb(234,67,33)" fg:x="26694" fg:w="5"/><text x="79.3129%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="79.0658%" y="165" width="0.0118%" height="15" fill="rgb(247,98,35)" fg:x="26695" fg:w="4"/><text x="79.3158%" y="175.50"></text></g><g><title>alloc::vec::from_elem (9 samples, 0.03%)</title><rect x="79.0629%" y="293" width="0.0267%" height="15" fill="rgb(247,138,52)" fg:x="26694" fg:w="9"/><text x="79.3129%" y="303.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9 samples, 0.03%)</title><rect x="79.0629%" y="277" width="0.0267%" height="15" fill="rgb(213,79,30)" fg:x="26694" fg:w="9"/><text x="79.3129%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="79.0777%" y="261" width="0.0118%" height="15" fill="rgb(246,177,23)" fg:x="26699" fg:w="4"/><text x="79.3277%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="79.0777%" y="245" width="0.0118%" height="15" fill="rgb(230,62,27)" fg:x="26699" fg:w="4"/><text x="79.3277%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.01%)</title><rect x="79.0777%" y="229" width="0.0118%" height="15" fill="rgb(216,154,8)" fg:x="26699" fg:w="4"/><text x="79.3277%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.02%)</title><rect x="79.0895%" y="261" width="0.0207%" height="15" fill="rgb(244,35,45)" fg:x="26703" fg:w="7"/><text x="79.3395%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (4 samples, 0.01%)</title><rect x="79.0984%" y="245" width="0.0118%" height="15" fill="rgb(251,115,12)" fg:x="26706" fg:w="4"/><text x="79.3484%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.01%)</title><rect x="79.0984%" y="229" width="0.0118%" height="15" fill="rgb(240,54,50)" fg:x="26706" fg:w="4"/><text x="79.3484%" y="239.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (4 samples, 0.01%)</title><rect x="79.0984%" y="213" width="0.0118%" height="15" fill="rgb(233,84,52)" fg:x="26706" fg:w="4"/><text x="79.3484%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 0.02%)</title><rect x="79.1132%" y="197" width="0.0178%" height="15" fill="rgb(207,117,47)" fg:x="26711" fg:w="6"/><text x="79.3632%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.02%)</title><rect x="79.1132%" y="181" width="0.0178%" height="15" fill="rgb(249,43,39)" fg:x="26711" fg:w="6"/><text x="79.3632%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.02%)</title><rect x="79.1132%" y="165" width="0.0178%" height="15" fill="rgb(209,38,44)" fg:x="26711" fg:w="6"/><text x="79.3632%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (274 samples, 0.81%)</title><rect x="79.1103%" y="245" width="0.8115%" height="15" fill="rgb(236,212,23)" fg:x="26710" fg:w="274"/><text x="79.3603%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (274 samples, 0.81%)</title><rect x="79.1103%" y="229" width="0.8115%" height="15" fill="rgb(242,79,21)" fg:x="26710" fg:w="274"/><text x="79.3603%" y="239.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (274 samples, 0.81%)</title><rect x="79.1103%" y="213" width="0.8115%" height="15" fill="rgb(211,96,35)" fg:x="26710" fg:w="274"/><text x="79.3603%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (267 samples, 0.79%)</title><rect x="79.1310%" y="197" width="0.7908%" height="15" fill="rgb(253,215,40)" fg:x="26717" fg:w="267"/><text x="79.3810%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (267 samples, 0.79%)</title><rect x="79.1310%" y="181" width="0.7908%" height="15" fill="rgb(211,81,21)" fg:x="26717" fg:w="267"/><text x="79.3810%" y="191.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (215 samples, 0.64%)</title><rect x="79.2850%" y="165" width="0.6368%" height="15" fill="rgb(208,190,38)" fg:x="26769" fg:w="215"/><text x="79.5350%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (215 samples, 0.64%)</title><rect x="79.2850%" y="149" width="0.6368%" height="15" fill="rgb(235,213,38)" fg:x="26769" fg:w="215"/><text x="79.5350%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (282 samples, 0.84%)</title><rect x="79.0895%" y="293" width="0.8352%" height="15" fill="rgb(237,122,38)" fg:x="26703" fg:w="282"/><text x="79.3395%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (282 samples, 0.84%)</title><rect x="79.0895%" y="277" width="0.8352%" height="15" fill="rgb(244,218,35)" fg:x="26703" fg:w="282"/><text x="79.3395%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (275 samples, 0.81%)</title><rect x="79.1103%" y="261" width="0.8145%" height="15" fill="rgb(240,68,47)" fg:x="26710" fg:w="275"/><text x="79.3603%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (7 samples, 0.02%)</title><rect x="79.9248%" y="293" width="0.0207%" height="15" fill="rgb(210,16,53)" fg:x="26985" fg:w="7"/><text x="80.1748%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (7 samples, 0.02%)</title><rect x="79.9248%" y="277" width="0.0207%" height="15" fill="rgb(235,124,12)" fg:x="26985" fg:w="7"/><text x="80.1748%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.02%)</title><rect x="79.9248%" y="261" width="0.0207%" height="15" fill="rgb(224,169,11)" fg:x="26985" fg:w="7"/><text x="80.1748%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.02%)</title><rect x="79.9248%" y="245" width="0.0207%" height="15" fill="rgb(250,166,2)" fg:x="26985" fg:w="7"/><text x="80.1748%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.02%)</title><rect x="79.9248%" y="229" width="0.0207%" height="15" fill="rgb(242,216,29)" fg:x="26985" fg:w="7"/><text x="80.1748%" y="239.50"></text></g><g><title>cfree (5 samples, 0.01%)</title><rect x="79.9307%" y="213" width="0.0148%" height="15" fill="rgb(230,116,27)" fg:x="26987" fg:w="5"/><text x="80.1807%" y="223.50"></text></g><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="79.9307%" y="197" width="0.0148%" height="15" fill="rgb(228,99,48)" fg:x="26987" fg:w="5"/><text x="80.1807%" y="207.50"></text></g><g><title>main::compute_flowchange (303 samples, 0.90%)</title><rect x="79.0540%" y="309" width="0.8974%" height="15" fill="rgb(253,11,6)" fg:x="26691" fg:w="303"/><text x="79.3040%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.01%)</title><rect x="80.0077%" y="229" width="0.0148%" height="15" fill="rgb(247,143,39)" fg:x="27013" fg:w="5"/><text x="80.2577%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.01%)</title><rect x="80.0077%" y="213" width="0.0148%" height="15" fill="rgb(236,97,10)" fg:x="27013" fg:w="5"/><text x="80.2577%" y="223.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.01%)</title><rect x="80.0077%" y="197" width="0.0148%" height="15" fill="rgb(233,208,19)" fg:x="27013" fg:w="5"/><text x="80.2577%" y="207.50"></text></g><g><title>realloc (5 samples, 0.01%)</title><rect x="80.0077%" y="181" width="0.0148%" height="15" fill="rgb(216,164,2)" fg:x="27013" fg:w="5"/><text x="80.2577%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="80.0107%" y="165" width="0.0118%" height="15" fill="rgb(220,129,5)" fg:x="27014" fg:w="4"/><text x="80.2607%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.04%)</title><rect x="79.9988%" y="277" width="0.0355%" height="15" fill="rgb(242,17,10)" fg:x="27010" fg:w="12"/><text x="80.2488%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.04%)</title><rect x="79.9988%" y="261" width="0.0355%" height="15" fill="rgb(242,107,0)" fg:x="27010" fg:w="12"/><text x="80.2488%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.04%)</title><rect x="79.9988%" y="245" width="0.0355%" height="15" fill="rgb(251,28,31)" fg:x="27010" fg:w="12"/><text x="80.2488%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (18 samples, 0.05%)</title><rect x="79.9870%" y="293" width="0.0533%" height="15" fill="rgb(233,223,10)" fg:x="27006" fg:w="18"/><text x="80.2370%" y="303.50"></text></g><g><title>main::find_cycle_with_arc (34 samples, 0.10%)</title><rect x="79.9514%" y="309" width="0.1007%" height="15" fill="rgb(215,21,27)" fg:x="26994" fg:w="34"/><text x="80.2014%" y="319.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="80.0521%" y="293" width="0.0148%" height="15" fill="rgb(232,23,21)" fg:x="27028" fg:w="5"/><text x="80.3021%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="80.0521%" y="277" width="0.0148%" height="15" fill="rgb(244,5,23)" fg:x="27028" fg:w="5"/><text x="80.3021%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.01%)</title><rect x="80.0521%" y="261" width="0.0148%" height="15" fill="rgb(226,81,46)" fg:x="27028" fg:w="5"/><text x="80.3021%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.01%)</title><rect x="80.0521%" y="245" width="0.0148%" height="15" fill="rgb(247,70,30)" fg:x="27028" fg:w="5"/><text x="80.3021%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.01%)</title><rect x="80.0521%" y="229" width="0.0148%" height="15" fill="rgb(212,68,19)" fg:x="27028" fg:w="5"/><text x="80.3021%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="80.0521%" y="213" width="0.0148%" height="15" fill="rgb(240,187,13)" fg:x="27028" fg:w="5"/><text x="80.3021%" y="223.50"></text></g><g><title>main::initialization (12 samples, 0.04%)</title><rect x="80.0521%" y="309" width="0.0355%" height="15" fill="rgb(223,113,26)" fg:x="27028" fg:w="12"/><text x="80.3021%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 0.02%)</title><rect x="80.0669%" y="293" width="0.0207%" height="15" fill="rgb(206,192,2)" fg:x="27033" fg:w="7"/><text x="80.3169%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 0.02%)</title><rect x="80.0669%" y="277" width="0.0207%" height="15" fill="rgb(241,108,4)" fg:x="27033" fg:w="7"/><text x="80.3169%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 0.02%)</title><rect x="80.0669%" y="261" width="0.0207%" height="15" fill="rgb(247,173,49)" fg:x="27033" fg:w="7"/><text x="80.3169%" y="271.50"></text></g><g><title>main::initialization::_{{closure}} (7 samples, 0.02%)</title><rect x="80.0669%" y="245" width="0.0207%" height="15" fill="rgb(224,114,35)" fg:x="27033" fg:w="7"/><text x="80.3169%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (24 samples, 0.07%)</title><rect x="80.0906%" y="293" width="0.0711%" height="15" fill="rgb(245,159,27)" fg:x="27041" fg:w="24"/><text x="80.3406%" y="303.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (15 samples, 0.04%)</title><rect x="80.1173%" y="277" width="0.0444%" height="15" fill="rgb(245,172,44)" fg:x="27050" fg:w="15"/><text x="80.3673%" y="287.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (14 samples, 0.04%)</title><rect x="80.1202%" y="261" width="0.0415%" height="15" fill="rgb(236,23,11)" fg:x="27051" fg:w="14"/><text x="80.3702%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (45 samples, 0.13%)</title><rect x="80.2298%" y="165" width="0.1333%" height="15" fill="rgb(205,117,38)" fg:x="27088" fg:w="45"/><text x="80.4798%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.07%)</title><rect x="80.2980%" y="149" width="0.0652%" height="15" fill="rgb(237,72,25)" fg:x="27111" fg:w="22"/><text x="80.5480%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (35 samples, 0.10%)</title><rect x="80.4075%" y="117" width="0.1037%" height="15" fill="rgb(244,70,9)" fg:x="27148" fg:w="35"/><text x="80.6575%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (35 samples, 0.10%)</title><rect x="80.4075%" y="101" width="0.1037%" height="15" fill="rgb(217,125,39)" fg:x="27148" fg:w="35"/><text x="80.6575%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (35 samples, 0.10%)</title><rect x="80.4075%" y="85" width="0.1037%" height="15" fill="rgb(235,36,10)" fg:x="27148" fg:w="35"/><text x="80.6575%" y="95.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (35 samples, 0.10%)</title><rect x="80.4075%" y="69" width="0.1037%" height="15" fill="rgb(251,123,47)" fg:x="27148" fg:w="35"/><text x="80.6575%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (35 samples, 0.10%)</title><rect x="80.4075%" y="53" width="0.1037%" height="15" fill="rgb(221,13,13)" fg:x="27148" fg:w="35"/><text x="80.6575%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::gt (35 samples, 0.10%)</title><rect x="80.4075%" y="37" width="0.1037%" height="15" fill="rgb(238,131,9)" fg:x="27148" fg:w="35"/><text x="80.6575%" y="47.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7 samples, 0.02%)</title><rect x="80.5112%" y="101" width="0.0207%" height="15" fill="rgb(211,50,8)" fg:x="27183" fg:w="7"/><text x="80.7612%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 0.31%)</title><rect x="80.2298%" y="181" width="0.3051%" height="15" fill="rgb(245,182,24)" fg:x="27088" fg:w="103"/><text x="80.4798%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (58 samples, 0.17%)</title><rect x="80.3631%" y="165" width="0.1718%" height="15" fill="rgb(242,14,37)" fg:x="27133" fg:w="58"/><text x="80.6131%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (58 samples, 0.17%)</title><rect x="80.3631%" y="149" width="0.1718%" height="15" fill="rgb(246,228,12)" fg:x="27133" fg:w="58"/><text x="80.6131%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (58 samples, 0.17%)</title><rect x="80.3631%" y="133" width="0.1718%" height="15" fill="rgb(213,55,15)" fg:x="27133" fg:w="58"/><text x="80.6131%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.02%)</title><rect x="80.5112%" y="117" width="0.0237%" height="15" fill="rgb(209,9,3)" fg:x="27183" fg:w="8"/><text x="80.7612%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (256 samples, 0.76%)</title><rect x="80.2298%" y="197" width="0.7582%" height="15" fill="rgb(230,59,30)" fg:x="27088" fg:w="256"/><text x="80.4798%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (153 samples, 0.45%)</title><rect x="80.5349%" y="181" width="0.4532%" height="15" fill="rgb(209,121,21)" fg:x="27191" fg:w="153"/><text x="80.7849%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (153 samples, 0.45%)</title><rect x="80.5349%" y="165" width="0.4532%" height="15" fill="rgb(220,109,13)" fg:x="27191" fg:w="153"/><text x="80.7849%" y="175.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (153 samples, 0.45%)</title><rect x="80.5349%" y="149" width="0.4532%" height="15" fill="rgb(232,18,1)" fg:x="27191" fg:w="153"/><text x="80.7849%" y="159.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints (153 samples, 0.45%)</title><rect x="80.5349%" y="133" width="0.4532%" height="15" fill="rgb(215,41,42)" fg:x="27191" fg:w="153"/><text x="80.7849%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (153 samples, 0.45%)</title><rect x="80.5349%" y="117" width="0.4532%" height="15" fill="rgb(224,123,36)" fg:x="27191" fg:w="153"/><text x="80.7849%" y="127.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints::_{{closure}} (153 samples, 0.45%)</title><rect x="80.5349%" y="101" width="0.4532%" height="15" fill="rgb(240,125,3)" fg:x="27191" fg:w="153"/><text x="80.7849%" y="111.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (153 samples, 0.45%)</title><rect x="80.5349%" y="85" width="0.4532%" height="15" fill="rgb(205,98,50)" fg:x="27191" fg:w="153"/><text x="80.7849%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (62 samples, 0.18%)</title><rect x="81.0088%" y="117" width="0.1836%" height="15" fill="rgb(205,185,37)" fg:x="27351" fg:w="62"/><text x="81.2588%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (62 samples, 0.18%)</title><rect x="81.0088%" y="101" width="0.1836%" height="15" fill="rgb(238,207,15)" fg:x="27351" fg:w="62"/><text x="81.2588%" y="111.50"></text></g><g><title>alloc::alloc::realloc (62 samples, 0.18%)</title><rect x="81.0088%" y="85" width="0.1836%" height="15" fill="rgb(213,199,42)" fg:x="27351" fg:w="62"/><text x="81.2588%" y="95.50"></text></g><g><title>realloc (58 samples, 0.17%)</title><rect x="81.0206%" y="69" width="0.1718%" height="15" fill="rgb(235,201,11)" fg:x="27355" fg:w="58"/><text x="81.2706%" y="79.50"></text></g><g><title>[libc.so.6] (44 samples, 0.13%)</title><rect x="81.0621%" y="53" width="0.1303%" height="15" fill="rgb(207,46,11)" fg:x="27369" fg:w="44"/><text x="81.3121%" y="63.50"></text></g><g><title>[libc.so.6] (37 samples, 0.11%)</title><rect x="81.0828%" y="37" width="0.1096%" height="15" fill="rgb(241,35,35)" fg:x="27376" fg:w="37"/><text x="81.3328%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (64 samples, 0.19%)</title><rect x="81.0088%" y="133" width="0.1896%" height="15" fill="rgb(243,32,47)" fg:x="27351" fg:w="64"/><text x="81.2588%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (72 samples, 0.21%)</title><rect x="80.9910%" y="197" width="0.2133%" height="15" fill="rgb(247,202,23)" fg:x="27345" fg:w="72"/><text x="81.2410%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (72 samples, 0.21%)</title><rect x="80.9910%" y="181" width="0.2133%" height="15" fill="rgb(219,102,11)" fg:x="27345" fg:w="72"/><text x="81.2410%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (72 samples, 0.21%)</title><rect x="80.9910%" y="165" width="0.2133%" height="15" fill="rgb(243,110,44)" fg:x="27345" fg:w="72"/><text x="81.2410%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (72 samples, 0.21%)</title><rect x="80.9910%" y="149" width="0.2133%" height="15" fill="rgb(222,74,54)" fg:x="27345" fg:w="72"/><text x="81.2410%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (42 samples, 0.12%)</title><rect x="81.2043%" y="197" width="0.1244%" height="15" fill="rgb(216,99,12)" fg:x="27417" fg:w="42"/><text x="81.4543%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (444 samples, 1.32%)</title><rect x="80.1795%" y="229" width="1.3150%" height="15" fill="rgb(226,22,26)" fg:x="27071" fg:w="444"/><text x="80.4295%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (444 samples, 1.32%)</title><rect x="80.1795%" y="213" width="1.3150%" height="15" fill="rgb(217,163,10)" fg:x="27071" fg:w="444"/><text x="80.4295%" y="223.50"></text></g><g><title>core::ptr::write (56 samples, 0.17%)</title><rect x="81.3287%" y="197" width="0.1659%" height="15" fill="rgb(213,25,53)" fg:x="27459" fg:w="56"/><text x="81.5787%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (17 samples, 0.05%)</title><rect x="81.5093%" y="149" width="0.0504%" height="15" fill="rgb(252,105,26)" fg:x="27520" fg:w="17"/><text x="81.7593%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (7 samples, 0.02%)</title><rect x="81.5390%" y="133" width="0.0207%" height="15" fill="rgb(220,39,43)" fg:x="27530" fg:w="7"/><text x="81.7890%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7 samples, 0.02%)</title><rect x="81.5390%" y="117" width="0.0207%" height="15" fill="rgb(229,68,48)" fg:x="27530" fg:w="7"/><text x="81.7890%" y="127.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (7 samples, 0.02%)</title><rect x="81.5390%" y="101" width="0.0207%" height="15" fill="rgb(252,8,32)" fg:x="27530" fg:w="7"/><text x="81.7890%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (7 samples, 0.02%)</title><rect x="81.5390%" y="85" width="0.0207%" height="15" fill="rgb(223,20,43)" fg:x="27530" fg:w="7"/><text x="81.7890%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::gt (7 samples, 0.02%)</title><rect x="81.5390%" y="69" width="0.0207%" height="15" fill="rgb(229,81,49)" fg:x="27530" fg:w="7"/><text x="81.7890%" y="79.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="81.5597%" y="133" width="0.0178%" height="15" fill="rgb(236,28,36)" fg:x="27537" fg:w="6"/><text x="81.8097%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.09%)</title><rect x="81.4945%" y="213" width="0.0948%" height="15" fill="rgb(249,185,26)" fg:x="27515" fg:w="32"/><text x="81.7445%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (31 samples, 0.09%)</title><rect x="81.4975%" y="197" width="0.0918%" height="15" fill="rgb(249,174,33)" fg:x="27516" fg:w="31"/><text x="81.7475%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (31 samples, 0.09%)</title><rect x="81.4975%" y="181" width="0.0918%" height="15" fill="rgb(233,201,37)" fg:x="27516" fg:w="31"/><text x="81.7475%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (31 samples, 0.09%)</title><rect x="81.4975%" y="165" width="0.0918%" height="15" fill="rgb(221,78,26)" fg:x="27516" fg:w="31"/><text x="81.7475%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.03%)</title><rect x="81.5597%" y="149" width="0.0296%" height="15" fill="rgb(250,127,30)" fg:x="27537" fg:w="10"/><text x="81.8097%" y="159.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.01%)</title><rect x="81.5775%" y="133" width="0.0118%" height="15" fill="rgb(230,49,44)" fg:x="27543" fg:w="4"/><text x="81.8275%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.10%)</title><rect x="81.4945%" y="229" width="0.1037%" height="15" fill="rgb(229,67,23)" fg:x="27515" fg:w="35"/><text x="81.7445%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (500 samples, 1.48%)</title><rect x="80.1617%" y="293" width="1.4809%" height="15" fill="rgb(249,83,47)" fg:x="27065" fg:w="500"/><text x="80.4117%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (500 samples, 1.48%)</title><rect x="80.1617%" y="277" width="1.4809%" height="15" fill="rgb(215,43,3)" fg:x="27065" fg:w="500"/><text x="80.4117%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (500 samples, 1.48%)</title><rect x="80.1617%" y="261" width="1.4809%" height="15" fill="rgb(238,154,13)" fg:x="27065" fg:w="500"/><text x="80.4117%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (500 samples, 1.48%)</title><rect x="80.1617%" y="245" width="1.4809%" height="15" fill="rgb(219,56,2)" fg:x="27065" fg:w="500"/><text x="80.4117%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.04%)</title><rect x="81.5982%" y="229" width="0.0444%" height="15" fill="rgb(233,0,4)" fg:x="27550" fg:w="15"/><text x="81.8482%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.04%)</title><rect x="81.5982%" y="213" width="0.0444%" height="15" fill="rgb(235,30,7)" fg:x="27550" fg:w="15"/><text x="81.8482%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.04%)</title><rect x="81.5982%" y="197" width="0.0444%" height="15" fill="rgb(250,79,13)" fg:x="27550" fg:w="15"/><text x="81.8482%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.04%)</title><rect x="81.5982%" y="181" width="0.0444%" height="15" fill="rgb(211,146,34)" fg:x="27550" fg:w="15"/><text x="81.8482%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.04%)</title><rect x="81.5982%" y="165" width="0.0444%" height="15" fill="rgb(228,22,38)" fg:x="27550" fg:w="15"/><text x="81.8482%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.04%)</title><rect x="81.5982%" y="149" width="0.0444%" height="15" fill="rgb(235,168,5)" fg:x="27550" fg:w="15"/><text x="81.8482%" y="159.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.04%)</title><rect x="81.5982%" y="133" width="0.0444%" height="15" fill="rgb(221,155,16)" fg:x="27550" fg:w="15"/><text x="81.8482%" y="143.50"></text></g><g><title>malloc (15 samples, 0.04%)</title><rect x="81.5982%" y="117" width="0.0444%" height="15" fill="rgb(215,215,53)" fg:x="27550" fg:w="15"/><text x="81.8482%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (5 samples, 0.01%)</title><rect x="81.6515%" y="293" width="0.0148%" height="15" fill="rgb(223,4,10)" fg:x="27568" fg:w="5"/><text x="81.9015%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (5 samples, 0.01%)</title><rect x="81.6515%" y="277" width="0.0148%" height="15" fill="rgb(234,103,6)" fg:x="27568" fg:w="5"/><text x="81.9015%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="81.6515%" y="261" width="0.0148%" height="15" fill="rgb(227,97,0)" fg:x="27568" fg:w="5"/><text x="81.9015%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.01%)</title><rect x="81.6515%" y="245" width="0.0148%" height="15" fill="rgb(234,150,53)" fg:x="27568" fg:w="5"/><text x="81.9015%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.01%)</title><rect x="81.6515%" y="229" width="0.0148%" height="15" fill="rgb(228,201,54)" fg:x="27568" fg:w="5"/><text x="81.9015%" y="239.50"></text></g><g><title>cfree (4 samples, 0.01%)</title><rect x="81.6545%" y="213" width="0.0118%" height="15" fill="rgb(222,22,37)" fg:x="27569" fg:w="4"/><text x="81.9045%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="81.6545%" y="197" width="0.0118%" height="15" fill="rgb(237,53,32)" fg:x="27569" fg:w="4"/><text x="81.9045%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="81.6545%" y="181" width="0.0118%" height="15" fill="rgb(233,25,53)" fg:x="27569" fg:w="4"/><text x="81.9045%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (6 samples, 0.02%)</title><rect x="81.6663%" y="293" width="0.0178%" height="15" fill="rgb(210,40,34)" fg:x="27573" fg:w="6"/><text x="81.9163%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (6 samples, 0.02%)</title><rect x="81.6663%" y="277" width="0.0178%" height="15" fill="rgb(241,220,44)" fg:x="27573" fg:w="6"/><text x="81.9163%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="81.6663%" y="261" width="0.0178%" height="15" fill="rgb(235,28,35)" fg:x="27573" fg:w="6"/><text x="81.9163%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.02%)</title><rect x="81.6663%" y="245" width="0.0178%" height="15" fill="rgb(210,56,17)" fg:x="27573" fg:w="6"/><text x="81.9163%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.02%)</title><rect x="81.6663%" y="229" width="0.0178%" height="15" fill="rgb(224,130,29)" fg:x="27573" fg:w="6"/><text x="81.9163%" y="239.50"></text></g><g><title>cfree (5 samples, 0.01%)</title><rect x="81.6693%" y="213" width="0.0148%" height="15" fill="rgb(235,212,8)" fg:x="27574" fg:w="5"/><text x="81.9193%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::Edge&lt;f32&gt;&gt;&gt; (5 samples, 0.01%)</title><rect x="81.6841%" y="277" width="0.0148%" height="15" fill="rgb(223,33,50)" fg:x="27579" fg:w="5"/><text x="81.9341%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::Edge&lt;f32&gt;&gt;&gt; (5 samples, 0.01%)</title><rect x="81.6841%" y="261" width="0.0148%" height="15" fill="rgb(219,149,13)" fg:x="27579" fg:w="5"/><text x="81.9341%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="81.6841%" y="245" width="0.0148%" height="15" fill="rgb(250,156,29)" fg:x="27579" fg:w="5"/><text x="81.9341%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.01%)</title><rect x="81.6841%" y="229" width="0.0148%" height="15" fill="rgb(216,193,19)" fg:x="27579" fg:w="5"/><text x="81.9341%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.01%)</title><rect x="81.6841%" y="213" width="0.0148%" height="15" fill="rgb(216,135,14)" fg:x="27579" fg:w="5"/><text x="81.9341%" y="223.50"></text></g><g><title>cfree (4 samples, 0.01%)</title><rect x="81.6871%" y="197" width="0.0118%" height="15" fill="rgb(241,47,5)" fg:x="27580" fg:w="4"/><text x="81.9371%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;petgraph::graph_impl::Graph&lt;(),f32,petgraph::Undirected&gt;&gt; (7 samples, 0.02%)</title><rect x="81.6841%" y="293" width="0.0207%" height="15" fill="rgb(233,42,35)" fg:x="27579" fg:w="7"/><text x="81.9341%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (12 samples, 0.04%)</title><rect x="81.7048%" y="293" width="0.0355%" height="15" fill="rgb(231,13,6)" fg:x="27586" fg:w="12"/><text x="81.9548%" y="303.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (12 samples, 0.04%)</title><rect x="81.7048%" y="277" width="0.0355%" height="15" fill="rgb(207,181,40)" fg:x="27586" fg:w="12"/><text x="81.9548%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (12 samples, 0.04%)</title><rect x="81.7048%" y="261" width="0.0355%" height="15" fill="rgb(254,173,49)" fg:x="27586" fg:w="12"/><text x="81.9548%" y="271.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (55 samples, 0.16%)</title><rect x="82.0662%" y="277" width="0.1629%" height="15" fill="rgb(221,1,38)" fg:x="27708" fg:w="55"/><text x="82.3162%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (55 samples, 0.16%)</title><rect x="82.0662%" y="261" width="0.1629%" height="15" fill="rgb(206,124,46)" fg:x="27708" fg:w="55"/><text x="82.3162%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (55 samples, 0.16%)</title><rect x="82.0662%" y="245" width="0.1629%" height="15" fill="rgb(249,21,11)" fg:x="27708" fg:w="55"/><text x="82.3162%" y="255.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (29 samples, 0.09%)</title><rect x="82.1432%" y="229" width="0.0859%" height="15" fill="rgb(222,201,40)" fg:x="27734" fg:w="29"/><text x="82.3932%" y="239.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (29 samples, 0.09%)</title><rect x="82.1432%" y="213" width="0.0859%" height="15" fill="rgb(235,61,29)" fg:x="27734" fg:w="29"/><text x="82.3932%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (30 samples, 0.09%)</title><rect x="82.2291%" y="277" width="0.0889%" height="15" fill="rgb(219,207,3)" fg:x="27763" fg:w="30"/><text x="82.4791%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (30 samples, 0.09%)</title><rect x="82.2291%" y="261" width="0.0889%" height="15" fill="rgb(222,56,46)" fg:x="27763" fg:w="30"/><text x="82.4791%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (30 samples, 0.09%)</title><rect x="82.2291%" y="245" width="0.0889%" height="15" fill="rgb(239,76,54)" fg:x="27763" fg:w="30"/><text x="82.4791%" y="255.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (66 samples, 0.20%)</title><rect x="82.3179%" y="277" width="0.1955%" height="15" fill="rgb(231,124,27)" fg:x="27793" fg:w="66"/><text x="82.5679%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.01%)</title><rect x="83.0199%" y="261" width="0.0148%" height="15" fill="rgb(249,195,6)" fg:x="28030" fg:w="5"/><text x="83.2699%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (5 samples, 0.01%)</title><rect x="83.0199%" y="245" width="0.0148%" height="15" fill="rgb(237,174,47)" fg:x="28030" fg:w="5"/><text x="83.2699%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (61 samples, 0.18%)</title><rect x="83.0347%" y="261" width="0.1807%" height="15" fill="rgb(206,201,31)" fg:x="28035" fg:w="61"/><text x="83.2847%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (61 samples, 0.18%)</title><rect x="83.0347%" y="245" width="0.1807%" height="15" fill="rgb(231,57,52)" fg:x="28035" fg:w="61"/><text x="83.2847%" y="255.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (265 samples, 0.78%)</title><rect x="82.5134%" y="277" width="0.7849%" height="15" fill="rgb(248,177,22)" fg:x="27859" fg:w="265"/><text x="82.7634%" y="287.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (28 samples, 0.08%)</title><rect x="83.2154%" y="261" width="0.0829%" height="15" fill="rgb(215,211,37)" fg:x="28096" fg:w="28"/><text x="83.4654%" y="271.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (28 samples, 0.08%)</title><rect x="83.2154%" y="245" width="0.0829%" height="15" fill="rgb(241,128,51)" fg:x="28096" fg:w="28"/><text x="83.4654%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (80 samples, 0.24%)</title><rect x="83.3042%" y="277" width="0.2369%" height="15" fill="rgb(227,165,31)" fg:x="28126" fg:w="80"/><text x="83.5542%" y="287.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (184 samples, 0.54%)</title><rect x="84.6726%" y="261" width="0.5450%" height="15" fill="rgb(228,167,24)" fg:x="28588" fg:w="184"/><text x="84.9226%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (184 samples, 0.54%)</title><rect x="84.6726%" y="245" width="0.5450%" height="15" fill="rgb(228,143,12)" fg:x="28588" fg:w="184"/><text x="84.9226%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (184 samples, 0.54%)</title><rect x="84.6726%" y="229" width="0.5450%" height="15" fill="rgb(249,149,8)" fg:x="28588" fg:w="184"/><text x="84.9226%" y="239.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (99 samples, 0.29%)</title><rect x="84.9243%" y="213" width="0.2932%" height="15" fill="rgb(243,35,44)" fg:x="28673" fg:w="99"/><text x="85.1743%" y="223.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (99 samples, 0.29%)</title><rect x="84.9243%" y="197" width="0.2932%" height="15" fill="rgb(246,89,9)" fg:x="28673" fg:w="99"/><text x="85.1743%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (117 samples, 0.35%)</title><rect x="85.2175%" y="261" width="0.3465%" height="15" fill="rgb(233,213,13)" fg:x="28772" fg:w="117"/><text x="85.4675%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (117 samples, 0.35%)</title><rect x="85.2175%" y="245" width="0.3465%" height="15" fill="rgb(233,141,41)" fg:x="28772" fg:w="117"/><text x="85.4675%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (117 samples, 0.35%)</title><rect x="85.2175%" y="229" width="0.3465%" height="15" fill="rgb(239,167,4)" fg:x="28772" fg:w="117"/><text x="85.4675%" y="239.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (101 samples, 0.30%)</title><rect x="85.5700%" y="261" width="0.2991%" height="15" fill="rgb(209,217,16)" fg:x="28891" fg:w="101"/><text x="85.8200%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (35 samples, 0.10%)</title><rect x="87.3323%" y="245" width="0.1037%" height="15" fill="rgb(219,88,35)" fg:x="29486" fg:w="35"/><text x="87.5823%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (35 samples, 0.10%)</title><rect x="87.3323%" y="229" width="0.1037%" height="15" fill="rgb(220,193,23)" fg:x="29486" fg:w="35"/><text x="87.5823%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (138 samples, 0.41%)</title><rect x="87.4360%" y="245" width="0.4087%" height="15" fill="rgb(230,90,52)" fg:x="29521" fg:w="138"/><text x="87.6860%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (138 samples, 0.41%)</title><rect x="87.4360%" y="229" width="0.4087%" height="15" fill="rgb(252,106,19)" fg:x="29521" fg:w="138"/><text x="87.6860%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (715 samples, 2.12%)</title><rect x="85.8691%" y="261" width="2.1177%" height="15" fill="rgb(206,74,20)" fg:x="28992" fg:w="715"/><text x="86.1191%" y="271.50">&lt;..</text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (48 samples, 0.14%)</title><rect x="87.8447%" y="245" width="0.1422%" height="15" fill="rgb(230,138,44)" fg:x="29659" fg:w="48"/><text x="88.0947%" y="255.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (48 samples, 0.14%)</title><rect x="87.8447%" y="229" width="0.1422%" height="15" fill="rgb(235,182,43)" fg:x="29659" fg:w="48"/><text x="88.0947%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.01%)</title><rect x="87.9898%" y="213" width="0.0148%" height="15" fill="rgb(242,16,51)" fg:x="29708" fg:w="5"/><text x="88.2398%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.01%)</title><rect x="87.9898%" y="197" width="0.0148%" height="15" fill="rgb(248,9,4)" fg:x="29708" fg:w="5"/><text x="88.2398%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 0.11%)</title><rect x="87.9898%" y="229" width="0.1066%" height="15" fill="rgb(210,31,22)" fg:x="29708" fg:w="36"/><text x="88.2398%" y="239.50"></text></g><g><title>core::ptr::write (31 samples, 0.09%)</title><rect x="88.0046%" y="213" width="0.0918%" height="15" fill="rgb(239,54,39)" fg:x="29713" fg:w="31"/><text x="88.2546%" y="223.50"></text></g><g><title>alloc::vec::from_elem (50 samples, 0.15%)</title><rect x="87.9898%" y="261" width="0.1481%" height="15" fill="rgb(230,99,41)" fg:x="29708" fg:w="50"/><text x="88.2398%" y="271.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (50 samples, 0.15%)</title><rect x="87.9898%" y="245" width="0.1481%" height="15" fill="rgb(253,106,12)" fg:x="29708" fg:w="50"/><text x="88.2398%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.04%)</title><rect x="88.0964%" y="229" width="0.0415%" height="15" fill="rgb(213,46,41)" fg:x="29744" fg:w="14"/><text x="88.3464%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.04%)</title><rect x="88.0964%" y="213" width="0.0415%" height="15" fill="rgb(215,133,35)" fg:x="29744" fg:w="14"/><text x="88.3464%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.04%)</title><rect x="88.0964%" y="197" width="0.0415%" height="15" fill="rgb(213,28,5)" fg:x="29744" fg:w="14"/><text x="88.3464%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.03%)</title><rect x="88.1053%" y="181" width="0.0326%" height="15" fill="rgb(215,77,49)" fg:x="29747" fg:w="11"/><text x="88.3553%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.03%)</title><rect x="88.1053%" y="165" width="0.0326%" height="15" fill="rgb(248,100,22)" fg:x="29747" fg:w="11"/><text x="88.3553%" y="175.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.03%)</title><rect x="88.1053%" y="149" width="0.0326%" height="15" fill="rgb(208,67,9)" fg:x="29747" fg:w="11"/><text x="88.3553%" y="159.50"></text></g><g><title>malloc (9 samples, 0.03%)</title><rect x="88.1112%" y="133" width="0.0267%" height="15" fill="rgb(219,133,21)" fg:x="29749" fg:w="9"/><text x="88.3612%" y="143.50"></text></g><g><title>[libc.so.6] (8 samples, 0.02%)</title><rect x="88.1142%" y="117" width="0.0237%" height="15" fill="rgb(246,46,29)" fg:x="29750" fg:w="8"/><text x="88.3642%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (230 samples, 0.68%)</title><rect x="88.1379%" y="261" width="0.6812%" height="15" fill="rgb(246,185,52)" fg:x="29758" fg:w="230"/><text x="88.3879%" y="271.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (2,390 samples, 7.08%)</title><rect x="81.7463%" y="293" width="7.0788%" height="15" fill="rgb(252,136,11)" fg:x="27600" fg:w="2390"/><text x="81.9963%" y="303.50">petgraph:..</text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (1,784 samples, 5.28%)</title><rect x="83.5412%" y="277" width="5.2839%" height="15" fill="rgb(219,138,53)" fg:x="28206" fg:w="1784"/><text x="83.7912%" y="287.50">petgra..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.10%)</title><rect x="89.0057%" y="261" width="0.1037%" height="15" fill="rgb(211,51,23)" fg:x="30051" fg:w="35"/><text x="89.2557%" y="271.50"></text></g><g><title>core::ptr::read (31 samples, 0.09%)</title><rect x="89.0176%" y="245" width="0.0918%" height="15" fill="rgb(247,221,28)" fg:x="30055" fg:w="31"/><text x="89.2676%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (15 samples, 0.04%)</title><rect x="89.1094%" y="261" width="0.0444%" height="15" fill="rgb(251,222,45)" fg:x="30086" fg:w="15"/><text x="89.3594%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.04%)</title><rect x="89.1094%" y="245" width="0.0444%" height="15" fill="rgb(217,162,53)" fg:x="30086" fg:w="15"/><text x="89.3594%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.04%)</title><rect x="89.1094%" y="229" width="0.0444%" height="15" fill="rgb(229,93,14)" fg:x="30086" fg:w="15"/><text x="89.3594%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.04%)</title><rect x="89.1094%" y="213" width="0.0444%" height="15" fill="rgb(209,67,49)" fg:x="30086" fg:w="15"/><text x="89.3594%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.04%)</title><rect x="89.1094%" y="197" width="0.0444%" height="15" fill="rgb(213,87,29)" fg:x="30086" fg:w="15"/><text x="89.3594%" y="207.50"></text></g><g><title>malloc (15 samples, 0.04%)</title><rect x="89.1094%" y="181" width="0.0444%" height="15" fill="rgb(205,151,52)" fg:x="30086" fg:w="15"/><text x="89.3594%" y="191.50"></text></g><g><title>[libc.so.6] (14 samples, 0.04%)</title><rect x="89.1123%" y="165" width="0.0415%" height="15" fill="rgb(253,215,39)" fg:x="30087" fg:w="14"/><text x="89.3623%" y="175.50"></text></g><g><title>[libc.so.6] (13 samples, 0.04%)</title><rect x="89.1153%" y="149" width="0.0385%" height="15" fill="rgb(221,220,41)" fg:x="30088" fg:w="13"/><text x="89.3653%" y="159.50"></text></g><g><title>core::cmp::max (28 samples, 0.08%)</title><rect x="89.1538%" y="261" width="0.0829%" height="15" fill="rgb(218,133,21)" fg:x="30101" fg:w="28"/><text x="89.4038%" y="271.50"></text></g><g><title>core::cmp::Ord::max (28 samples, 0.08%)</title><rect x="89.1538%" y="245" width="0.0829%" height="15" fill="rgb(221,193,43)" fg:x="30101" fg:w="28"/><text x="89.4038%" y="255.50"></text></g><g><title>core::cmp::max_by (28 samples, 0.08%)</title><rect x="89.1538%" y="229" width="0.0829%" height="15" fill="rgb(240,128,52)" fg:x="30101" fg:w="28"/><text x="89.4038%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (30 samples, 0.09%)</title><rect x="89.4352%" y="245" width="0.0889%" height="15" fill="rgb(253,114,12)" fg:x="30196" fg:w="30"/><text x="89.6852%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (30 samples, 0.09%)</title><rect x="89.4352%" y="229" width="0.0889%" height="15" fill="rgb(215,223,47)" fg:x="30196" fg:w="30"/><text x="89.6852%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (30 samples, 0.09%)</title><rect x="89.4352%" y="213" width="0.0889%" height="15" fill="rgb(248,225,23)" fg:x="30196" fg:w="30"/><text x="89.6852%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11 samples, 0.03%)</title><rect x="89.6632%" y="229" width="0.0326%" height="15" fill="rgb(250,108,0)" fg:x="30273" fg:w="11"/><text x="89.9132%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.03%)</title><rect x="89.6632%" y="213" width="0.0326%" height="15" fill="rgb(228,208,7)" fg:x="30273" fg:w="11"/><text x="89.9132%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (82 samples, 0.24%)</title><rect x="89.5300%" y="245" width="0.2429%" height="15" fill="rgb(244,45,10)" fg:x="30228" fg:w="82"/><text x="89.7800%" y="255.50"></text></g><g><title>core::ptr::write (26 samples, 0.08%)</title><rect x="89.6958%" y="229" width="0.0770%" height="15" fill="rgb(207,125,25)" fg:x="30284" fg:w="26"/><text x="89.9458%" y="239.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (200 samples, 0.59%)</title><rect x="89.2456%" y="261" width="0.5924%" height="15" fill="rgb(210,195,18)" fg:x="30132" fg:w="200"/><text x="89.4956%" y="271.50"></text></g><g><title>petgraph::graph_impl::index_twice (21 samples, 0.06%)</title><rect x="89.7758%" y="245" width="0.0622%" height="15" fill="rgb(249,80,12)" fg:x="30311" fg:w="21"/><text x="90.0258%" y="255.50"></text></g><g><title>core::cmp::max (21 samples, 0.06%)</title><rect x="89.7758%" y="229" width="0.0622%" height="15" fill="rgb(221,65,9)" fg:x="30311" fg:w="21"/><text x="90.0258%" y="239.50"></text></g><g><title>core::cmp::Ord::max (21 samples, 0.06%)</title><rect x="89.7758%" y="213" width="0.0622%" height="15" fill="rgb(235,49,36)" fg:x="30311" fg:w="21"/><text x="90.0258%" y="223.50"></text></g><g><title>core::cmp::max_by (21 samples, 0.06%)</title><rect x="89.7758%" y="197" width="0.0622%" height="15" fill="rgb(225,32,20)" fg:x="30311" fg:w="21"/><text x="90.0258%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (22 samples, 0.07%)</title><rect x="89.8883%" y="181" width="0.0652%" height="15" fill="rgb(215,141,46)" fg:x="30349" fg:w="22"/><text x="90.1383%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (22 samples, 0.07%)</title><rect x="89.8883%" y="165" width="0.0652%" height="15" fill="rgb(250,160,47)" fg:x="30349" fg:w="22"/><text x="90.1383%" y="175.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.06%)</title><rect x="89.8913%" y="149" width="0.0622%" height="15" fill="rgb(216,222,40)" fg:x="30350" fg:w="21"/><text x="90.1413%" y="159.50"></text></g><g><title>realloc (20 samples, 0.06%)</title><rect x="89.8943%" y="133" width="0.0592%" height="15" fill="rgb(234,217,39)" fg:x="30351" fg:w="20"/><text x="90.1443%" y="143.50"></text></g><g><title>[libc.so.6] (15 samples, 0.04%)</title><rect x="89.9091%" y="117" width="0.0444%" height="15" fill="rgb(207,178,40)" fg:x="30356" fg:w="15"/><text x="90.1591%" y="127.50"></text></g><g><title>[libc.so.6] (13 samples, 0.04%)</title><rect x="89.9150%" y="101" width="0.0385%" height="15" fill="rgb(221,136,13)" fg:x="30358" fg:w="13"/><text x="90.1650%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (35 samples, 0.10%)</title><rect x="89.8735%" y="229" width="0.1037%" height="15" fill="rgb(249,199,10)" fg:x="30344" fg:w="35"/><text x="90.1235%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (35 samples, 0.10%)</title><rect x="89.8735%" y="213" width="0.1037%" height="15" fill="rgb(249,222,13)" fg:x="30344" fg:w="35"/><text x="90.1235%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 0.10%)</title><rect x="89.8795%" y="197" width="0.0977%" height="15" fill="rgb(244,185,38)" fg:x="30346" fg:w="33"/><text x="90.1295%" y="207.50"></text></g><g><title>malloc (6 samples, 0.02%)</title><rect x="89.9594%" y="181" width="0.0178%" height="15" fill="rgb(236,202,9)" fg:x="30373" fg:w="6"/><text x="90.2094%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7 samples, 0.02%)</title><rect x="89.9772%" y="229" width="0.0207%" height="15" fill="rgb(250,229,37)" fg:x="30379" fg:w="7"/><text x="90.2272%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.02%)</title><rect x="89.9772%" y="213" width="0.0207%" height="15" fill="rgb(206,174,23)" fg:x="30379" fg:w="7"/><text x="90.2272%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (159 samples, 0.47%)</title><rect x="89.8380%" y="261" width="0.4709%" height="15" fill="rgb(211,33,43)" fg:x="30332" fg:w="159"/><text x="90.0880%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (159 samples, 0.47%)</title><rect x="89.8380%" y="245" width="0.4709%" height="15" fill="rgb(245,58,50)" fg:x="30332" fg:w="159"/><text x="90.0880%" y="255.50"></text></g><g><title>core::ptr::write (105 samples, 0.31%)</title><rect x="89.9979%" y="229" width="0.3110%" height="15" fill="rgb(244,68,36)" fg:x="30386" fg:w="105"/><text x="90.2479%" y="239.50"></text></g><g><title>main::update_node_potentials (3,474 samples, 10.29%)</title><rect x="80.0877%" y="309" width="10.2894%" height="15" fill="rgb(232,229,15)" fg:x="27040" fg:w="3474"/><text x="80.3377%" y="319.50">main::update_no..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (523 samples, 1.55%)</title><rect x="88.8280%" y="293" width="1.5490%" height="15" fill="rgb(254,30,23)" fg:x="29991" fg:w="523"/><text x="89.0780%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (523 samples, 1.55%)</title><rect x="88.8280%" y="277" width="1.5490%" height="15" fill="rgb(235,160,14)" fg:x="29991" fg:w="523"/><text x="89.0780%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_count (23 samples, 0.07%)</title><rect x="90.3089%" y="261" width="0.0681%" height="15" fill="rgb(212,155,44)" fg:x="30491" fg:w="23"/><text x="90.5589%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (23 samples, 0.07%)</title><rect x="90.3089%" y="245" width="0.0681%" height="15" fill="rgb(226,2,50)" fg:x="30491" fg:w="23"/><text x="90.5589%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="90.3889%" y="293" width="0.0118%" height="15" fill="rgb(234,177,6)" fg:x="30518" fg:w="4"/><text x="90.6389%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.09%)</title><rect x="90.4155%" y="277" width="0.0918%" height="15" fill="rgb(217,24,9)" fg:x="30527" fg:w="31"/><text x="90.6655%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="90.4896%" y="261" width="0.0178%" height="15" fill="rgb(220,13,46)" fg:x="30552" fg:w="6"/><text x="90.7396%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2,802 samples, 8.30%)</title><rect x="90.4007%" y="293" width="8.2990%" height="15" fill="rgb(239,221,27)" fg:x="30522" fg:w="2802"/><text x="90.6507%" y="303.50">&lt;core::slice..</text></g><g><title>main::update_sptree::_{{closure}} (2,766 samples, 8.19%)</title><rect x="90.5074%" y="277" width="8.1924%" height="15" fill="rgb(222,198,25)" fg:x="30558" fg:w="2766"/><text x="90.7574%" y="287.50">main::updat..</text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (2,766 samples, 8.19%)</title><rect x="90.5074%" y="261" width="8.1924%" height="15" fill="rgb(211,99,13)" fg:x="30558" fg:w="2766"/><text x="90.7574%" y="271.50">&lt;petgraph::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (2,766 samples, 8.19%)</title><rect x="90.5074%" y="245" width="8.1924%" height="15" fill="rgb(232,111,31)" fg:x="30558" fg:w="2766"/><text x="90.7574%" y="255.50">core::cmp::..</text></g><g><title>core::intrinsics::copy (420 samples, 1.24%)</title><rect x="98.7205%" y="277" width="1.2440%" height="15" fill="rgb(245,82,37)" fg:x="33331" fg:w="420"/><text x="98.9705%" y="287.50"></text></g><g><title>[libc.so.6] (420 samples, 1.24%)</title><rect x="98.7205%" y="261" width="1.2440%" height="15" fill="rgb(227,149,46)" fg:x="33331" fg:w="420"/><text x="98.9705%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (424 samples, 1.26%)</title><rect x="98.7116%" y="293" width="1.2558%" height="15" fill="rgb(218,36,50)" fg:x="33328" fg:w="424"/><text x="98.9616%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (5 samples, 0.01%)</title><rect x="99.9674%" y="293" width="0.0148%" height="15" fill="rgb(226,80,48)" fg:x="33752" fg:w="5"/><text x="100.2174%" y="303.50"></text></g><g><title>main::min_cost (33,679 samples, 99.75%)</title><rect x="0.2340%" y="325" width="99.7512%" height="15" fill="rgb(238,224,15)" fg:x="79" fg:w="33679"/><text x="0.4840%" y="335.50">main::min_cost</text></g><g><title>main::update_sptree (3,244 samples, 9.61%)</title><rect x="90.3770%" y="309" width="9.6082%" height="15" fill="rgb(241,136,10)" fg:x="30514" fg:w="3244"/><text x="90.6270%" y="319.50">main::update_s..</text></g><g><title>_start (33,687 samples, 99.77%)</title><rect x="0.2192%" y="469" width="99.7749%" height="15" fill="rgb(208,32,45)" fg:x="74" fg:w="33687"/><text x="0.4692%" y="479.50">_start</text></g><g><title>__libc_start_main (33,687 samples, 99.77%)</title><rect x="0.2192%" y="453" width="99.7749%" height="15" fill="rgb(207,135,9)" fg:x="74" fg:w="33687"/><text x="0.4692%" y="463.50">__libc_start_main</text></g><g><title>[libc.so.6] (33,687 samples, 99.77%)</title><rect x="0.2192%" y="437" width="99.7749%" height="15" fill="rgb(206,86,44)" fg:x="74" fg:w="33687"/><text x="0.4692%" y="447.50">[libc.so.6]</text></g><g><title>main (33,687 samples, 99.77%)</title><rect x="0.2192%" y="421" width="99.7749%" height="15" fill="rgb(245,177,15)" fg:x="74" fg:w="33687"/><text x="0.4692%" y="431.50">main</text></g><g><title>std::rt::lang_start_internal (33,687 samples, 99.77%)</title><rect x="0.2192%" y="405" width="99.7749%" height="15" fill="rgb(206,64,50)" fg:x="74" fg:w="33687"/><text x="0.4692%" y="415.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (33,687 samples, 99.77%)</title><rect x="0.2192%" y="389" width="99.7749%" height="15" fill="rgb(234,36,40)" fg:x="74" fg:w="33687"/><text x="0.4692%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (33,687 samples, 99.77%)</title><rect x="0.2192%" y="373" width="99.7749%" height="15" fill="rgb(213,64,8)" fg:x="74" fg:w="33687"/><text x="0.4692%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (33,687 samples, 99.77%)</title><rect x="0.2192%" y="357" width="99.7749%" height="15" fill="rgb(210,75,36)" fg:x="74" fg:w="33687"/><text x="0.4692%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (33,687 samples, 99.77%)</title><rect x="0.2192%" y="341" width="99.7749%" height="15" fill="rgb(229,88,21)" fg:x="74" fg:w="33687"/><text x="0.4692%" y="351.50">main::main</text></g><g><title>all (33,763 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="33763"/><text x="0.2500%" y="511.50"></text></g><g><title>main (33,763 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="33763"/><text x="0.2500%" y="495.50">main</text></g></svg></svg>