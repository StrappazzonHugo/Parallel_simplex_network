<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="14209"><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="0.0070%" y="613" width="0.0422%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="6"/><text x="0.2570%" y="623.50"></text></g><g><title>[libc.so.6] (11 samples, 0.08%)</title><rect x="0.0493%" y="613" width="0.0774%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="11"/><text x="0.2993%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="0.1337%" y="613" width="0.0282%" height="15" fill="rgb(221,193,54)" fg:x="19" fg:w="4"/><text x="0.3837%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.01%)</title><rect x="0.1478%" y="597" width="0.0141%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="2"/><text x="0.3978%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.01%)</title><rect x="0.1478%" y="581" width="0.0141%" height="15" fill="rgb(208,68,35)" fg:x="21" fg:w="2"/><text x="0.3978%" y="591.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.01%)</title><rect x="0.1478%" y="565" width="0.0141%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="2"/><text x="0.3978%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.02%)</title><rect x="0.1619%" y="613" width="0.0211%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="3"/><text x="0.4119%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (3 samples, 0.02%)</title><rect x="0.1619%" y="597" width="0.0211%" height="15" fill="rgb(228,23,34)" fg:x="23" fg:w="3"/><text x="0.4119%" y="607.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (74 samples, 0.52%)</title><rect x="0.1830%" y="613" width="0.5208%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="74"/><text x="0.4330%" y="623.50"></text></g><g><title>[[heap]] (100 samples, 0.70%)</title><rect x="0.0070%" y="629" width="0.7038%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="100"/><text x="0.2570%" y="639.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="0.7108%" y="613" width="0.0211%" height="15" fill="rgb(250,228,42)" fg:x="101" fg:w="3"/><text x="0.9608%" y="623.50"></text></g><g><title>__rdl_realloc (2 samples, 0.01%)</title><rect x="0.7319%" y="613" width="0.0141%" height="15" fill="rgb(240,193,28)" fg:x="104" fg:w="2"/><text x="0.9819%" y="623.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (35 samples, 0.25%)</title><rect x="0.7530%" y="613" width="0.2463%" height="15" fill="rgb(216,20,37)" fg:x="107" fg:w="35"/><text x="1.0030%" y="623.50"></text></g><g><title>[[stack]] (45 samples, 0.32%)</title><rect x="0.7108%" y="629" width="0.3167%" height="15" fill="rgb(206,188,39)" fg:x="101" fg:w="45"/><text x="0.9608%" y="639.50"></text></g><g><title>realloc (3 samples, 0.02%)</title><rect x="1.0064%" y="613" width="0.0211%" height="15" fill="rgb(217,207,13)" fg:x="143" fg:w="3"/><text x="1.2564%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.06%)</title><rect x="1.0275%" y="629" width="0.0633%" height="15" fill="rgb(231,73,38)" fg:x="146" fg:w="9"/><text x="1.2775%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="1.0697%" y="613" width="0.0211%" height="15" fill="rgb(225,20,46)" fg:x="152" fg:w="3"/><text x="1.3197%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="1.0697%" y="597" width="0.0211%" height="15" fill="rgb(210,31,41)" fg:x="152" fg:w="3"/><text x="1.3197%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="1.0697%" y="581" width="0.0211%" height="15" fill="rgb(221,200,47)" fg:x="152" fg:w="3"/><text x="1.3197%" y="591.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="1.0909%" y="629" width="0.0211%" height="15" fill="rgb(226,26,5)" fg:x="155" fg:w="3"/><text x="1.3409%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="1.1120%" y="613" width="0.0211%" height="15" fill="rgb(249,33,26)" fg:x="158" fg:w="3"/><text x="1.3620%" y="623.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.31%)</title><rect x="1.1331%" y="613" width="0.3097%" height="15" fill="rgb(235,183,28)" fg:x="161" fg:w="44"/><text x="1.3831%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (38 samples, 0.27%)</title><rect x="1.1753%" y="597" width="0.2674%" height="15" fill="rgb(221,5,38)" fg:x="167" fg:w="38"/><text x="1.4253%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (38 samples, 0.27%)</title><rect x="1.1753%" y="581" width="0.2674%" height="15" fill="rgb(247,18,42)" fg:x="167" fg:w="38"/><text x="1.4253%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (38 samples, 0.27%)</title><rect x="1.1753%" y="565" width="0.2674%" height="15" fill="rgb(241,131,45)" fg:x="167" fg:w="38"/><text x="1.4253%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (38 samples, 0.27%)</title><rect x="1.1753%" y="549" width="0.2674%" height="15" fill="rgb(249,31,29)" fg:x="167" fg:w="38"/><text x="1.4253%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (38 samples, 0.27%)</title><rect x="1.1753%" y="533" width="0.2674%" height="15" fill="rgb(225,111,53)" fg:x="167" fg:w="38"/><text x="1.4253%" y="543.50"></text></g><g><title>[libc.so.6] (12 samples, 0.08%)</title><rect x="1.4427%" y="613" width="0.0845%" height="15" fill="rgb(238,160,17)" fg:x="205" fg:w="12"/><text x="1.6927%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.01%)</title><rect x="1.5342%" y="613" width="0.0141%" height="15" fill="rgb(214,148,48)" fg:x="218" fg:w="2"/><text x="1.7842%" y="623.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="1.5624%" y="613" width="0.0211%" height="15" fill="rgb(232,36,49)" fg:x="222" fg:w="3"/><text x="1.8124%" y="623.50"></text></g><g><title>[unknown] (70 samples, 0.49%)</title><rect x="1.1120%" y="629" width="0.4926%" height="15" fill="rgb(209,103,24)" fg:x="158" fg:w="70"/><text x="1.3620%" y="639.50"></text></g><g><title>realloc (3 samples, 0.02%)</title><rect x="1.5835%" y="613" width="0.0211%" height="15" fill="rgb(229,88,8)" fg:x="225" fg:w="3"/><text x="1.8335%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (16 samples, 0.11%)</title><rect x="1.6328%" y="469" width="0.1126%" height="15" fill="rgb(213,181,19)" fg:x="232" fg:w="16"/><text x="1.8828%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (16 samples, 0.11%)</title><rect x="1.6328%" y="453" width="0.1126%" height="15" fill="rgb(254,191,54)" fg:x="232" fg:w="16"/><text x="1.8828%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.11%)</title><rect x="1.6328%" y="437" width="0.1126%" height="15" fill="rgb(241,83,37)" fg:x="232" fg:w="16"/><text x="1.8828%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.11%)</title><rect x="1.6398%" y="421" width="0.1056%" height="15" fill="rgb(233,36,39)" fg:x="233" fg:w="15"/><text x="1.8898%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.11%)</title><rect x="1.6398%" y="405" width="0.1056%" height="15" fill="rgb(226,3,54)" fg:x="233" fg:w="15"/><text x="1.8898%" y="415.50"></text></g><g><title>cfree (15 samples, 0.11%)</title><rect x="1.6398%" y="389" width="0.1056%" height="15" fill="rgb(245,192,40)" fg:x="233" fg:w="15"/><text x="1.8898%" y="399.50"></text></g><g><title>[libc.so.6] (13 samples, 0.09%)</title><rect x="1.6539%" y="373" width="0.0915%" height="15" fill="rgb(238,167,29)" fg:x="235" fg:w="13"/><text x="1.9039%" y="383.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="1.7243%" y="357" width="0.0211%" height="15" fill="rgb(232,182,51)" fg:x="245" fg:w="3"/><text x="1.9743%" y="367.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (3 samples, 0.02%)</title><rect x="1.8580%" y="453" width="0.0211%" height="15" fill="rgb(231,60,39)" fg:x="264" fg:w="3"/><text x="2.1080%" y="463.50"></text></g><g><title>main::get_reduced_cost_edgeindex (3 samples, 0.02%)</title><rect x="1.8791%" y="453" width="0.0211%" height="15" fill="rgb(208,69,12)" fg:x="267" fg:w="3"/><text x="2.1291%" y="463.50"></text></g><g><title>main::__update_node_potentials (24 samples, 0.17%)</title><rect x="1.7454%" y="469" width="0.1689%" height="15" fill="rgb(235,93,37)" fg:x="248" fg:w="24"/><text x="1.9954%" y="479.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (2 samples, 0.01%)</title><rect x="1.9002%" y="453" width="0.0141%" height="15" fill="rgb(213,116,39)" fg:x="270" fg:w="2"/><text x="2.1502%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (182 samples, 1.28%)</title><rect x="3.1952%" y="437" width="1.2809%" height="15" fill="rgb(222,207,29)" fg:x="454" fg:w="182"/><text x="3.4452%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (182 samples, 1.28%)</title><rect x="3.1952%" y="421" width="1.2809%" height="15" fill="rgb(206,96,30)" fg:x="454" fg:w="182"/><text x="3.4452%" y="431.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (340 samples, 2.39%)</title><rect x="4.5323%" y="421" width="2.3928%" height="15" fill="rgb(218,138,4)" fg:x="644" fg:w="340"/><text x="4.7823%" y="431.50">&lt;i..</text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (355 samples, 2.50%)</title><rect x="6.9252%" y="421" width="2.4984%" height="15" fill="rgb(250,191,14)" fg:x="984" fg:w="355"/><text x="7.1752%" y="431.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (355 samples, 2.50%)</title><rect x="6.9252%" y="405" width="2.4984%" height="15" fill="rgb(239,60,40)" fg:x="984" fg:w="355"/><text x="7.1752%" y="415.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (355 samples, 2.50%)</title><rect x="6.9252%" y="389" width="2.4984%" height="15" fill="rgb(206,27,48)" fg:x="984" fg:w="355"/><text x="7.1752%" y="399.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (355 samples, 2.50%)</title><rect x="6.9252%" y="373" width="2.4984%" height="15" fill="rgb(225,35,8)" fg:x="984" fg:w="355"/><text x="7.1752%" y="383.50">&lt;u..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (365 samples, 2.57%)</title><rect x="9.4236%" y="405" width="2.5688%" height="15" fill="rgb(250,213,24)" fg:x="1339" fg:w="365"/><text x="9.6736%" y="415.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (365 samples, 2.57%)</title><rect x="9.4236%" y="389" width="2.5688%" height="15" fill="rgb(247,123,22)" fg:x="1339" fg:w="365"/><text x="9.6736%" y="399.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (365 samples, 2.57%)</title><rect x="9.4236%" y="373" width="2.5688%" height="15" fill="rgb(231,138,38)" fg:x="1339" fg:w="365"/><text x="9.6736%" y="383.50">&lt;u..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (47 samples, 0.33%)</title><rect x="11.9924%" y="405" width="0.3308%" height="15" fill="rgb(231,145,46)" fg:x="1704" fg:w="47"/><text x="12.2424%" y="415.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (238 samples, 1.67%)</title><rect x="12.3232%" y="405" width="1.6750%" height="15" fill="rgb(251,118,11)" fg:x="1751" fg:w="238"/><text x="12.5732%" y="415.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (399 samples, 2.81%)</title><rect x="13.9982%" y="405" width="2.8081%" height="15" fill="rgb(217,147,25)" fg:x="1989" fg:w="399"/><text x="14.2482%" y="415.50">pe..</text></g><g><title>main::_find_first_arc (2,117 samples, 14.90%)</title><rect x="1.9213%" y="469" width="14.8990%" height="15" fill="rgb(247,81,37)" fg:x="273" fg:w="2117"/><text x="2.1713%" y="479.50">main::_find_first_arc</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (2,117 samples, 14.90%)</title><rect x="1.9213%" y="453" width="14.8990%" height="15" fill="rgb(209,12,38)" fg:x="273" fg:w="2117"/><text x="2.1713%" y="463.50">&lt;core::slice::iter::Ite..</text></g><g><title>main::_find_first_arc::_{{closure}} (1,754 samples, 12.34%)</title><rect x="4.4760%" y="437" width="12.3443%" height="15" fill="rgb(227,1,9)" fg:x="636" fg:w="1754"/><text x="4.7260%" y="447.50">main::_find_first_..</text></g><g><title>main::get_reduced_cost_edgeindex (1,051 samples, 7.40%)</title><rect x="9.4236%" y="421" width="7.3967%" height="15" fill="rgb(248,47,43)" fg:x="1339" fg:w="1051"/><text x="9.6736%" y="431.50">main::get_..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (2 samples, 0.01%)</title><rect x="16.8062%" y="405" width="0.0141%" height="15" fill="rgb(221,10,30)" fg:x="2388" fg:w="2"/><text x="17.0562%" y="415.50"></text></g><g><title>__libc_calloc (16 samples, 0.11%)</title><rect x="16.8555%" y="341" width="0.1126%" height="15" fill="rgb(210,229,1)" fg:x="2395" fg:w="16"/><text x="17.1055%" y="351.50"></text></g><g><title>[libc.so.6] (16 samples, 0.11%)</title><rect x="16.8555%" y="325" width="0.1126%" height="15" fill="rgb(222,148,37)" fg:x="2395" fg:w="16"/><text x="17.1055%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (20 samples, 0.14%)</title><rect x="16.8414%" y="421" width="0.1408%" height="15" fill="rgb(234,67,33)" fg:x="2393" fg:w="20"/><text x="17.0914%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.14%)</title><rect x="16.8414%" y="405" width="0.1408%" height="15" fill="rgb(247,98,35)" fg:x="2393" fg:w="20"/><text x="17.0914%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (19 samples, 0.13%)</title><rect x="16.8485%" y="389" width="0.1337%" height="15" fill="rgb(247,138,52)" fg:x="2394" fg:w="19"/><text x="17.0985%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.13%)</title><rect x="16.8485%" y="373" width="0.1337%" height="15" fill="rgb(213,79,30)" fg:x="2394" fg:w="19"/><text x="17.0985%" y="383.50"></text></g><g><title>alloc::alloc::alloc_zeroed (19 samples, 0.13%)</title><rect x="16.8485%" y="357" width="0.1337%" height="15" fill="rgb(246,177,23)" fg:x="2394" fg:w="19"/><text x="17.0985%" y="367.50"></text></g><g><title>__rdl_alloc_zeroed (2 samples, 0.01%)</title><rect x="16.9681%" y="341" width="0.0141%" height="15" fill="rgb(230,62,27)" fg:x="2411" fg:w="2"/><text x="17.2181%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.06%)</title><rect x="16.9822%" y="421" width="0.0563%" height="15" fill="rgb(216,154,8)" fg:x="2413" fg:w="8"/><text x="17.2322%" y="431.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="17.0033%" y="405" width="0.0352%" height="15" fill="rgb(244,35,45)" fg:x="2416" fg:w="5"/><text x="17.2533%" y="415.50"></text></g><g><title>core::ptr::read_volatile (3 samples, 0.02%)</title><rect x="17.0455%" y="325" width="0.0211%" height="15" fill="rgb(251,115,12)" fg:x="2422" fg:w="3"/><text x="17.2955%" y="335.50"></text></g><g><title>alloc::vec::from_elem (46 samples, 0.32%)</title><rect x="16.8414%" y="453" width="0.3237%" height="15" fill="rgb(240,54,50)" fg:x="2393" fg:w="46"/><text x="17.0914%" y="463.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (46 samples, 0.32%)</title><rect x="16.8414%" y="437" width="0.3237%" height="15" fill="rgb(233,84,52)" fg:x="2393" fg:w="46"/><text x="17.0914%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.13%)</title><rect x="17.0385%" y="421" width="0.1267%" height="15" fill="rgb(207,117,47)" fg:x="2421" fg:w="18"/><text x="17.2885%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.13%)</title><rect x="17.0385%" y="405" width="0.1267%" height="15" fill="rgb(249,43,39)" fg:x="2421" fg:w="18"/><text x="17.2885%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.13%)</title><rect x="17.0385%" y="389" width="0.1267%" height="15" fill="rgb(209,38,44)" fg:x="2421" fg:w="18"/><text x="17.2885%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.12%)</title><rect x="17.0455%" y="373" width="0.1196%" height="15" fill="rgb(236,212,23)" fg:x="2422" fg:w="17"/><text x="17.2955%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.12%)</title><rect x="17.0455%" y="357" width="0.1196%" height="15" fill="rgb(242,79,21)" fg:x="2422" fg:w="17"/><text x="17.2955%" y="367.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.12%)</title><rect x="17.0455%" y="341" width="0.1196%" height="15" fill="rgb(211,96,35)" fg:x="2422" fg:w="17"/><text x="17.2955%" y="351.50"></text></g><g><title>malloc (14 samples, 0.10%)</title><rect x="17.0666%" y="325" width="0.0985%" height="15" fill="rgb(253,215,40)" fg:x="2425" fg:w="14"/><text x="17.3166%" y="335.50"></text></g><g><title>[libc.so.6] (8 samples, 0.06%)</title><rect x="17.1089%" y="309" width="0.0563%" height="15" fill="rgb(211,81,21)" fg:x="2431" fg:w="8"/><text x="17.3589%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="17.4678%" y="357" width="0.0141%" height="15" fill="rgb(208,190,38)" fg:x="2482" fg:w="2"/><text x="17.7178%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="17.4678%" y="341" width="0.0141%" height="15" fill="rgb(235,213,38)" fg:x="2482" fg:w="2"/><text x="17.7178%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="17.4678%" y="325" width="0.0141%" height="15" fill="rgb(237,122,38)" fg:x="2482" fg:w="2"/><text x="17.7178%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="17.4819%" y="357" width="0.0282%" height="15" fill="rgb(244,218,35)" fg:x="2484" fg:w="4"/><text x="17.7319%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.03%)</title><rect x="17.4819%" y="341" width="0.0282%" height="15" fill="rgb(240,68,47)" fg:x="2484" fg:w="4"/><text x="17.7319%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="17.4819%" y="325" width="0.0282%" height="15" fill="rgb(210,16,53)" fg:x="2484" fg:w="4"/><text x="17.7319%" y="335.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (11 samples, 0.08%)</title><rect x="17.5100%" y="357" width="0.0774%" height="15" fill="rgb(235,124,12)" fg:x="2488" fg:w="11"/><text x="17.7600%" y="367.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (15 samples, 0.11%)</title><rect x="17.5874%" y="357" width="0.1056%" height="15" fill="rgb(224,169,11)" fg:x="2499" fg:w="15"/><text x="17.8374%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (15 samples, 0.11%)</title><rect x="17.5874%" y="341" width="0.1056%" height="15" fill="rgb(250,166,2)" fg:x="2499" fg:w="15"/><text x="17.8374%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15 samples, 0.11%)</title><rect x="17.5874%" y="325" width="0.1056%" height="15" fill="rgb(242,216,29)" fg:x="2499" fg:w="15"/><text x="17.8374%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.11%)</title><rect x="17.5874%" y="309" width="0.1056%" height="15" fill="rgb(230,116,27)" fg:x="2499" fg:w="15"/><text x="17.8374%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (77 samples, 0.54%)</title><rect x="17.1652%" y="421" width="0.5419%" height="15" fill="rgb(228,99,48)" fg:x="2439" fg:w="77"/><text x="17.4152%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (64 samples, 0.45%)</title><rect x="17.2567%" y="405" width="0.4504%" height="15" fill="rgb(253,11,6)" fg:x="2452" fg:w="64"/><text x="17.5067%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (64 samples, 0.45%)</title><rect x="17.2567%" y="389" width="0.4504%" height="15" fill="rgb(247,143,39)" fg:x="2452" fg:w="64"/><text x="17.5067%" y="399.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (64 samples, 0.45%)</title><rect x="17.2567%" y="373" width="0.4504%" height="15" fill="rgb(236,97,10)" fg:x="2452" fg:w="64"/><text x="17.5067%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (2 samples, 0.01%)</title><rect x="17.6930%" y="357" width="0.0141%" height="15" fill="rgb(233,208,19)" fg:x="2514" fg:w="2"/><text x="17.9430%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (13 samples, 0.09%)</title><rect x="17.7845%" y="357" width="0.0915%" height="15" fill="rgb(216,164,2)" fg:x="2527" fg:w="13"/><text x="18.0345%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (13 samples, 0.09%)</title><rect x="17.7845%" y="341" width="0.0915%" height="15" fill="rgb(220,129,5)" fg:x="2527" fg:w="13"/><text x="18.0345%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (13 samples, 0.09%)</title><rect x="17.7845%" y="325" width="0.0915%" height="15" fill="rgb(242,17,10)" fg:x="2527" fg:w="13"/><text x="18.0345%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.02%)</title><rect x="17.8760%" y="341" width="0.0211%" height="15" fill="rgb(242,107,0)" fg:x="2540" fg:w="3"/><text x="18.1260%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.02%)</title><rect x="17.8760%" y="325" width="0.0211%" height="15" fill="rgb(251,28,31)" fg:x="2540" fg:w="3"/><text x="18.1260%" y="335.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (106 samples, 0.75%)</title><rect x="18.8824%" y="325" width="0.7460%" height="15" fill="rgb(233,223,10)" fg:x="2683" fg:w="106"/><text x="19.1324%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (106 samples, 0.75%)</title><rect x="18.8824%" y="309" width="0.7460%" height="15" fill="rgb(215,21,27)" fg:x="2683" fg:w="106"/><text x="19.1324%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (276 samples, 1.94%)</title><rect x="17.7423%" y="405" width="1.9424%" height="15" fill="rgb(232,23,21)" fg:x="2521" fg:w="276"/><text x="17.9923%" y="415.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (275 samples, 1.94%)</title><rect x="17.7493%" y="389" width="1.9354%" height="15" fill="rgb(244,5,23)" fg:x="2522" fg:w="275"/><text x="17.9993%" y="399.50">c..</text></g><g><title>main::compute_flowchange::_{{closure}} (275 samples, 1.94%)</title><rect x="17.7493%" y="373" width="1.9354%" height="15" fill="rgb(226,81,46)" fg:x="2522" fg:w="275"/><text x="17.9993%" y="383.50">m..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (257 samples, 1.81%)</title><rect x="17.8760%" y="357" width="1.8087%" height="15" fill="rgb(247,70,30)" fg:x="2540" fg:w="257"/><text x="18.1260%" y="367.50">p..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (254 samples, 1.79%)</title><rect x="17.8971%" y="341" width="1.7876%" height="15" fill="rgb(212,68,19)" fg:x="2543" fg:w="254"/><text x="18.1471%" y="351.50">p..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (8 samples, 0.06%)</title><rect x="19.6284%" y="325" width="0.0563%" height="15" fill="rgb(240,187,13)" fg:x="2789" fg:w="8"/><text x="19.8784%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (8 samples, 0.06%)</title><rect x="19.6284%" y="309" width="0.0563%" height="15" fill="rgb(223,113,26)" fg:x="2789" fg:w="8"/><text x="19.8784%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (372 samples, 2.62%)</title><rect x="17.1652%" y="453" width="2.6181%" height="15" fill="rgb(206,192,2)" fg:x="2439" fg:w="372"/><text x="17.4152%" y="463.50">co..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (372 samples, 2.62%)</title><rect x="17.1652%" y="437" width="2.6181%" height="15" fill="rgb(241,108,4)" fg:x="2439" fg:w="372"/><text x="17.4152%" y="447.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (295 samples, 2.08%)</title><rect x="17.7071%" y="421" width="2.0761%" height="15" fill="rgb(247,173,49)" fg:x="2516" fg:w="295"/><text x="17.9571%" y="431.50">c..</text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.10%)</title><rect x="19.6847%" y="405" width="0.0985%" height="15" fill="rgb(224,114,35)" fg:x="2797" fg:w="14"/><text x="19.9347%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.09%)</title><rect x="19.6917%" y="389" width="0.0915%" height="15" fill="rgb(245,159,27)" fg:x="2798" fg:w="13"/><text x="19.9417%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.04%)</title><rect x="19.7410%" y="373" width="0.0422%" height="15" fill="rgb(245,172,44)" fg:x="2805" fg:w="6"/><text x="19.9910%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (23 samples, 0.16%)</title><rect x="19.7832%" y="453" width="0.1619%" height="15" fill="rgb(236,23,11)" fg:x="2811" fg:w="23"/><text x="20.0332%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (23 samples, 0.16%)</title><rect x="19.7832%" y="437" width="0.1619%" height="15" fill="rgb(205,117,38)" fg:x="2811" fg:w="23"/><text x="20.0332%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.16%)</title><rect x="19.7832%" y="421" width="0.1619%" height="15" fill="rgb(237,72,25)" fg:x="2811" fg:w="23"/><text x="20.0332%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.16%)</title><rect x="19.7832%" y="405" width="0.1619%" height="15" fill="rgb(244,70,9)" fg:x="2811" fg:w="23"/><text x="20.0332%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (19 samples, 0.13%)</title><rect x="19.8114%" y="389" width="0.1337%" height="15" fill="rgb(217,125,39)" fg:x="2815" fg:w="19"/><text x="20.0614%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (18 samples, 0.13%)</title><rect x="19.8184%" y="373" width="0.1267%" height="15" fill="rgb(235,36,10)" fg:x="2816" fg:w="18"/><text x="20.0684%" y="383.50"></text></g><g><title>core::cmp::min_by (18 samples, 0.13%)</title><rect x="19.8184%" y="357" width="0.1267%" height="15" fill="rgb(251,123,47)" fg:x="2816" fg:w="18"/><text x="20.0684%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 0.04%)</title><rect x="19.9099%" y="341" width="0.0352%" height="15" fill="rgb(221,13,13)" fg:x="2829" fg:w="5"/><text x="20.1599%" y="351.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (5 samples, 0.04%)</title><rect x="19.9099%" y="325" width="0.0352%" height="15" fill="rgb(238,131,9)" fg:x="2829" fg:w="5"/><text x="20.1599%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (5 samples, 0.04%)</title><rect x="19.9451%" y="453" width="0.0352%" height="15" fill="rgb(211,50,8)" fg:x="2834" fg:w="5"/><text x="20.1951%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (5 samples, 0.04%)</title><rect x="19.9451%" y="437" width="0.0352%" height="15" fill="rgb(245,182,24)" fg:x="2834" fg:w="5"/><text x="20.1951%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="19.9451%" y="421" width="0.0352%" height="15" fill="rgb(242,14,37)" fg:x="2834" fg:w="5"/><text x="20.1951%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="19.9451%" y="405" width="0.0352%" height="15" fill="rgb(246,228,12)" fg:x="2834" fg:w="5"/><text x="20.1951%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="19.9451%" y="389" width="0.0352%" height="15" fill="rgb(213,55,15)" fg:x="2834" fg:w="5"/><text x="20.1951%" y="399.50"></text></g><g><title>cfree (5 samples, 0.04%)</title><rect x="19.9451%" y="373" width="0.0352%" height="15" fill="rgb(209,9,3)" fg:x="2834" fg:w="5"/><text x="20.1951%" y="383.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="19.9592%" y="357" width="0.0211%" height="15" fill="rgb(230,59,30)" fg:x="2836" fg:w="3"/><text x="20.2092%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (6 samples, 0.04%)</title><rect x="19.9803%" y="453" width="0.0422%" height="15" fill="rgb(209,121,21)" fg:x="2839" fg:w="6"/><text x="20.2303%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (6 samples, 0.04%)</title><rect x="19.9803%" y="437" width="0.0422%" height="15" fill="rgb(220,109,13)" fg:x="2839" fg:w="6"/><text x="20.2303%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="19.9803%" y="421" width="0.0422%" height="15" fill="rgb(232,18,1)" fg:x="2839" fg:w="6"/><text x="20.2303%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.04%)</title><rect x="19.9803%" y="405" width="0.0422%" height="15" fill="rgb(215,41,42)" fg:x="2839" fg:w="6"/><text x="20.2303%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.04%)</title><rect x="19.9803%" y="389" width="0.0422%" height="15" fill="rgb(224,123,36)" fg:x="2839" fg:w="6"/><text x="20.2303%" y="399.50"></text></g><g><title>cfree (6 samples, 0.04%)</title><rect x="19.9803%" y="373" width="0.0422%" height="15" fill="rgb(240,125,3)" fg:x="2839" fg:w="6"/><text x="20.2303%" y="383.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="19.9803%" y="357" width="0.0422%" height="15" fill="rgb(205,98,50)" fg:x="2839" fg:w="6"/><text x="20.2303%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="20.0084%" y="341" width="0.0141%" height="15" fill="rgb(205,185,37)" fg:x="2843" fg:w="2"/><text x="20.2584%" y="351.50"></text></g><g><title>main::compute_flowchange (456 samples, 3.21%)</title><rect x="16.8203%" y="469" width="3.2092%" height="15" fill="rgb(238,207,15)" fg:x="2390" fg:w="456"/><text x="17.0703%" y="479.50">mai..</text></g><g><title>main::compute_node_potentials (3 samples, 0.02%)</title><rect x="20.0296%" y="469" width="0.0211%" height="15" fill="rgb(213,199,42)" fg:x="2846" fg:w="3"/><text x="20.2796%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.11%)</title><rect x="21.0078%" y="453" width="0.1126%" height="15" fill="rgb(235,201,11)" fg:x="2985" fg:w="16"/><text x="21.2578%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.10%)</title><rect x="21.0219%" y="437" width="0.0985%" height="15" fill="rgb(207,46,11)" fg:x="2987" fg:w="14"/><text x="21.2719%" y="447.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.03%)</title><rect x="21.0923%" y="421" width="0.0282%" height="15" fill="rgb(241,35,35)" fg:x="2997" fg:w="4"/><text x="21.3423%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4 samples, 0.03%)</title><rect x="21.0923%" y="405" width="0.0282%" height="15" fill="rgb(243,32,47)" fg:x="2997" fg:w="4"/><text x="21.3423%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="21.3527%" y="405" width="0.0211%" height="15" fill="rgb(247,202,23)" fg:x="3034" fg:w="3"/><text x="21.6027%" y="415.50"></text></g><g><title>__rdl_realloc (2 samples, 0.01%)</title><rect x="21.4090%" y="341" width="0.0141%" height="15" fill="rgb(219,102,11)" fg:x="3042" fg:w="2"/><text x="21.6590%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (89 samples, 0.63%)</title><rect x="21.4019%" y="389" width="0.6264%" height="15" fill="rgb(243,110,44)" fg:x="3041" fg:w="89"/><text x="21.6519%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (89 samples, 0.63%)</title><rect x="21.4019%" y="373" width="0.6264%" height="15" fill="rgb(222,74,54)" fg:x="3041" fg:w="89"/><text x="21.6519%" y="383.50"></text></g><g><title>alloc::alloc::realloc (89 samples, 0.63%)</title><rect x="21.4019%" y="357" width="0.6264%" height="15" fill="rgb(216,99,12)" fg:x="3041" fg:w="89"/><text x="21.6519%" y="367.50"></text></g><g><title>realloc (86 samples, 0.61%)</title><rect x="21.4230%" y="341" width="0.6053%" height="15" fill="rgb(226,22,26)" fg:x="3044" fg:w="86"/><text x="21.6730%" y="351.50"></text></g><g><title>[libc.so.6] (79 samples, 0.56%)</title><rect x="21.4723%" y="325" width="0.5560%" height="15" fill="rgb(217,163,10)" fg:x="3051" fg:w="79"/><text x="21.7223%" y="335.50"></text></g><g><title>[libc.so.6] (65 samples, 0.46%)</title><rect x="21.5708%" y="309" width="0.4575%" height="15" fill="rgb(213,25,53)" fg:x="3065" fg:w="65"/><text x="21.8208%" y="319.50"></text></g><g><title>[libc.so.6] (15 samples, 0.11%)</title><rect x="21.9227%" y="293" width="0.1056%" height="15" fill="rgb(252,105,26)" fg:x="3115" fg:w="15"/><text x="22.1727%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (98 samples, 0.69%)</title><rect x="21.3808%" y="405" width="0.6897%" height="15" fill="rgb(220,39,43)" fg:x="3038" fg:w="98"/><text x="21.6308%" y="415.50"></text></g><g><title>malloc (4 samples, 0.03%)</title><rect x="22.0424%" y="389" width="0.0282%" height="15" fill="rgb(229,68,48)" fg:x="3132" fg:w="4"/><text x="22.2924%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (103 samples, 0.72%)</title><rect x="21.3527%" y="437" width="0.7249%" height="15" fill="rgb(252,8,32)" fg:x="3034" fg:w="103"/><text x="21.6027%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (103 samples, 0.72%)</title><rect x="21.3527%" y="421" width="0.7249%" height="15" fill="rgb(223,20,43)" fg:x="3034" fg:w="103"/><text x="21.6027%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (9 samples, 0.06%)</title><rect x="22.0776%" y="437" width="0.0633%" height="15" fill="rgb(229,81,49)" fg:x="3137" fg:w="9"/><text x="22.3276%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9 samples, 0.06%)</title><rect x="22.0776%" y="421" width="0.0633%" height="15" fill="rgb(236,28,36)" fg:x="3137" fg:w="9"/><text x="22.3276%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (149 samples, 1.05%)</title><rect x="21.1204%" y="453" width="1.0486%" height="15" fill="rgb(249,185,26)" fg:x="3001" fg:w="149"/><text x="21.3704%" y="463.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="22.1409%" y="437" width="0.0282%" height="15" fill="rgb(249,174,33)" fg:x="3146" fg:w="4"/><text x="22.3909%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4 samples, 0.03%)</title><rect x="22.1761%" y="405" width="0.0282%" height="15" fill="rgb(233,201,37)" fg:x="3151" fg:w="4"/><text x="22.4261%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="22.1831%" y="389" width="0.0211%" height="15" fill="rgb(221,78,26)" fg:x="3152" fg:w="3"/><text x="22.4331%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.08%)</title><rect x="22.2183%" y="357" width="0.0845%" height="15" fill="rgb(250,127,30)" fg:x="3157" fg:w="12"/><text x="22.4683%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.08%)</title><rect x="22.2183%" y="341" width="0.0845%" height="15" fill="rgb(230,49,44)" fg:x="3157" fg:w="12"/><text x="22.4683%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.08%)</title><rect x="22.2183%" y="325" width="0.0845%" height="15" fill="rgb(229,67,23)" fg:x="3157" fg:w="12"/><text x="22.4683%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12 samples, 0.08%)</title><rect x="22.2183%" y="309" width="0.0845%" height="15" fill="rgb(249,83,47)" fg:x="3157" fg:w="12"/><text x="22.4683%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 0.08%)</title><rect x="22.2183%" y="293" width="0.0845%" height="15" fill="rgb(215,43,3)" fg:x="3157" fg:w="12"/><text x="22.4683%" y="303.50"></text></g><g><title>alloc::alloc::realloc (12 samples, 0.08%)</title><rect x="22.2183%" y="277" width="0.0845%" height="15" fill="rgb(238,154,13)" fg:x="3157" fg:w="12"/><text x="22.4683%" y="287.50"></text></g><g><title>realloc (12 samples, 0.08%)</title><rect x="22.2183%" y="261" width="0.0845%" height="15" fill="rgb(219,56,2)" fg:x="3157" fg:w="12"/><text x="22.4683%" y="271.50"></text></g><g><title>[libc.so.6] (11 samples, 0.08%)</title><rect x="22.2254%" y="245" width="0.0774%" height="15" fill="rgb(233,0,4)" fg:x="3158" fg:w="11"/><text x="22.4754%" y="255.50"></text></g><g><title>[libc.so.6] (11 samples, 0.08%)</title><rect x="22.2254%" y="229" width="0.0774%" height="15" fill="rgb(235,30,7)" fg:x="3158" fg:w="11"/><text x="22.4754%" y="239.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="22.2746%" y="213" width="0.0282%" height="15" fill="rgb(250,79,13)" fg:x="3165" fg:w="4"/><text x="22.5246%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (25 samples, 0.18%)</title><rect x="22.1761%" y="453" width="0.1759%" height="15" fill="rgb(211,146,34)" fg:x="3151" fg:w="25"/><text x="22.4261%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 0.18%)</title><rect x="22.1761%" y="437" width="0.1759%" height="15" fill="rgb(228,22,38)" fg:x="3151" fg:w="25"/><text x="22.4261%" y="447.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (25 samples, 0.18%)</title><rect x="22.1761%" y="421" width="0.1759%" height="15" fill="rgb(235,168,5)" fg:x="3151" fg:w="25"/><text x="22.4261%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (21 samples, 0.15%)</title><rect x="22.2042%" y="405" width="0.1478%" height="15" fill="rgb(221,155,16)" fg:x="3155" fg:w="21"/><text x="22.4542%" y="415.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (21 samples, 0.15%)</title><rect x="22.2042%" y="389" width="0.1478%" height="15" fill="rgb(215,215,53)" fg:x="3155" fg:w="21"/><text x="22.4542%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (21 samples, 0.15%)</title><rect x="22.2042%" y="373" width="0.1478%" height="15" fill="rgb(223,4,10)" fg:x="3155" fg:w="21"/><text x="22.4542%" y="383.50"></text></g><g><title>core::ptr::write (7 samples, 0.05%)</title><rect x="22.3028%" y="357" width="0.0493%" height="15" fill="rgb(234,103,6)" fg:x="3169" fg:w="7"/><text x="22.5528%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (17 samples, 0.12%)</title><rect x="22.3520%" y="453" width="0.1196%" height="15" fill="rgb(227,97,0)" fg:x="3176" fg:w="17"/><text x="22.6020%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (17 samples, 0.12%)</title><rect x="22.3520%" y="437" width="0.1196%" height="15" fill="rgb(234,150,53)" fg:x="3176" fg:w="17"/><text x="22.6020%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (5 samples, 0.04%)</title><rect x="22.4717%" y="453" width="0.0352%" height="15" fill="rgb(228,201,54)" fg:x="3193" fg:w="5"/><text x="22.7217%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (5 samples, 0.04%)</title><rect x="22.4717%" y="437" width="0.0352%" height="15" fill="rgb(222,22,37)" fg:x="3193" fg:w="5"/><text x="22.7217%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="22.4717%" y="421" width="0.0352%" height="15" fill="rgb(237,53,32)" fg:x="3193" fg:w="5"/><text x="22.7217%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="22.4717%" y="405" width="0.0352%" height="15" fill="rgb(233,25,53)" fg:x="3193" fg:w="5"/><text x="22.7217%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="22.4717%" y="389" width="0.0352%" height="15" fill="rgb(210,40,34)" fg:x="3193" fg:w="5"/><text x="22.7217%" y="399.50"></text></g><g><title>cfree (5 samples, 0.04%)</title><rect x="22.4717%" y="373" width="0.0352%" height="15" fill="rgb(241,220,44)" fg:x="3193" fg:w="5"/><text x="22.7217%" y="383.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="22.4787%" y="357" width="0.0282%" height="15" fill="rgb(235,28,35)" fg:x="3194" fg:w="4"/><text x="22.7287%" y="367.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (162 samples, 1.14%)</title><rect x="23.7596%" y="405" width="1.1401%" height="15" fill="rgb(210,56,17)" fg:x="3376" fg:w="162"/><text x="24.0096%" y="415.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (162 samples, 1.14%)</title><rect x="23.7596%" y="389" width="1.1401%" height="15" fill="rgb(224,130,29)" fg:x="3376" fg:w="162"/><text x="24.0096%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (162 samples, 1.14%)</title><rect x="23.7596%" y="373" width="1.1401%" height="15" fill="rgb(235,212,8)" fg:x="3376" fg:w="162"/><text x="24.0096%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (390 samples, 2.74%)</title><rect x="22.5069%" y="453" width="2.7447%" height="15" fill="rgb(223,33,50)" fg:x="3198" fg:w="390"/><text x="22.7569%" y="463.50">co..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (390 samples, 2.74%)</title><rect x="22.5069%" y="437" width="2.7447%" height="15" fill="rgb(219,149,13)" fg:x="3198" fg:w="390"/><text x="22.7569%" y="447.50">&lt;T..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (390 samples, 2.74%)</title><rect x="22.5069%" y="421" width="2.7447%" height="15" fill="rgb(250,156,29)" fg:x="3198" fg:w="390"/><text x="22.7569%" y="431.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.35%)</title><rect x="24.8997%" y="405" width="0.3519%" height="15" fill="rgb(216,193,19)" fg:x="3538" fg:w="50"/><text x="25.1497%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (47 samples, 0.33%)</title><rect x="24.9208%" y="389" width="0.3308%" height="15" fill="rgb(216,135,14)" fg:x="3541" fg:w="47"/><text x="25.1708%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (4 samples, 0.03%)</title><rect x="25.2798%" y="357" width="0.0282%" height="15" fill="rgb(241,47,5)" fg:x="3592" fg:w="4"/><text x="25.5298%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (3 samples, 0.02%)</title><rect x="25.2868%" y="341" width="0.0211%" height="15" fill="rgb(233,42,35)" fg:x="3593" fg:w="3"/><text x="25.5368%" y="351.50"></text></g><g><title>itertools::Itertools::find_position::_{{closure}} (3 samples, 0.02%)</title><rect x="25.2868%" y="325" width="0.0211%" height="15" fill="rgb(231,13,6)" fg:x="3593" fg:w="3"/><text x="25.5368%" y="335.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (3 samples, 0.02%)</title><rect x="25.2868%" y="309" width="0.0211%" height="15" fill="rgb(207,181,40)" fg:x="3593" fg:w="3"/><text x="25.5368%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.02%)</title><rect x="25.2868%" y="293" width="0.0211%" height="15" fill="rgb(254,173,49)" fg:x="3593" fg:w="3"/><text x="25.5368%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="25.2868%" y="277" width="0.0211%" height="15" fill="rgb(221,1,38)" fg:x="3593" fg:w="3"/><text x="25.5368%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (3 samples, 0.02%)</title><rect x="25.2868%" y="261" width="0.0211%" height="15" fill="rgb(206,124,46)" fg:x="3593" fg:w="3"/><text x="25.5368%" y="271.50"></text></g><g><title>itertools::Itertools::find_position (11 samples, 0.08%)</title><rect x="25.2516%" y="453" width="0.0774%" height="15" fill="rgb(249,21,11)" fg:x="3588" fg:w="11"/><text x="25.5016%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (11 samples, 0.08%)</title><rect x="25.2516%" y="437" width="0.0774%" height="15" fill="rgb(222,201,40)" fg:x="3588" fg:w="11"/><text x="25.5016%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.08%)</title><rect x="25.2516%" y="421" width="0.0774%" height="15" fill="rgb(235,61,29)" fg:x="3588" fg:w="11"/><text x="25.5016%" y="431.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.08%)</title><rect x="25.2516%" y="405" width="0.0774%" height="15" fill="rgb(219,207,3)" fg:x="3588" fg:w="11"/><text x="25.5016%" y="415.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (11 samples, 0.08%)</title><rect x="25.2516%" y="389" width="0.0774%" height="15" fill="rgb(222,56,46)" fg:x="3588" fg:w="11"/><text x="25.5016%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (11 samples, 0.08%)</title><rect x="25.2516%" y="373" width="0.0774%" height="15" fill="rgb(239,76,54)" fg:x="3588" fg:w="11"/><text x="25.5016%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="25.3079%" y="357" width="0.0211%" height="15" fill="rgb(231,124,27)" fg:x="3596" fg:w="3"/><text x="25.5579%" y="367.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="25.3079%" y="341" width="0.0211%" height="15" fill="rgb(249,195,6)" fg:x="3596" fg:w="3"/><text x="25.5579%" y="351.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints (2 samples, 0.01%)</title><rect x="25.3290%" y="453" width="0.0141%" height="15" fill="rgb(237,174,47)" fg:x="3599" fg:w="2"/><text x="25.5790%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="25.3290%" y="437" width="0.0141%" height="15" fill="rgb(206,201,31)" fg:x="3599" fg:w="2"/><text x="25.5790%" y="447.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints::_{{closure}} (2 samples, 0.01%)</title><rect x="25.3290%" y="421" width="0.0141%" height="15" fill="rgb(231,57,52)" fg:x="3599" fg:w="2"/><text x="25.5790%" y="431.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (2 samples, 0.01%)</title><rect x="25.3290%" y="405" width="0.0141%" height="15" fill="rgb(248,177,22)" fg:x="3599" fg:w="2"/><text x="25.5790%" y="415.50"></text></g><g><title>main::find_cycle_with_arc (754 samples, 5.31%)</title><rect x="20.0507%" y="469" width="5.3065%" height="15" fill="rgb(215,211,37)" fg:x="2849" fg:w="754"/><text x="20.3007%" y="479.50">main::..</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (2 samples, 0.01%)</title><rect x="25.3431%" y="453" width="0.0141%" height="15" fill="rgb(241,128,51)" fg:x="3601" fg:w="2"/><text x="25.5931%" y="463.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.01%)</title><rect x="25.3431%" y="437" width="0.0141%" height="15" fill="rgb(227,165,31)" fg:x="3601" fg:w="2"/><text x="25.5931%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.06%)</title><rect x="33.6758%" y="341" width="0.0563%" height="15" fill="rgb(228,167,24)" fg:x="4785" fg:w="8"/><text x="33.9258%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.06%)</title><rect x="33.6758%" y="325" width="0.0563%" height="15" fill="rgb(228,143,12)" fg:x="4785" fg:w="8"/><text x="33.9258%" y="335.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.06%)</title><rect x="33.6758%" y="309" width="0.0563%" height="15" fill="rgb(249,149,8)" fg:x="4785" fg:w="8"/><text x="33.9258%" y="319.50"></text></g><g><title>malloc (8 samples, 0.06%)</title><rect x="33.6758%" y="293" width="0.0563%" height="15" fill="rgb(243,35,44)" fg:x="4785" fg:w="8"/><text x="33.9258%" y="303.50"></text></g><g><title>[libc.so.6] (7 samples, 0.05%)</title><rect x="33.6829%" y="277" width="0.0493%" height="15" fill="rgb(246,89,9)" fg:x="4786" fg:w="7"/><text x="33.9329%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="33.7181%" y="261" width="0.0141%" height="15" fill="rgb(233,213,13)" fg:x="4791" fg:w="2"/><text x="33.9681%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.06%)</title><rect x="33.6758%" y="389" width="0.0633%" height="15" fill="rgb(233,141,41)" fg:x="4785" fg:w="9"/><text x="33.9258%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.06%)</title><rect x="33.6758%" y="373" width="0.0633%" height="15" fill="rgb(239,167,4)" fg:x="4785" fg:w="9"/><text x="33.9258%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.06%)</title><rect x="33.6758%" y="357" width="0.0633%" height="15" fill="rgb(209,217,16)" fg:x="4785" fg:w="9"/><text x="33.9258%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (130 samples, 0.91%)</title><rect x="33.6758%" y="453" width="0.9149%" height="15" fill="rgb(219,88,35)" fg:x="4785" fg:w="130"/><text x="33.9258%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (130 samples, 0.91%)</title><rect x="33.6758%" y="437" width="0.9149%" height="15" fill="rgb(220,193,23)" fg:x="4785" fg:w="130"/><text x="33.9258%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (130 samples, 0.91%)</title><rect x="33.6758%" y="421" width="0.9149%" height="15" fill="rgb(230,90,52)" fg:x="4785" fg:w="130"/><text x="33.9258%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (130 samples, 0.91%)</title><rect x="33.6758%" y="405" width="0.9149%" height="15" fill="rgb(252,106,19)" fg:x="4785" fg:w="130"/><text x="33.9258%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (121 samples, 0.85%)</title><rect x="33.7392%" y="389" width="0.8516%" height="15" fill="rgb(206,74,20)" fg:x="4794" fg:w="121"/><text x="33.9892%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (121 samples, 0.85%)</title><rect x="33.7392%" y="373" width="0.8516%" height="15" fill="rgb(230,138,44)" fg:x="4794" fg:w="121"/><text x="33.9892%" y="383.50"></text></g><g><title>[libc.so.6] (121 samples, 0.85%)</title><rect x="33.7392%" y="357" width="0.8516%" height="15" fill="rgb(235,182,43)" fg:x="4794" fg:w="121"/><text x="33.9892%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="34.5908%" y="437" width="0.0141%" height="15" fill="rgb(242,16,51)" fg:x="4915" fg:w="2"/><text x="34.8408%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (787 samples, 5.54%)</title><rect x="34.5908%" y="453" width="5.5387%" height="15" fill="rgb(248,9,4)" fg:x="4915" fg:w="787"/><text x="34.8408%" y="463.50">&lt;alloc:..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (785 samples, 5.52%)</title><rect x="34.6048%" y="437" width="5.5247%" height="15" fill="rgb(210,31,22)" fg:x="4917" fg:w="785"/><text x="34.8548%" y="447.50">core::s..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (785 samples, 5.52%)</title><rect x="34.6048%" y="421" width="5.5247%" height="15" fill="rgb(239,54,39)" fg:x="4917" fg:w="785"/><text x="34.8548%" y="431.50">&lt;usize ..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="40.1365%" y="437" width="0.0141%" height="15" fill="rgb(230,99,41)" fg:x="5703" fg:w="2"/><text x="40.3865%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="40.1365%" y="421" width="0.0141%" height="15" fill="rgb(253,106,12)" fg:x="5703" fg:w="2"/><text x="40.3865%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12 samples, 0.08%)</title><rect x="41.9664%" y="421" width="0.0845%" height="15" fill="rgb(213,46,41)" fg:x="5963" fg:w="12"/><text x="42.2164%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12 samples, 0.08%)</title><rect x="41.9664%" y="405" width="0.0845%" height="15" fill="rgb(215,133,35)" fg:x="5963" fg:w="12"/><text x="42.2164%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.08%)</title><rect x="41.9664%" y="389" width="0.0845%" height="15" fill="rgb(213,28,5)" fg:x="5963" fg:w="12"/><text x="42.2164%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (17 samples, 0.12%)</title><rect x="42.3253%" y="357" width="0.1196%" height="15" fill="rgb(215,77,49)" fg:x="6014" fg:w="17"/><text x="42.5753%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 0.12%)</title><rect x="42.3253%" y="341" width="0.1196%" height="15" fill="rgb(248,100,22)" fg:x="6014" fg:w="17"/><text x="42.5753%" y="351.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 0.12%)</title><rect x="42.3253%" y="325" width="0.1196%" height="15" fill="rgb(208,67,9)" fg:x="6014" fg:w="17"/><text x="42.5753%" y="335.50"></text></g><g><title>realloc (17 samples, 0.12%)</title><rect x="42.3253%" y="309" width="0.1196%" height="15" fill="rgb(219,133,21)" fg:x="6014" fg:w="17"/><text x="42.5753%" y="319.50"></text></g><g><title>[libc.so.6] (16 samples, 0.11%)</title><rect x="42.3323%" y="293" width="0.1126%" height="15" fill="rgb(246,46,29)" fg:x="6015" fg:w="16"/><text x="42.5823%" y="303.50"></text></g><g><title>[libc.so.6] (13 samples, 0.09%)</title><rect x="42.3534%" y="277" width="0.0915%" height="15" fill="rgb(246,185,52)" fg:x="6018" fg:w="13"/><text x="42.6034%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="42.4309%" y="261" width="0.0141%" height="15" fill="rgb(252,136,11)" fg:x="6029" fg:w="2"/><text x="42.6809%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.13%)</title><rect x="42.3182%" y="405" width="0.1337%" height="15" fill="rgb(219,138,53)" fg:x="6013" fg:w="19"/><text x="42.5682%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 0.13%)</title><rect x="42.3182%" y="389" width="0.1337%" height="15" fill="rgb(211,51,23)" fg:x="6013" fg:w="19"/><text x="42.5682%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.13%)</title><rect x="42.3253%" y="373" width="0.1267%" height="15" fill="rgb(247,221,28)" fg:x="6014" fg:w="18"/><text x="42.5753%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (58 samples, 0.41%)</title><rect x="42.0508%" y="421" width="0.4082%" height="15" fill="rgb(251,222,45)" fg:x="5975" fg:w="58"/><text x="42.3008%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (11 samples, 0.08%)</title><rect x="42.4590%" y="421" width="0.0774%" height="15" fill="rgb(217,162,53)" fg:x="6033" fg:w="11"/><text x="42.7090%" y="431.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (87 samples, 0.61%)</title><rect x="42.7053%" y="373" width="0.6123%" height="15" fill="rgb(229,93,14)" fg:x="6068" fg:w="87"/><text x="42.9553%" y="383.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (87 samples, 0.61%)</title><rect x="42.7053%" y="357" width="0.6123%" height="15" fill="rgb(209,67,49)" fg:x="6068" fg:w="87"/><text x="42.9553%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (87 samples, 0.61%)</title><rect x="42.7053%" y="341" width="0.6123%" height="15" fill="rgb(213,87,29)" fg:x="6068" fg:w="87"/><text x="42.9553%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (482 samples, 3.39%)</title><rect x="40.1295%" y="453" width="3.3922%" height="15" fill="rgb(205,151,52)" fg:x="5702" fg:w="482"/><text x="40.3795%" y="463.50">&lt;co..</text></g><g><title>main::update_sptree::_{{closure}} (479 samples, 3.37%)</title><rect x="40.1506%" y="437" width="3.3711%" height="15" fill="rgb(253,215,39)" fg:x="5705" fg:w="479"/><text x="40.4006%" y="447.50">mai..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (140 samples, 0.99%)</title><rect x="42.5364%" y="421" width="0.9853%" height="15" fill="rgb(221,220,41)" fg:x="6044" fg:w="140"/><text x="42.7864%" y="431.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (140 samples, 0.99%)</title><rect x="42.5364%" y="405" width="0.9853%" height="15" fill="rgb(218,133,21)" fg:x="6044" fg:w="140"/><text x="42.7864%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (140 samples, 0.99%)</title><rect x="42.5364%" y="389" width="0.9853%" height="15" fill="rgb(221,193,43)" fg:x="6044" fg:w="140"/><text x="42.7864%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.20%)</title><rect x="43.3176%" y="373" width="0.2041%" height="15" fill="rgb(240,128,52)" fg:x="6155" fg:w="29"/><text x="43.5676%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (25 samples, 0.18%)</title><rect x="43.3458%" y="357" width="0.1759%" height="15" fill="rgb(253,114,12)" fg:x="6159" fg:w="25"/><text x="43.5958%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (167 samples, 1.18%)</title><rect x="43.7821%" y="437" width="1.1753%" height="15" fill="rgb(215,223,47)" fg:x="6221" fg:w="167"/><text x="44.0321%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (83 samples, 0.58%)</title><rect x="44.3733%" y="421" width="0.5841%" height="15" fill="rgb(248,225,23)" fg:x="6305" fg:w="83"/><text x="44.6233%" y="431.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (194 samples, 1.37%)</title><rect x="44.9574%" y="421" width="1.3653%" height="15" fill="rgb(250,108,0)" fg:x="6388" fg:w="194"/><text x="45.2074%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (194 samples, 1.37%)</title><rect x="44.9574%" y="405" width="1.3653%" height="15" fill="rgb(228,208,7)" fg:x="6388" fg:w="194"/><text x="45.2074%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (703 samples, 4.95%)</title><rect x="43.5217%" y="453" width="4.9476%" height="15" fill="rgb(244,45,10)" fg:x="6184" fg:w="703"/><text x="43.7717%" y="463.50">&lt;core:..</text></g><g><title>main::update_sptree::_{{closure}} (499 samples, 3.51%)</title><rect x="44.9574%" y="437" width="3.5119%" height="15" fill="rgb(207,125,25)" fg:x="6388" fg:w="499"/><text x="45.2074%" y="447.50">mai..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (305 samples, 2.15%)</title><rect x="46.3228%" y="421" width="2.1465%" height="15" fill="rgb(210,195,18)" fg:x="6582" fg:w="305"/><text x="46.5728%" y="431.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (305 samples, 2.15%)</title><rect x="46.3228%" y="405" width="2.1465%" height="15" fill="rgb(249,80,12)" fg:x="6582" fg:w="305"/><text x="46.5728%" y="415.50">c..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1,725 samples, 12.14%)</title><rect x="48.4693%" y="453" width="12.1402%" height="15" fill="rgb(221,65,9)" fg:x="6887" fg:w="1725"/><text x="48.7193%" y="463.50">&lt;petgraph::graph_i..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1,725 samples, 12.14%)</title><rect x="48.4693%" y="437" width="12.1402%" height="15" fill="rgb(235,49,36)" fg:x="6887" fg:w="1725"/><text x="48.7193%" y="447.50">core::cmp::impls::..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="60.7502%" y="405" width="0.0141%" height="15" fill="rgb(225,32,20)" fg:x="8632" fg:w="2"/><text x="61.0002%" y="415.50"></text></g><g><title>__rdl_realloc (2 samples, 0.01%)</title><rect x="60.7925%" y="341" width="0.0141%" height="15" fill="rgb(215,141,46)" fg:x="8638" fg:w="2"/><text x="61.0425%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (50 samples, 0.35%)</title><rect x="60.7925%" y="389" width="0.3519%" height="15" fill="rgb(250,160,47)" fg:x="8638" fg:w="50"/><text x="61.0425%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (50 samples, 0.35%)</title><rect x="60.7925%" y="373" width="0.3519%" height="15" fill="rgb(216,222,40)" fg:x="8638" fg:w="50"/><text x="61.0425%" y="383.50"></text></g><g><title>alloc::alloc::realloc (50 samples, 0.35%)</title><rect x="60.7925%" y="357" width="0.3519%" height="15" fill="rgb(234,217,39)" fg:x="8638" fg:w="50"/><text x="61.0425%" y="367.50"></text></g><g><title>realloc (48 samples, 0.34%)</title><rect x="60.8065%" y="341" width="0.3378%" height="15" fill="rgb(207,178,40)" fg:x="8640" fg:w="48"/><text x="61.0565%" y="351.50"></text></g><g><title>[libc.so.6] (42 samples, 0.30%)</title><rect x="60.8488%" y="325" width="0.2956%" height="15" fill="rgb(221,136,13)" fg:x="8646" fg:w="42"/><text x="61.0988%" y="335.50"></text></g><g><title>[libc.so.6] (35 samples, 0.25%)</title><rect x="60.8980%" y="309" width="0.2463%" height="15" fill="rgb(249,199,10)" fg:x="8653" fg:w="35"/><text x="61.1480%" y="319.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="61.1092%" y="293" width="0.0352%" height="15" fill="rgb(249,222,13)" fg:x="8683" fg:w="5"/><text x="61.3592%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (56 samples, 0.39%)</title><rect x="60.7713%" y="405" width="0.3941%" height="15" fill="rgb(244,185,38)" fg:x="8635" fg:w="56"/><text x="61.0213%" y="415.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="61.1443%" y="389" width="0.0211%" height="15" fill="rgb(236,202,9)" fg:x="8688" fg:w="3"/><text x="61.3943%" y="399.50"></text></g><g><title>core::cmp::max (2 samples, 0.01%)</title><rect x="61.1655%" y="405" width="0.0141%" height="15" fill="rgb(250,229,37)" fg:x="8691" fg:w="2"/><text x="61.4155%" y="415.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.01%)</title><rect x="61.1655%" y="389" width="0.0141%" height="15" fill="rgb(206,174,23)" fg:x="8691" fg:w="2"/><text x="61.4155%" y="399.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.01%)</title><rect x="61.1655%" y="373" width="0.0141%" height="15" fill="rgb(211,33,43)" fg:x="8691" fg:w="2"/><text x="61.4155%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (63 samples, 0.44%)</title><rect x="60.7432%" y="437" width="0.4434%" height="15" fill="rgb(245,58,50)" fg:x="8631" fg:w="63"/><text x="60.9932%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (63 samples, 0.44%)</title><rect x="60.7432%" y="421" width="0.4434%" height="15" fill="rgb(244,68,36)" fg:x="8631" fg:w="63"/><text x="60.9932%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.01%)</title><rect x="61.1866%" y="437" width="0.0141%" height="15" fill="rgb(232,229,15)" fg:x="8694" fg:w="2"/><text x="61.4366%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="61.1866%" y="421" width="0.0141%" height="15" fill="rgb(254,30,23)" fg:x="8694" fg:w="2"/><text x="61.4366%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (92 samples, 0.65%)</title><rect x="60.6235%" y="453" width="0.6475%" height="15" fill="rgb(235,160,14)" fg:x="8614" fg:w="92"/><text x="60.8735%" y="463.50"></text></g><g><title>core::ptr::write (10 samples, 0.07%)</title><rect x="61.2006%" y="437" width="0.0704%" height="15" fill="rgb(212,155,44)" fg:x="8696" fg:w="10"/><text x="61.4506%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (42 samples, 0.30%)</title><rect x="61.2710%" y="453" width="0.2956%" height="15" fill="rgb(226,2,50)" fg:x="8706" fg:w="42"/><text x="61.5210%" y="463.50"></text></g><g><title>core::intrinsics::copy (42 samples, 0.30%)</title><rect x="61.2710%" y="437" width="0.2956%" height="15" fill="rgb(234,177,6)" fg:x="8706" fg:w="42"/><text x="61.5210%" y="447.50"></text></g><g><title>[libc.so.6] (42 samples, 0.30%)</title><rect x="61.2710%" y="421" width="0.2956%" height="15" fill="rgb(217,24,9)" fg:x="8706" fg:w="42"/><text x="61.5210%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (132 samples, 0.93%)</title><rect x="61.5666%" y="421" width="0.9290%" height="15" fill="rgb(220,13,46)" fg:x="8748" fg:w="132"/><text x="61.8166%" y="431.50"></text></g><g><title>core::ptr::write (132 samples, 0.93%)</title><rect x="61.5666%" y="405" width="0.9290%" height="15" fill="rgb(239,221,27)" fg:x="8748" fg:w="132"/><text x="61.8166%" y="415.50"></text></g><g><title>alloc::vec::from_elem (148 samples, 1.04%)</title><rect x="61.5666%" y="453" width="1.0416%" height="15" fill="rgb(222,198,25)" fg:x="8748" fg:w="148"/><text x="61.8166%" y="463.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (148 samples, 1.04%)</title><rect x="61.5666%" y="437" width="1.0416%" height="15" fill="rgb(211,99,13)" fg:x="8748" fg:w="148"/><text x="61.8166%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.11%)</title><rect x="62.4956%" y="421" width="0.1126%" height="15" fill="rgb(232,111,31)" fg:x="8880" fg:w="16"/><text x="62.7456%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.11%)</title><rect x="62.4956%" y="405" width="0.1126%" height="15" fill="rgb(245,82,37)" fg:x="8880" fg:w="16"/><text x="62.7456%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.11%)</title><rect x="62.4956%" y="389" width="0.1126%" height="15" fill="rgb(227,149,46)" fg:x="8880" fg:w="16"/><text x="62.7456%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.11%)</title><rect x="62.4956%" y="373" width="0.1126%" height="15" fill="rgb(218,36,50)" fg:x="8880" fg:w="16"/><text x="62.7456%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.11%)</title><rect x="62.4956%" y="357" width="0.1126%" height="15" fill="rgb(226,80,48)" fg:x="8880" fg:w="16"/><text x="62.7456%" y="367.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.11%)</title><rect x="62.4956%" y="341" width="0.1126%" height="15" fill="rgb(238,224,15)" fg:x="8880" fg:w="16"/><text x="62.7456%" y="351.50"></text></g><g><title>malloc (16 samples, 0.11%)</title><rect x="62.4956%" y="325" width="0.1126%" height="15" fill="rgb(241,136,10)" fg:x="8880" fg:w="16"/><text x="62.7456%" y="335.50"></text></g><g><title>[libc.so.6] (16 samples, 0.11%)</title><rect x="62.4956%" y="309" width="0.1126%" height="15" fill="rgb(208,32,45)" fg:x="8880" fg:w="16"/><text x="62.7456%" y="319.50"></text></g><g><title>[libc.so.6] (10 samples, 0.07%)</title><rect x="62.5378%" y="293" width="0.0704%" height="15" fill="rgb(207,135,9)" fg:x="8886" fg:w="10"/><text x="62.7878%" y="303.50"></text></g><g><title>core::cmp::PartialEq::ne (4 samples, 0.03%)</title><rect x="62.6082%" y="453" width="0.0282%" height="15" fill="rgb(206,86,44)" fg:x="8896" fg:w="4"/><text x="62.8582%" y="463.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="62.6082%" y="437" width="0.0282%" height="15" fill="rgb(245,177,15)" fg:x="8896" fg:w="4"/><text x="62.8582%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (4 samples, 0.03%)</title><rect x="62.6082%" y="421" width="0.0282%" height="15" fill="rgb(206,64,50)" fg:x="8896" fg:w="4"/><text x="62.8582%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (421 samples, 2.96%)</title><rect x="68.0836%" y="277" width="2.9629%" height="15" fill="rgb(234,36,40)" fg:x="9674" fg:w="421"/><text x="68.3336%" y="287.50">cor..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (421 samples, 2.96%)</title><rect x="68.0836%" y="261" width="2.9629%" height="15" fill="rgb(213,64,8)" fg:x="9674" fg:w="421"/><text x="68.3336%" y="271.50">&lt;co..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="71.0113%" y="245" width="0.0352%" height="15" fill="rgb(210,75,36)" fg:x="10090" fg:w="5"/><text x="71.2613%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.04%)</title><rect x="71.0113%" y="229" width="0.0352%" height="15" fill="rgb(229,88,21)" fg:x="10090" fg:w="5"/><text x="71.2613%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (152 samples, 1.07%)</title><rect x="71.0465%" y="277" width="1.0697%" height="15" fill="rgb(252,204,47)" fg:x="10095" fg:w="152"/><text x="71.2965%" y="287.50"></text></g><g><title>core::iter::adapters::chain::and_then_or_clear (727 samples, 5.12%)</title><rect x="67.0631%" y="293" width="5.1165%" height="15" fill="rgb(208,77,27)" fg:x="9529" fg:w="727"/><text x="67.3131%" y="303.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt;&gt; (9 samples, 0.06%)</title><rect x="72.1163%" y="277" width="0.0633%" height="15" fill="rgb(221,76,26)" fg:x="10247" fg:w="9"/><text x="72.3663%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (9 samples, 0.06%)</title><rect x="72.1163%" y="261" width="0.0633%" height="15" fill="rgb(225,139,18)" fg:x="10247" fg:w="9"/><text x="72.3663%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (9 samples, 0.06%)</title><rect x="72.1163%" y="245" width="0.0633%" height="15" fill="rgb(230,137,11)" fg:x="10247" fg:w="9"/><text x="72.3663%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.06%)</title><rect x="72.1163%" y="229" width="0.0633%" height="15" fill="rgb(212,28,1)" fg:x="10247" fg:w="9"/><text x="72.3663%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (9 samples, 0.06%)</title><rect x="72.1163%" y="213" width="0.0633%" height="15" fill="rgb(248,164,17)" fg:x="10247" fg:w="9"/><text x="72.3663%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.06%)</title><rect x="72.1163%" y="197" width="0.0633%" height="15" fill="rgb(222,171,42)" fg:x="10247" fg:w="9"/><text x="72.3663%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (6 samples, 0.04%)</title><rect x="72.1374%" y="181" width="0.0422%" height="15" fill="rgb(243,84,45)" fg:x="10250" fg:w="6"/><text x="72.3874%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="72.1374%" y="165" width="0.0422%" height="15" fill="rgb(252,49,23)" fg:x="10250" fg:w="6"/><text x="72.3874%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.04%)</title><rect x="72.1374%" y="149" width="0.0422%" height="15" fill="rgb(215,19,7)" fg:x="10250" fg:w="6"/><text x="72.3874%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.04%)</title><rect x="72.1374%" y="133" width="0.0422%" height="15" fill="rgb(238,81,41)" fg:x="10250" fg:w="6"/><text x="72.3874%" y="143.50"></text></g><g><title>cfree (6 samples, 0.04%)</title><rect x="72.1374%" y="117" width="0.0422%" height="15" fill="rgb(210,199,37)" fg:x="10250" fg:w="6"/><text x="72.3874%" y="127.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="72.1585%" y="101" width="0.0211%" height="15" fill="rgb(244,192,49)" fg:x="10253" fg:w="3"/><text x="72.4085%" y="111.50"></text></g><g><title>core::ops::function::FnOnce::call_once (746 samples, 5.25%)</title><rect x="66.9435%" y="325" width="5.2502%" height="15" fill="rgb(226,211,11)" fg:x="9512" fg:w="746"/><text x="67.1935%" y="335.50">core::..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (746 samples, 5.25%)</title><rect x="66.9435%" y="309" width="5.2502%" height="15" fill="rgb(236,162,54)" fg:x="9512" fg:w="746"/><text x="67.1935%" y="319.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (2 samples, 0.01%)</title><rect x="72.1796%" y="293" width="0.0141%" height="15" fill="rgb(220,229,9)" fg:x="10256" fg:w="2"/><text x="72.4296%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2 samples, 0.01%)</title><rect x="72.1796%" y="277" width="0.0141%" height="15" fill="rgb(250,87,22)" fg:x="10256" fg:w="2"/><text x="72.4296%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="72.1796%" y="261" width="0.0141%" height="15" fill="rgb(239,43,17)" fg:x="10256" fg:w="2"/><text x="72.4296%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="72.1796%" y="245" width="0.0141%" height="15" fill="rgb(231,177,25)" fg:x="10256" fg:w="2"/><text x="72.4296%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (5 samples, 0.04%)</title><rect x="72.1937%" y="325" width="0.0352%" height="15" fill="rgb(219,179,1)" fg:x="10258" fg:w="5"/><text x="72.4437%" y="335.50"></text></g><g><title>core::iter::adapters::chain::and_then_or_clear (753 samples, 5.30%)</title><rect x="66.9435%" y="341" width="5.2995%" height="15" fill="rgb(238,219,53)" fg:x="9512" fg:w="753"/><text x="67.1935%" y="351.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="72.2289%" y="325" width="0.0141%" height="15" fill="rgb(232,167,36)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="72.2289%" y="309" width="0.0141%" height="15" fill="rgb(244,19,51)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="72.2289%" y="293" width="0.0141%" height="15" fill="rgb(224,6,22)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.01%)</title><rect x="72.2289%" y="277" width="0.0141%" height="15" fill="rgb(224,145,5)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="72.2289%" y="261" width="0.0141%" height="15" fill="rgb(234,130,49)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (2 samples, 0.01%)</title><rect x="72.2289%" y="245" width="0.0141%" height="15" fill="rgb(254,6,2)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="72.2289%" y="229" width="0.0141%" height="15" fill="rgb(208,96,46)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.01%)</title><rect x="72.2289%" y="213" width="0.0141%" height="15" fill="rgb(239,3,39)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="72.2289%" y="197" width="0.0141%" height="15" fill="rgb(233,210,1)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="72.2289%" y="181" width="0.0141%" height="15" fill="rgb(244,137,37)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="72.2289%" y="165" width="0.0141%" height="15" fill="rgb(240,136,2)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="175.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="72.2289%" y="149" width="0.0141%" height="15" fill="rgb(239,18,37)" fg:x="10263" fg:w="2"/><text x="72.4789%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,892 samples, 13.32%)</title><rect x="65.2615%" y="357" width="13.3155%" height="15" fill="rgb(218,185,22)" fg:x="9273" fg:w="1892"/><text x="65.5115%" y="367.50">&lt;core::iter::adapter..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (900 samples, 6.33%)</title><rect x="72.2429%" y="341" width="6.3340%" height="15" fill="rgb(225,218,4)" fg:x="10265" fg:w="900"/><text x="72.4929%" y="351.50">core::op..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (743 samples, 5.23%)</title><rect x="73.3479%" y="325" width="5.2291%" height="15" fill="rgb(230,182,32)" fg:x="10422" fg:w="743"/><text x="73.5979%" y="335.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (634 samples, 4.46%)</title><rect x="74.1150%" y="309" width="4.4620%" height="15" fill="rgb(242,56,43)" fg:x="10531" fg:w="634"/><text x="74.3650%" y="319.50">&lt;core..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="78.5629%" y="293" width="0.0141%" height="15" fill="rgb(233,99,24)" fg:x="11163" fg:w="2"/><text x="78.8129%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (2 samples, 0.01%)</title><rect x="78.8374%" y="293" width="0.0141%" height="15" fill="rgb(234,209,42)" fg:x="11202" fg:w="2"/><text x="79.0874%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.29%)</title><rect x="78.6051%" y="309" width="0.2885%" height="15" fill="rgb(227,7,12)" fg:x="11169" fg:w="41"/><text x="78.8551%" y="319.50"></text></g><g><title>core::ptr::read (6 samples, 0.04%)</title><rect x="78.8514%" y="293" width="0.0422%" height="15" fill="rgb(245,203,43)" fg:x="11204" fg:w="6"/><text x="79.1014%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="79.7030%" y="133" width="0.0282%" height="15" fill="rgb(238,205,33)" fg:x="11325" fg:w="4"/><text x="79.9530%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.03%)</title><rect x="79.7030%" y="117" width="0.0282%" height="15" fill="rgb(231,56,7)" fg:x="11325" fg:w="4"/><text x="79.9530%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="79.7030%" y="165" width="0.0352%" height="15" fill="rgb(244,186,29)" fg:x="11325" fg:w="5"/><text x="79.9530%" y="175.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (5 samples, 0.04%)</title><rect x="79.7030%" y="149" width="0.0352%" height="15" fill="rgb(234,111,31)" fg:x="11325" fg:w="5"/><text x="79.9530%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="79.7452%" y="165" width="0.0141%" height="15" fill="rgb(241,149,10)" fg:x="11331" fg:w="2"/><text x="79.9952%" y="175.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="79.7452%" y="149" width="0.0141%" height="15" fill="rgb(249,206,44)" fg:x="11331" fg:w="2"/><text x="79.9952%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (2 samples, 0.01%)</title><rect x="79.7452%" y="133" width="0.0141%" height="15" fill="rgb(251,153,30)" fg:x="11331" fg:w="2"/><text x="79.9952%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (2 samples, 0.01%)</title><rect x="79.7452%" y="117" width="0.0141%" height="15" fill="rgb(239,152,38)" fg:x="11331" fg:w="2"/><text x="79.9952%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="79.7452%" y="101" width="0.0141%" height="15" fill="rgb(249,139,47)" fg:x="11331" fg:w="2"/><text x="79.9952%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="79.7452%" y="85" width="0.0141%" height="15" fill="rgb(244,64,35)" fg:x="11331" fg:w="2"/><text x="79.9952%" y="95.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="79.7452%" y="69" width="0.0141%" height="15" fill="rgb(216,46,15)" fg:x="11331" fg:w="2"/><text x="79.9952%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.02%)</title><rect x="79.8156%" y="37" width="0.0211%" height="15" fill="rgb(250,74,19)" fg:x="11341" fg:w="3"/><text x="80.0656%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.04%)</title><rect x="79.8086%" y="53" width="0.0352%" height="15" fill="rgb(249,42,33)" fg:x="11340" fg:w="5"/><text x="80.0586%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.06%)</title><rect x="79.8719%" y="37" width="0.0633%" height="15" fill="rgb(242,149,17)" fg:x="11349" fg:w="9"/><text x="80.1219%" y="47.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (28 samples, 0.20%)</title><rect x="79.7593%" y="101" width="0.1971%" height="15" fill="rgb(244,29,21)" fg:x="11333" fg:w="28"/><text x="80.0093%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (28 samples, 0.20%)</title><rect x="79.7593%" y="85" width="0.1971%" height="15" fill="rgb(220,130,37)" fg:x="11333" fg:w="28"/><text x="80.0093%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (28 samples, 0.20%)</title><rect x="79.7593%" y="69" width="0.1971%" height="15" fill="rgb(211,67,2)" fg:x="11333" fg:w="28"/><text x="80.0093%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16 samples, 0.11%)</title><rect x="79.8438%" y="53" width="0.1126%" height="15" fill="rgb(235,68,52)" fg:x="11345" fg:w="16"/><text x="80.0938%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.02%)</title><rect x="79.9353%" y="37" width="0.0211%" height="15" fill="rgb(246,142,3)" fg:x="11358" fg:w="3"/><text x="80.1853%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (31 samples, 0.22%)</title><rect x="79.7593%" y="165" width="0.2182%" height="15" fill="rgb(241,25,7)" fg:x="11333" fg:w="31"/><text x="80.0093%" y="175.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (31 samples, 0.22%)</title><rect x="79.7593%" y="149" width="0.2182%" height="15" fill="rgb(242,119,39)" fg:x="11333" fg:w="31"/><text x="80.0093%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (31 samples, 0.22%)</title><rect x="79.7593%" y="133" width="0.2182%" height="15" fill="rgb(241,98,45)" fg:x="11333" fg:w="31"/><text x="80.0093%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31 samples, 0.22%)</title><rect x="79.7593%" y="117" width="0.2182%" height="15" fill="rgb(254,28,30)" fg:x="11333" fg:w="31"/><text x="80.0093%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="79.9564%" y="101" width="0.0211%" height="15" fill="rgb(241,142,54)" fg:x="11361" fg:w="3"/><text x="80.2064%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (6 samples, 0.04%)</title><rect x="79.9916%" y="133" width="0.0422%" height="15" fill="rgb(222,85,15)" fg:x="11366" fg:w="6"/><text x="80.2416%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (4 samples, 0.03%)</title><rect x="80.0056%" y="117" width="0.0282%" height="15" fill="rgb(210,85,47)" fg:x="11368" fg:w="4"/><text x="80.2556%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.03%)</title><rect x="80.0056%" y="101" width="0.0282%" height="15" fill="rgb(224,206,25)" fg:x="11368" fg:w="4"/><text x="80.2556%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (12 samples, 0.08%)</title><rect x="80.0338%" y="133" width="0.0845%" height="15" fill="rgb(243,201,19)" fg:x="11372" fg:w="12"/><text x="80.2838%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (11 samples, 0.08%)</title><rect x="80.0408%" y="117" width="0.0774%" height="15" fill="rgb(236,59,4)" fg:x="11373" fg:w="11"/><text x="80.2908%" y="127.50"></text></g><g><title>hashbrown::raw::is_full (11 samples, 0.08%)</title><rect x="80.0408%" y="101" width="0.0774%" height="15" fill="rgb(254,179,45)" fg:x="11373" fg:w="11"/><text x="80.2908%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (30 samples, 0.21%)</title><rect x="79.9775%" y="149" width="0.2111%" height="15" fill="rgb(226,14,10)" fg:x="11364" fg:w="30"/><text x="80.2275%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.06%)</title><rect x="80.1253%" y="133" width="0.0633%" height="15" fill="rgb(244,27,41)" fg:x="11385" fg:w="9"/><text x="80.3753%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.06%)</title><rect x="80.1253%" y="117" width="0.0633%" height="15" fill="rgb(235,35,32)" fg:x="11385" fg:w="9"/><text x="80.3753%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.06%)</title><rect x="80.1253%" y="101" width="0.0633%" height="15" fill="rgb(218,68,31)" fg:x="11385" fg:w="9"/><text x="80.3753%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (35 samples, 0.25%)</title><rect x="79.9775%" y="165" width="0.2463%" height="15" fill="rgb(207,120,37)" fg:x="11364" fg:w="35"/><text x="80.2275%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (5 samples, 0.04%)</title><rect x="80.1886%" y="149" width="0.0352%" height="15" fill="rgb(227,98,0)" fg:x="11394" fg:w="5"/><text x="80.4386%" y="159.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.03%)</title><rect x="80.1957%" y="133" width="0.0282%" height="15" fill="rgb(207,7,3)" fg:x="11395" fg:w="4"/><text x="80.4457%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.01%)</title><rect x="80.2238%" y="133" width="0.0141%" height="15" fill="rgb(206,98,19)" fg:x="11399" fg:w="2"/><text x="80.4738%" y="143.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.01%)</title><rect x="80.2238%" y="117" width="0.0141%" height="15" fill="rgb(217,5,26)" fg:x="11399" fg:w="2"/><text x="80.4738%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="80.2238%" y="101" width="0.0141%" height="15" fill="rgb(235,190,38)" fg:x="11399" fg:w="2"/><text x="80.4738%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (8 samples, 0.06%)</title><rect x="80.2379%" y="133" width="0.0563%" height="15" fill="rgb(247,86,24)" fg:x="11401" fg:w="8"/><text x="80.4879%" y="143.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (7 samples, 0.05%)</title><rect x="80.2449%" y="117" width="0.0493%" height="15" fill="rgb(205,101,16)" fg:x="11402" fg:w="7"/><text x="80.4949%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.05%)</title><rect x="80.2449%" y="101" width="0.0493%" height="15" fill="rgb(246,168,33)" fg:x="11402" fg:w="7"/><text x="80.4949%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.05%)</title><rect x="80.2449%" y="85" width="0.0493%" height="15" fill="rgb(231,114,1)" fg:x="11402" fg:w="7"/><text x="80.4949%" y="95.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.05%)</title><rect x="80.2449%" y="69" width="0.0493%" height="15" fill="rgb(207,184,53)" fg:x="11402" fg:w="7"/><text x="80.4949%" y="79.50"></text></g><g><title>malloc (5 samples, 0.04%)</title><rect x="80.2590%" y="53" width="0.0352%" height="15" fill="rgb(224,95,51)" fg:x="11404" fg:w="5"/><text x="80.5090%" y="63.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (88 samples, 0.62%)</title><rect x="79.6819%" y="245" width="0.6193%" height="15" fill="rgb(212,188,45)" fg:x="11322" fg:w="88"/><text x="79.9319%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (88 samples, 0.62%)</title><rect x="79.6819%" y="229" width="0.6193%" height="15" fill="rgb(223,154,38)" fg:x="11322" fg:w="88"/><text x="79.9319%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (86 samples, 0.61%)</title><rect x="79.6960%" y="213" width="0.6053%" height="15" fill="rgb(251,22,52)" fg:x="11324" fg:w="86"/><text x="79.9460%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (86 samples, 0.61%)</title><rect x="79.6960%" y="197" width="0.6053%" height="15" fill="rgb(229,209,22)" fg:x="11324" fg:w="86"/><text x="79.9460%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (85 samples, 0.60%)</title><rect x="79.7030%" y="181" width="0.5982%" height="15" fill="rgb(234,138,34)" fg:x="11325" fg:w="85"/><text x="79.9530%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (11 samples, 0.08%)</title><rect x="80.2238%" y="165" width="0.0774%" height="15" fill="rgb(212,95,11)" fg:x="11399" fg:w="11"/><text x="80.4738%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (11 samples, 0.08%)</title><rect x="80.2238%" y="149" width="0.0774%" height="15" fill="rgb(240,179,47)" fg:x="11399" fg:w="11"/><text x="80.4738%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (76 samples, 0.53%)</title><rect x="80.9698%" y="149" width="0.5349%" height="15" fill="rgb(240,163,11)" fg:x="11505" fg:w="76"/><text x="81.2198%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (194 samples, 1.37%)</title><rect x="80.6109%" y="165" width="1.3653%" height="15" fill="rgb(236,37,12)" fg:x="11454" fg:w="194"/><text x="80.8609%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (67 samples, 0.47%)</title><rect x="81.5047%" y="149" width="0.4715%" height="15" fill="rgb(232,164,16)" fg:x="11581" fg:w="67"/><text x="81.7547%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (172 samples, 1.21%)</title><rect x="83.0741%" y="149" width="1.2105%" height="15" fill="rgb(244,205,15)" fg:x="11804" fg:w="172"/><text x="83.3241%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (661 samples, 4.65%)</title><rect x="80.3153%" y="213" width="4.6520%" height="15" fill="rgb(223,117,47)" fg:x="11412" fg:w="661"/><text x="80.5653%" y="223.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (661 samples, 4.65%)</title><rect x="80.3153%" y="197" width="4.6520%" height="15" fill="rgb(244,107,35)" fg:x="11412" fg:w="661"/><text x="80.5653%" y="207.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (661 samples, 4.65%)</title><rect x="80.3153%" y="181" width="4.6520%" height="15" fill="rgb(205,140,8)" fg:x="11412" fg:w="661"/><text x="80.5653%" y="191.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (425 samples, 2.99%)</title><rect x="81.9762%" y="165" width="2.9911%" height="15" fill="rgb(228,84,46)" fg:x="11648" fg:w="425"/><text x="82.2262%" y="175.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (97 samples, 0.68%)</title><rect x="84.2846%" y="149" width="0.6827%" height="15" fill="rgb(254,188,9)" fg:x="11976" fg:w="97"/><text x="84.5346%" y="159.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (68 samples, 0.48%)</title><rect x="84.9673%" y="213" width="0.4786%" height="15" fill="rgb(206,112,54)" fg:x="12073" fg:w="68"/><text x="85.2173%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (68 samples, 0.48%)</title><rect x="84.9673%" y="197" width="0.4786%" height="15" fill="rgb(216,84,49)" fg:x="12073" fg:w="68"/><text x="85.2173%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (68 samples, 0.48%)</title><rect x="84.9673%" y="181" width="0.4786%" height="15" fill="rgb(214,194,35)" fg:x="12073" fg:w="68"/><text x="85.2173%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (68 samples, 0.48%)</title><rect x="84.9673%" y="165" width="0.4786%" height="15" fill="rgb(249,28,3)" fg:x="12073" fg:w="68"/><text x="85.2173%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (735 samples, 5.17%)</title><rect x="80.3012%" y="245" width="5.1728%" height="15" fill="rgb(222,56,52)" fg:x="11410" fg:w="735"/><text x="80.5512%" y="255.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (735 samples, 5.17%)</title><rect x="80.3012%" y="229" width="5.1728%" height="15" fill="rgb(245,217,50)" fg:x="11410" fg:w="735"/><text x="80.5512%" y="239.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="85.4458%" y="213" width="0.0282%" height="15" fill="rgb(213,201,24)" fg:x="12141" fg:w="4"/><text x="85.6958%" y="223.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (4 samples, 0.03%)</title><rect x="85.4458%" y="197" width="0.0282%" height="15" fill="rgb(248,116,28)" fg:x="12141" fg:w="4"/><text x="85.6958%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (4 samples, 0.03%)</title><rect x="85.4458%" y="181" width="0.0282%" height="15" fill="rgb(219,72,43)" fg:x="12141" fg:w="4"/><text x="85.6958%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u32 (4 samples, 0.03%)</title><rect x="85.4458%" y="165" width="0.0282%" height="15" fill="rgb(209,138,14)" fg:x="12141" fg:w="4"/><text x="85.6958%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="85.4458%" y="149" width="0.0282%" height="15" fill="rgb(222,18,33)" fg:x="12141" fg:w="4"/><text x="85.6958%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="85.4458%" y="133" width="0.0282%" height="15" fill="rgb(213,199,7)" fg:x="12141" fg:w="4"/><text x="85.6958%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="85.4458%" y="117" width="0.0282%" height="15" fill="rgb(250,110,10)" fg:x="12141" fg:w="4"/><text x="85.6958%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.03%)</title><rect x="85.4458%" y="101" width="0.0282%" height="15" fill="rgb(248,123,6)" fg:x="12141" fg:w="4"/><text x="85.6958%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.02%)</title><rect x="85.4951%" y="229" width="0.0211%" height="15" fill="rgb(206,91,31)" fg:x="12148" fg:w="3"/><text x="85.7451%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.02%)</title><rect x="85.4951%" y="213" width="0.0211%" height="15" fill="rgb(211,154,13)" fg:x="12148" fg:w="3"/><text x="85.7451%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.02%)</title><rect x="85.4951%" y="197" width="0.0211%" height="15" fill="rgb(225,148,7)" fg:x="12148" fg:w="3"/><text x="85.7451%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.02%)</title><rect x="85.4951%" y="181" width="0.0211%" height="15" fill="rgb(220,160,43)" fg:x="12148" fg:w="3"/><text x="85.7451%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 0.56%)</title><rect x="86.1496%" y="213" width="0.5630%" height="15" fill="rgb(213,52,39)" fg:x="12241" fg:w="80"/><text x="86.3996%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (77 samples, 0.54%)</title><rect x="86.1707%" y="197" width="0.5419%" height="15" fill="rgb(243,137,7)" fg:x="12244" fg:w="77"/><text x="86.4207%" y="207.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (8 samples, 0.06%)</title><rect x="86.6563%" y="181" width="0.0563%" height="15" fill="rgb(230,79,13)" fg:x="12313" fg:w="8"/><text x="86.9063%" y="191.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (4 samples, 0.03%)</title><rect x="86.7126%" y="213" width="0.0282%" height="15" fill="rgb(247,105,23)" fg:x="12321" fg:w="4"/><text x="86.9626%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (189 samples, 1.33%)</title><rect x="86.7408%" y="213" width="1.3301%" height="15" fill="rgb(223,179,41)" fg:x="12325" fg:w="189"/><text x="86.9908%" y="223.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (154 samples, 1.08%)</title><rect x="86.9871%" y="197" width="1.0838%" height="15" fill="rgb(218,9,34)" fg:x="12360" fg:w="154"/><text x="87.2371%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (154 samples, 1.08%)</title><rect x="86.9871%" y="181" width="1.0838%" height="15" fill="rgb(222,106,8)" fg:x="12360" fg:w="154"/><text x="87.2371%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (154 samples, 1.08%)</title><rect x="86.9871%" y="165" width="1.0838%" height="15" fill="rgb(211,220,0)" fg:x="12360" fg:w="154"/><text x="87.2371%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (111 samples, 0.78%)</title><rect x="88.0780%" y="213" width="0.7812%" height="15" fill="rgb(229,52,16)" fg:x="12515" fg:w="111"/><text x="88.3280%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (7 samples, 0.05%)</title><rect x="88.8592%" y="213" width="0.0493%" height="15" fill="rgb(212,155,18)" fg:x="12626" fg:w="7"/><text x="89.1092%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7 samples, 0.05%)</title><rect x="88.8592%" y="197" width="0.0493%" height="15" fill="rgb(242,21,14)" fg:x="12626" fg:w="7"/><text x="89.1092%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.05%)</title><rect x="88.8592%" y="181" width="0.0493%" height="15" fill="rgb(222,19,48)" fg:x="12626" fg:w="7"/><text x="89.1092%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (86 samples, 0.61%)</title><rect x="88.9084%" y="213" width="0.6053%" height="15" fill="rgb(232,45,27)" fg:x="12633" fg:w="86"/><text x="89.1584%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (86 samples, 0.61%)</title><rect x="88.9084%" y="197" width="0.6053%" height="15" fill="rgb(249,103,42)" fg:x="12633" fg:w="86"/><text x="89.1584%" y="207.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,511 samples, 10.63%)</title><rect x="78.9218%" y="261" width="10.6341%" height="15" fill="rgb(246,81,33)" fg:x="11214" fg:w="1511"/><text x="79.1718%" y="271.50">hashbrown::rustc..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (580 samples, 4.08%)</title><rect x="85.4740%" y="245" width="4.0819%" height="15" fill="rgb(252,33,42)" fg:x="12145" fg:w="580"/><text x="85.7240%" y="255.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (574 samples, 4.04%)</title><rect x="85.5162%" y="229" width="4.0397%" height="15" fill="rgb(209,212,41)" fg:x="12151" fg:w="574"/><text x="85.7662%" y="239.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (6 samples, 0.04%)</title><rect x="89.5137%" y="213" width="0.0422%" height="15" fill="rgb(207,154,6)" fg:x="12719" fg:w="6"/><text x="89.7637%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.04%)</title><rect x="89.5137%" y="197" width="0.0422%" height="15" fill="rgb(223,64,47)" fg:x="12719" fg:w="6"/><text x="89.7637%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.04%)</title><rect x="89.5137%" y="181" width="0.0422%" height="15" fill="rgb(211,161,38)" fg:x="12719" fg:w="6"/><text x="89.7637%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1,553 samples, 10.93%)</title><rect x="78.8937%" y="277" width="10.9297%" height="15" fill="rgb(219,138,40)" fg:x="11210" fg:w="1553"/><text x="79.1437%" y="287.50">std::collections..</text></g><g><title>std::collections::hash::map::map_entry (38 samples, 0.27%)</title><rect x="89.5559%" y="261" width="0.2674%" height="15" fill="rgb(241,228,46)" fg:x="12725" fg:w="38"/><text x="89.8059%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (8 samples, 0.06%)</title><rect x="89.8515%" y="197" width="0.0563%" height="15" fill="rgb(223,209,38)" fg:x="12767" fg:w="8"/><text x="90.1015%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.01%)</title><rect x="89.8937%" y="181" width="0.0141%" height="15" fill="rgb(236,164,45)" fg:x="12773" fg:w="2"/><text x="90.1437%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.01%)</title><rect x="89.8937%" y="165" width="0.0141%" height="15" fill="rgb(231,15,5)" fg:x="12773" fg:w="2"/><text x="90.1437%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (9 samples, 0.06%)</title><rect x="89.9078%" y="197" width="0.0633%" height="15" fill="rgb(252,35,15)" fg:x="12775" fg:w="9"/><text x="90.1578%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (8 samples, 0.06%)</title><rect x="89.9148%" y="181" width="0.0563%" height="15" fill="rgb(248,181,18)" fg:x="12776" fg:w="8"/><text x="90.1648%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (18 samples, 0.13%)</title><rect x="89.8515%" y="213" width="0.1267%" height="15" fill="rgb(233,39,42)" fg:x="12767" fg:w="18"/><text x="90.1015%" y="223.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,623 samples, 11.42%)</title><rect x="78.5770%" y="357" width="11.4223%" height="15" fill="rgb(238,110,33)" fg:x="11165" fg:w="1623"/><text x="78.8270%" y="367.50">&lt;itertools::uniqu..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1,619 samples, 11.39%)</title><rect x="78.6051%" y="341" width="11.3942%" height="15" fill="rgb(233,195,10)" fg:x="11169" fg:w="1619"/><text x="78.8551%" y="351.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,619 samples, 11.39%)</title><rect x="78.6051%" y="325" width="11.3942%" height="15" fill="rgb(254,105,3)" fg:x="11169" fg:w="1619"/><text x="78.8551%" y="335.50">core::iter::trait..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (1,578 samples, 11.11%)</title><rect x="78.8937%" y="309" width="11.1056%" height="15" fill="rgb(221,225,9)" fg:x="11210" fg:w="1578"/><text x="79.1437%" y="319.50">core::iter::trai..</text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1,578 samples, 11.11%)</title><rect x="78.8937%" y="293" width="11.1056%" height="15" fill="rgb(224,227,45)" fg:x="11210" fg:w="1578"/><text x="79.1437%" y="303.50">&lt;itertools::uniq..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (25 samples, 0.18%)</title><rect x="89.8234%" y="277" width="0.1759%" height="15" fill="rgb(229,198,43)" fg:x="12763" fg:w="25"/><text x="90.0734%" y="287.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (25 samples, 0.18%)</title><rect x="89.8234%" y="261" width="0.1759%" height="15" fill="rgb(206,209,35)" fg:x="12763" fg:w="25"/><text x="90.0734%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (25 samples, 0.18%)</title><rect x="89.8234%" y="245" width="0.1759%" height="15" fill="rgb(245,195,53)" fg:x="12763" fg:w="25"/><text x="90.0734%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (21 samples, 0.15%)</title><rect x="89.8515%" y="229" width="0.1478%" height="15" fill="rgb(240,92,26)" fg:x="12767" fg:w="21"/><text x="90.1015%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (3 samples, 0.02%)</title><rect x="89.9782%" y="213" width="0.0211%" height="15" fill="rgb(207,40,23)" fg:x="12785" fg:w="3"/><text x="90.2282%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (3 samples, 0.02%)</title><rect x="89.9782%" y="197" width="0.0211%" height="15" fill="rgb(223,111,35)" fg:x="12785" fg:w="3"/><text x="90.2282%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="90.0063%" y="293" width="0.0211%" height="15" fill="rgb(229,147,28)" fg:x="12789" fg:w="3"/><text x="90.2563%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 0.06%)</title><rect x="90.0274%" y="277" width="0.0563%" height="15" fill="rgb(211,29,28)" fg:x="12792" fg:w="8"/><text x="90.2774%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 0.06%)</title><rect x="90.0274%" y="261" width="0.0563%" height="15" fill="rgb(228,72,33)" fg:x="12792" fg:w="8"/><text x="90.2774%" y="271.50"></text></g><g><title>alloc::alloc::realloc (8 samples, 0.06%)</title><rect x="90.0274%" y="245" width="0.0563%" height="15" fill="rgb(205,214,31)" fg:x="12792" fg:w="8"/><text x="90.2774%" y="255.50"></text></g><g><title>realloc (8 samples, 0.06%)</title><rect x="90.0274%" y="229" width="0.0563%" height="15" fill="rgb(224,111,15)" fg:x="12792" fg:w="8"/><text x="90.2774%" y="239.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="90.0415%" y="213" width="0.0422%" height="15" fill="rgb(253,21,26)" fg:x="12794" fg:w="6"/><text x="90.2915%" y="223.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="90.0486%" y="197" width="0.0352%" height="15" fill="rgb(245,139,43)" fg:x="12795" fg:w="5"/><text x="90.2986%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.06%)</title><rect x="90.0274%" y="293" width="0.0633%" height="15" fill="rgb(252,170,7)" fg:x="12792" fg:w="9"/><text x="90.2774%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (13 samples, 0.09%)</title><rect x="90.0063%" y="357" width="0.0915%" height="15" fill="rgb(231,118,14)" fg:x="12789" fg:w="13"/><text x="90.2563%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.09%)</title><rect x="90.0063%" y="341" width="0.0915%" height="15" fill="rgb(238,83,0)" fg:x="12789" fg:w="13"/><text x="90.2563%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.09%)</title><rect x="90.0063%" y="325" width="0.0915%" height="15" fill="rgb(221,39,39)" fg:x="12789" fg:w="13"/><text x="90.2563%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.09%)</title><rect x="90.0063%" y="309" width="0.0915%" height="15" fill="rgb(222,119,46)" fg:x="12789" fg:w="13"/><text x="90.2563%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (5 samples, 0.04%)</title><rect x="90.0978%" y="357" width="0.0352%" height="15" fill="rgb(222,165,49)" fg:x="12802" fg:w="5"/><text x="90.3478%" y="367.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="90.1401%" y="181" width="0.0141%" height="15" fill="rgb(219,113,52)" fg:x="12808" fg:w="2"/><text x="90.3901%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;,core::iter::adapters::skip::Skip&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt;&gt; (9 samples, 0.06%)</title><rect x="90.1330%" y="357" width="0.0633%" height="15" fill="rgb(214,7,15)" fg:x="12807" fg:w="9"/><text x="90.3830%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::skip::Skip&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt;&gt; (8 samples, 0.06%)</title><rect x="90.1401%" y="341" width="0.0563%" height="15" fill="rgb(235,32,4)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::skip::Skip&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (8 samples, 0.06%)</title><rect x="90.1401%" y="325" width="0.0563%" height="15" fill="rgb(238,90,54)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (8 samples, 0.06%)</title><rect x="90.1401%" y="309" width="0.0563%" height="15" fill="rgb(213,208,19)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.06%)</title><rect x="90.1401%" y="293" width="0.0563%" height="15" fill="rgb(233,156,4)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (8 samples, 0.06%)</title><rect x="90.1401%" y="277" width="0.0563%" height="15" fill="rgb(207,194,5)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.06%)</title><rect x="90.1401%" y="261" width="0.0563%" height="15" fill="rgb(206,111,30)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (8 samples, 0.06%)</title><rect x="90.1401%" y="245" width="0.0563%" height="15" fill="rgb(243,70,54)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.06%)</title><rect x="90.1401%" y="229" width="0.0563%" height="15" fill="rgb(242,28,8)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.06%)</title><rect x="90.1401%" y="213" width="0.0563%" height="15" fill="rgb(219,106,18)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.06%)</title><rect x="90.1401%" y="197" width="0.0563%" height="15" fill="rgb(244,222,10)" fg:x="12808" fg:w="8"/><text x="90.3901%" y="207.50"></text></g><g><title>cfree (6 samples, 0.04%)</title><rect x="90.1541%" y="181" width="0.0422%" height="15" fill="rgb(236,179,52)" fg:x="12810" fg:w="6"/><text x="90.4041%" y="191.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="90.1612%" y="165" width="0.0352%" height="15" fill="rgb(213,23,39)" fg:x="12811" fg:w="5"/><text x="90.4112%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="90.1823%" y="149" width="0.0141%" height="15" fill="rgb(238,48,10)" fg:x="12814" fg:w="2"/><text x="90.4323%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.01%)</title><rect x="90.1964%" y="325" width="0.0141%" height="15" fill="rgb(251,196,23)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="90.1964%" y="309" width="0.0141%" height="15" fill="rgb(250,152,24)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (2 samples, 0.01%)</title><rect x="90.1964%" y="293" width="0.0141%" height="15" fill="rgb(209,150,17)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="90.1964%" y="277" width="0.0141%" height="15" fill="rgb(234,202,34)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.01%)</title><rect x="90.1964%" y="261" width="0.0141%" height="15" fill="rgb(253,148,53)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="90.1964%" y="245" width="0.0141%" height="15" fill="rgb(218,129,16)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="90.1964%" y="229" width="0.0141%" height="15" fill="rgb(216,85,19)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="90.1964%" y="213" width="0.0141%" height="15" fill="rgb(235,228,7)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="223.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="90.1964%" y="197" width="0.0141%" height="15" fill="rgb(245,175,0)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="207.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="90.1964%" y="181" width="0.0141%" height="15" fill="rgb(208,168,36)" fg:x="12816" fg:w="2"/><text x="90.4464%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::unique_impl::Unique&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="90.1964%" y="357" width="0.0282%" height="15" fill="rgb(246,171,24)" fg:x="12816" fg:w="4"/><text x="90.4464%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::unique_impl::UniqueBy&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;,petgraph::graph_impl::NodeIndex,()&gt;&gt; (4 samples, 0.03%)</title><rect x="90.1964%" y="341" width="0.0282%" height="15" fill="rgb(215,142,24)" fg:x="12816" fg:w="4"/><text x="90.4464%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;petgraph::graph_impl::NodeIndex,()&gt;&gt; (2 samples, 0.01%)</title><rect x="90.2104%" y="325" width="0.0141%" height="15" fill="rgb(250,187,7)" fg:x="12818" fg:w="2"/><text x="90.4604%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;petgraph::graph_impl::NodeIndex,(),std::hash::random::RandomState&gt;&gt; (2 samples, 0.01%)</title><rect x="90.2104%" y="309" width="0.0141%" height="15" fill="rgb(228,66,33)" fg:x="12818" fg:w="2"/><text x="90.4604%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(petgraph::graph_impl::NodeIndex,())&gt;&gt; (2 samples, 0.01%)</title><rect x="90.2104%" y="293" width="0.0141%" height="15" fill="rgb(234,215,21)" fg:x="12818" fg:w="2"/><text x="90.4604%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="90.2104%" y="277" width="0.0141%" height="15" fill="rgb(222,191,20)" fg:x="12818" fg:w="2"/><text x="90.4604%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.01%)</title><rect x="90.2104%" y="261" width="0.0141%" height="15" fill="rgb(245,79,54)" fg:x="12818" fg:w="2"/><text x="90.4604%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (2 samples, 0.01%)</title><rect x="90.2104%" y="245" width="0.0141%" height="15" fill="rgb(240,10,37)" fg:x="12818" fg:w="2"/><text x="90.4604%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="90.2104%" y="229" width="0.0141%" height="15" fill="rgb(214,192,32)" fg:x="12818" fg:w="2"/><text x="90.4604%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4,183 samples, 29.44%)</title><rect x="63.7624%" y="389" width="29.4391%" height="15" fill="rgb(209,36,54)" fg:x="9060" fg:w="4183"/><text x="64.0124%" y="399.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_exten..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4,183 samples, 29.44%)</title><rect x="63.7624%" y="373" width="29.4391%" height="15" fill="rgb(220,10,11)" fg:x="9060" fg:w="4183"/><text x="64.0124%" y="383.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (423 samples, 2.98%)</title><rect x="90.2245%" y="357" width="2.9770%" height="15" fill="rgb(221,106,17)" fg:x="12820" fg:w="423"/><text x="90.4745%" y="367.50">cor..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (6 samples, 0.04%)</title><rect x="93.2015%" y="277" width="0.0422%" height="15" fill="rgb(251,142,44)" fg:x="13243" fg:w="6"/><text x="93.4515%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.04%)</title><rect x="93.2015%" y="261" width="0.0422%" height="15" fill="rgb(238,13,15)" fg:x="13243" fg:w="6"/><text x="93.4515%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.04%)</title><rect x="93.2015%" y="245" width="0.0422%" height="15" fill="rgb(208,107,27)" fg:x="13243" fg:w="6"/><text x="93.4515%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (6 samples, 0.04%)</title><rect x="93.2015%" y="229" width="0.0422%" height="15" fill="rgb(205,136,37)" fg:x="13243" fg:w="6"/><text x="93.4515%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (5 samples, 0.04%)</title><rect x="93.2085%" y="213" width="0.0352%" height="15" fill="rgb(250,205,27)" fg:x="13244" fg:w="5"/><text x="93.4585%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (4 samples, 0.03%)</title><rect x="93.2156%" y="197" width="0.0282%" height="15" fill="rgb(210,80,43)" fg:x="13245" fg:w="4"/><text x="93.4656%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (4 samples, 0.03%)</title><rect x="93.2156%" y="181" width="0.0282%" height="15" fill="rgb(247,160,36)" fg:x="13245" fg:w="4"/><text x="93.4656%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.02%)</title><rect x="93.2226%" y="165" width="0.0211%" height="15" fill="rgb(234,13,49)" fg:x="13246" fg:w="3"/><text x="93.4726%" y="175.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.02%)</title><rect x="93.2226%" y="149" width="0.0211%" height="15" fill="rgb(234,122,0)" fg:x="13246" fg:w="3"/><text x="93.4726%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="93.2226%" y="133" width="0.0211%" height="15" fill="rgb(207,146,38)" fg:x="13246" fg:w="3"/><text x="93.4726%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="93.2226%" y="117" width="0.0211%" height="15" fill="rgb(207,177,25)" fg:x="13246" fg:w="3"/><text x="93.4726%" y="127.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="93.2226%" y="101" width="0.0211%" height="15" fill="rgb(211,178,42)" fg:x="13246" fg:w="3"/><text x="93.4726%" y="111.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.01%)</title><rect x="93.2296%" y="85" width="0.0141%" height="15" fill="rgb(230,69,54)" fg:x="13247" fg:w="2"/><text x="93.4796%" y="95.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 0.06%)</title><rect x="93.2015%" y="309" width="0.0633%" height="15" fill="rgb(214,135,41)" fg:x="13243" fg:w="9"/><text x="93.4515%" y="319.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.06%)</title><rect x="93.2015%" y="293" width="0.0633%" height="15" fill="rgb(237,67,25)" fg:x="13243" fg:w="9"/><text x="93.4515%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.01%)</title><rect x="93.2508%" y="277" width="0.0141%" height="15" fill="rgb(222,189,50)" fg:x="13250" fg:w="2"/><text x="93.5008%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.01%)</title><rect x="93.2508%" y="261" width="0.0141%" height="15" fill="rgb(245,148,34)" fg:x="13250" fg:w="2"/><text x="93.5008%" y="271.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.08%)</title><rect x="93.2015%" y="389" width="0.0774%" height="15" fill="rgb(222,29,6)" fg:x="13243" fg:w="11"/><text x="93.4515%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (11 samples, 0.08%)</title><rect x="93.2015%" y="373" width="0.0774%" height="15" fill="rgb(221,189,43)" fg:x="13243" fg:w="11"/><text x="93.4515%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (11 samples, 0.08%)</title><rect x="93.2015%" y="357" width="0.0774%" height="15" fill="rgb(207,36,27)" fg:x="13243" fg:w="11"/><text x="93.4515%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (11 samples, 0.08%)</title><rect x="93.2015%" y="341" width="0.0774%" height="15" fill="rgb(217,90,24)" fg:x="13243" fg:w="11"/><text x="93.4515%" y="351.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (11 samples, 0.08%)</title><rect x="93.2015%" y="325" width="0.0774%" height="15" fill="rgb(224,66,35)" fg:x="13243" fg:w="11"/><text x="93.4515%" y="335.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.01%)</title><rect x="93.2648%" y="309" width="0.0141%" height="15" fill="rgb(221,13,50)" fg:x="13252" fg:w="2"/><text x="93.5148%" y="319.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.01%)</title><rect x="93.2648%" y="293" width="0.0141%" height="15" fill="rgb(236,68,49)" fg:x="13252" fg:w="2"/><text x="93.5148%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.01%)</title><rect x="93.2648%" y="277" width="0.0141%" height="15" fill="rgb(229,146,28)" fg:x="13252" fg:w="2"/><text x="93.5148%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (2 samples, 0.01%)</title><rect x="93.2648%" y="261" width="0.0141%" height="15" fill="rgb(225,31,38)" fg:x="13252" fg:w="2"/><text x="93.5148%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4,364 samples, 30.71%)</title><rect x="62.6434%" y="453" width="30.7129%" height="15" fill="rgb(250,208,3)" fg:x="8901" fg:w="4364"/><text x="62.8934%" y="463.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4,364 samples, 30.71%)</title><rect x="62.6434%" y="437" width="30.7129%" height="15" fill="rgb(246,54,23)" fg:x="8901" fg:w="4364"/><text x="62.8934%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,364 samples, 30.71%)</title><rect x="62.6434%" y="421" width="30.7129%" height="15" fill="rgb(243,76,11)" fg:x="8901" fg:w="4364"/><text x="62.8934%" y="431.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4,364 samples, 30.71%)</title><rect x="62.6434%" y="405" width="30.7129%" height="15" fill="rgb(245,21,50)" fg:x="8901" fg:w="4364"/><text x="62.8934%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.08%)</title><rect x="93.2789%" y="389" width="0.0774%" height="15" fill="rgb(228,9,43)" fg:x="13254" fg:w="11"/><text x="93.5289%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.08%)</title><rect x="93.2789%" y="373" width="0.0774%" height="15" fill="rgb(208,100,47)" fg:x="13254" fg:w="11"/><text x="93.5289%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.08%)</title><rect x="93.2789%" y="357" width="0.0774%" height="15" fill="rgb(232,26,8)" fg:x="13254" fg:w="11"/><text x="93.5289%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.08%)</title><rect x="93.2789%" y="341" width="0.0774%" height="15" fill="rgb(216,166,38)" fg:x="13254" fg:w="11"/><text x="93.5289%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.08%)</title><rect x="93.2789%" y="325" width="0.0774%" height="15" fill="rgb(251,202,51)" fg:x="13254" fg:w="11"/><text x="93.5289%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.08%)</title><rect x="93.2789%" y="309" width="0.0774%" height="15" fill="rgb(254,216,34)" fg:x="13254" fg:w="11"/><text x="93.5289%" y="319.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.08%)</title><rect x="93.2789%" y="293" width="0.0774%" height="15" fill="rgb(251,32,27)" fg:x="13254" fg:w="11"/><text x="93.5289%" y="303.50"></text></g><g><title>malloc (11 samples, 0.08%)</title><rect x="93.2789%" y="277" width="0.0774%" height="15" fill="rgb(208,127,28)" fg:x="13254" fg:w="11"/><text x="93.5289%" y="287.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="93.3141%" y="261" width="0.0422%" height="15" fill="rgb(224,137,22)" fg:x="13259" fg:w="6"/><text x="93.5641%" y="271.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="93.3352%" y="245" width="0.0211%" height="15" fill="rgb(254,70,32)" fg:x="13262" fg:w="3"/><text x="93.5852%" y="255.50"></text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (389 samples, 2.74%)</title><rect x="95.5943%" y="421" width="2.7377%" height="15" fill="rgb(229,75,37)" fg:x="13583" fg:w="389"/><text x="95.8443%" y="431.50">&lt;i..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (389 samples, 2.74%)</title><rect x="95.5943%" y="405" width="2.7377%" height="15" fill="rgb(252,64,23)" fg:x="13583" fg:w="389"/><text x="95.8443%" y="415.50">&lt;c..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (285 samples, 2.01%)</title><rect x="96.3263%" y="389" width="2.0058%" height="15" fill="rgb(232,162,48)" fg:x="13687" fg:w="285"/><text x="96.5763%" y="399.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (895 samples, 6.30%)</title><rect x="93.3563%" y="453" width="6.2988%" height="15" fill="rgb(246,160,12)" fg:x="13265" fg:w="895"/><text x="93.6063%" y="463.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (895 samples, 6.30%)</title><rect x="93.3563%" y="437" width="6.2988%" height="15" fill="rgb(247,166,0)" fg:x="13265" fg:w="895"/><text x="93.6063%" y="447.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (188 samples, 1.32%)</title><rect x="98.3320%" y="421" width="1.3231%" height="15" fill="rgb(249,219,21)" fg:x="13972" fg:w="188"/><text x="98.5820%" y="431.50"></text></g><g><title>main::update_sptree::_{{closure}} (188 samples, 1.32%)</title><rect x="98.3320%" y="405" width="1.3231%" height="15" fill="rgb(205,209,3)" fg:x="13972" fg:w="188"/><text x="98.5820%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (80 samples, 0.56%)</title><rect x="99.0921%" y="389" width="0.5630%" height="15" fill="rgb(243,44,1)" fg:x="14080" fg:w="80"/><text x="99.3421%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (80 samples, 0.56%)</title><rect x="99.0921%" y="373" width="0.5630%" height="15" fill="rgb(206,159,16)" fg:x="14080" fg:w="80"/><text x="99.3421%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (80 samples, 0.56%)</title><rect x="99.0921%" y="357" width="0.5630%" height="15" fill="rgb(244,77,30)" fg:x="14080" fg:w="80"/><text x="99.3421%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (9 samples, 0.06%)</title><rect x="99.6551%" y="453" width="0.0633%" height="15" fill="rgb(218,69,12)" fg:x="14160" fg:w="9"/><text x="99.9051%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (9 samples, 0.06%)</title><rect x="99.6551%" y="437" width="0.0633%" height="15" fill="rgb(212,87,7)" fg:x="14160" fg:w="9"/><text x="99.9051%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.16%)</title><rect x="99.7326%" y="405" width="0.1619%" height="15" fill="rgb(245,114,25)" fg:x="14171" fg:w="23"/><text x="99.9826%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.16%)</title><rect x="99.7326%" y="389" width="0.1619%" height="15" fill="rgb(210,61,42)" fg:x="14171" fg:w="23"/><text x="99.9826%" y="399.50"></text></g><g><title>cfree (23 samples, 0.16%)</title><rect x="99.7326%" y="373" width="0.1619%" height="15" fill="rgb(211,52,33)" fg:x="14171" fg:w="23"/><text x="99.9826%" y="383.50"></text></g><g><title>[libc.so.6] (19 samples, 0.13%)</title><rect x="99.7607%" y="357" width="0.1337%" height="15" fill="rgb(234,58,33)" fg:x="14175" fg:w="19"/><text x="100.0107%" y="367.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="99.8522%" y="341" width="0.0422%" height="15" fill="rgb(220,115,36)" fg:x="14188" fg:w="6"/><text x="100.1022%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (26 samples, 0.18%)</title><rect x="99.7185%" y="453" width="0.1830%" height="15" fill="rgb(243,153,54)" fg:x="14169" fg:w="26"/><text x="99.9685%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (26 samples, 0.18%)</title><rect x="99.7185%" y="437" width="0.1830%" height="15" fill="rgb(251,47,18)" fg:x="14169" fg:w="26"/><text x="99.9685%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.18%)</title><rect x="99.7185%" y="421" width="0.1830%" height="15" fill="rgb(242,102,42)" fg:x="14169" fg:w="26"/><text x="99.9685%" y="431.50"></text></g><g><title>itertools::Itertools::unique (2 samples, 0.01%)</title><rect x="99.9085%" y="453" width="0.0141%" height="15" fill="rgb(234,31,38)" fg:x="14196" fg:w="2"/><text x="100.1585%" y="463.50"></text></g><g><title>itertools::unique_impl::unique (2 samples, 0.01%)</title><rect x="99.9085%" y="437" width="0.0141%" height="15" fill="rgb(221,117,51)" fg:x="14196" fg:w="2"/><text x="100.1585%" y="447.50"></text></g><g><title>main::min_cost (13,972 samples, 98.33%)</title><rect x="1.6046%" y="485" width="98.3320%" height="15" fill="rgb(212,20,18)" fg:x="228" fg:w="13972"/><text x="1.8546%" y="495.50">main::min_cost</text></g><g><title>main::update_sptree (10,596 samples, 74.57%)</title><rect x="25.3642%" y="469" width="74.5725%" height="15" fill="rgb(245,133,36)" fg:x="3604" fg:w="10596"/><text x="25.6142%" y="479.50">main::update_sptree</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (2 samples, 0.01%)</title><rect x="99.9226%" y="453" width="0.0141%" height="15" fill="rgb(212,6,19)" fg:x="14198" fg:w="2"/><text x="100.1726%" y="463.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.01%)</title><rect x="99.9226%" y="437" width="0.0141%" height="15" fill="rgb(218,1,36)" fg:x="14198" fg:w="2"/><text x="100.1726%" y="447.50"></text></g><g><title>_start (13,974 samples, 98.35%)</title><rect x="1.6046%" y="629" width="98.3461%" height="15" fill="rgb(246,84,54)" fg:x="228" fg:w="13974"/><text x="1.8546%" y="639.50">_start</text></g><g><title>__libc_start_main (13,974 samples, 98.35%)</title><rect x="1.6046%" y="613" width="98.3461%" height="15" fill="rgb(242,110,6)" fg:x="228" fg:w="13974"/><text x="1.8546%" y="623.50">__libc_start_main</text></g><g><title>[libc.so.6] (13,974 samples, 98.35%)</title><rect x="1.6046%" y="597" width="98.3461%" height="15" fill="rgb(214,47,5)" fg:x="228" fg:w="13974"/><text x="1.8546%" y="607.50">[libc.so.6]</text></g><g><title>main (13,974 samples, 98.35%)</title><rect x="1.6046%" y="581" width="98.3461%" height="15" fill="rgb(218,159,25)" fg:x="228" fg:w="13974"/><text x="1.8546%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (13,974 samples, 98.35%)</title><rect x="1.6046%" y="565" width="98.3461%" height="15" fill="rgb(215,211,28)" fg:x="228" fg:w="13974"/><text x="1.8546%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (13,974 samples, 98.35%)</title><rect x="1.6046%" y="549" width="98.3461%" height="15" fill="rgb(238,59,32)" fg:x="228" fg:w="13974"/><text x="1.8546%" y="559.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,974 samples, 98.35%)</title><rect x="1.6046%" y="533" width="98.3461%" height="15" fill="rgb(226,82,3)" fg:x="228" fg:w="13974"/><text x="1.8546%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (13,974 samples, 98.35%)</title><rect x="1.6046%" y="517" width="98.3461%" height="15" fill="rgb(240,164,32)" fg:x="228" fg:w="13974"/><text x="1.8546%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (13,974 samples, 98.35%)</title><rect x="1.6046%" y="501" width="98.3461%" height="15" fill="rgb(232,46,7)" fg:x="228" fg:w="13974"/><text x="1.8546%" y="511.50">main::main</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.01%)</title><rect x="99.9367%" y="485" width="0.0141%" height="15" fill="rgb(229,129,53)" fg:x="14200" fg:w="2"/><text x="100.1867%" y="495.50"></text></g><g><title>all (14,209 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(234,188,29)" fg:x="0" fg:w="14209"/><text x="0.2500%" y="671.50"></text></g><g><title>main (14,209 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(246,141,4)" fg:x="0" fg:w="14209"/><text x="0.2500%" y="655.50">main</text></g><g><title>main::min_cost (6 samples, 0.04%)</title><rect x="99.9578%" y="629" width="0.0422%" height="15" fill="rgb(229,23,39)" fg:x="14203" fg:w="6"/><text x="100.2078%" y="639.50"></text></g><g><title>main::update_sptree (4 samples, 0.03%)</title><rect x="99.9718%" y="613" width="0.0282%" height="15" fill="rgb(206,12,3)" fg:x="14205" fg:w="4"/><text x="100.2218%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (3 samples, 0.02%)</title><rect x="99.9789%" y="597" width="0.0211%" height="15" fill="rgb(252,226,20)" fg:x="14206" fg:w="3"/><text x="100.2289%" y="607.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.02%)</title><rect x="99.9789%" y="581" width="0.0211%" height="15" fill="rgb(216,123,35)" fg:x="14206" fg:w="3"/><text x="100.2289%" y="591.50"></text></g></svg></svg>