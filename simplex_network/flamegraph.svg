<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="8159"><g><title>[libc.so.6] (6 samples, 0.07%)</title><rect x="0.0000%" y="469" width="0.0735%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50"></text></g><g><title>__libc_calloc (1 samples, 0.01%)</title><rect x="0.0735%" y="469" width="0.0123%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="1"/><text x="0.3235%" y="479.50"></text></g><g><title>[[heap]] (9 samples, 0.11%)</title><rect x="0.0000%" y="485" width="0.1103%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="9"/><text x="0.2500%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="0.0858%" y="469" width="0.0245%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="2"/><text x="0.3358%" y="479.50"></text></g><g><title>__libc_calloc (1 samples, 0.01%)</title><rect x="0.1103%" y="469" width="0.0123%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="1"/><text x="0.3603%" y="479.50"></text></g><g><title>__rdl_realloc (3 samples, 0.04%)</title><rect x="0.1226%" y="469" width="0.0368%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="3"/><text x="0.3726%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="0.1593%" y="469" width="0.0123%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="1"/><text x="0.4093%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="0.1716%" y="469" width="0.0123%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="1"/><text x="0.4216%" y="479.50"></text></g><g><title>[[stack]] (10 samples, 0.12%)</title><rect x="0.1103%" y="485" width="0.1226%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="10"/><text x="0.3603%" y="495.50"></text></g><g><title>realloc (4 samples, 0.05%)</title><rect x="0.1838%" y="469" width="0.0490%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="4"/><text x="0.4338%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.10%)</title><rect x="0.2329%" y="485" width="0.0981%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="8"/><text x="0.4829%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.3064%" y="469" width="0.0245%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="2"/><text x="0.5564%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.3064%" y="453" width="0.0245%" height="15" fill="rgb(216,20,37)" fg:x="25" fg:w="2"/><text x="0.5564%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.3064%" y="437" width="0.0245%" height="15" fill="rgb(206,188,39)" fg:x="25" fg:w="2"/><text x="0.5564%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.3187%" y="421" width="0.0123%" height="15" fill="rgb(217,207,13)" fg:x="26" fg:w="1"/><text x="0.5687%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.3187%" y="405" width="0.0123%" height="15" fill="rgb(231,73,38)" fg:x="26" fg:w="1"/><text x="0.5687%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.3187%" y="389" width="0.0123%" height="15" fill="rgb(225,20,46)" fg:x="26" fg:w="1"/><text x="0.5687%" y="399.50"></text></g><g><title>[libc.so.6] (10 samples, 0.12%)</title><rect x="0.3309%" y="485" width="0.1226%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="10"/><text x="0.5809%" y="495.50"></text></g><g><title>[libc.so.6] (21 samples, 0.26%)</title><rect x="0.4535%" y="469" width="0.2574%" height="15" fill="rgb(221,200,47)" fg:x="37" fg:w="21"/><text x="0.7035%" y="479.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="0.7109%" y="469" width="0.0123%" height="15" fill="rgb(226,26,5)" fg:x="58" fg:w="1"/><text x="0.9609%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="0.7231%" y="469" width="0.0245%" height="15" fill="rgb(249,33,26)" fg:x="59" fg:w="2"/><text x="0.9731%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="0.7231%" y="453" width="0.0245%" height="15" fill="rgb(235,183,28)" fg:x="59" fg:w="2"/><text x="0.9731%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.02%)</title><rect x="0.7231%" y="437" width="0.0245%" height="15" fill="rgb(221,5,38)" fg:x="59" fg:w="2"/><text x="0.9731%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.02%)</title><rect x="0.7231%" y="421" width="0.0245%" height="15" fill="rgb(247,18,42)" fg:x="59" fg:w="2"/><text x="0.9731%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.04%)</title><rect x="0.7476%" y="469" width="0.0368%" height="15" fill="rgb(241,131,45)" fg:x="61" fg:w="3"/><text x="0.9976%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.01%)</title><rect x="0.7722%" y="453" width="0.0123%" height="15" fill="rgb(249,31,29)" fg:x="63" fg:w="1"/><text x="1.0222%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.01%)</title><rect x="0.7722%" y="437" width="0.0123%" height="15" fill="rgb(225,111,53)" fg:x="63" fg:w="1"/><text x="1.0222%" y="447.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="0.7722%" y="421" width="0.0123%" height="15" fill="rgb(238,160,17)" fg:x="63" fg:w="1"/><text x="1.0222%" y="431.50"></text></g><g><title>cfree (3 samples, 0.04%)</title><rect x="0.7844%" y="469" width="0.0368%" height="15" fill="rgb(214,148,48)" fg:x="64" fg:w="3"/><text x="1.0344%" y="479.50"></text></g><g><title>malloc (3 samples, 0.04%)</title><rect x="0.8212%" y="469" width="0.0368%" height="15" fill="rgb(232,36,49)" fg:x="67" fg:w="3"/><text x="1.0712%" y="479.50"></text></g><g><title>[unknown] (38 samples, 0.47%)</title><rect x="0.4535%" y="485" width="0.4657%" height="15" fill="rgb(209,103,24)" fg:x="37" fg:w="38"/><text x="0.7035%" y="495.50"></text></g><g><title>realloc (5 samples, 0.06%)</title><rect x="0.8579%" y="469" width="0.0613%" height="15" fill="rgb(229,88,8)" fg:x="70" fg:w="5"/><text x="1.1079%" y="479.50"></text></g><g><title>__rust_alloc_error_handler_should_panic (1 samples, 0.01%)</title><rect x="0.9192%" y="485" width="0.0123%" height="15" fill="rgb(213,181,19)" fg:x="75" fg:w="1"/><text x="1.1692%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="0.9192%" y="469" width="0.0123%" height="15" fill="rgb(254,191,54)" fg:x="75" fg:w="1"/><text x="1.1692%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="0.9192%" y="453" width="0.0123%" height="15" fill="rgb(241,83,37)" fg:x="75" fg:w="1"/><text x="1.1692%" y="463.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="0.9560%" y="245" width="0.0245%" height="15" fill="rgb(233,36,39)" fg:x="78" fg:w="2"/><text x="1.2060%" y="255.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="0.9805%" y="245" width="0.0123%" height="15" fill="rgb(226,3,54)" fg:x="80" fg:w="1"/><text x="1.2305%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (42 samples, 0.51%)</title><rect x="0.9560%" y="325" width="0.5148%" height="15" fill="rgb(245,192,40)" fg:x="78" fg:w="42"/><text x="1.2060%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (42 samples, 0.51%)</title><rect x="0.9560%" y="309" width="0.5148%" height="15" fill="rgb(238,167,29)" fg:x="78" fg:w="42"/><text x="1.2060%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.51%)</title><rect x="0.9560%" y="293" width="0.5148%" height="15" fill="rgb(232,182,51)" fg:x="78" fg:w="42"/><text x="1.2060%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.51%)</title><rect x="0.9560%" y="277" width="0.5148%" height="15" fill="rgb(231,60,39)" fg:x="78" fg:w="42"/><text x="1.2060%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.51%)</title><rect x="0.9560%" y="261" width="0.5148%" height="15" fill="rgb(208,69,12)" fg:x="78" fg:w="42"/><text x="1.2060%" y="271.50"></text></g><g><title>cfree (39 samples, 0.48%)</title><rect x="0.9928%" y="245" width="0.4780%" height="15" fill="rgb(235,93,37)" fg:x="81" fg:w="39"/><text x="1.2428%" y="255.50"></text></g><g><title>[libc.so.6] (19 samples, 0.23%)</title><rect x="1.2379%" y="229" width="0.2329%" height="15" fill="rgb(213,116,39)" fg:x="101" fg:w="19"/><text x="1.4879%" y="239.50"></text></g><g><title>[libc.so.6] (6 samples, 0.07%)</title><rect x="1.3972%" y="213" width="0.0735%" height="15" fill="rgb(222,207,29)" fg:x="114" fg:w="6"/><text x="1.6472%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="1.4585%" y="197" width="0.0123%" height="15" fill="rgb(206,96,30)" fg:x="119" fg:w="1"/><text x="1.7085%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="1.6791%" y="309" width="0.0245%" height="15" fill="rgb(218,138,4)" fg:x="137" fg:w="2"/><text x="1.9291%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="1.6791%" y="293" width="0.0245%" height="15" fill="rgb(250,191,14)" fg:x="137" fg:w="2"/><text x="1.9291%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="1.6791%" y="277" width="0.0245%" height="15" fill="rgb(239,60,40)" fg:x="137" fg:w="2"/><text x="1.9291%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="1.7036%" y="309" width="0.0245%" height="15" fill="rgb(206,27,48)" fg:x="139" fg:w="2"/><text x="1.9536%" y="319.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="1.7036%" y="293" width="0.0245%" height="15" fill="rgb(225,35,8)" fg:x="139" fg:w="2"/><text x="1.9536%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="1.7159%" y="277" width="0.0123%" height="15" fill="rgb(250,213,24)" fg:x="140" fg:w="1"/><text x="1.9659%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1 samples, 0.01%)</title><rect x="1.7159%" y="261" width="0.0123%" height="15" fill="rgb(247,123,22)" fg:x="140" fg:w="1"/><text x="1.9659%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (17 samples, 0.21%)</title><rect x="1.7282%" y="309" width="0.2084%" height="15" fill="rgb(231,138,38)" fg:x="141" fg:w="17"/><text x="1.9782%" y="319.50"></text></g><g><title>main::get_reduced_cost_edgeindex (3 samples, 0.04%)</title><rect x="1.9365%" y="309" width="0.0368%" height="15" fill="rgb(231,145,46)" fg:x="158" fg:w="3"/><text x="2.1865%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="1.9488%" y="293" width="0.0245%" height="15" fill="rgb(251,118,11)" fg:x="159" fg:w="2"/><text x="2.1988%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="1.9488%" y="277" width="0.0245%" height="15" fill="rgb(217,147,25)" fg:x="159" fg:w="2"/><text x="2.1988%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="1.9488%" y="261" width="0.0245%" height="15" fill="rgb(247,81,37)" fg:x="159" fg:w="2"/><text x="2.1988%" y="271.50"></text></g><g><title>main::__update_node_potentials (42 samples, 0.51%)</title><rect x="1.4708%" y="325" width="0.5148%" height="15" fill="rgb(209,12,38)" fg:x="120" fg:w="42"/><text x="1.7208%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::raw_edges (1 samples, 0.01%)</title><rect x="1.9733%" y="309" width="0.0123%" height="15" fill="rgb(227,1,9)" fg:x="161" fg:w="1"/><text x="2.2233%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="1.9733%" y="293" width="0.0123%" height="15" fill="rgb(248,47,43)" fg:x="161" fg:w="1"/><text x="2.2233%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="1.9733%" y="277" width="0.0123%" height="15" fill="rgb(221,10,30)" fg:x="161" fg:w="1"/><text x="2.2233%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.01%)</title><rect x="1.9733%" y="261" width="0.0123%" height="15" fill="rgb(210,229,1)" fg:x="161" fg:w="1"/><text x="2.2233%" y="271.50"></text></g><g><title>main::_find_block_search (2 samples, 0.02%)</title><rect x="1.9855%" y="325" width="0.0245%" height="15" fill="rgb(222,148,37)" fg:x="162" fg:w="2"/><text x="2.2355%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (2 samples, 0.02%)</title><rect x="1.9855%" y="309" width="0.0245%" height="15" fill="rgb(234,67,33)" fg:x="162" fg:w="2"/><text x="2.2355%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (2 samples, 0.02%)</title><rect x="1.9855%" y="293" width="0.0245%" height="15" fill="rgb(247,98,35)" fg:x="162" fg:w="2"/><text x="2.2355%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="1.9855%" y="277" width="0.0245%" height="15" fill="rgb(247,138,52)" fg:x="162" fg:w="2"/><text x="2.2355%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="1.9855%" y="261" width="0.0245%" height="15" fill="rgb(213,79,30)" fg:x="162" fg:w="2"/><text x="2.2355%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (2 samples, 0.02%)</title><rect x="1.9855%" y="245" width="0.0245%" height="15" fill="rgb(246,177,23)" fg:x="162" fg:w="2"/><text x="2.2355%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.02%)</title><rect x="1.9855%" y="229" width="0.0245%" height="15" fill="rgb(230,62,27)" fg:x="162" fg:w="2"/><text x="2.2355%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.02%)</title><rect x="1.9855%" y="213" width="0.0245%" height="15" fill="rgb(216,154,8)" fg:x="162" fg:w="2"/><text x="2.2355%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.02%)</title><rect x="1.9855%" y="197" width="0.0245%" height="15" fill="rgb(244,35,45)" fg:x="162" fg:w="2"/><text x="2.2355%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.02%)</title><rect x="1.9855%" y="181" width="0.0245%" height="15" fill="rgb(251,115,12)" fg:x="162" fg:w="2"/><text x="2.2355%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.02%)</title><rect x="1.9855%" y="165" width="0.0245%" height="15" fill="rgb(240,54,50)" fg:x="162" fg:w="2"/><text x="2.2355%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (2 samples, 0.02%)</title><rect x="1.9855%" y="149" width="0.0245%" height="15" fill="rgb(233,84,52)" fg:x="162" fg:w="2"/><text x="2.2355%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.02%)</title><rect x="1.9855%" y="133" width="0.0245%" height="15" fill="rgb(207,117,47)" fg:x="162" fg:w="2"/><text x="2.2355%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (2 samples, 0.02%)</title><rect x="1.9855%" y="117" width="0.0245%" height="15" fill="rgb(249,43,39)" fg:x="162" fg:w="2"/><text x="2.2355%" y="127.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (2 samples, 0.02%)</title><rect x="1.9855%" y="101" width="0.0245%" height="15" fill="rgb(209,38,44)" fg:x="162" fg:w="2"/><text x="2.2355%" y="111.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="1.9855%" y="85" width="0.0245%" height="15" fill="rgb(236,212,23)" fg:x="162" fg:w="2"/><text x="2.2355%" y="95.50"></text></g><g><title>main::_find_block_search::_{{closure}} (2 samples, 0.02%)</title><rect x="1.9855%" y="69" width="0.0245%" height="15" fill="rgb(242,79,21)" fg:x="162" fg:w="2"/><text x="2.2355%" y="79.50"></text></g><g><title>main::get_reduced_cost_edgeindex (1 samples, 0.01%)</title><rect x="1.9978%" y="53" width="0.0123%" height="15" fill="rgb(211,96,35)" fg:x="163" fg:w="1"/><text x="2.2478%" y="63.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (1 samples, 0.01%)</title><rect x="1.9978%" y="37" width="0.0123%" height="15" fill="rgb(253,215,40)" fg:x="163" fg:w="1"/><text x="2.2478%" y="47.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (714 samples, 8.75%)</title><rect x="14.2542%" y="277" width="8.7511%" height="15" fill="rgb(211,81,21)" fg:x="1163" fg:w="714"/><text x="14.5042%" y="287.50">&lt;i32 as core..</text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (963 samples, 11.80%)</title><rect x="23.0053%" y="277" width="11.8029%" height="15" fill="rgb(208,190,38)" fg:x="1877" fg:w="963"/><text x="23.2553%" y="287.50">&lt;petgraph::graph_i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (963 samples, 11.80%)</title><rect x="23.0053%" y="261" width="11.8029%" height="15" fill="rgb(235,213,38)" fg:x="1877" fg:w="963"/><text x="23.2553%" y="271.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (963 samples, 11.80%)</title><rect x="23.0053%" y="245" width="11.8029%" height="15" fill="rgb(237,122,38)" fg:x="1877" fg:w="963"/><text x="23.2553%" y="255.50">core::slice::index..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (963 samples, 11.80%)</title><rect x="23.0053%" y="229" width="11.8029%" height="15" fill="rgb(244,218,35)" fg:x="1877" fg:w="963"/><text x="23.2553%" y="239.50">&lt;usize as core::sl..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,019 samples, 12.49%)</title><rect x="34.8082%" y="261" width="12.4893%" height="15" fill="rgb(240,68,47)" fg:x="2840" fg:w="1019"/><text x="35.0582%" y="271.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,019 samples, 12.49%)</title><rect x="34.8082%" y="245" width="12.4893%" height="15" fill="rgb(210,16,53)" fg:x="2840" fg:w="1019"/><text x="35.0582%" y="255.50">core::slice::index:..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,019 samples, 12.49%)</title><rect x="34.8082%" y="229" width="12.4893%" height="15" fill="rgb(235,124,12)" fg:x="2840" fg:w="1019"/><text x="35.0582%" y="239.50">&lt;usize as core::sli..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (213 samples, 2.61%)</title><rect x="47.2975%" y="261" width="2.6106%" height="15" fill="rgb(224,169,11)" fg:x="3859" fg:w="213"/><text x="47.5475%" y="271.50">&lt;i..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1,332 samples, 16.33%)</title><rect x="49.9081%" y="261" width="16.3255%" height="15" fill="rgb(250,166,2)" fg:x="4072" fg:w="1332"/><text x="50.1581%" y="271.50">&lt;i32 as core::ops::arith:..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (399 samples, 4.89%)</title><rect x="66.2336%" y="261" width="4.8903%" height="15" fill="rgb(242,216,29)" fg:x="5404" fg:w="399"/><text x="66.4836%" y="271.50">petgra..</text></g><g><title>main::_find_first_arc (5,653 samples, 69.29%)</title><rect x="2.0101%" y="325" width="69.2855%" height="15" fill="rgb(230,116,27)" fg:x="164" fg:w="5653"/><text x="2.2601%" y="335.50">main::_find_first_arc</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (5,653 samples, 69.29%)</title><rect x="2.0101%" y="309" width="69.2855%" height="15" fill="rgb(228,99,48)" fg:x="164" fg:w="5653"/><text x="2.2601%" y="319.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find</text></g><g><title>main::_find_first_arc::_{{closure}} (4,667 samples, 57.20%)</title><rect x="14.0949%" y="293" width="57.2006%" height="15" fill="rgb(253,11,6)" fg:x="1150" fg:w="4667"/><text x="14.3449%" y="303.50">main::_find_first_arc::_{{closure}}</text></g><g><title>main::get_reduced_cost_edgeindex (2,977 samples, 36.49%)</title><rect x="34.8082%" y="277" width="36.4873%" height="15" fill="rgb(247,143,39)" fg:x="2840" fg:w="2977"/><text x="35.0582%" y="287.50">main::get_reduced_cost_edgeindex</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (14 samples, 0.17%)</title><rect x="71.1239%" y="261" width="0.1716%" height="15" fill="rgb(236,97,10)" fg:x="5803" fg:w="14"/><text x="71.3739%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="71.3323%" y="293" width="0.0123%" height="15" fill="rgb(233,208,19)" fg:x="5820" fg:w="1"/><text x="71.5823%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="71.3323%" y="277" width="0.0123%" height="15" fill="rgb(216,164,2)" fg:x="5820" fg:w="1"/><text x="71.5823%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="71.3323%" y="261" width="0.0123%" height="15" fill="rgb(220,129,5)" fg:x="5820" fg:w="1"/><text x="71.5823%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.01%)</title><rect x="71.3323%" y="245" width="0.0123%" height="15" fill="rgb(242,17,10)" fg:x="5820" fg:w="1"/><text x="71.5823%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.01%)</title><rect x="71.3323%" y="229" width="0.0123%" height="15" fill="rgb(242,107,0)" fg:x="5820" fg:w="1"/><text x="71.5823%" y="239.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.01%)</title><rect x="71.3323%" y="213" width="0.0123%" height="15" fill="rgb(251,28,31)" fg:x="5820" fg:w="1"/><text x="71.5823%" y="223.50"></text></g><g><title>realloc (1 samples, 0.01%)</title><rect x="71.3323%" y="197" width="0.0123%" height="15" fill="rgb(233,223,10)" fg:x="5820" fg:w="1"/><text x="71.5823%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="71.3323%" y="181" width="0.0123%" height="15" fill="rgb(215,21,27)" fg:x="5820" fg:w="1"/><text x="71.5823%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="71.3323%" y="165" width="0.0123%" height="15" fill="rgb(232,23,21)" fg:x="5820" fg:w="1"/><text x="71.5823%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="71.3323%" y="309" width="0.0245%" height="15" fill="rgb(244,5,23)" fg:x="5820" fg:w="2"/><text x="71.5823%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="71.3445%" y="293" width="0.0123%" height="15" fill="rgb(226,81,46)" fg:x="5821" fg:w="1"/><text x="71.5945%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.01%)</title><rect x="71.3445%" y="277" width="0.0123%" height="15" fill="rgb(247,70,30)" fg:x="5821" fg:w="1"/><text x="71.5945%" y="287.50"></text></g><g><title>[libc.so.6] (3 samples, 0.04%)</title><rect x="71.3690%" y="197" width="0.0368%" height="15" fill="rgb(212,68,19)" fg:x="5823" fg:w="3"/><text x="71.6190%" y="207.50"></text></g><g><title>__libc_calloc (23 samples, 0.28%)</title><rect x="71.4058%" y="197" width="0.2819%" height="15" fill="rgb(240,187,13)" fg:x="5826" fg:w="23"/><text x="71.6558%" y="207.50"></text></g><g><title>[libc.so.6] (21 samples, 0.26%)</title><rect x="71.4303%" y="181" width="0.2574%" height="15" fill="rgb(223,113,26)" fg:x="5828" fg:w="21"/><text x="71.6803%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="71.6755%" y="165" width="0.0123%" height="15" fill="rgb(206,192,2)" fg:x="5848" fg:w="1"/><text x="71.9255%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (31 samples, 0.38%)</title><rect x="71.3568%" y="277" width="0.3799%" height="15" fill="rgb(241,108,4)" fg:x="5822" fg:w="31"/><text x="71.6068%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.38%)</title><rect x="71.3568%" y="261" width="0.3799%" height="15" fill="rgb(247,173,49)" fg:x="5822" fg:w="31"/><text x="71.6068%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (30 samples, 0.37%)</title><rect x="71.3690%" y="245" width="0.3677%" height="15" fill="rgb(224,114,35)" fg:x="5823" fg:w="30"/><text x="71.6190%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.37%)</title><rect x="71.3690%" y="229" width="0.3677%" height="15" fill="rgb(245,159,27)" fg:x="5823" fg:w="30"/><text x="71.6190%" y="239.50"></text></g><g><title>alloc::alloc::alloc_zeroed (30 samples, 0.37%)</title><rect x="71.3690%" y="213" width="0.3677%" height="15" fill="rgb(245,172,44)" fg:x="5823" fg:w="30"/><text x="71.6190%" y="223.50"></text></g><g><title>__rdl_alloc_zeroed (4 samples, 0.05%)</title><rect x="71.6877%" y="197" width="0.0490%" height="15" fill="rgb(236,23,11)" fg:x="5849" fg:w="4"/><text x="71.9377%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.04%)</title><rect x="71.7367%" y="261" width="0.0368%" height="15" fill="rgb(205,117,38)" fg:x="5853" fg:w="3"/><text x="71.9867%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.04%)</title><rect x="71.7367%" y="245" width="0.0368%" height="15" fill="rgb(237,72,25)" fg:x="5853" fg:w="3"/><text x="71.9867%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.15%)</title><rect x="71.7367%" y="277" width="0.1471%" height="15" fill="rgb(244,70,9)" fg:x="5853" fg:w="12"/><text x="71.9867%" y="287.50"></text></g><g><title>core::ptr::write (9 samples, 0.11%)</title><rect x="71.7735%" y="261" width="0.1103%" height="15" fill="rgb(217,125,39)" fg:x="5856" fg:w="9"/><text x="72.0235%" y="271.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.01%)</title><rect x="71.8838%" y="181" width="0.0123%" height="15" fill="rgb(235,36,10)" fg:x="5865" fg:w="1"/><text x="72.1338%" y="191.50"></text></g><g><title>alloc::vec::from_elem (54 samples, 0.66%)</title><rect x="71.3568%" y="309" width="0.6618%" height="15" fill="rgb(251,123,47)" fg:x="5822" fg:w="54"/><text x="71.6068%" y="319.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (54 samples, 0.66%)</title><rect x="71.3568%" y="293" width="0.6618%" height="15" fill="rgb(221,13,13)" fg:x="5822" fg:w="54"/><text x="71.6068%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.13%)</title><rect x="71.8838%" y="277" width="0.1348%" height="15" fill="rgb(238,131,9)" fg:x="5865" fg:w="11"/><text x="72.1338%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.13%)</title><rect x="71.8838%" y="261" width="0.1348%" height="15" fill="rgb(211,50,8)" fg:x="5865" fg:w="11"/><text x="72.1338%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.13%)</title><rect x="71.8838%" y="245" width="0.1348%" height="15" fill="rgb(245,182,24)" fg:x="5865" fg:w="11"/><text x="72.1338%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.13%)</title><rect x="71.8838%" y="229" width="0.1348%" height="15" fill="rgb(242,14,37)" fg:x="5865" fg:w="11"/><text x="72.1338%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.13%)</title><rect x="71.8838%" y="213" width="0.1348%" height="15" fill="rgb(246,228,12)" fg:x="5865" fg:w="11"/><text x="72.1338%" y="223.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.13%)</title><rect x="71.8838%" y="197" width="0.1348%" height="15" fill="rgb(213,55,15)" fg:x="5865" fg:w="11"/><text x="72.1338%" y="207.50"></text></g><g><title>malloc (10 samples, 0.12%)</title><rect x="71.8961%" y="181" width="0.1226%" height="15" fill="rgb(209,9,3)" fg:x="5866" fg:w="10"/><text x="72.1461%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="71.9696%" y="165" width="0.0490%" height="15" fill="rgb(230,59,30)" fg:x="5872" fg:w="4"/><text x="72.2196%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="72.0064%" y="149" width="0.0123%" height="15" fill="rgb(209,121,21)" fg:x="5875" fg:w="1"/><text x="72.2564%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (1 samples, 0.01%)</title><rect x="72.0186%" y="309" width="0.0123%" height="15" fill="rgb(220,109,13)" fg:x="5876" fg:w="1"/><text x="72.2686%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="73.0359%" y="213" width="0.0245%" height="15" fill="rgb(232,18,1)" fg:x="5959" fg:w="2"/><text x="73.2859%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="73.0359%" y="197" width="0.0245%" height="15" fill="rgb(215,41,42)" fg:x="5959" fg:w="2"/><text x="73.2859%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="73.0359%" y="181" width="0.0245%" height="15" fill="rgb(224,123,36)" fg:x="5959" fg:w="2"/><text x="73.2859%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.06%)</title><rect x="73.0604%" y="213" width="0.0613%" height="15" fill="rgb(240,125,3)" fg:x="5961" fg:w="5"/><text x="73.3104%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.06%)</title><rect x="73.0604%" y="197" width="0.0613%" height="15" fill="rgb(205,98,50)" fg:x="5961" fg:w="5"/><text x="73.3104%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.06%)</title><rect x="73.0604%" y="181" width="0.0613%" height="15" fill="rgb(205,185,37)" fg:x="5961" fg:w="5"/><text x="73.3104%" y="191.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (10 samples, 0.12%)</title><rect x="73.1217%" y="213" width="0.1226%" height="15" fill="rgb(238,207,15)" fg:x="5966" fg:w="10"/><text x="73.3717%" y="223.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (23 samples, 0.28%)</title><rect x="73.2443%" y="213" width="0.2819%" height="15" fill="rgb(213,199,42)" fg:x="5976" fg:w="23"/><text x="73.4943%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (23 samples, 0.28%)</title><rect x="73.2443%" y="197" width="0.2819%" height="15" fill="rgb(235,201,11)" fg:x="5976" fg:w="23"/><text x="73.4943%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (23 samples, 0.28%)</title><rect x="73.2443%" y="181" width="0.2819%" height="15" fill="rgb(207,46,11)" fg:x="5976" fg:w="23"/><text x="73.4943%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (23 samples, 0.28%)</title><rect x="73.2443%" y="165" width="0.2819%" height="15" fill="rgb(241,35,35)" fg:x="5976" fg:w="23"/><text x="73.4943%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (124 samples, 1.52%)</title><rect x="72.0309%" y="277" width="1.5198%" height="15" fill="rgb(243,32,47)" fg:x="5877" fg:w="124"/><text x="72.2809%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (111 samples, 1.36%)</title><rect x="72.1902%" y="261" width="1.3605%" height="15" fill="rgb(247,202,23)" fg:x="5890" fg:w="111"/><text x="72.4402%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (111 samples, 1.36%)</title><rect x="72.1902%" y="245" width="1.3605%" height="15" fill="rgb(219,102,11)" fg:x="5890" fg:w="111"/><text x="72.4402%" y="255.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (111 samples, 1.36%)</title><rect x="72.1902%" y="229" width="1.3605%" height="15" fill="rgb(243,110,44)" fg:x="5890" fg:w="111"/><text x="72.4402%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (2 samples, 0.02%)</title><rect x="73.5262%" y="213" width="0.0245%" height="15" fill="rgb(222,74,54)" fg:x="5999" fg:w="2"/><text x="73.7762%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (23 samples, 0.28%)</title><rect x="74.1145%" y="213" width="0.2819%" height="15" fill="rgb(216,99,12)" fg:x="6047" fg:w="23"/><text x="74.3645%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (23 samples, 0.28%)</title><rect x="74.1145%" y="197" width="0.2819%" height="15" fill="rgb(226,22,26)" fg:x="6047" fg:w="23"/><text x="74.3645%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (23 samples, 0.28%)</title><rect x="74.1145%" y="181" width="0.2819%" height="15" fill="rgb(217,163,10)" fg:x="6047" fg:w="23"/><text x="74.3645%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (13 samples, 0.16%)</title><rect x="74.3964%" y="197" width="0.1593%" height="15" fill="rgb(213,25,53)" fg:x="6070" fg:w="13"/><text x="74.6464%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (13 samples, 0.16%)</title><rect x="74.3964%" y="181" width="0.1593%" height="15" fill="rgb(252,105,26)" fg:x="6070" fg:w="13"/><text x="74.6464%" y="191.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (266 samples, 3.26%)</title><rect x="77.4972%" y="181" width="3.2602%" height="15" fill="rgb(220,39,43)" fg:x="6323" fg:w="266"/><text x="77.7472%" y="191.50">&lt;pe..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (266 samples, 3.26%)</title><rect x="77.4972%" y="165" width="3.2602%" height="15" fill="rgb(229,68,48)" fg:x="6323" fg:w="266"/><text x="77.7472%" y="175.50">cor..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (590 samples, 7.23%)</title><rect x="73.6855%" y="261" width="7.2313%" height="15" fill="rgb(252,8,32)" fg:x="6012" fg:w="590"/><text x="73.9355%" y="271.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (576 samples, 7.06%)</title><rect x="73.8571%" y="245" width="7.0597%" height="15" fill="rgb(223,20,43)" fg:x="6026" fg:w="576"/><text x="74.1071%" y="255.50">core::ite..</text></g><g><title>main::compute_flowchange::_{{closure}} (576 samples, 7.06%)</title><rect x="73.8571%" y="229" width="7.0597%" height="15" fill="rgb(229,81,49)" fg:x="6026" fg:w="576"/><text x="74.1071%" y="239.50">main::com..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (532 samples, 6.52%)</title><rect x="74.3964%" y="213" width="6.5204%" height="15" fill="rgb(236,28,36)" fg:x="6070" fg:w="532"/><text x="74.6464%" y="223.50">petgraph:..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (519 samples, 6.36%)</title><rect x="74.5557%" y="197" width="6.3611%" height="15" fill="rgb(249,185,26)" fg:x="6083" fg:w="519"/><text x="74.8057%" y="207.50">petgraph..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (13 samples, 0.16%)</title><rect x="80.7574%" y="181" width="0.1593%" height="15" fill="rgb(249,174,33)" fg:x="6589" fg:w="13"/><text x="81.0074%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (13 samples, 0.16%)</title><rect x="80.7574%" y="165" width="0.1593%" height="15" fill="rgb(233,201,37)" fg:x="6589" fg:w="13"/><text x="81.0074%" y="175.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="80.9658%" y="149" width="0.0245%" height="15" fill="rgb(221,78,26)" fg:x="6606" fg:w="2"/><text x="81.2158%" y="159.50"></text></g><g><title>&lt;(A,A) as itertools::tuple_impl::TupleCollect&gt;::collect_from_iter_no_buf (3 samples, 0.04%)</title><rect x="80.9658%" y="245" width="0.0368%" height="15" fill="rgb(250,127,30)" fg:x="6606" fg:w="3"/><text x="81.2158%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="80.9658%" y="229" width="0.0368%" height="15" fill="rgb(230,49,44)" fg:x="6606" fg:w="3"/><text x="81.2158%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (3 samples, 0.04%)</title><rect x="80.9658%" y="213" width="0.0368%" height="15" fill="rgb(229,67,23)" fg:x="6606" fg:w="3"/><text x="81.2158%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (3 samples, 0.04%)</title><rect x="80.9658%" y="197" width="0.0368%" height="15" fill="rgb(249,83,47)" fg:x="6606" fg:w="3"/><text x="81.2158%" y="207.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="80.9658%" y="181" width="0.0368%" height="15" fill="rgb(215,43,3)" fg:x="6606" fg:w="3"/><text x="81.2158%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="80.9658%" y="165" width="0.0368%" height="15" fill="rgb(238,154,13)" fg:x="6606" fg:w="3"/><text x="81.2158%" y="175.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.01%)</title><rect x="80.9903%" y="149" width="0.0123%" height="15" fill="rgb(219,56,2)" fg:x="6608" fg:w="1"/><text x="81.2403%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.01%)</title><rect x="80.9903%" y="133" width="0.0123%" height="15" fill="rgb(233,0,4)" fg:x="6608" fg:w="1"/><text x="81.2403%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (750 samples, 9.19%)</title><rect x="72.0309%" y="309" width="9.1923%" height="15" fill="rgb(235,30,7)" fg:x="5877" fg:w="750"/><text x="72.2809%" y="319.50">core::iter::t..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (750 samples, 9.19%)</title><rect x="72.0309%" y="293" width="9.1923%" height="15" fill="rgb(250,79,13)" fg:x="5877" fg:w="750"/><text x="72.2809%" y="303.50">&lt;core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (626 samples, 7.67%)</title><rect x="73.5507%" y="277" width="7.6725%" height="15" fill="rgb(211,146,34)" fg:x="6001" fg:w="626"/><text x="73.8007%" y="287.50">core::iter:..</text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.31%)</title><rect x="80.9168%" y="261" width="0.3064%" height="15" fill="rgb(228,22,38)" fg:x="6602" fg:w="25"/><text x="81.1668%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.22%)</title><rect x="81.0026%" y="245" width="0.2206%" height="15" fill="rgb(235,168,5)" fg:x="6609" fg:w="18"/><text x="81.2526%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (10 samples, 0.12%)</title><rect x="81.1006%" y="229" width="0.1226%" height="15" fill="rgb(221,155,16)" fg:x="6617" fg:w="10"/><text x="81.3506%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (23 samples, 0.28%)</title><rect x="81.3090%" y="245" width="0.2819%" height="15" fill="rgb(215,215,53)" fg:x="6634" fg:w="23"/><text x="81.5590%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (23 samples, 0.28%)</title><rect x="81.3090%" y="229" width="0.2819%" height="15" fill="rgb(223,4,10)" fg:x="6634" fg:w="23"/><text x="81.5590%" y="239.50"></text></g><g><title>core::cmp::min_by (23 samples, 0.28%)</title><rect x="81.3090%" y="213" width="0.2819%" height="15" fill="rgb(234,103,6)" fg:x="6634" fg:w="23"/><text x="81.5590%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 0.06%)</title><rect x="81.5296%" y="197" width="0.0613%" height="15" fill="rgb(227,97,0)" fg:x="6652" fg:w="5"/><text x="81.7796%" y="207.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (5 samples, 0.06%)</title><rect x="81.5296%" y="181" width="0.0613%" height="15" fill="rgb(234,150,53)" fg:x="6652" fg:w="5"/><text x="81.7796%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (31 samples, 0.38%)</title><rect x="81.2232%" y="309" width="0.3799%" height="15" fill="rgb(228,201,54)" fg:x="6627" fg:w="31"/><text x="81.4732%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (31 samples, 0.38%)</title><rect x="81.2232%" y="293" width="0.3799%" height="15" fill="rgb(222,22,37)" fg:x="6627" fg:w="31"/><text x="81.4732%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.38%)</title><rect x="81.2232%" y="277" width="0.3799%" height="15" fill="rgb(237,53,32)" fg:x="6627" fg:w="31"/><text x="81.4732%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.38%)</title><rect x="81.2232%" y="261" width="0.3799%" height="15" fill="rgb(233,25,53)" fg:x="6627" fg:w="31"/><text x="81.4732%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.01%)</title><rect x="81.5909%" y="245" width="0.0123%" height="15" fill="rgb(210,40,34)" fg:x="6657" fg:w="1"/><text x="81.8409%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.01%)</title><rect x="81.6031%" y="309" width="0.0123%" height="15" fill="rgb(241,220,44)" fg:x="6658" fg:w="1"/><text x="81.8531%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (8 samples, 0.10%)</title><rect x="81.6154%" y="309" width="0.0981%" height="15" fill="rgb(235,28,35)" fg:x="6659" fg:w="8"/><text x="81.8654%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (8 samples, 0.10%)</title><rect x="81.6154%" y="293" width="0.0981%" height="15" fill="rgb(210,56,17)" fg:x="6659" fg:w="8"/><text x="81.8654%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.10%)</title><rect x="81.6154%" y="277" width="0.0981%" height="15" fill="rgb(224,130,29)" fg:x="6659" fg:w="8"/><text x="81.8654%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.10%)</title><rect x="81.6154%" y="261" width="0.0981%" height="15" fill="rgb(235,212,8)" fg:x="6659" fg:w="8"/><text x="81.8654%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.10%)</title><rect x="81.6154%" y="245" width="0.0981%" height="15" fill="rgb(223,33,50)" fg:x="6659" fg:w="8"/><text x="81.8654%" y="255.50"></text></g><g><title>cfree (8 samples, 0.10%)</title><rect x="81.6154%" y="229" width="0.0981%" height="15" fill="rgb(219,149,13)" fg:x="6659" fg:w="8"/><text x="81.8654%" y="239.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="81.6644%" y="213" width="0.0490%" height="15" fill="rgb(250,156,29)" fg:x="6663" fg:w="4"/><text x="81.9144%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="81.7012%" y="197" width="0.0123%" height="15" fill="rgb(216,193,19)" fg:x="6666" fg:w="1"/><text x="81.9512%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (1 samples, 0.01%)</title><rect x="81.7134%" y="309" width="0.0123%" height="15" fill="rgb(216,135,14)" fg:x="6667" fg:w="1"/><text x="81.9634%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (1 samples, 0.01%)</title><rect x="81.7134%" y="293" width="0.0123%" height="15" fill="rgb(241,47,5)" fg:x="6667" fg:w="1"/><text x="81.9634%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="81.7134%" y="277" width="0.0123%" height="15" fill="rgb(233,42,35)" fg:x="6667" fg:w="1"/><text x="81.9634%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.01%)</title><rect x="81.7134%" y="261" width="0.0123%" height="15" fill="rgb(231,13,6)" fg:x="6667" fg:w="1"/><text x="81.9634%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="81.7134%" y="245" width="0.0123%" height="15" fill="rgb(207,181,40)" fg:x="6667" fg:w="1"/><text x="81.9634%" y="255.50"></text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="81.7134%" y="229" width="0.0123%" height="15" fill="rgb(254,173,49)" fg:x="6667" fg:w="1"/><text x="81.9634%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="81.7134%" y="213" width="0.0123%" height="15" fill="rgb(221,1,38)" fg:x="6667" fg:w="1"/><text x="81.9634%" y="223.50"></text></g><g><title>main::compute_flowchange (852 samples, 10.44%)</title><rect x="71.2955%" y="325" width="10.4425%" height="15" fill="rgb(206,124,46)" fg:x="5817" fg:w="852"/><text x="71.5455%" y="335.50">main::compute_f..</text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (1 samples, 0.01%)</title><rect x="81.7257%" y="309" width="0.0123%" height="15" fill="rgb(249,21,11)" fg:x="6668" fg:w="1"/><text x="81.9757%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (1 samples, 0.01%)</title><rect x="81.7257%" y="293" width="0.0123%" height="15" fill="rgb(222,201,40)" fg:x="6668" fg:w="1"/><text x="81.9757%" y="303.50"></text></g><g><title>core::mem::swap (1 samples, 0.01%)</title><rect x="81.7257%" y="277" width="0.0123%" height="15" fill="rgb(235,61,29)" fg:x="6668" fg:w="1"/><text x="81.9757%" y="287.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.01%)</title><rect x="81.7257%" y="261" width="0.0123%" height="15" fill="rgb(219,207,3)" fg:x="6668" fg:w="1"/><text x="81.9757%" y="271.50"></text></g><g><title>core::ptr::read (1 samples, 0.01%)</title><rect x="81.7257%" y="245" width="0.0123%" height="15" fill="rgb(222,56,46)" fg:x="6668" fg:w="1"/><text x="81.9757%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.01%)</title><rect x="81.7380%" y="309" width="0.0123%" height="15" fill="rgb(239,76,54)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="81.7380%" y="293" width="0.0123%" height="15" fill="rgb(231,124,27)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="81.7380%" y="277" width="0.0123%" height="15" fill="rgb(249,195,6)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="81.7380%" y="261" width="0.0123%" height="15" fill="rgb(237,174,47)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="81.7380%" y="245" width="0.0123%" height="15" fill="rgb(206,201,31)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="81.7380%" y="229" width="0.0123%" height="15" fill="rgb(231,57,52)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.01%)</title><rect x="81.7380%" y="213" width="0.0123%" height="15" fill="rgb(248,177,22)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="81.7380%" y="197" width="0.0123%" height="15" fill="rgb(215,211,37)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (1 samples, 0.01%)</title><rect x="81.7380%" y="181" width="0.0123%" height="15" fill="rgb(241,128,51)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="81.7380%" y="165" width="0.0123%" height="15" fill="rgb(227,165,31)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1 samples, 0.01%)</title><rect x="81.7380%" y="149" width="0.0123%" height="15" fill="rgb(228,167,24)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="159.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="81.7380%" y="133" width="0.0123%" height="15" fill="rgb(228,143,12)" fg:x="6669" fg:w="1"/><text x="81.9880%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.05%)</title><rect x="81.7502%" y="309" width="0.0490%" height="15" fill="rgb(249,149,8)" fg:x="6670" fg:w="4"/><text x="82.0002%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.05%)</title><rect x="81.7502%" y="293" width="0.0490%" height="15" fill="rgb(243,35,44)" fg:x="6670" fg:w="4"/><text x="82.0002%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.05%)</title><rect x="81.7502%" y="277" width="0.0490%" height="15" fill="rgb(246,89,9)" fg:x="6670" fg:w="4"/><text x="82.0002%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.04%)</title><rect x="81.7625%" y="261" width="0.0368%" height="15" fill="rgb(233,213,13)" fg:x="6671" fg:w="3"/><text x="82.0125%" y="271.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (3 samples, 0.04%)</title><rect x="81.7625%" y="245" width="0.0368%" height="15" fill="rgb(233,141,41)" fg:x="6671" fg:w="3"/><text x="82.0125%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (3 samples, 0.04%)</title><rect x="81.7625%" y="229" width="0.0368%" height="15" fill="rgb(239,167,4)" fg:x="6671" fg:w="3"/><text x="82.0125%" y="239.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (3 samples, 0.04%)</title><rect x="81.7625%" y="213" width="0.0368%" height="15" fill="rgb(209,217,16)" fg:x="6671" fg:w="3"/><text x="82.0125%" y="223.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="81.7870%" y="197" width="0.0123%" height="15" fill="rgb(219,88,35)" fg:x="6673" fg:w="1"/><text x="82.0370%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1 samples, 0.01%)</title><rect x="81.7870%" y="181" width="0.0123%" height="15" fill="rgb(220,193,23)" fg:x="6673" fg:w="1"/><text x="82.0370%" y="191.50"></text></g><g><title>itertools::Itertools::sorted_by_key (1 samples, 0.01%)</title><rect x="81.7992%" y="309" width="0.0123%" height="15" fill="rgb(230,90,52)" fg:x="6674" fg:w="1"/><text x="82.0492%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.01%)</title><rect x="81.7992%" y="293" width="0.0123%" height="15" fill="rgb(252,106,19)" fg:x="6674" fg:w="1"/><text x="82.0492%" y="303.50"></text></g><g><title>alloc::slice::stable_sort (1 samples, 0.01%)</title><rect x="81.7992%" y="277" width="0.0123%" height="15" fill="rgb(206,74,20)" fg:x="6674" fg:w="1"/><text x="82.0492%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.01%)</title><rect x="81.7992%" y="261" width="0.0123%" height="15" fill="rgb(230,138,44)" fg:x="6674" fg:w="1"/><text x="82.0492%" y="271.50"></text></g><g><title>core::slice::sort::merge (1 samples, 0.01%)</title><rect x="81.7992%" y="245" width="0.0123%" height="15" fill="rgb(235,182,43)" fg:x="6674" fg:w="1"/><text x="82.0492%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="81.7992%" y="229" width="0.0123%" height="15" fill="rgb(242,16,51)" fg:x="6674" fg:w="1"/><text x="82.0492%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="81.8115%" y="293" width="0.0123%" height="15" fill="rgb(248,9,4)" fg:x="6675" fg:w="1"/><text x="82.0615%" y="303.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (2 samples, 0.02%)</title><rect x="81.8115%" y="309" width="0.0245%" height="15" fill="rgb(210,31,22)" fg:x="6675" fg:w="2"/><text x="82.0615%" y="319.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (1 samples, 0.01%)</title><rect x="81.8238%" y="293" width="0.0123%" height="15" fill="rgb(239,54,39)" fg:x="6676" fg:w="1"/><text x="82.0738%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="81.8238%" y="277" width="0.0123%" height="15" fill="rgb(230,99,41)" fg:x="6676" fg:w="1"/><text x="82.0738%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.01%)</title><rect x="81.8238%" y="261" width="0.0123%" height="15" fill="rgb(253,106,12)" fg:x="6676" fg:w="1"/><text x="82.0738%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="81.8238%" y="245" width="0.0123%" height="15" fill="rgb(213,46,41)" fg:x="6676" fg:w="1"/><text x="82.0738%" y="255.50"></text></g><g><title>main::compute_node_potentials (9 samples, 0.11%)</title><rect x="81.7380%" y="325" width="0.1103%" height="15" fill="rgb(215,133,35)" fg:x="6669" fg:w="9"/><text x="81.9880%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (1 samples, 0.01%)</title><rect x="81.8360%" y="309" width="0.0123%" height="15" fill="rgb(213,28,5)" fg:x="6677" fg:w="1"/><text x="82.0860%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (1 samples, 0.01%)</title><rect x="81.8360%" y="293" width="0.0123%" height="15" fill="rgb(215,77,49)" fg:x="6677" fg:w="1"/><text x="82.0860%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1 samples, 0.01%)</title><rect x="81.8360%" y="277" width="0.0123%" height="15" fill="rgb(248,100,22)" fg:x="6677" fg:w="1"/><text x="82.0860%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="81.8360%" y="261" width="0.0123%" height="15" fill="rgb(208,67,9)" fg:x="6677" fg:w="1"/><text x="82.0860%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="81.8360%" y="245" width="0.0123%" height="15" fill="rgb(219,133,21)" fg:x="6677" fg:w="1"/><text x="82.0860%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (18 samples, 0.22%)</title><rect x="83.8093%" y="309" width="0.2206%" height="15" fill="rgb(246,46,29)" fg:x="6838" fg:w="18"/><text x="84.0593%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18 samples, 0.22%)</title><rect x="83.8093%" y="293" width="0.2206%" height="15" fill="rgb(246,185,52)" fg:x="6838" fg:w="18"/><text x="84.0593%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18 samples, 0.22%)</title><rect x="83.8093%" y="277" width="0.2206%" height="15" fill="rgb(252,136,11)" fg:x="6838" fg:w="18"/><text x="84.0593%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (5 samples, 0.06%)</title><rect x="84.0299%" y="309" width="0.0613%" height="15" fill="rgb(219,138,53)" fg:x="6856" fg:w="5"/><text x="84.2799%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.06%)</title><rect x="84.0299%" y="293" width="0.0613%" height="15" fill="rgb(211,51,23)" fg:x="6856" fg:w="5"/><text x="84.2799%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.06%)</title><rect x="84.0299%" y="277" width="0.0613%" height="15" fill="rgb(247,221,28)" fg:x="6856" fg:w="5"/><text x="84.2799%" y="287.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.06%)</title><rect x="84.0299%" y="261" width="0.0613%" height="15" fill="rgb(251,222,45)" fg:x="6856" fg:w="5"/><text x="84.2799%" y="271.50"></text></g><g><title>malloc (5 samples, 0.06%)</title><rect x="84.0299%" y="245" width="0.0613%" height="15" fill="rgb(217,162,53)" fg:x="6856" fg:w="5"/><text x="84.2799%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="84.1770%" y="261" width="0.0123%" height="15" fill="rgb(229,93,14)" fg:x="6868" fg:w="1"/><text x="84.4270%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (3 samples, 0.04%)</title><rect x="84.1892%" y="261" width="0.0368%" height="15" fill="rgb(209,67,49)" fg:x="6869" fg:w="3"/><text x="84.4392%" y="271.50"></text></g><g><title>__rdl_realloc (2 samples, 0.02%)</title><rect x="84.2995%" y="197" width="0.0245%" height="15" fill="rgb(213,87,29)" fg:x="6878" fg:w="2"/><text x="84.5495%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (132 samples, 1.62%)</title><rect x="84.2505%" y="245" width="1.6178%" height="15" fill="rgb(205,151,52)" fg:x="6874" fg:w="132"/><text x="84.5005%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (132 samples, 1.62%)</title><rect x="84.2505%" y="229" width="1.6178%" height="15" fill="rgb(253,215,39)" fg:x="6874" fg:w="132"/><text x="84.5005%" y="239.50"></text></g><g><title>alloc::alloc::realloc (129 samples, 1.58%)</title><rect x="84.2873%" y="213" width="1.5811%" height="15" fill="rgb(221,220,41)" fg:x="6877" fg:w="129"/><text x="84.5373%" y="223.50"></text></g><g><title>realloc (126 samples, 1.54%)</title><rect x="84.3241%" y="197" width="1.5443%" height="15" fill="rgb(218,133,21)" fg:x="6880" fg:w="126"/><text x="84.5741%" y="207.50"></text></g><g><title>[libc.so.6] (110 samples, 1.35%)</title><rect x="84.5202%" y="181" width="1.3482%" height="15" fill="rgb(221,193,43)" fg:x="6896" fg:w="110"/><text x="84.7702%" y="191.50"></text></g><g><title>[libc.so.6] (94 samples, 1.15%)</title><rect x="84.7163%" y="165" width="1.1521%" height="15" fill="rgb(240,128,52)" fg:x="6912" fg:w="94"/><text x="84.9663%" y="175.50"></text></g><g><title>[libc.so.6] (21 samples, 0.26%)</title><rect x="85.6110%" y="149" width="0.2574%" height="15" fill="rgb(253,114,12)" fg:x="6985" fg:w="21"/><text x="85.8610%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (135 samples, 1.65%)</title><rect x="84.2260%" y="261" width="1.6546%" height="15" fill="rgb(215,223,47)" fg:x="6872" fg:w="135"/><text x="84.4760%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.01%)</title><rect x="85.8684%" y="245" width="0.0123%" height="15" fill="rgb(248,225,23)" fg:x="7006" fg:w="1"/><text x="86.1184%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (142 samples, 1.74%)</title><rect x="84.1647%" y="293" width="1.7404%" height="15" fill="rgb(250,108,0)" fg:x="6867" fg:w="142"/><text x="84.4147%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (142 samples, 1.74%)</title><rect x="84.1647%" y="277" width="1.7404%" height="15" fill="rgb(228,208,7)" fg:x="6867" fg:w="142"/><text x="84.4147%" y="287.50"></text></g><g><title>core::cmp::max (2 samples, 0.02%)</title><rect x="85.8806%" y="261" width="0.0245%" height="15" fill="rgb(244,45,10)" fg:x="7007" fg:w="2"/><text x="86.1306%" y="271.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.02%)</title><rect x="85.8806%" y="245" width="0.0245%" height="15" fill="rgb(207,125,25)" fg:x="7007" fg:w="2"/><text x="86.1306%" y="255.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.02%)</title><rect x="85.8806%" y="229" width="0.0245%" height="15" fill="rgb(210,195,18)" fg:x="7007" fg:w="2"/><text x="86.1306%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (16 samples, 0.20%)</title><rect x="85.9051%" y="293" width="0.1961%" height="15" fill="rgb(249,80,12)" fg:x="7009" fg:w="16"/><text x="86.1551%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16 samples, 0.20%)</title><rect x="85.9051%" y="277" width="0.1961%" height="15" fill="rgb(221,65,9)" fg:x="7009" fg:w="16"/><text x="86.1551%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (177 samples, 2.17%)</title><rect x="84.0912%" y="309" width="2.1694%" height="15" fill="rgb(235,49,36)" fg:x="6861" fg:w="177"/><text x="84.3412%" y="319.50">a..</text></g><g><title>core::ptr::write (13 samples, 0.16%)</title><rect x="86.1012%" y="293" width="0.1593%" height="15" fill="rgb(225,32,20)" fg:x="7025" fg:w="13"/><text x="86.3512%" y="303.50"></text></g><g><title>core::cmp::PartialEq::ne (8 samples, 0.10%)</title><rect x="86.2606%" y="309" width="0.0981%" height="15" fill="rgb(215,141,46)" fg:x="7038" fg:w="8"/><text x="86.5106%" y="319.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.10%)</title><rect x="86.2606%" y="293" width="0.0981%" height="15" fill="rgb(250,160,47)" fg:x="7038" fg:w="8"/><text x="86.5106%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (8 samples, 0.10%)</title><rect x="86.2606%" y="277" width="0.0981%" height="15" fill="rgb(216,222,40)" fg:x="7038" fg:w="8"/><text x="86.5106%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.01%)</title><rect x="86.3586%" y="245" width="0.0123%" height="15" fill="rgb(234,217,39)" fg:x="7046" fg:w="1"/><text x="86.6086%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="86.3586%" y="229" width="0.0123%" height="15" fill="rgb(207,178,40)" fg:x="7046" fg:w="1"/><text x="86.6086%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="86.5057%" y="165" width="0.0123%" height="15" fill="rgb(221,136,13)" fg:x="7058" fg:w="1"/><text x="86.7557%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (19 samples, 0.23%)</title><rect x="86.5180%" y="149" width="0.2329%" height="15" fill="rgb(249,199,10)" fg:x="7059" fg:w="19"/><text x="86.7680%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (19 samples, 0.23%)</title><rect x="86.5180%" y="133" width="0.2329%" height="15" fill="rgb(249,222,13)" fg:x="7059" fg:w="19"/><text x="86.7680%" y="143.50"></text></g><g><title>alloc::alloc::realloc (19 samples, 0.23%)</title><rect x="86.5180%" y="117" width="0.2329%" height="15" fill="rgb(244,185,38)" fg:x="7059" fg:w="19"/><text x="86.7680%" y="127.50"></text></g><g><title>realloc (19 samples, 0.23%)</title><rect x="86.5180%" y="101" width="0.2329%" height="15" fill="rgb(236,202,9)" fg:x="7059" fg:w="19"/><text x="86.7680%" y="111.50"></text></g><g><title>[libc.so.6] (18 samples, 0.22%)</title><rect x="86.5302%" y="85" width="0.2206%" height="15" fill="rgb(250,229,37)" fg:x="7060" fg:w="18"/><text x="86.7802%" y="95.50"></text></g><g><title>[libc.so.6] (16 samples, 0.20%)</title><rect x="86.5547%" y="69" width="0.1961%" height="15" fill="rgb(206,174,23)" fg:x="7062" fg:w="16"/><text x="86.8047%" y="79.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="86.7018%" y="53" width="0.0490%" height="15" fill="rgb(211,33,43)" fg:x="7074" fg:w="4"/><text x="86.9518%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (21 samples, 0.26%)</title><rect x="86.5057%" y="197" width="0.2574%" height="15" fill="rgb(245,58,50)" fg:x="7058" fg:w="21"/><text x="86.7557%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (21 samples, 0.26%)</title><rect x="86.5057%" y="181" width="0.2574%" height="15" fill="rgb(244,68,36)" fg:x="7058" fg:w="21"/><text x="86.7557%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.25%)</title><rect x="86.5180%" y="165" width="0.2451%" height="15" fill="rgb(232,229,15)" fg:x="7059" fg:w="20"/><text x="86.7680%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.01%)</title><rect x="86.7508%" y="149" width="0.0123%" height="15" fill="rgb(254,30,23)" fg:x="7078" fg:w="1"/><text x="87.0008%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.05%)</title><rect x="86.7631%" y="197" width="0.0490%" height="15" fill="rgb(235,160,14)" fg:x="7079" fg:w="4"/><text x="87.0131%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.05%)</title><rect x="86.7631%" y="181" width="0.0490%" height="15" fill="rgb(212,155,44)" fg:x="7079" fg:w="4"/><text x="87.0131%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (45 samples, 0.55%)</title><rect x="86.3586%" y="309" width="0.5515%" height="15" fill="rgb(226,2,50)" fg:x="7046" fg:w="45"/><text x="86.6086%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (45 samples, 0.55%)</title><rect x="86.3586%" y="293" width="0.5515%" height="15" fill="rgb(234,177,6)" fg:x="7046" fg:w="45"/><text x="86.6086%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (45 samples, 0.55%)</title><rect x="86.3586%" y="277" width="0.5515%" height="15" fill="rgb(217,24,9)" fg:x="7046" fg:w="45"/><text x="86.6086%" y="287.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (45 samples, 0.55%)</title><rect x="86.3586%" y="261" width="0.5515%" height="15" fill="rgb(220,13,46)" fg:x="7046" fg:w="45"/><text x="86.6086%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (44 samples, 0.54%)</title><rect x="86.3709%" y="245" width="0.5393%" height="15" fill="rgb(239,221,27)" fg:x="7047" fg:w="44"/><text x="86.6209%" y="255.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (44 samples, 0.54%)</title><rect x="86.3709%" y="229" width="0.5393%" height="15" fill="rgb(222,198,25)" fg:x="7047" fg:w="44"/><text x="86.6209%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (44 samples, 0.54%)</title><rect x="86.3709%" y="213" width="0.5393%" height="15" fill="rgb(211,99,13)" fg:x="7047" fg:w="44"/><text x="86.6209%" y="223.50"></text></g><g><title>core::ptr::write (8 samples, 0.10%)</title><rect x="86.8121%" y="197" width="0.0981%" height="15" fill="rgb(232,111,31)" fg:x="7083" fg:w="8"/><text x="87.0621%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (62 samples, 0.76%)</title><rect x="86.9102%" y="309" width="0.7599%" height="15" fill="rgb(245,82,37)" fg:x="7091" fg:w="62"/><text x="87.1602%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.07%)</title><rect x="87.6701%" y="261" width="0.0735%" height="15" fill="rgb(227,149,46)" fg:x="7153" fg:w="6"/><text x="87.9201%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.07%)</title><rect x="87.6701%" y="245" width="0.0735%" height="15" fill="rgb(218,36,50)" fg:x="7153" fg:w="6"/><text x="87.9201%" y="255.50"></text></g><g><title>cfree (6 samples, 0.07%)</title><rect x="87.6701%" y="229" width="0.0735%" height="15" fill="rgb(226,80,48)" fg:x="7153" fg:w="6"/><text x="87.9201%" y="239.50"></text></g><g><title>[libc.so.6] (6 samples, 0.07%)</title><rect x="87.6701%" y="213" width="0.0735%" height="15" fill="rgb(238,224,15)" fg:x="7153" fg:w="6"/><text x="87.9201%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="87.7313%" y="197" width="0.0123%" height="15" fill="rgb(241,136,10)" fg:x="7158" fg:w="1"/><text x="87.9813%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="87.7313%" y="181" width="0.0123%" height="15" fill="rgb(208,32,45)" fg:x="7158" fg:w="1"/><text x="87.9813%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (7 samples, 0.09%)</title><rect x="87.6701%" y="309" width="0.0858%" height="15" fill="rgb(207,135,9)" fg:x="7153" fg:w="7"/><text x="87.9201%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (7 samples, 0.09%)</title><rect x="87.6701%" y="293" width="0.0858%" height="15" fill="rgb(206,86,44)" fg:x="7153" fg:w="7"/><text x="87.9201%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.09%)</title><rect x="87.6701%" y="277" width="0.0858%" height="15" fill="rgb(245,177,15)" fg:x="7153" fg:w="7"/><text x="87.9201%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="87.7436%" y="261" width="0.0123%" height="15" fill="rgb(206,64,50)" fg:x="7159" fg:w="1"/><text x="87.9936%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints (1 samples, 0.01%)</title><rect x="87.7559%" y="309" width="0.0123%" height="15" fill="rgb(234,36,40)" fg:x="7160" fg:w="1"/><text x="88.0059%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="87.7559%" y="293" width="0.0123%" height="15" fill="rgb(213,64,8)" fg:x="7160" fg:w="1"/><text x="88.0059%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints::_{{closure}} (1 samples, 0.01%)</title><rect x="87.7559%" y="277" width="0.0123%" height="15" fill="rgb(210,75,36)" fg:x="7160" fg:w="1"/><text x="88.0059%" y="287.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (1 samples, 0.01%)</title><rect x="87.7559%" y="261" width="0.0123%" height="15" fill="rgb(229,88,21)" fg:x="7160" fg:w="1"/><text x="88.0059%" y="271.50"></text></g><g><title>main::find_cycle_with_arc (488 samples, 5.98%)</title><rect x="81.8483%" y="325" width="5.9811%" height="15" fill="rgb(252,204,47)" fg:x="6678" fg:w="488"/><text x="82.0983%" y="335.50">main::fi..</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (5 samples, 0.06%)</title><rect x="87.7681%" y="309" width="0.0613%" height="15" fill="rgb(208,77,27)" fg:x="7161" fg:w="5"/><text x="88.0181%" y="319.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (5 samples, 0.06%)</title><rect x="87.7681%" y="293" width="0.0613%" height="15" fill="rgb(221,76,26)" fg:x="7161" fg:w="5"/><text x="88.0181%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="87.8294%" y="309" width="0.0123%" height="15" fill="rgb(225,139,18)" fg:x="7166" fg:w="1"/><text x="88.0794%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="87.8294%" y="293" width="0.0123%" height="15" fill="rgb(230,137,11)" fg:x="7166" fg:w="1"/><text x="88.0794%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.01%)</title><rect x="87.8294%" y="277" width="0.0123%" height="15" fill="rgb(212,28,1)" fg:x="7166" fg:w="1"/><text x="88.0794%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.01%)</title><rect x="87.8294%" y="261" width="0.0123%" height="15" fill="rgb(248,164,17)" fg:x="7166" fg:w="1"/><text x="88.0794%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.01%)</title><rect x="87.8294%" y="245" width="0.0123%" height="15" fill="rgb(222,171,42)" fg:x="7166" fg:w="1"/><text x="88.0794%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.01%)</title><rect x="87.8294%" y="229" width="0.0123%" height="15" fill="rgb(243,84,45)" fg:x="7166" fg:w="1"/><text x="88.0794%" y="239.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.01%)</title><rect x="87.8416%" y="309" width="0.0123%" height="15" fill="rgb(252,49,23)" fg:x="7167" fg:w="1"/><text x="88.0916%" y="319.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.01%)</title><rect x="87.8416%" y="293" width="0.0123%" height="15" fill="rgb(215,19,7)" fg:x="7167" fg:w="1"/><text x="88.0916%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.01%)</title><rect x="87.8416%" y="277" width="0.0123%" height="15" fill="rgb(238,81,41)" fg:x="7167" fg:w="1"/><text x="88.0916%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="87.8416%" y="261" width="0.0123%" height="15" fill="rgb(210,199,37)" fg:x="7167" fg:w="1"/><text x="88.0916%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="87.8416%" y="245" width="0.0123%" height="15" fill="rgb(244,192,49)" fg:x="7167" fg:w="1"/><text x="88.0916%" y="255.50"></text></g><g><title>main::initialization (3 samples, 0.04%)</title><rect x="87.8294%" y="325" width="0.0368%" height="15" fill="rgb(226,211,11)" fg:x="7166" fg:w="3"/><text x="88.0794%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.01%)</title><rect x="87.8539%" y="309" width="0.0123%" height="15" fill="rgb(236,162,54)" fg:x="7168" fg:w="1"/><text x="88.1039%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.01%)</title><rect x="87.8539%" y="293" width="0.0123%" height="15" fill="rgb(220,229,9)" fg:x="7168" fg:w="1"/><text x="88.1039%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="87.8539%" y="277" width="0.0123%" height="15" fill="rgb(250,87,22)" fg:x="7168" fg:w="1"/><text x="88.1039%" y="287.50"></text></g><g><title>main::initialization::_{{closure}} (1 samples, 0.01%)</title><rect x="87.8539%" y="261" width="0.0123%" height="15" fill="rgb(239,43,17)" fg:x="7168" fg:w="1"/><text x="88.1039%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::IndexMut&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="87.8539%" y="245" width="0.0123%" height="15" fill="rgb(231,177,25)" fg:x="7168" fg:w="1"/><text x="88.1039%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="87.8539%" y="229" width="0.0123%" height="15" fill="rgb(219,179,1)" fg:x="7168" fg:w="1"/><text x="88.1039%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.01%)</title><rect x="87.8539%" y="213" width="0.0123%" height="15" fill="rgb(238,219,53)" fg:x="7168" fg:w="1"/><text x="88.1039%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.04%)</title><rect x="90.2071%" y="309" width="0.0368%" height="15" fill="rgb(232,167,36)" fg:x="7360" fg:w="3"/><text x="90.4571%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.04%)</title><rect x="90.2071%" y="293" width="0.0368%" height="15" fill="rgb(244,19,51)" fg:x="7360" fg:w="3"/><text x="90.4571%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.04%)</title><rect x="90.2071%" y="277" width="0.0368%" height="15" fill="rgb(224,6,22)" fg:x="7360" fg:w="3"/><text x="90.4571%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="90.2439%" y="309" width="0.0123%" height="15" fill="rgb(224,145,5)" fg:x="7363" fg:w="1"/><text x="90.4939%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.01%)</title><rect x="90.2439%" y="293" width="0.0123%" height="15" fill="rgb(234,130,49)" fg:x="7363" fg:w="1"/><text x="90.4939%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="90.2439%" y="277" width="0.0123%" height="15" fill="rgb(254,6,2)" fg:x="7363" fg:w="1"/><text x="90.4939%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="90.4523%" y="261" width="0.0123%" height="15" fill="rgb(208,96,46)" fg:x="7380" fg:w="1"/><text x="90.7023%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.01%)</title><rect x="90.4523%" y="245" width="0.0123%" height="15" fill="rgb(239,3,39)" fg:x="7380" fg:w="1"/><text x="90.7023%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="90.4523%" y="229" width="0.0123%" height="15" fill="rgb(233,210,1)" fg:x="7380" fg:w="1"/><text x="90.7023%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.05%)</title><rect x="90.4645%" y="245" width="0.0490%" height="15" fill="rgb(244,137,37)" fg:x="7381" fg:w="4"/><text x="90.7145%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.05%)</title><rect x="90.4645%" y="229" width="0.0490%" height="15" fill="rgb(240,136,2)" fg:x="7381" fg:w="4"/><text x="90.7145%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.05%)</title><rect x="90.4645%" y="213" width="0.0490%" height="15" fill="rgb(239,18,37)" fg:x="7381" fg:w="4"/><text x="90.7145%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.05%)</title><rect x="90.4645%" y="197" width="0.0490%" height="15" fill="rgb(218,185,22)" fg:x="7381" fg:w="4"/><text x="90.7145%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.05%)</title><rect x="90.4645%" y="181" width="0.0490%" height="15" fill="rgb(225,218,4)" fg:x="7381" fg:w="4"/><text x="90.7145%" y="191.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.05%)</title><rect x="90.4645%" y="165" width="0.0490%" height="15" fill="rgb(230,182,32)" fg:x="7381" fg:w="4"/><text x="90.7145%" y="175.50"></text></g><g><title>realloc (4 samples, 0.05%)</title><rect x="90.4645%" y="149" width="0.0490%" height="15" fill="rgb(242,56,43)" fg:x="7381" fg:w="4"/><text x="90.7145%" y="159.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="90.4645%" y="133" width="0.0490%" height="15" fill="rgb(233,99,24)" fg:x="7381" fg:w="4"/><text x="90.7145%" y="143.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="90.4645%" y="117" width="0.0490%" height="15" fill="rgb(234,209,42)" fg:x="7381" fg:w="4"/><text x="90.7145%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="90.5013%" y="101" width="0.0123%" height="15" fill="rgb(227,7,12)" fg:x="7384" fg:w="1"/><text x="90.7513%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.02%)</title><rect x="90.5135%" y="245" width="0.0245%" height="15" fill="rgb(245,203,43)" fg:x="7385" fg:w="2"/><text x="90.7635%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="90.5135%" y="229" width="0.0245%" height="15" fill="rgb(238,205,33)" fg:x="7385" fg:w="2"/><text x="90.7635%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (24 samples, 0.29%)</title><rect x="90.2562%" y="309" width="0.2942%" height="15" fill="rgb(231,56,7)" fg:x="7364" fg:w="24"/><text x="90.5062%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (24 samples, 0.29%)</title><rect x="90.2562%" y="293" width="0.2942%" height="15" fill="rgb(244,186,29)" fg:x="7364" fg:w="24"/><text x="90.5062%" y="303.50"></text></g><g><title>main::update_sptree::_{{closure}} (24 samples, 0.29%)</title><rect x="90.2562%" y="277" width="0.2942%" height="15" fill="rgb(234,111,31)" fg:x="7364" fg:w="24"/><text x="90.5062%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.09%)</title><rect x="90.4645%" y="261" width="0.0858%" height="15" fill="rgb(241,149,10)" fg:x="7381" fg:w="7"/><text x="90.7145%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="90.5381%" y="245" width="0.0123%" height="15" fill="rgb(249,206,44)" fg:x="7387" fg:w="1"/><text x="90.7881%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="90.5503%" y="309" width="0.0490%" height="15" fill="rgb(251,153,30)" fg:x="7388" fg:w="4"/><text x="90.8003%" y="319.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (4 samples, 0.05%)</title><rect x="90.5503%" y="293" width="0.0490%" height="15" fill="rgb(239,152,38)" fg:x="7388" fg:w="4"/><text x="90.8003%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="90.5871%" y="277" width="0.0123%" height="15" fill="rgb(249,139,47)" fg:x="7391" fg:w="1"/><text x="90.8371%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1 samples, 0.01%)</title><rect x="90.5871%" y="261" width="0.0123%" height="15" fill="rgb(244,64,35)" fg:x="7391" fg:w="1"/><text x="90.8371%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (18 samples, 0.22%)</title><rect x="90.5993%" y="309" width="0.2206%" height="15" fill="rgb(216,46,15)" fg:x="7392" fg:w="18"/><text x="90.8493%" y="319.50"></text></g><g><title>main::update_sptree::_{{closure}} (18 samples, 0.22%)</title><rect x="90.5993%" y="293" width="0.2206%" height="15" fill="rgb(250,74,19)" fg:x="7392" fg:w="18"/><text x="90.8493%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.07%)</title><rect x="90.7464%" y="277" width="0.0735%" height="15" fill="rgb(249,42,33)" fg:x="7404" fg:w="6"/><text x="90.9964%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.07%)</title><rect x="90.7464%" y="261" width="0.0735%" height="15" fill="rgb(242,149,17)" fg:x="7404" fg:w="6"/><text x="90.9964%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.07%)</title><rect x="90.7464%" y="245" width="0.0735%" height="15" fill="rgb(244,29,21)" fg:x="7404" fg:w="6"/><text x="90.9964%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.18%)</title><rect x="90.8200%" y="293" width="0.1838%" height="15" fill="rgb(220,130,37)" fg:x="7410" fg:w="15"/><text x="91.0700%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (521 samples, 6.39%)</title><rect x="90.8200%" y="309" width="6.3856%" height="15" fill="rgb(211,67,2)" fg:x="7410" fg:w="521"/><text x="91.0700%" y="319.50">&lt;core::s..</text></g><g><title>main::update_sptree::_{{closure}} (506 samples, 6.20%)</title><rect x="91.0038%" y="293" width="6.2017%" height="15" fill="rgb(235,68,52)" fg:x="7425" fg:w="506"/><text x="91.2538%" y="303.50">main::up..</text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (506 samples, 6.20%)</title><rect x="91.0038%" y="277" width="6.2017%" height="15" fill="rgb(246,142,3)" fg:x="7425" fg:w="506"/><text x="91.2538%" y="287.50">&lt;petgrap..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (506 samples, 6.20%)</title><rect x="91.0038%" y="261" width="6.2017%" height="15" fill="rgb(241,25,7)" fg:x="7425" fg:w="506"/><text x="91.2538%" y="271.50">core::cm..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as petgraph::graph_impl::IndexType&gt;::index (1 samples, 0.01%)</title><rect x="97.2055%" y="309" width="0.0123%" height="15" fill="rgb(242,119,39)" fg:x="7931" fg:w="1"/><text x="97.4555%" y="319.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (1 samples, 0.01%)</title><rect x="97.2055%" y="293" width="0.0123%" height="15" fill="rgb(241,98,45)" fg:x="7931" fg:w="1"/><text x="97.4555%" y="303.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="97.2178%" y="309" width="0.0245%" height="15" fill="rgb(254,28,30)" fg:x="7932" fg:w="2"/><text x="97.4678%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="97.2178%" y="293" width="0.0245%" height="15" fill="rgb(241,142,54)" fg:x="7932" fg:w="2"/><text x="97.4678%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="97.2178%" y="277" width="0.0245%" height="15" fill="rgb(222,85,15)" fg:x="7932" fg:w="2"/><text x="97.4678%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="97.2178%" y="261" width="0.0245%" height="15" fill="rgb(210,85,47)" fg:x="7932" fg:w="2"/><text x="97.4678%" y="271.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="97.2178%" y="245" width="0.0245%" height="15" fill="rgb(224,206,25)" fg:x="7932" fg:w="2"/><text x="97.4678%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="97.2423%" y="309" width="0.0123%" height="15" fill="rgb(243,201,19)" fg:x="7934" fg:w="1"/><text x="97.4923%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="97.5977%" y="261" width="0.0123%" height="15" fill="rgb(236,59,4)" fg:x="7963" fg:w="1"/><text x="97.8477%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.01%)</title><rect x="97.6100%" y="261" width="0.0123%" height="15" fill="rgb(254,179,45)" fg:x="7964" fg:w="1"/><text x="97.8600%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.01%)</title><rect x="97.6223%" y="261" width="0.0123%" height="15" fill="rgb(226,14,10)" fg:x="7965" fg:w="1"/><text x="97.8723%" y="271.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="97.6835%" y="197" width="0.0123%" height="15" fill="rgb(244,27,41)" fg:x="7970" fg:w="1"/><text x="97.9335%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (111 samples, 1.36%)</title><rect x="97.6468%" y="245" width="1.3605%" height="15" fill="rgb(235,35,32)" fg:x="7967" fg:w="111"/><text x="97.8968%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (111 samples, 1.36%)</title><rect x="97.6468%" y="229" width="1.3605%" height="15" fill="rgb(218,68,31)" fg:x="7967" fg:w="111"/><text x="97.8968%" y="239.50"></text></g><g><title>alloc::alloc::realloc (111 samples, 1.36%)</title><rect x="97.6468%" y="213" width="1.3605%" height="15" fill="rgb(207,120,37)" fg:x="7967" fg:w="111"/><text x="97.8968%" y="223.50"></text></g><g><title>realloc (107 samples, 1.31%)</title><rect x="97.6958%" y="197" width="1.3114%" height="15" fill="rgb(227,98,0)" fg:x="7971" fg:w="107"/><text x="97.9458%" y="207.50"></text></g><g><title>[libc.so.6] (102 samples, 1.25%)</title><rect x="97.7571%" y="181" width="1.2502%" height="15" fill="rgb(207,7,3)" fg:x="7976" fg:w="102"/><text x="98.0071%" y="191.50"></text></g><g><title>[libc.so.6] (91 samples, 1.12%)</title><rect x="97.8919%" y="165" width="1.1153%" height="15" fill="rgb(206,98,19)" fg:x="7987" fg:w="91"/><text x="98.1419%" y="175.50"></text></g><g><title>[libc.so.6] (18 samples, 0.22%)</title><rect x="98.7866%" y="149" width="0.2206%" height="15" fill="rgb(217,5,26)" fg:x="8060" fg:w="18"/><text x="99.0366%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.01%)</title><rect x="99.0072%" y="245" width="0.0123%" height="15" fill="rgb(235,190,38)" fg:x="8078" fg:w="1"/><text x="99.2572%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (116 samples, 1.42%)</title><rect x="97.6345%" y="261" width="1.4217%" height="15" fill="rgb(247,86,24)" fg:x="7966" fg:w="116"/><text x="97.8845%" y="271.50"></text></g><g><title>malloc (3 samples, 0.04%)</title><rect x="99.0195%" y="245" width="0.0368%" height="15" fill="rgb(205,101,16)" fg:x="8079" fg:w="3"/><text x="99.2695%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.02%)</title><rect x="99.0563%" y="261" width="0.0245%" height="15" fill="rgb(246,168,33)" fg:x="8082" fg:w="2"/><text x="99.3063%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.02%)</title><rect x="99.0563%" y="245" width="0.0245%" height="15" fill="rgb(231,114,1)" fg:x="8082" fg:w="2"/><text x="99.3063%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (126 samples, 1.54%)</title><rect x="97.5610%" y="293" width="1.5443%" height="15" fill="rgb(207,184,53)" fg:x="7960" fg:w="126"/><text x="97.8110%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (126 samples, 1.54%)</title><rect x="97.5610%" y="277" width="1.5443%" height="15" fill="rgb(224,95,51)" fg:x="7960" fg:w="126"/><text x="97.8110%" y="287.50"></text></g><g><title>core::cmp::max (2 samples, 0.02%)</title><rect x="99.0808%" y="261" width="0.0245%" height="15" fill="rgb(212,188,45)" fg:x="8084" fg:w="2"/><text x="99.3308%" y="271.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.02%)</title><rect x="99.0808%" y="245" width="0.0245%" height="15" fill="rgb(223,154,38)" fg:x="8084" fg:w="2"/><text x="99.3308%" y="255.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.02%)</title><rect x="99.0808%" y="229" width="0.0245%" height="15" fill="rgb(251,22,52)" fg:x="8084" fg:w="2"/><text x="99.3308%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7 samples, 0.09%)</title><rect x="99.1053%" y="293" width="0.0858%" height="15" fill="rgb(229,209,22)" fg:x="8086" fg:w="7"/><text x="99.3553%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.09%)</title><rect x="99.1053%" y="277" width="0.0858%" height="15" fill="rgb(234,138,34)" fg:x="8086" fg:w="7"/><text x="99.3553%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (172 samples, 2.11%)</title><rect x="97.2546%" y="309" width="2.1081%" height="15" fill="rgb(212,95,11)" fg:x="7935" fg:w="172"/><text x="97.5046%" y="319.50">a..</text></g><g><title>core::ptr::write (14 samples, 0.17%)</title><rect x="99.1911%" y="293" width="0.1716%" height="15" fill="rgb(240,179,47)" fg:x="8093" fg:w="14"/><text x="99.4411%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::swap_remove (6 samples, 0.07%)</title><rect x="99.3627%" y="309" width="0.0735%" height="15" fill="rgb(240,163,11)" fg:x="8107" fg:w="6"/><text x="99.6127%" y="319.50"></text></g><g><title>core::intrinsics::copy (6 samples, 0.07%)</title><rect x="99.3627%" y="293" width="0.0735%" height="15" fill="rgb(236,37,12)" fg:x="8107" fg:w="6"/><text x="99.6127%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="99.4362%" y="309" width="0.0368%" height="15" fill="rgb(232,164,16)" fg:x="8113" fg:w="3"/><text x="99.6862%" y="319.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.01%)</title><rect x="99.4730%" y="309" width="0.0123%" height="15" fill="rgb(244,205,15)" fg:x="8116" fg:w="1"/><text x="99.7230%" y="319.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="99.4730%" y="293" width="0.0123%" height="15" fill="rgb(223,117,47)" fg:x="8116" fg:w="1"/><text x="99.7230%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1 samples, 0.01%)</title><rect x="99.4730%" y="277" width="0.0123%" height="15" fill="rgb(244,107,35)" fg:x="8116" fg:w="1"/><text x="99.7230%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.4852%" y="277" width="0.0123%" height="15" fill="rgb(205,140,8)" fg:x="8117" fg:w="1"/><text x="99.7352%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.4852%" y="261" width="0.0123%" height="15" fill="rgb(228,84,46)" fg:x="8117" fg:w="1"/><text x="99.7352%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4852%" y="245" width="0.0123%" height="15" fill="rgb(254,188,9)" fg:x="8117" fg:w="1"/><text x="99.7352%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4852%" y="229" width="0.0123%" height="15" fill="rgb(206,112,54)" fg:x="8117" fg:w="1"/><text x="99.7352%" y="239.50"></text></g><g><title>main::update_sptree::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4852%" y="213" width="0.0123%" height="15" fill="rgb(216,84,49)" fg:x="8117" fg:w="1"/><text x="99.7352%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="99.4852%" y="293" width="0.0245%" height="15" fill="rgb(214,194,35)" fg:x="8117" fg:w="2"/><text x="99.7352%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="99.4975%" y="277" width="0.0123%" height="15" fill="rgb(249,28,3)" fg:x="8118" fg:w="1"/><text x="99.7475%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4975%" y="261" width="0.0123%" height="15" fill="rgb(222,56,52)" fg:x="8118" fg:w="1"/><text x="99.7475%" y="271.50"></text></g><g><title>main::update_sptree::_{{closure}} (1 samples, 0.01%)</title><rect x="99.4975%" y="245" width="0.0123%" height="15" fill="rgb(245,217,50)" fg:x="8118" fg:w="1"/><text x="99.7475%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.05%)</title><rect x="99.4852%" y="309" width="0.0490%" height="15" fill="rgb(213,201,24)" fg:x="8117" fg:w="4"/><text x="99.7352%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="99.5097%" y="293" width="0.0245%" height="15" fill="rgb(248,116,28)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.02%)</title><rect x="99.5097%" y="277" width="0.0245%" height="15" fill="rgb(219,72,43)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="99.5097%" y="261" width="0.0245%" height="15" fill="rgb(209,138,14)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="99.5097%" y="245" width="0.0245%" height="15" fill="rgb(222,18,33)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="99.5097%" y="229" width="0.0245%" height="15" fill="rgb(213,199,7)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.02%)</title><rect x="99.5097%" y="213" width="0.0245%" height="15" fill="rgb(250,110,10)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="99.5097%" y="197" width="0.0245%" height="15" fill="rgb(248,123,6)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="99.5097%" y="181" width="0.0245%" height="15" fill="rgb(206,91,31)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="99.5097%" y="165" width="0.0245%" height="15" fill="rgb(211,154,13)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="175.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="99.5097%" y="149" width="0.0245%" height="15" fill="rgb(225,148,7)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="99.5097%" y="133" width="0.0245%" height="15" fill="rgb(220,160,43)" fg:x="8119" fg:w="2"/><text x="99.7597%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (17 samples, 0.21%)</title><rect x="99.5343%" y="309" width="0.2084%" height="15" fill="rgb(213,52,39)" fg:x="8121" fg:w="17"/><text x="99.7843%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (17 samples, 0.21%)</title><rect x="99.5343%" y="293" width="0.2084%" height="15" fill="rgb(243,137,7)" fg:x="8121" fg:w="17"/><text x="99.7843%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.10%)</title><rect x="99.7426%" y="261" width="0.0981%" height="15" fill="rgb(230,79,13)" fg:x="8138" fg:w="8"/><text x="99.9926%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.10%)</title><rect x="99.7426%" y="245" width="0.0981%" height="15" fill="rgb(247,105,23)" fg:x="8138" fg:w="8"/><text x="99.9926%" y="255.50"></text></g><g><title>cfree (8 samples, 0.10%)</title><rect x="99.7426%" y="229" width="0.0981%" height="15" fill="rgb(223,179,41)" fg:x="8138" fg:w="8"/><text x="99.9926%" y="239.50"></text></g><g><title>[libc.so.6] (6 samples, 0.07%)</title><rect x="99.7671%" y="213" width="0.0735%" height="15" fill="rgb(218,9,34)" fg:x="8140" fg:w="6"/><text x="100.0171%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="99.7916%" y="197" width="0.0490%" height="15" fill="rgb(222,106,8)" fg:x="8142" fg:w="4"/><text x="100.0416%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (10 samples, 0.12%)</title><rect x="99.7426%" y="309" width="0.1226%" height="15" fill="rgb(211,220,0)" fg:x="8138" fg:w="10"/><text x="99.9926%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (10 samples, 0.12%)</title><rect x="99.7426%" y="293" width="0.1226%" height="15" fill="rgb(229,52,16)" fg:x="8138" fg:w="10"/><text x="99.9926%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="99.7426%" y="277" width="0.1226%" height="15" fill="rgb(212,155,18)" fg:x="8138" fg:w="10"/><text x="99.9926%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="99.8407%" y="261" width="0.0245%" height="15" fill="rgb(242,21,14)" fg:x="8146" fg:w="2"/><text x="100.0907%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (5 samples, 0.06%)</title><rect x="99.8652%" y="309" width="0.0613%" height="15" fill="rgb(222,19,48)" fg:x="8148" fg:w="5"/><text x="100.1152%" y="319.50"></text></g><g><title>main::min_cost (8,078 samples, 99.01%)</title><rect x="0.9315%" y="341" width="99.0072%" height="15" fill="rgb(232,45,27)" fg:x="76" fg:w="8078"/><text x="1.1815%" y="351.50">main::min_cost</text></g><g><title>main::update_sptree (985 samples, 12.07%)</title><rect x="87.8662%" y="325" width="12.0726%" height="15" fill="rgb(249,103,42)" fg:x="7169" fg:w="985"/><text x="88.1162%" y="335.50">main::update_sptree</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (1 samples, 0.01%)</title><rect x="99.9265%" y="309" width="0.0123%" height="15" fill="rgb(246,81,33)" fg:x="8153" fg:w="1"/><text x="100.1765%" y="319.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (1 samples, 0.01%)</title><rect x="99.9265%" y="293" width="0.0123%" height="15" fill="rgb(252,33,42)" fg:x="8153" fg:w="1"/><text x="100.1765%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1 samples, 0.01%)</title><rect x="99.9387%" y="341" width="0.0123%" height="15" fill="rgb(209,212,41)" fg:x="8154" fg:w="1"/><text x="100.1887%" y="351.50"></text></g><g><title>_start (8,080 samples, 99.03%)</title><rect x="0.9315%" y="485" width="99.0317%" height="15" fill="rgb(207,154,6)" fg:x="76" fg:w="8080"/><text x="1.1815%" y="495.50">_start</text></g><g><title>__libc_start_main (8,080 samples, 99.03%)</title><rect x="0.9315%" y="469" width="99.0317%" height="15" fill="rgb(223,64,47)" fg:x="76" fg:w="8080"/><text x="1.1815%" y="479.50">__libc_start_main</text></g><g><title>[libc.so.6] (8,080 samples, 99.03%)</title><rect x="0.9315%" y="453" width="99.0317%" height="15" fill="rgb(211,161,38)" fg:x="76" fg:w="8080"/><text x="1.1815%" y="463.50">[libc.so.6]</text></g><g><title>main (8,080 samples, 99.03%)</title><rect x="0.9315%" y="437" width="99.0317%" height="15" fill="rgb(219,138,40)" fg:x="76" fg:w="8080"/><text x="1.1815%" y="447.50">main</text></g><g><title>std::rt::lang_start_internal (8,080 samples, 99.03%)</title><rect x="0.9315%" y="421" width="99.0317%" height="15" fill="rgb(241,228,46)" fg:x="76" fg:w="8080"/><text x="1.1815%" y="431.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (8,080 samples, 99.03%)</title><rect x="0.9315%" y="405" width="99.0317%" height="15" fill="rgb(223,209,38)" fg:x="76" fg:w="8080"/><text x="1.1815%" y="415.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,080 samples, 99.03%)</title><rect x="0.9315%" y="389" width="99.0317%" height="15" fill="rgb(236,164,45)" fg:x="76" fg:w="8080"/><text x="1.1815%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,080 samples, 99.03%)</title><rect x="0.9315%" y="373" width="99.0317%" height="15" fill="rgb(231,15,5)" fg:x="76" fg:w="8080"/><text x="1.1815%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (8,080 samples, 99.03%)</title><rect x="0.9315%" y="357" width="99.0317%" height="15" fill="rgb(252,35,15)" fg:x="76" fg:w="8080"/><text x="1.1815%" y="367.50">main::main</text></g><g><title>rand::rng::Rng::gen (1 samples, 0.01%)</title><rect x="99.9510%" y="341" width="0.0123%" height="15" fill="rgb(248,181,18)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="351.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.01%)</title><rect x="99.9510%" y="325" width="0.0123%" height="15" fill="rgb(233,39,42)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="335.50"></text></g><g><title>rand::rng::Rng::gen (1 samples, 0.01%)</title><rect x="99.9510%" y="309" width="0.0123%" height="15" fill="rgb(238,110,33)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="319.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.01%)</title><rect x="99.9510%" y="293" width="0.0123%" height="15" fill="rgb(233,195,10)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="303.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (1 samples, 0.01%)</title><rect x="99.9510%" y="277" width="0.0123%" height="15" fill="rgb(254,105,3)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="287.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.01%)</title><rect x="99.9510%" y="261" width="0.0123%" height="15" fill="rgb(221,225,9)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="271.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.01%)</title><rect x="99.9510%" y="245" width="0.0123%" height="15" fill="rgb(224,227,45)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="255.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.01%)</title><rect x="99.9510%" y="229" width="0.0123%" height="15" fill="rgb(229,198,43)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="239.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.01%)</title><rect x="99.9510%" y="213" width="0.0123%" height="15" fill="rgb(206,209,35)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="223.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.01%)</title><rect x="99.9510%" y="197" width="0.0123%" height="15" fill="rgb(245,195,53)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="207.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1 samples, 0.01%)</title><rect x="99.9510%" y="181" width="0.0123%" height="15" fill="rgb(240,92,26)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.01%)</title><rect x="99.9510%" y="165" width="0.0123%" height="15" fill="rgb(207,40,23)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1 samples, 0.01%)</title><rect x="99.9510%" y="149" width="0.0123%" height="15" fill="rgb(223,111,35)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (1 samples, 0.01%)</title><rect x="99.9510%" y="133" width="0.0123%" height="15" fill="rgb(229,147,28)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="143.50"></text></g><g><title>rand_chacha::guts::round (1 samples, 0.01%)</title><rect x="99.9510%" y="117" width="0.0123%" height="15" fill="rgb(211,29,28)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="127.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (1 samples, 0.01%)</title><rect x="99.9510%" y="101" width="0.0123%" height="15" fill="rgb(228,72,33)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="111.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (1 samples, 0.01%)</title><rect x="99.9510%" y="85" width="0.0123%" height="15" fill="rgb(205,214,31)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="95.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (1 samples, 0.01%)</title><rect x="99.9510%" y="69" width="0.0123%" height="15" fill="rgb(224,111,15)" fg:x="8155" fg:w="1"/><text x="100.2010%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="99.9632%" y="485" width="0.0123%" height="15" fill="rgb(253,21,26)" fg:x="8156" fg:w="1"/><text x="100.2132%" y="495.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.01%)</title><rect x="99.9755%" y="453" width="0.0123%" height="15" fill="rgb(245,139,43)" fg:x="8157" fg:w="1"/><text x="100.2255%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="99.9755%" y="437" width="0.0123%" height="15" fill="rgb(252,170,7)" fg:x="8157" fg:w="1"/><text x="100.2255%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="99.9755%" y="421" width="0.0123%" height="15" fill="rgb(231,118,14)" fg:x="8157" fg:w="1"/><text x="100.2255%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="99.9755%" y="405" width="0.0123%" height="15" fill="rgb(238,83,0)" fg:x="8157" fg:w="1"/><text x="100.2255%" y="415.50"></text></g><g><title>all (8,159 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(221,39,39)" fg:x="0" fg:w="8159"/><text x="0.2500%" y="527.50"></text></g><g><title>main (8,159 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(222,119,46)" fg:x="0" fg:w="8159"/><text x="0.2500%" y="511.50">main</text></g><g><title>main::min_cost (2 samples, 0.02%)</title><rect x="99.9755%" y="485" width="0.0245%" height="15" fill="rgb(222,165,49)" fg:x="8157" fg:w="2"/><text x="100.2255%" y="495.50"></text></g><g><title>main::update_sptree (2 samples, 0.02%)</title><rect x="99.9755%" y="469" width="0.0245%" height="15" fill="rgb(219,113,52)" fg:x="8157" fg:w="2"/><text x="100.2255%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.01%)</title><rect x="99.9877%" y="453" width="0.0123%" height="15" fill="rgb(214,7,15)" fg:x="8158" fg:w="1"/><text x="100.2377%" y="463.50"></text></g></svg></svg>