<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="65300"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.02%)</title><rect x="0.0153%" y="517" width="0.0245%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="16"/><text x="0.2653%" y="527.50"></text></g><g><title>[libc.so.6] (26 samples, 0.04%)</title><rect x="0.0429%" y="517" width="0.0398%" height="15" fill="rgb(217,0,24)" fg:x="28" fg:w="26"/><text x="0.2929%" y="527.50"></text></g><g><title>core::num::from_str_radix (18 samples, 0.03%)</title><rect x="0.0980%" y="517" width="0.0276%" height="15" fill="rgb(221,193,54)" fg:x="64" fg:w="18"/><text x="0.3480%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.02%)</title><rect x="0.1302%" y="389" width="0.0245%" height="15" fill="rgb(248,212,6)" fg:x="85" fg:w="16"/><text x="0.3802%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (16 samples, 0.02%)</title><rect x="0.1302%" y="373" width="0.0245%" height="15" fill="rgb(208,68,35)" fg:x="85" fg:w="16"/><text x="0.3802%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (16 samples, 0.02%)</title><rect x="0.1302%" y="357" width="0.0245%" height="15" fill="rgb(232,128,0)" fg:x="85" fg:w="16"/><text x="0.3802%" y="367.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.03%)</title><rect x="0.1302%" y="469" width="0.0337%" height="15" fill="rgb(207,160,47)" fg:x="85" fg:w="22"/><text x="0.3802%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.03%)</title><rect x="0.1302%" y="453" width="0.0337%" height="15" fill="rgb(228,23,34)" fg:x="85" fg:w="22"/><text x="0.3802%" y="463.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.03%)</title><rect x="0.1302%" y="437" width="0.0337%" height="15" fill="rgb(218,30,26)" fg:x="85" fg:w="22"/><text x="0.3802%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (22 samples, 0.03%)</title><rect x="0.1302%" y="421" width="0.0337%" height="15" fill="rgb(220,122,19)" fg:x="85" fg:w="22"/><text x="0.3802%" y="431.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (22 samples, 0.03%)</title><rect x="0.1302%" y="405" width="0.0337%" height="15" fill="rgb(250,228,42)" fg:x="85" fg:w="22"/><text x="0.3802%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.01%)</title><rect x="0.1639%" y="437" width="0.0107%" height="15" fill="rgb(240,193,28)" fg:x="107" fg:w="7"/><text x="0.4139%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.01%)</title><rect x="0.1639%" y="421" width="0.0107%" height="15" fill="rgb(216,20,37)" fg:x="107" fg:w="7"/><text x="0.4139%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.01%)</title><rect x="0.1639%" y="405" width="0.0107%" height="15" fill="rgb(206,188,39)" fg:x="107" fg:w="7"/><text x="0.4139%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.01%)</title><rect x="0.1639%" y="389" width="0.0107%" height="15" fill="rgb(217,207,13)" fg:x="107" fg:w="7"/><text x="0.4139%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (13 samples, 0.02%)</title><rect x="0.1838%" y="437" width="0.0199%" height="15" fill="rgb(231,73,38)" fg:x="120" fg:w="13"/><text x="0.4338%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (13 samples, 0.02%)</title><rect x="0.1838%" y="421" width="0.0199%" height="15" fill="rgb(225,20,46)" fg:x="120" fg:w="13"/><text x="0.4338%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="0.1838%" y="405" width="0.0199%" height="15" fill="rgb(210,31,41)" fg:x="120" fg:w="13"/><text x="0.4338%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.02%)</title><rect x="0.1838%" y="389" width="0.0199%" height="15" fill="rgb(221,200,47)" fg:x="120" fg:w="13"/><text x="0.4338%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.02%)</title><rect x="0.1838%" y="373" width="0.0199%" height="15" fill="rgb(226,26,5)" fg:x="120" fg:w="13"/><text x="0.4338%" y="383.50"></text></g><g><title>main::parser::parsed_graph (77 samples, 0.12%)</title><rect x="0.1302%" y="517" width="0.1179%" height="15" fill="rgb(249,33,26)" fg:x="85" fg:w="77"/><text x="0.3802%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (77 samples, 0.12%)</title><rect x="0.1302%" y="501" width="0.1179%" height="15" fill="rgb(235,183,28)" fg:x="85" fg:w="77"/><text x="0.3802%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (77 samples, 0.12%)</title><rect x="0.1302%" y="485" width="0.1179%" height="15" fill="rgb(221,5,38)" fg:x="85" fg:w="77"/><text x="0.3802%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (55 samples, 0.08%)</title><rect x="0.1639%" y="469" width="0.0842%" height="15" fill="rgb(247,18,42)" fg:x="107" fg:w="55"/><text x="0.4139%" y="479.50"></text></g><g><title>main::parser::parsed_graph::_{{closure}} (55 samples, 0.08%)</title><rect x="0.1639%" y="453" width="0.0842%" height="15" fill="rgb(241,131,45)" fg:x="107" fg:w="55"/><text x="0.4139%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (29 samples, 0.04%)</title><rect x="0.2037%" y="437" width="0.0444%" height="15" fill="rgb(249,31,29)" fg:x="133" fg:w="29"/><text x="0.4537%" y="447.50"></text></g><g><title>[[stack]] (154 samples, 0.24%)</title><rect x="0.0153%" y="533" width="0.2358%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="154"/><text x="0.2653%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (47 samples, 0.07%)</title><rect x="0.3752%" y="469" width="0.0720%" height="15" fill="rgb(238,160,17)" fg:x="245" fg:w="47"/><text x="0.6252%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (47 samples, 0.07%)</title><rect x="0.3752%" y="453" width="0.0720%" height="15" fill="rgb(214,148,48)" fg:x="245" fg:w="47"/><text x="0.6252%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (47 samples, 0.07%)</title><rect x="0.3752%" y="437" width="0.0720%" height="15" fill="rgb(232,36,49)" fg:x="245" fg:w="47"/><text x="0.6252%" y="447.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (135 samples, 0.21%)</title><rect x="0.2511%" y="517" width="0.2067%" height="15" fill="rgb(209,103,24)" fg:x="164" fg:w="135"/><text x="0.5011%" y="527.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (135 samples, 0.21%)</title><rect x="0.2511%" y="501" width="0.2067%" height="15" fill="rgb(229,88,8)" fg:x="164" fg:w="135"/><text x="0.5011%" y="511.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (54 samples, 0.08%)</title><rect x="0.3752%" y="485" width="0.0827%" height="15" fill="rgb(213,181,19)" fg:x="245" fg:w="54"/><text x="0.6252%" y="495.50"></text></g><g><title>core::slice::memchr::memchr (7 samples, 0.01%)</title><rect x="0.4472%" y="469" width="0.0107%" height="15" fill="rgb(254,191,54)" fg:x="292" fg:w="7"/><text x="0.6972%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (16 samples, 0.02%)</title><rect x="0.4594%" y="517" width="0.0245%" height="15" fill="rgb(241,83,37)" fg:x="300" fg:w="16"/><text x="0.7094%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.01%)</title><rect x="0.4701%" y="501" width="0.0138%" height="15" fill="rgb(233,36,39)" fg:x="307" fg:w="9"/><text x="0.7201%" y="511.50"></text></g><g><title>[anon] (166 samples, 0.25%)</title><rect x="0.2511%" y="533" width="0.2542%" height="15" fill="rgb(226,3,54)" fg:x="164" fg:w="166"/><text x="0.5011%" y="543.50"></text></g><g><title>realloc (14 samples, 0.02%)</title><rect x="0.4839%" y="517" width="0.0214%" height="15" fill="rgb(245,192,40)" fg:x="316" fg:w="14"/><text x="0.7339%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 0.02%)</title><rect x="0.5054%" y="533" width="0.0153%" height="15" fill="rgb(238,167,29)" fg:x="330" fg:w="10"/><text x="0.7554%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (17 samples, 0.03%)</title><rect x="0.5727%" y="485" width="0.0260%" height="15" fill="rgb(232,182,51)" fg:x="374" fg:w="17"/><text x="0.8227%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (17 samples, 0.03%)</title><rect x="0.5727%" y="469" width="0.0260%" height="15" fill="rgb(231,60,39)" fg:x="374" fg:w="17"/><text x="0.8227%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 0.01%)</title><rect x="0.5865%" y="453" width="0.0123%" height="15" fill="rgb(208,69,12)" fg:x="383" fg:w="8"/><text x="0.8365%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.01%)</title><rect x="0.5865%" y="437" width="0.0123%" height="15" fill="rgb(235,93,37)" fg:x="383" fg:w="8"/><text x="0.8365%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (82 samples, 0.13%)</title><rect x="0.5268%" y="517" width="0.1256%" height="15" fill="rgb(213,116,39)" fg:x="344" fg:w="82"/><text x="0.7768%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (52 samples, 0.08%)</title><rect x="0.5727%" y="501" width="0.0796%" height="15" fill="rgb(222,207,29)" fg:x="374" fg:w="52"/><text x="0.8227%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (35 samples, 0.05%)</title><rect x="0.5988%" y="485" width="0.0536%" height="15" fill="rgb(206,96,30)" fg:x="391" fg:w="35"/><text x="0.8488%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (35 samples, 0.05%)</title><rect x="0.5988%" y="469" width="0.0536%" height="15" fill="rgb(218,138,4)" fg:x="391" fg:w="35"/><text x="0.8488%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (35 samples, 0.05%)</title><rect x="0.5988%" y="453" width="0.0536%" height="15" fill="rgb(250,191,14)" fg:x="391" fg:w="35"/><text x="0.8488%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (35 samples, 0.05%)</title><rect x="0.5988%" y="437" width="0.0536%" height="15" fill="rgb(239,60,40)" fg:x="391" fg:w="35"/><text x="0.8488%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.05%)</title><rect x="0.5988%" y="421" width="0.0536%" height="15" fill="rgb(206,27,48)" fg:x="391" fg:w="35"/><text x="0.8488%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.05%)</title><rect x="0.5988%" y="405" width="0.0536%" height="15" fill="rgb(225,35,8)" fg:x="391" fg:w="35"/><text x="0.8488%" y="415.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.05%)</title><rect x="0.5988%" y="389" width="0.0536%" height="15" fill="rgb(250,213,24)" fg:x="391" fg:w="35"/><text x="0.8488%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (21 samples, 0.03%)</title><rect x="0.9832%" y="469" width="0.0322%" height="15" fill="rgb(247,123,22)" fg:x="642" fg:w="21"/><text x="1.2332%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (21 samples, 0.03%)</title><rect x="0.9832%" y="453" width="0.0322%" height="15" fill="rgb(231,138,38)" fg:x="642" fg:w="21"/><text x="1.2332%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (21 samples, 0.03%)</title><rect x="0.9832%" y="437" width="0.0322%" height="15" fill="rgb(231,145,46)" fg:x="642" fg:w="21"/><text x="1.2332%" y="447.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (246 samples, 0.38%)</title><rect x="0.6524%" y="517" width="0.3767%" height="15" fill="rgb(251,118,11)" fg:x="426" fg:w="246"/><text x="0.9024%" y="527.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (98 samples, 0.15%)</title><rect x="0.8790%" y="501" width="0.1501%" height="15" fill="rgb(217,147,25)" fg:x="574" fg:w="98"/><text x="1.1290%" y="511.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (30 samples, 0.05%)</title><rect x="0.9832%" y="485" width="0.0459%" height="15" fill="rgb(247,81,37)" fg:x="642" fg:w="30"/><text x="1.2332%" y="495.50"></text></g><g><title>core::slice::memchr::memchr (9 samples, 0.01%)</title><rect x="1.0153%" y="469" width="0.0138%" height="15" fill="rgb(209,12,38)" fg:x="663" fg:w="9"/><text x="1.2653%" y="479.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="1.0291%" y="517" width="0.0245%" height="15" fill="rgb(227,1,9)" fg:x="672" fg:w="16"/><text x="1.2791%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.03%)</title><rect x="1.0658%" y="517" width="0.0322%" height="15" fill="rgb(248,47,43)" fg:x="696" fg:w="21"/><text x="1.3158%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (10 samples, 0.02%)</title><rect x="1.0827%" y="501" width="0.0153%" height="15" fill="rgb(221,10,30)" fg:x="707" fg:w="10"/><text x="1.3327%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (10 samples, 0.02%)</title><rect x="1.0827%" y="485" width="0.0153%" height="15" fill="rgb(210,229,1)" fg:x="707" fg:w="10"/><text x="1.3327%" y="495.50"></text></g><g><title>alloc::alloc::realloc (10 samples, 0.02%)</title><rect x="1.0827%" y="469" width="0.0153%" height="15" fill="rgb(222,148,37)" fg:x="707" fg:w="10"/><text x="1.3327%" y="479.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for isize&gt;::from_str (18 samples, 0.03%)</title><rect x="1.1011%" y="517" width="0.0276%" height="15" fill="rgb(234,67,33)" fg:x="719" fg:w="18"/><text x="1.3511%" y="527.50"></text></g><g><title>main::min_cost (8 samples, 0.01%)</title><rect x="1.1409%" y="517" width="0.0123%" height="15" fill="rgb(247,98,35)" fg:x="745" fg:w="8"/><text x="1.3909%" y="527.50"></text></g><g><title>main::update_sptree (8 samples, 0.01%)</title><rect x="1.1409%" y="501" width="0.0123%" height="15" fill="rgb(247,138,52)" fg:x="745" fg:w="8"/><text x="1.3909%" y="511.50"></text></g><g><title>[unknown] (426 samples, 0.65%)</title><rect x="0.5268%" y="533" width="0.6524%" height="15" fill="rgb(213,79,30)" fg:x="344" fg:w="426"/><text x="0.7768%" y="543.50"></text></g><g><title>malloc (17 samples, 0.03%)</title><rect x="1.1531%" y="517" width="0.0260%" height="15" fill="rgb(246,177,23)" fg:x="753" fg:w="17"/><text x="1.4031%" y="527.50"></text></g><g><title>__rdl_dealloc (19 samples, 0.03%)</title><rect x="1.1792%" y="533" width="0.0291%" height="15" fill="rgb(230,62,27)" fg:x="770" fg:w="19"/><text x="1.4292%" y="543.50"></text></g><g><title>__rdl_realloc (7 samples, 0.01%)</title><rect x="1.2083%" y="533" width="0.0107%" height="15" fill="rgb(216,154,8)" fg:x="789" fg:w="7"/><text x="1.4583%" y="543.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (11 samples, 0.02%)</title><rect x="1.2328%" y="277" width="0.0168%" height="15" fill="rgb(244,35,45)" fg:x="805" fg:w="11"/><text x="1.4828%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (24 samples, 0.04%)</title><rect x="1.2282%" y="373" width="0.0368%" height="15" fill="rgb(251,115,12)" fg:x="802" fg:w="24"/><text x="1.4782%" y="383.50"></text></g><g><title>main::min_cost::_{{closure}} (24 samples, 0.04%)</title><rect x="1.2282%" y="357" width="0.0368%" height="15" fill="rgb(240,54,50)" fg:x="802" fg:w="24"/><text x="1.4782%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (24 samples, 0.04%)</title><rect x="1.2282%" y="341" width="0.0368%" height="15" fill="rgb(233,84,52)" fg:x="802" fg:w="24"/><text x="1.4782%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (24 samples, 0.04%)</title><rect x="1.2282%" y="325" width="0.0368%" height="15" fill="rgb(207,117,47)" fg:x="802" fg:w="24"/><text x="1.4782%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (21 samples, 0.03%)</title><rect x="1.2328%" y="309" width="0.0322%" height="15" fill="rgb(249,43,39)" fg:x="805" fg:w="21"/><text x="1.4828%" y="319.50"></text></g><g><title>main::min_cost::_{{closure}}::_{{closure}} (21 samples, 0.03%)</title><rect x="1.2328%" y="293" width="0.0322%" height="15" fill="rgb(209,38,44)" fg:x="805" fg:w="21"/><text x="1.4828%" y="303.50"></text></g><g><title>&lt;i64 as core::ops::arith::SubAssign&gt;::sub_assign (10 samples, 0.02%)</title><rect x="1.2496%" y="277" width="0.0153%" height="15" fill="rgb(236,212,23)" fg:x="816" fg:w="10"/><text x="1.4996%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="1.2649%" y="293" width="0.0291%" height="15" fill="rgb(242,79,21)" fg:x="826" fg:w="19"/><text x="1.5149%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="1.2757%" y="277" width="0.0184%" height="15" fill="rgb(211,96,35)" fg:x="833" fg:w="12"/><text x="1.5257%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="1.2757%" y="261" width="0.0184%" height="15" fill="rgb(253,215,40)" fg:x="833" fg:w="12"/><text x="1.5257%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (10 samples, 0.02%)</title><rect x="1.2787%" y="245" width="0.0153%" height="15" fill="rgb(211,81,21)" fg:x="835" fg:w="10"/><text x="1.5287%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (10 samples, 0.02%)</title><rect x="1.2787%" y="229" width="0.0153%" height="15" fill="rgb(208,190,38)" fg:x="835" fg:w="10"/><text x="1.5287%" y="239.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (20 samples, 0.03%)</title><rect x="1.2940%" y="277" width="0.0306%" height="15" fill="rgb(235,213,38)" fg:x="845" fg:w="20"/><text x="1.5440%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (195 samples, 0.30%)</title><rect x="1.2940%" y="293" width="0.2986%" height="15" fill="rgb(237,122,38)" fg:x="845" fg:w="195"/><text x="1.5440%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::clone::Clone for [T: N]&gt;::clone (175 samples, 0.27%)</title><rect x="1.3247%" y="277" width="0.2680%" height="15" fill="rgb(244,218,35)" fg:x="865" fg:w="175"/><text x="1.5747%" y="287.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (175 samples, 0.27%)</title><rect x="1.3247%" y="261" width="0.2680%" height="15" fill="rgb(240,68,47)" fg:x="865" fg:w="175"/><text x="1.5747%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (321 samples, 0.49%)</title><rect x="1.2649%" y="373" width="0.4916%" height="15" fill="rgb(210,16,53)" fg:x="826" fg:w="321"/><text x="1.5149%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (321 samples, 0.49%)</title><rect x="1.2649%" y="357" width="0.4916%" height="15" fill="rgb(235,124,12)" fg:x="826" fg:w="321"/><text x="1.5149%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (321 samples, 0.49%)</title><rect x="1.2649%" y="341" width="0.4916%" height="15" fill="rgb(224,169,11)" fg:x="826" fg:w="321"/><text x="1.5149%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (321 samples, 0.49%)</title><rect x="1.2649%" y="325" width="0.4916%" height="15" fill="rgb(250,166,2)" fg:x="826" fg:w="321"/><text x="1.5149%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (321 samples, 0.49%)</title><rect x="1.2649%" y="309" width="0.4916%" height="15" fill="rgb(242,216,29)" fg:x="826" fg:w="321"/><text x="1.5149%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (107 samples, 0.16%)</title><rect x="1.5926%" y="293" width="0.1639%" height="15" fill="rgb(230,116,27)" fg:x="1040" fg:w="107"/><text x="1.8426%" y="303.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (41 samples, 0.06%)</title><rect x="1.9632%" y="309" width="0.0628%" height="15" fill="rgb(228,99,48)" fg:x="1282" fg:w="41"/><text x="2.2132%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (27 samples, 0.04%)</title><rect x="2.0260%" y="309" width="0.0413%" height="15" fill="rgb(253,11,6)" fg:x="1323" fg:w="27"/><text x="2.2760%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (209 samples, 0.32%)</title><rect x="1.7565%" y="373" width="0.3201%" height="15" fill="rgb(247,143,39)" fg:x="1147" fg:w="209"/><text x="2.0065%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (209 samples, 0.32%)</title><rect x="1.7565%" y="357" width="0.3201%" height="15" fill="rgb(236,97,10)" fg:x="1147" fg:w="209"/><text x="2.0065%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (205 samples, 0.31%)</title><rect x="1.7626%" y="341" width="0.3139%" height="15" fill="rgb(233,208,19)" fg:x="1151" fg:w="205"/><text x="2.0126%" y="351.50"></text></g><g><title>main::min_cost::_{{closure}} (205 samples, 0.31%)</title><rect x="1.7626%" y="325" width="0.3139%" height="15" fill="rgb(216,164,2)" fg:x="1151" fg:w="205"/><text x="2.0126%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (25 samples, 0.04%)</title><rect x="2.2619%" y="357" width="0.0383%" height="15" fill="rgb(220,129,5)" fg:x="1477" fg:w="25"/><text x="2.5119%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (30 samples, 0.05%)</title><rect x="2.3002%" y="357" width="0.0459%" height="15" fill="rgb(242,17,10)" fg:x="1502" fg:w="30"/><text x="2.5502%" y="367.50"></text></g><g><title>main::_best_arc (185 samples, 0.28%)</title><rect x="2.0781%" y="373" width="0.2833%" height="15" fill="rgb(242,107,0)" fg:x="1357" fg:w="185"/><text x="2.3281%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.02%)</title><rect x="2.3461%" y="357" width="0.0153%" height="15" fill="rgb(251,28,31)" fg:x="1532" fg:w="10"/><text x="2.5961%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10 samples, 0.02%)</title><rect x="2.3461%" y="341" width="0.0153%" height="15" fill="rgb(233,223,10)" fg:x="1532" fg:w="10"/><text x="2.5961%" y="351.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (10 samples, 0.02%)</title><rect x="2.3461%" y="325" width="0.0153%" height="15" fill="rgb(215,21,27)" fg:x="1532" fg:w="10"/><text x="2.5961%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (10 samples, 0.02%)</title><rect x="2.3461%" y="309" width="0.0153%" height="15" fill="rgb(232,23,21)" fg:x="1532" fg:w="10"/><text x="2.5961%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (3,400 samples, 5.21%)</title><rect x="29.2389%" y="357" width="5.2067%" height="15" fill="rgb(244,5,23)" fg:x="19093" fg:w="3400"/><text x="29.4889%" y="367.50">&lt;i64 a..</text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (802 samples, 1.23%)</title><rect x="34.4456%" y="357" width="1.2282%" height="15" fill="rgb(226,81,46)" fg:x="22493" fg:w="802"/><text x="34.6956%" y="367.50"></text></g><g><title>&lt;i64 as num_traits::sign::Signed&gt;::is_negative (270 samples, 0.41%)</title><rect x="35.6738%" y="357" width="0.4135%" height="15" fill="rgb(247,70,30)" fg:x="23295" fg:w="270"/><text x="35.9238%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (3,544 samples, 5.43%)</title><rect x="36.0873%" y="357" width="5.4273%" height="15" fill="rgb(212,68,19)" fg:x="23565" fg:w="3544"/><text x="36.3373%" y="367.50">core::c..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (709 samples, 1.09%)</title><rect x="41.5590%" y="325" width="1.0858%" height="15" fill="rgb(240,187,13)" fg:x="27138" fg:w="709"/><text x="41.8090%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (709 samples, 1.09%)</title><rect x="41.5590%" y="309" width="1.0858%" height="15" fill="rgb(223,113,26)" fg:x="27138" fg:w="709"/><text x="41.8090%" y="319.50"></text></g><g><title>main::_block_search_v1 (26,698 samples, 40.89%)</title><rect x="2.3614%" y="373" width="40.8851%" height="15" fill="rgb(206,192,2)" fg:x="1542" fg:w="26698"/><text x="2.6114%" y="383.50">main::_block_search_v1</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,131 samples, 1.73%)</title><rect x="41.5145%" y="357" width="1.7320%" height="15" fill="rgb(241,108,4)" fg:x="27109" fg:w="1131"/><text x="41.7645%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,131 samples, 1.73%)</title><rect x="41.5145%" y="341" width="1.7320%" height="15" fill="rgb(247,173,49)" fg:x="27109" fg:w="1131"/><text x="41.7645%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (393 samples, 0.60%)</title><rect x="42.6447%" y="325" width="0.6018%" height="15" fill="rgb(224,114,35)" fg:x="27847" fg:w="393"/><text x="42.8947%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (250 samples, 0.38%)</title><rect x="49.1440%" y="357" width="0.3828%" height="15" fill="rgb(245,159,27)" fg:x="32091" fg:w="250"/><text x="49.3940%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (250 samples, 0.38%)</title><rect x="49.1440%" y="341" width="0.3828%" height="15" fill="rgb(245,172,44)" fg:x="32091" fg:w="250"/><text x="49.3940%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (250 samples, 0.38%)</title><rect x="49.1440%" y="325" width="0.3828%" height="15" fill="rgb(236,23,11)" fg:x="32091" fg:w="250"/><text x="49.3940%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (15 samples, 0.02%)</title><rect x="49.5268%" y="357" width="0.0230%" height="15" fill="rgb(205,117,38)" fg:x="32341" fg:w="15"/><text x="49.7768%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (15 samples, 0.02%)</title><rect x="49.5268%" y="341" width="0.0230%" height="15" fill="rgb(237,72,25)" fg:x="32341" fg:w="15"/><text x="49.7768%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (15 samples, 0.02%)</title><rect x="49.5268%" y="325" width="0.0230%" height="15" fill="rgb(244,70,9)" fg:x="32341" fg:w="15"/><text x="49.7768%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::arith::Sub&gt;::sub (193 samples, 0.30%)</title><rect x="49.5528%" y="357" width="0.2956%" height="15" fill="rgb(217,125,39)" fg:x="32358" fg:w="193"/><text x="49.8028%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::le (20 samples, 0.03%)</title><rect x="49.8652%" y="357" width="0.0306%" height="15" fill="rgb(235,36,10)" fg:x="32562" fg:w="20"/><text x="50.1152%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (15 samples, 0.02%)</title><rect x="49.8959%" y="357" width="0.0230%" height="15" fill="rgb(251,123,47)" fg:x="32582" fg:w="15"/><text x="50.1459%" y="367.50"></text></g><g><title>main::_compute_flowchange (4,390 samples, 6.72%)</title><rect x="43.2466%" y="373" width="6.7228%" height="15" fill="rgb(221,13,13)" fg:x="28240" fg:w="4390"/><text x="43.4966%" y="383.50">main::_co..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (33 samples, 0.05%)</title><rect x="49.9188%" y="357" width="0.0505%" height="15" fill="rgb(238,131,9)" fg:x="32597" fg:w="33"/><text x="50.1688%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="50.0031%" y="309" width="0.0107%" height="15" fill="rgb(211,50,8)" fg:x="32652" fg:w="7"/><text x="50.2531%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="50.0031%" y="293" width="0.0107%" height="15" fill="rgb(245,182,24)" fg:x="32652" fg:w="7"/><text x="50.2531%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7 samples, 0.01%)</title><rect x="50.0031%" y="277" width="0.0107%" height="15" fill="rgb(242,14,37)" fg:x="32652" fg:w="7"/><text x="50.2531%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.11%)</title><rect x="50.0031%" y="325" width="0.1057%" height="15" fill="rgb(246,228,12)" fg:x="32652" fg:w="69"/><text x="50.2531%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (62 samples, 0.09%)</title><rect x="50.0138%" y="309" width="0.0949%" height="15" fill="rgb(213,55,15)" fg:x="32659" fg:w="62"/><text x="50.2638%" y="319.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (62 samples, 0.09%)</title><rect x="50.0138%" y="293" width="0.0949%" height="15" fill="rgb(209,9,3)" fg:x="32659" fg:w="62"/><text x="50.2638%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.01%)</title><rect x="50.7856%" y="293" width="0.0138%" height="15" fill="rgb(230,59,30)" fg:x="33163" fg:w="9"/><text x="51.0356%" y="303.50"></text></g><g><title>core::ptr::write (9 samples, 0.01%)</title><rect x="50.7856%" y="277" width="0.0138%" height="15" fill="rgb(209,121,21)" fg:x="33163" fg:w="9"/><text x="51.0356%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (568 samples, 0.87%)</title><rect x="49.9694%" y="357" width="0.8698%" height="15" fill="rgb(220,109,13)" fg:x="32630" fg:w="568"/><text x="50.2194%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (568 samples, 0.87%)</title><rect x="49.9694%" y="341" width="0.8698%" height="15" fill="rgb(232,18,1)" fg:x="32630" fg:w="568"/><text x="50.2194%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (477 samples, 0.73%)</title><rect x="50.1087%" y="325" width="0.7305%" height="15" fill="rgb(215,41,42)" fg:x="32721" fg:w="477"/><text x="50.3587%" y="335.50"></text></g><g><title>main::initialization::_{{closure}} (477 samples, 0.73%)</title><rect x="50.1087%" y="309" width="0.7305%" height="15" fill="rgb(224,123,36)" fg:x="32721" fg:w="477"/><text x="50.3587%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (26 samples, 0.04%)</title><rect x="50.7994%" y="293" width="0.0398%" height="15" fill="rgb(240,125,3)" fg:x="33172" fg:w="26"/><text x="51.0494%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26 samples, 0.04%)</title><rect x="50.7994%" y="277" width="0.0398%" height="15" fill="rgb(205,98,50)" fg:x="33172" fg:w="26"/><text x="51.0494%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (8 samples, 0.01%)</title><rect x="50.8270%" y="261" width="0.0123%" height="15" fill="rgb(205,185,37)" fg:x="33190" fg:w="8"/><text x="51.0770%" y="271.50"></text></g><g><title>main::initialization::_{{closure}}::_{{closure}} (8 samples, 0.01%)</title><rect x="50.8270%" y="245" width="0.0123%" height="15" fill="rgb(238,207,15)" fg:x="33190" fg:w="8"/><text x="51.0770%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_weight (8 samples, 0.01%)</title><rect x="50.8270%" y="229" width="0.0123%" height="15" fill="rgb(213,199,42)" fg:x="33190" fg:w="8"/><text x="51.0770%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 0.01%)</title><rect x="50.8270%" y="213" width="0.0123%" height="15" fill="rgb(235,201,11)" fg:x="33190" fg:w="8"/><text x="51.0770%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (41 samples, 0.06%)</title><rect x="50.8407%" y="341" width="0.0628%" height="15" fill="rgb(207,46,11)" fg:x="33199" fg:w="41"/><text x="51.0907%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (41 samples, 0.06%)</title><rect x="50.8407%" y="325" width="0.0628%" height="15" fill="rgb(241,35,35)" fg:x="33199" fg:w="41"/><text x="51.0907%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (41 samples, 0.06%)</title><rect x="50.8407%" y="309" width="0.0628%" height="15" fill="rgb(243,32,47)" fg:x="33199" fg:w="41"/><text x="51.0907%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (40 samples, 0.06%)</title><rect x="50.8423%" y="293" width="0.0613%" height="15" fill="rgb(247,202,23)" fg:x="33200" fg:w="40"/><text x="51.0923%" y="303.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (40 samples, 0.06%)</title><rect x="50.8423%" y="277" width="0.0613%" height="15" fill="rgb(219,102,11)" fg:x="33200" fg:w="40"/><text x="51.0923%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (40 samples, 0.06%)</title><rect x="50.8423%" y="261" width="0.0613%" height="15" fill="rgb(243,110,44)" fg:x="33200" fg:w="40"/><text x="51.0923%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (40 samples, 0.06%)</title><rect x="50.8423%" y="245" width="0.0613%" height="15" fill="rgb(222,74,54)" fg:x="33200" fg:w="40"/><text x="51.0923%" y="255.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (33 samples, 0.05%)</title><rect x="50.8530%" y="229" width="0.0505%" height="15" fill="rgb(216,99,12)" fg:x="33207" fg:w="33"/><text x="51.1030%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (33 samples, 0.05%)</title><rect x="50.8530%" y="213" width="0.0505%" height="15" fill="rgb(226,22,26)" fg:x="33207" fg:w="33"/><text x="51.1030%" y="223.50"></text></g><g><title>main::compute_node_potentials (46 samples, 0.07%)</title><rect x="50.8392%" y="357" width="0.0704%" height="15" fill="rgb(217,163,10)" fg:x="33198" fg:w="46"/><text x="51.0892%" y="367.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1,817 samples, 2.78%)</title><rect x="51.0015%" y="325" width="2.7825%" height="15" fill="rgb(213,25,53)" fg:x="33304" fg:w="1817"/><text x="51.2515%" y="335.50">&lt;p..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1,817 samples, 2.78%)</title><rect x="51.0015%" y="309" width="2.7825%" height="15" fill="rgb(252,105,26)" fg:x="33304" fg:w="1817"/><text x="51.2515%" y="319.50">co..</text></g><g><title>main::initialization (2,500 samples, 3.83%)</title><rect x="49.9694%" y="373" width="3.8285%" height="15" fill="rgb(220,39,43)" fg:x="32630" fg:w="2500"/><text x="50.2194%" y="383.50">main..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (1,883 samples, 2.88%)</title><rect x="50.9142%" y="357" width="2.8836%" height="15" fill="rgb(229,68,48)" fg:x="33247" fg:w="1883"/><text x="51.1642%" y="367.50">pe..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (1,883 samples, 2.88%)</title><rect x="50.9142%" y="341" width="2.8836%" height="15" fill="rgb(252,8,32)" fg:x="33247" fg:w="1883"/><text x="51.1642%" y="351.50">pe..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (9 samples, 0.01%)</title><rect x="53.7841%" y="325" width="0.0138%" height="15" fill="rgb(223,20,43)" fg:x="35121" fg:w="9"/><text x="54.0341%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (9 samples, 0.01%)</title><rect x="53.7841%" y="309" width="0.0138%" height="15" fill="rgb(229,81,49)" fg:x="35121" fg:w="9"/><text x="54.0341%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (84 samples, 0.13%)</title><rect x="62.7121%" y="357" width="0.1286%" height="15" fill="rgb(236,28,36)" fg:x="40951" fg:w="84"/><text x="62.9621%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (84 samples, 0.13%)</title><rect x="62.7121%" y="341" width="0.1286%" height="15" fill="rgb(249,185,26)" fg:x="40951" fg:w="84"/><text x="62.9621%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (84 samples, 0.13%)</title><rect x="62.7121%" y="325" width="0.1286%" height="15" fill="rgb(249,174,33)" fg:x="40951" fg:w="84"/><text x="62.9621%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (1,368 samples, 2.09%)</title><rect x="62.8515%" y="357" width="2.0949%" height="15" fill="rgb(233,201,37)" fg:x="41042" fg:w="1368"/><text x="63.1015%" y="367.50">&lt;..</text></g><g><title>main::update_node_potentials (7,298 samples, 11.18%)</title><rect x="53.7979%" y="373" width="11.1761%" height="15" fill="rgb(221,78,26)" fg:x="35130" fg:w="7298"/><text x="54.0479%" y="383.50">main::update_nod..</text></g><g><title>main::get_reduced_cost_edgeindex (18 samples, 0.03%)</title><rect x="64.9464%" y="357" width="0.0276%" height="15" fill="rgb(250,127,30)" fg:x="42410" fg:w="18"/><text x="65.1964%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (129 samples, 0.20%)</title><rect x="77.1960%" y="357" width="0.1975%" height="15" fill="rgb(230,49,44)" fg:x="50409" fg:w="129"/><text x="77.4460%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (129 samples, 0.20%)</title><rect x="77.1960%" y="341" width="0.1975%" height="15" fill="rgb(229,67,23)" fg:x="50409" fg:w="129"/><text x="77.4460%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (129 samples, 0.20%)</title><rect x="77.1960%" y="325" width="0.1975%" height="15" fill="rgb(249,83,47)" fg:x="50409" fg:w="129"/><text x="77.4460%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (167 samples, 0.26%)</title><rect x="85.3093%" y="309" width="0.2557%" height="15" fill="rgb(215,43,3)" fg:x="55707" fg:w="167"/><text x="85.5593%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (167 samples, 0.26%)</title><rect x="85.3093%" y="293" width="0.2557%" height="15" fill="rgb(238,154,13)" fg:x="55707" fg:w="167"/><text x="85.5593%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (167 samples, 0.26%)</title><rect x="85.3093%" y="277" width="0.2557%" height="15" fill="rgb(219,56,2)" fg:x="55707" fg:w="167"/><text x="85.5593%" y="287.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (188 samples, 0.29%)</title><rect x="85.5697%" y="309" width="0.2879%" height="15" fill="rgb(233,0,4)" fg:x="55877" fg:w="188"/><text x="85.8197%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (41 samples, 0.06%)</title><rect x="85.8591%" y="293" width="0.0628%" height="15" fill="rgb(235,30,7)" fg:x="56066" fg:w="41"/><text x="86.1091%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (41 samples, 0.06%)</title><rect x="85.8591%" y="277" width="0.0628%" height="15" fill="rgb(250,79,13)" fg:x="56066" fg:w="41"/><text x="86.1091%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (41 samples, 0.06%)</title><rect x="85.8591%" y="261" width="0.0628%" height="15" fill="rgb(211,146,34)" fg:x="56066" fg:w="41"/><text x="86.1091%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (41 samples, 0.06%)</title><rect x="85.8591%" y="245" width="0.0628%" height="15" fill="rgb(228,22,38)" fg:x="56066" fg:w="41"/><text x="86.1091%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (41 samples, 0.06%)</title><rect x="85.8591%" y="229" width="0.0628%" height="15" fill="rgb(235,168,5)" fg:x="56066" fg:w="41"/><text x="86.1091%" y="239.50"></text></g><g><title>alloc::alloc::realloc (41 samples, 0.06%)</title><rect x="85.8591%" y="213" width="0.0628%" height="15" fill="rgb(221,155,16)" fg:x="56066" fg:w="41"/><text x="86.1091%" y="223.50"></text></g><g><title>realloc (40 samples, 0.06%)</title><rect x="85.8606%" y="197" width="0.0613%" height="15" fill="rgb(215,215,53)" fg:x="56067" fg:w="40"/><text x="86.1106%" y="207.50"></text></g><g><title>[libc.so.6] (37 samples, 0.06%)</title><rect x="85.8652%" y="181" width="0.0567%" height="15" fill="rgb(223,4,10)" fg:x="56070" fg:w="37"/><text x="86.1152%" y="191.50"></text></g><g><title>[libc.so.6] (33 samples, 0.05%)</title><rect x="85.8714%" y="165" width="0.0505%" height="15" fill="rgb(234,103,6)" fg:x="56074" fg:w="33"/><text x="86.1214%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (48 samples, 0.07%)</title><rect x="85.8576%" y="309" width="0.0735%" height="15" fill="rgb(227,97,0)" fg:x="56065" fg:w="48"/><text x="86.1076%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (5,576 samples, 8.54%)</title><rect x="77.3951%" y="357" width="8.5391%" height="15" fill="rgb(234,150,53)" fg:x="50539" fg:w="5576"/><text x="77.6451%" y="367.50">&lt;core::iter:..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (5,576 samples, 8.54%)</title><rect x="77.3951%" y="341" width="8.5391%" height="15" fill="rgb(228,201,54)" fg:x="50539" fg:w="5576"/><text x="77.6451%" y="351.50">&lt;core::iter:..</text></g><g><title>main::update_sptree::_{{closure}} (5,574 samples, 8.54%)</title><rect x="77.3982%" y="325" width="8.5360%" height="15" fill="rgb(222,22,37)" fg:x="50541" fg:w="5574"/><text x="77.6482%" y="335.50">main::update..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.09%)</title><rect x="86.3675%" y="341" width="0.0904%" height="15" fill="rgb(237,53,32)" fg:x="56398" fg:w="59"/><text x="86.6175%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (25 samples, 0.04%)</title><rect x="86.4196%" y="325" width="0.0383%" height="15" fill="rgb(233,25,53)" fg:x="56432" fg:w="25"/><text x="86.6696%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (243 samples, 0.37%)</title><rect x="87.3369%" y="325" width="0.3721%" height="15" fill="rgb(210,40,34)" fg:x="57031" fg:w="243"/><text x="87.5869%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (243 samples, 0.37%)</title><rect x="87.3369%" y="309" width="0.3721%" height="15" fill="rgb(241,220,44)" fg:x="57031" fg:w="243"/><text x="87.5869%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (243 samples, 0.37%)</title><rect x="87.3369%" y="293" width="0.3721%" height="15" fill="rgb(235,28,35)" fg:x="57031" fg:w="243"/><text x="87.5869%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (2,714 samples, 4.16%)</title><rect x="85.9418%" y="357" width="4.1562%" height="15" fill="rgb(210,56,17)" fg:x="56120" fg:w="2714"/><text x="86.1918%" y="367.50">&lt;core..</text></g><g><title>main::update_sptree::_{{closure}} (2,377 samples, 3.64%)</title><rect x="86.4579%" y="341" width="3.6401%" height="15" fill="rgb(224,130,29)" fg:x="56457" fg:w="2377"/><text x="86.7079%" y="351.50">main..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1,560 samples, 2.39%)</title><rect x="87.7090%" y="325" width="2.3890%" height="15" fill="rgb(235,212,8)" fg:x="57274" fg:w="1560"/><text x="87.9590%" y="335.50">co..</text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (106 samples, 0.16%)</title><rect x="90.0980%" y="357" width="0.1623%" height="15" fill="rgb(223,33,50)" fg:x="58834" fg:w="106"/><text x="90.3480%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (121 samples, 0.19%)</title><rect x="90.3430%" y="293" width="0.1853%" height="15" fill="rgb(219,149,13)" fg:x="58994" fg:w="121"/><text x="90.5930%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (121 samples, 0.19%)</title><rect x="90.3430%" y="277" width="0.1853%" height="15" fill="rgb(250,156,29)" fg:x="58994" fg:w="121"/><text x="90.5930%" y="287.50"></text></g><g><title>alloc::alloc::realloc (120 samples, 0.18%)</title><rect x="90.3446%" y="261" width="0.1838%" height="15" fill="rgb(216,193,19)" fg:x="58995" fg:w="120"/><text x="90.5946%" y="271.50"></text></g><g><title>realloc (118 samples, 0.18%)</title><rect x="90.3476%" y="245" width="0.1807%" height="15" fill="rgb(216,135,14)" fg:x="58997" fg:w="118"/><text x="90.5976%" y="255.50"></text></g><g><title>[libc.so.6] (104 samples, 0.16%)</title><rect x="90.3691%" y="229" width="0.1593%" height="15" fill="rgb(241,47,5)" fg:x="59011" fg:w="104"/><text x="90.6191%" y="239.50"></text></g><g><title>[libc.so.6] (90 samples, 0.14%)</title><rect x="90.3905%" y="213" width="0.1378%" height="15" fill="rgb(233,42,35)" fg:x="59025" fg:w="90"/><text x="90.6405%" y="223.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="90.5161%" y="197" width="0.0123%" height="15" fill="rgb(231,13,6)" fg:x="59107" fg:w="8"/><text x="90.7661%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (136 samples, 0.21%)</title><rect x="90.3415%" y="309" width="0.2083%" height="15" fill="rgb(207,181,40)" fg:x="58993" fg:w="136"/><text x="90.5915%" y="319.50"></text></g><g><title>malloc (12 samples, 0.02%)</title><rect x="90.5314%" y="293" width="0.0184%" height="15" fill="rgb(254,173,49)" fg:x="59117" fg:w="12"/><text x="90.7814%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (144 samples, 0.22%)</title><rect x="90.3323%" y="341" width="0.2205%" height="15" fill="rgb(221,1,38)" fg:x="58987" fg:w="144"/><text x="90.5823%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (144 samples, 0.22%)</title><rect x="90.3323%" y="325" width="0.2205%" height="15" fill="rgb(206,124,46)" fg:x="58987" fg:w="144"/><text x="90.5823%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (336 samples, 0.51%)</title><rect x="90.2634%" y="357" width="0.5145%" height="15" fill="rgb(249,21,11)" fg:x="58942" fg:w="336"/><text x="90.5134%" y="367.50"></text></g><g><title>core::ptr::write (145 samples, 0.22%)</title><rect x="90.5559%" y="341" width="0.2221%" height="15" fill="rgb(222,201,40)" fg:x="59133" fg:w="145"/><text x="90.8059%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.01%)</title><rect x="90.7810%" y="309" width="0.0107%" height="15" fill="rgb(235,61,29)" fg:x="59280" fg:w="7"/><text x="91.0310%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.01%)</title><rect x="90.7810%" y="293" width="0.0107%" height="15" fill="rgb(219,207,3)" fg:x="59280" fg:w="7"/><text x="91.0310%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (24 samples, 0.04%)</title><rect x="90.7810%" y="325" width="0.0368%" height="15" fill="rgb(222,56,46)" fg:x="59280" fg:w="24"/><text x="91.0310%" y="335.50"></text></g><g><title>core::ptr::write (17 samples, 0.03%)</title><rect x="90.7917%" y="309" width="0.0260%" height="15" fill="rgb(239,76,54)" fg:x="59287" fg:w="17"/><text x="91.0417%" y="319.50"></text></g><g><title>alloc::vec::from_elem (125 samples, 0.19%)</title><rect x="90.7810%" y="357" width="0.1914%" height="15" fill="rgb(231,124,27)" fg:x="59280" fg:w="125"/><text x="91.0310%" y="367.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (125 samples, 0.19%)</title><rect x="90.7810%" y="341" width="0.1914%" height="15" fill="rgb(249,195,6)" fg:x="59280" fg:w="125"/><text x="91.0310%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (101 samples, 0.15%)</title><rect x="90.8178%" y="325" width="0.1547%" height="15" fill="rgb(237,174,47)" fg:x="59304" fg:w="101"/><text x="91.0678%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (101 samples, 0.15%)</title><rect x="90.8178%" y="309" width="0.1547%" height="15" fill="rgb(206,201,31)" fg:x="59304" fg:w="101"/><text x="91.0678%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (101 samples, 0.15%)</title><rect x="90.8178%" y="293" width="0.1547%" height="15" fill="rgb(231,57,52)" fg:x="59304" fg:w="101"/><text x="91.0678%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (99 samples, 0.15%)</title><rect x="90.8208%" y="277" width="0.1516%" height="15" fill="rgb(248,177,22)" fg:x="59306" fg:w="99"/><text x="91.0708%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (99 samples, 0.15%)</title><rect x="90.8208%" y="261" width="0.1516%" height="15" fill="rgb(215,211,37)" fg:x="59306" fg:w="99"/><text x="91.0708%" y="271.50"></text></g><g><title>alloc::alloc::alloc (99 samples, 0.15%)</title><rect x="90.8208%" y="245" width="0.1516%" height="15" fill="rgb(241,128,51)" fg:x="59306" fg:w="99"/><text x="91.0708%" y="255.50"></text></g><g><title>malloc (93 samples, 0.14%)</title><rect x="90.8300%" y="229" width="0.1424%" height="15" fill="rgb(227,165,31)" fg:x="59312" fg:w="93"/><text x="91.0800%" y="239.50"></text></g><g><title>[libc.so.6] (36 samples, 0.06%)</title><rect x="90.9173%" y="213" width="0.0551%" height="15" fill="rgb(228,167,24)" fg:x="59369" fg:w="36"/><text x="91.1673%" y="223.50"></text></g><g><title>[libc.so.6] (19 samples, 0.03%)</title><rect x="90.9433%" y="197" width="0.0291%" height="15" fill="rgb(228,143,12)" fg:x="59386" fg:w="19"/><text x="91.1933%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (24 samples, 0.04%)</title><rect x="90.9724%" y="357" width="0.0368%" height="15" fill="rgb(249,149,8)" fg:x="59405" fg:w="24"/><text x="91.2224%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (24 samples, 0.04%)</title><rect x="90.9724%" y="341" width="0.0368%" height="15" fill="rgb(243,35,44)" fg:x="59405" fg:w="24"/><text x="91.2224%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 0.03%)</title><rect x="90.9755%" y="325" width="0.0337%" height="15" fill="rgb(246,89,9)" fg:x="59407" fg:w="22"/><text x="91.2255%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (22 samples, 0.03%)</title><rect x="90.9755%" y="309" width="0.0337%" height="15" fill="rgb(233,213,13)" fg:x="59407" fg:w="22"/><text x="91.2255%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.03%)</title><rect x="90.9832%" y="293" width="0.0260%" height="15" fill="rgb(233,141,41)" fg:x="59412" fg:w="17"/><text x="91.2332%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.03%)</title><rect x="90.9832%" y="277" width="0.0260%" height="15" fill="rgb(239,167,4)" fg:x="59412" fg:w="17"/><text x="91.2332%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.03%)</title><rect x="90.9832%" y="261" width="0.0260%" height="15" fill="rgb(209,217,16)" fg:x="59412" fg:w="17"/><text x="91.2332%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (17 samples, 0.03%)</title><rect x="90.9832%" y="245" width="0.0260%" height="15" fill="rgb(219,88,35)" fg:x="59412" fg:w="17"/><text x="91.2332%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.03%)</title><rect x="90.9832%" y="229" width="0.0260%" height="15" fill="rgb(220,193,23)" fg:x="59412" fg:w="17"/><text x="91.2332%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.03%)</title><rect x="90.9832%" y="213" width="0.0260%" height="15" fill="rgb(230,90,52)" fg:x="59412" fg:w="17"/><text x="91.2332%" y="223.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.03%)</title><rect x="90.9832%" y="197" width="0.0260%" height="15" fill="rgb(252,106,19)" fg:x="59412" fg:w="17"/><text x="91.2332%" y="207.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="90.9862%" y="181" width="0.0230%" height="15" fill="rgb(206,74,20)" fg:x="59414" fg:w="15"/><text x="91.2362%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.02%)</title><rect x="91.0107%" y="341" width="0.0199%" height="15" fill="rgb(230,138,44)" fg:x="59430" fg:w="13"/><text x="91.2607%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="91.0199%" y="325" width="0.0107%" height="15" fill="rgb(235,182,43)" fg:x="59436" fg:w="7"/><text x="91.2699%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 0.01%)</title><rect x="91.0199%" y="309" width="0.0107%" height="15" fill="rgb(242,16,51)" fg:x="59436" fg:w="7"/><text x="91.2699%" y="319.50"></text></g><g><title>main::update_sptree::_{{closure}} (7 samples, 0.01%)</title><rect x="91.0199%" y="293" width="0.0107%" height="15" fill="rgb(248,9,4)" fg:x="59436" fg:w="7"/><text x="91.2699%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="91.0306%" y="325" width="0.0123%" height="15" fill="rgb(210,31,22)" fg:x="59443" fg:w="8"/><text x="91.2806%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (26 samples, 0.04%)</title><rect x="91.0429%" y="325" width="0.0398%" height="15" fill="rgb(239,54,39)" fg:x="59451" fg:w="26"/><text x="91.2929%" y="335.50"></text></g><g><title>main::update_sptree::_{{closure}} (26 samples, 0.04%)</title><rect x="91.0429%" y="309" width="0.0398%" height="15" fill="rgb(230,99,41)" fg:x="59451" fg:w="26"/><text x="91.2929%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.03%)</title><rect x="91.0827%" y="229" width="0.0322%" height="15" fill="rgb(253,106,12)" fg:x="59477" fg:w="21"/><text x="91.3327%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.03%)</title><rect x="91.0827%" y="213" width="0.0322%" height="15" fill="rgb(213,46,41)" fg:x="59477" fg:w="21"/><text x="91.3327%" y="223.50"></text></g><g><title>cfree (17 samples, 0.03%)</title><rect x="91.0888%" y="197" width="0.0260%" height="15" fill="rgb(215,133,35)" fg:x="59481" fg:w="17"/><text x="91.3388%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (70 samples, 0.11%)</title><rect x="91.0092%" y="357" width="0.1072%" height="15" fill="rgb(213,28,5)" fg:x="59429" fg:w="70"/><text x="91.2592%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (56 samples, 0.09%)</title><rect x="91.0306%" y="341" width="0.0858%" height="15" fill="rgb(215,77,49)" fg:x="59443" fg:w="56"/><text x="91.2806%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (22 samples, 0.03%)</title><rect x="91.0827%" y="325" width="0.0337%" height="15" fill="rgb(248,100,22)" fg:x="59477" fg:w="22"/><text x="91.3327%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="91.0827%" y="309" width="0.0337%" height="15" fill="rgb(208,67,9)" fg:x="59477" fg:w="22"/><text x="91.3327%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (22 samples, 0.03%)</title><rect x="91.0827%" y="293" width="0.0337%" height="15" fill="rgb(219,133,21)" fg:x="59477" fg:w="22"/><text x="91.3327%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="91.0827%" y="277" width="0.0337%" height="15" fill="rgb(246,46,29)" fg:x="59477" fg:w="22"/><text x="91.3327%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (22 samples, 0.03%)</title><rect x="91.0827%" y="261" width="0.0337%" height="15" fill="rgb(246,185,52)" fg:x="59477" fg:w="22"/><text x="91.3327%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="91.0827%" y="245" width="0.0337%" height="15" fill="rgb(252,136,11)" fg:x="59477" fg:w="22"/><text x="91.3327%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (10 samples, 0.02%)</title><rect x="91.1164%" y="357" width="0.0153%" height="15" fill="rgb(219,138,53)" fg:x="59499" fg:w="10"/><text x="91.3664%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (89 samples, 0.14%)</title><rect x="91.1317%" y="357" width="0.1363%" height="15" fill="rgb(211,51,23)" fg:x="59509" fg:w="89"/><text x="91.3817%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (89 samples, 0.14%)</title><rect x="91.1317%" y="341" width="0.1363%" height="15" fill="rgb(247,221,28)" fg:x="59509" fg:w="89"/><text x="91.3817%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.14%)</title><rect x="91.1317%" y="325" width="0.1363%" height="15" fill="rgb(251,222,45)" fg:x="59509" fg:w="89"/><text x="91.3817%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (88 samples, 0.13%)</title><rect x="91.1332%" y="309" width="0.1348%" height="15" fill="rgb(217,162,53)" fg:x="59510" fg:w="88"/><text x="91.3832%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (88 samples, 0.13%)</title><rect x="91.1332%" y="293" width="0.1348%" height="15" fill="rgb(229,93,14)" fg:x="59510" fg:w="88"/><text x="91.3832%" y="303.50"></text></g><g><title>cfree (87 samples, 0.13%)</title><rect x="91.1348%" y="277" width="0.1332%" height="15" fill="rgb(209,67,49)" fg:x="59511" fg:w="87"/><text x="91.3848%" y="287.50"></text></g><g><title>[libc.so.6] (52 samples, 0.08%)</title><rect x="91.1884%" y="261" width="0.0796%" height="15" fill="rgb(213,87,29)" fg:x="59546" fg:w="52"/><text x="91.4384%" y="271.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="91.2527%" y="245" width="0.0153%" height="15" fill="rgb(205,151,52)" fg:x="59588" fg:w="10"/><text x="91.5027%" y="255.50"></text></g><g><title>main::min_cost (58,803 samples, 90.05%)</title><rect x="1.2190%" y="389" width="90.0505%" height="15" fill="rgb(253,215,39)" fg:x="796" fg:w="58803"/><text x="1.4690%" y="399.50">main::min_cost</text></g><g><title>main::update_sptree (17,171 samples, 26.30%)</title><rect x="64.9740%" y="373" width="26.2956%" height="15" fill="rgb(221,220,41)" fg:x="42428" fg:w="17171"/><text x="65.2240%" y="383.50">main::update_sptree</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.02%)</title><rect x="91.3583%" y="261" width="0.0168%" height="15" fill="rgb(218,133,21)" fg:x="59657" fg:w="11"/><text x="91.6083%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (35 samples, 0.05%)</title><rect x="91.3752%" y="261" width="0.0536%" height="15" fill="rgb(221,193,43)" fg:x="59668" fg:w="35"/><text x="91.6252%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (35 samples, 0.05%)</title><rect x="91.3752%" y="245" width="0.0536%" height="15" fill="rgb(240,128,52)" fg:x="59668" fg:w="35"/><text x="91.6252%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (35 samples, 0.05%)</title><rect x="91.3752%" y="229" width="0.0536%" height="15" fill="rgb(253,114,12)" fg:x="59668" fg:w="35"/><text x="91.6252%" y="239.50"></text></g><g><title>[libc.so.6] (26 samples, 0.04%)</title><rect x="91.3890%" y="213" width="0.0398%" height="15" fill="rgb(215,223,47)" fg:x="59677" fg:w="26"/><text x="91.6390%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (9 samples, 0.01%)</title><rect x="91.4288%" y="261" width="0.0138%" height="15" fill="rgb(248,225,23)" fg:x="59703" fg:w="9"/><text x="91.6788%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (9 samples, 0.01%)</title><rect x="91.4288%" y="245" width="0.0138%" height="15" fill="rgb(250,108,0)" fg:x="59703" fg:w="9"/><text x="91.6788%" y="255.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (397 samples, 0.61%)</title><rect x="91.2864%" y="309" width="0.6080%" height="15" fill="rgb(228,208,7)" fg:x="59610" fg:w="397"/><text x="91.5364%" y="319.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (397 samples, 0.61%)</title><rect x="91.2864%" y="293" width="0.6080%" height="15" fill="rgb(244,45,10)" fg:x="59610" fg:w="397"/><text x="91.5364%" y="303.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (391 samples, 0.60%)</title><rect x="91.2956%" y="277" width="0.5988%" height="15" fill="rgb(207,125,25)" fg:x="59616" fg:w="391"/><text x="91.5456%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (295 samples, 0.45%)</title><rect x="91.4426%" y="261" width="0.4518%" height="15" fill="rgb(210,195,18)" fg:x="59712" fg:w="295"/><text x="91.6926%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (294 samples, 0.45%)</title><rect x="91.4441%" y="245" width="0.4502%" height="15" fill="rgb(249,80,12)" fg:x="59713" fg:w="294"/><text x="91.6941%" y="255.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (451 samples, 0.69%)</title><rect x="91.2864%" y="341" width="0.6907%" height="15" fill="rgb(221,65,9)" fg:x="59610" fg:w="451"/><text x="91.5364%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (451 samples, 0.69%)</title><rect x="91.2864%" y="325" width="0.6907%" height="15" fill="rgb(235,49,36)" fg:x="59610" fg:w="451"/><text x="91.5364%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (54 samples, 0.08%)</title><rect x="91.8943%" y="309" width="0.0827%" height="15" fill="rgb(225,32,20)" fg:x="60007" fg:w="54"/><text x="92.1443%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (54 samples, 0.08%)</title><rect x="91.8943%" y="293" width="0.0827%" height="15" fill="rgb(215,141,46)" fg:x="60007" fg:w="54"/><text x="92.1443%" y="303.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (54 samples, 0.08%)</title><rect x="91.8943%" y="277" width="0.0827%" height="15" fill="rgb(250,160,47)" fg:x="60007" fg:w="54"/><text x="92.1443%" y="287.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (54 samples, 0.08%)</title><rect x="91.8943%" y="261" width="0.0827%" height="15" fill="rgb(216,222,40)" fg:x="60007" fg:w="54"/><text x="92.1443%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (53 samples, 0.08%)</title><rect x="91.8959%" y="245" width="0.0812%" height="15" fill="rgb(234,217,39)" fg:x="60008" fg:w="53"/><text x="92.1459%" y="255.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (53 samples, 0.08%)</title><rect x="91.8959%" y="229" width="0.0812%" height="15" fill="rgb(207,178,40)" fg:x="60008" fg:w="53"/><text x="92.1459%" y="239.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (53 samples, 0.08%)</title><rect x="91.8959%" y="213" width="0.0812%" height="15" fill="rgb(221,136,13)" fg:x="60008" fg:w="53"/><text x="92.1459%" y="223.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (36 samples, 0.06%)</title><rect x="91.9219%" y="197" width="0.0551%" height="15" fill="rgb(249,199,10)" fg:x="60025" fg:w="36"/><text x="92.1719%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (36 samples, 0.06%)</title><rect x="91.9219%" y="181" width="0.0551%" height="15" fill="rgb(249,222,13)" fg:x="60025" fg:w="36"/><text x="92.1719%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (35 samples, 0.05%)</title><rect x="91.9234%" y="165" width="0.0536%" height="15" fill="rgb(244,185,38)" fg:x="60026" fg:w="35"/><text x="92.1734%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (35 samples, 0.05%)</title><rect x="91.9234%" y="149" width="0.0536%" height="15" fill="rgb(236,202,9)" fg:x="60026" fg:w="35"/><text x="92.1734%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (35 samples, 0.05%)</title><rect x="91.9234%" y="133" width="0.0536%" height="15" fill="rgb(250,229,37)" fg:x="60026" fg:w="35"/><text x="92.1734%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (18 samples, 0.03%)</title><rect x="92.0383%" y="309" width="0.0276%" height="15" fill="rgb(206,174,23)" fg:x="60101" fg:w="18"/><text x="92.2883%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18 samples, 0.03%)</title><rect x="92.0383%" y="293" width="0.0276%" height="15" fill="rgb(211,33,43)" fg:x="60101" fg:w="18"/><text x="92.2883%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.03%)</title><rect x="92.0398%" y="277" width="0.0260%" height="15" fill="rgb(245,58,50)" fg:x="60102" fg:w="17"/><text x="92.2898%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (21 samples, 0.03%)</title><rect x="92.0658%" y="309" width="0.0322%" height="15" fill="rgb(244,68,36)" fg:x="60119" fg:w="21"/><text x="92.3158%" y="319.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (21 samples, 0.03%)</title><rect x="92.0658%" y="293" width="0.0322%" height="15" fill="rgb(232,229,15)" fg:x="60119" fg:w="21"/><text x="92.3158%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (21 samples, 0.03%)</title><rect x="92.0658%" y="277" width="0.0322%" height="15" fill="rgb(254,30,23)" fg:x="60119" fg:w="21"/><text x="92.3158%" y="287.50"></text></g><g><title>__rdl_alloc (8 samples, 0.01%)</title><rect x="92.1302%" y="149" width="0.0123%" height="15" fill="rgb(235,160,14)" fg:x="60161" fg:w="8"/><text x="92.3802%" y="159.50"></text></g><g><title>__rust_alloc (7 samples, 0.01%)</title><rect x="92.1424%" y="149" width="0.0107%" height="15" fill="rgb(212,155,44)" fg:x="60169" fg:w="7"/><text x="92.3924%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (154 samples, 0.24%)</title><rect x="92.1179%" y="197" width="0.2358%" height="15" fill="rgb(226,2,50)" fg:x="60153" fg:w="154"/><text x="92.3679%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (154 samples, 0.24%)</title><rect x="92.1179%" y="181" width="0.2358%" height="15" fill="rgb(234,177,6)" fg:x="60153" fg:w="154"/><text x="92.3679%" y="191.50"></text></g><g><title>alloc::alloc::alloc (154 samples, 0.24%)</title><rect x="92.1179%" y="165" width="0.2358%" height="15" fill="rgb(217,24,9)" fg:x="60153" fg:w="154"/><text x="92.3679%" y="175.50"></text></g><g><title>malloc (129 samples, 0.20%)</title><rect x="92.1562%" y="149" width="0.1975%" height="15" fill="rgb(220,13,46)" fg:x="60178" fg:w="129"/><text x="92.4062%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (175 samples, 0.27%)</title><rect x="92.0980%" y="245" width="0.2680%" height="15" fill="rgb(239,221,27)" fg:x="60140" fg:w="175"/><text x="92.3480%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (175 samples, 0.27%)</title><rect x="92.0980%" y="229" width="0.2680%" height="15" fill="rgb(222,198,25)" fg:x="60140" fg:w="175"/><text x="92.3480%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (175 samples, 0.27%)</title><rect x="92.0980%" y="213" width="0.2680%" height="15" fill="rgb(211,99,13)" fg:x="60140" fg:w="175"/><text x="92.3480%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (8 samples, 0.01%)</title><rect x="92.3538%" y="197" width="0.0123%" height="15" fill="rgb(232,111,31)" fg:x="60307" fg:w="8"/><text x="92.6038%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (8 samples, 0.01%)</title><rect x="92.3538%" y="181" width="0.0123%" height="15" fill="rgb(245,82,37)" fg:x="60307" fg:w="8"/><text x="92.6038%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (227 samples, 0.35%)</title><rect x="92.0980%" y="309" width="0.3476%" height="15" fill="rgb(227,149,46)" fg:x="60140" fg:w="227"/><text x="92.3480%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (227 samples, 0.35%)</title><rect x="92.0980%" y="293" width="0.3476%" height="15" fill="rgb(218,36,50)" fg:x="60140" fg:w="227"/><text x="92.3480%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (227 samples, 0.35%)</title><rect x="92.0980%" y="277" width="0.3476%" height="15" fill="rgb(226,80,48)" fg:x="60140" fg:w="227"/><text x="92.3480%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (227 samples, 0.35%)</title><rect x="92.0980%" y="261" width="0.3476%" height="15" fill="rgb(238,224,15)" fg:x="60140" fg:w="227"/><text x="92.3480%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (52 samples, 0.08%)</title><rect x="92.3660%" y="245" width="0.0796%" height="15" fill="rgb(241,136,10)" fg:x="60315" fg:w="52"/><text x="92.6160%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (52 samples, 0.08%)</title><rect x="92.3660%" y="229" width="0.0796%" height="15" fill="rgb(208,32,45)" fg:x="60315" fg:w="52"/><text x="92.6160%" y="239.50"></text></g><g><title>[libc.so.6] (48 samples, 0.07%)</title><rect x="92.3721%" y="213" width="0.0735%" height="15" fill="rgb(207,135,9)" fg:x="60319" fg:w="48"/><text x="92.6221%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.02%)</title><rect x="93.2420%" y="165" width="0.0184%" height="15" fill="rgb(206,86,44)" fg:x="60887" fg:w="12"/><text x="93.4920%" y="175.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (17 samples, 0.03%)</title><rect x="93.2603%" y="165" width="0.0260%" height="15" fill="rgb(245,177,15)" fg:x="60899" fg:w="17"/><text x="93.5103%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17 samples, 0.03%)</title><rect x="93.2603%" y="149" width="0.0260%" height="15" fill="rgb(206,64,50)" fg:x="60899" fg:w="17"/><text x="93.5103%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.03%)</title><rect x="93.2603%" y="133" width="0.0260%" height="15" fill="rgb(234,36,40)" fg:x="60899" fg:w="17"/><text x="93.5103%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (142 samples, 0.22%)</title><rect x="93.2864%" y="165" width="0.2175%" height="15" fill="rgb(213,64,8)" fg:x="60916" fg:w="142"/><text x="93.5364%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (142 samples, 0.22%)</title><rect x="93.2864%" y="149" width="0.2175%" height="15" fill="rgb(210,75,36)" fg:x="60916" fg:w="142"/><text x="93.5364%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (142 samples, 0.22%)</title><rect x="93.2864%" y="133" width="0.2175%" height="15" fill="rgb(229,88,21)" fg:x="60916" fg:w="142"/><text x="93.5364%" y="143.50"></text></g><g><title>[libc.so.6] (118 samples, 0.18%)</title><rect x="93.3231%" y="117" width="0.1807%" height="15" fill="rgb(252,204,47)" fg:x="60940" fg:w="118"/><text x="93.5731%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (23 samples, 0.04%)</title><rect x="93.5038%" y="165" width="0.0352%" height="15" fill="rgb(208,77,27)" fg:x="61058" fg:w="23"/><text x="93.7538%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (23 samples, 0.04%)</title><rect x="93.5038%" y="149" width="0.0352%" height="15" fill="rgb(221,76,26)" fg:x="61058" fg:w="23"/><text x="93.7538%" y="159.50"></text></g><g><title>core::slice::memchr::memchr_aligned (242 samples, 0.37%)</title><rect x="93.5819%" y="149" width="0.3706%" height="15" fill="rgb(225,139,18)" fg:x="61109" fg:w="242"/><text x="93.8319%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (825 samples, 1.26%)</title><rect x="92.8821%" y="181" width="1.2634%" height="15" fill="rgb(230,137,11)" fg:x="60652" fg:w="825"/><text x="93.1321%" y="191.50"></text></g><g><title>core::slice::memchr::memchr (396 samples, 0.61%)</title><rect x="93.5391%" y="165" width="0.6064%" height="15" fill="rgb(212,28,1)" fg:x="61081" fg:w="396"/><text x="93.7891%" y="175.50"></text></g><g><title>core::slice::memchr::memchr_naive (126 samples, 0.19%)</title><rect x="93.9525%" y="149" width="0.1930%" height="15" fill="rgb(248,164,17)" fg:x="61351" fg:w="126"/><text x="94.2025%" y="159.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (7 samples, 0.01%)</title><rect x="94.1455%" y="181" width="0.0107%" height="15" fill="rgb(222,171,42)" fg:x="61477" fg:w="7"/><text x="94.3955%" y="191.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (7 samples, 0.01%)</title><rect x="94.1455%" y="165" width="0.0107%" height="15" fill="rgb(243,84,45)" fg:x="61477" fg:w="7"/><text x="94.3955%" y="175.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (944 samples, 1.45%)</title><rect x="92.7274%" y="213" width="1.4456%" height="15" fill="rgb(252,49,23)" fg:x="60551" fg:w="944"/><text x="92.9774%" y="223.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (924 samples, 1.42%)</title><rect x="92.7580%" y="197" width="1.4150%" height="15" fill="rgb(215,19,7)" fg:x="60571" fg:w="924"/><text x="93.0080%" y="207.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (11 samples, 0.02%)</title><rect x="94.1562%" y="181" width="0.0168%" height="15" fill="rgb(238,81,41)" fg:x="61484" fg:w="11"/><text x="94.4062%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (7 samples, 0.01%)</title><rect x="94.1623%" y="165" width="0.0107%" height="15" fill="rgb(210,199,37)" fg:x="61488" fg:w="7"/><text x="94.4123%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (7 samples, 0.01%)</title><rect x="94.1623%" y="149" width="0.0107%" height="15" fill="rgb(244,192,49)" fg:x="61488" fg:w="7"/><text x="94.4123%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (17 samples, 0.03%)</title><rect x="94.1730%" y="213" width="0.0260%" height="15" fill="rgb(226,211,11)" fg:x="61495" fg:w="17"/><text x="94.4230%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (17 samples, 0.03%)</title><rect x="94.1730%" y="197" width="0.0260%" height="15" fill="rgb(236,162,54)" fg:x="61495" fg:w="17"/><text x="94.4230%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (21 samples, 0.03%)</title><rect x="94.2282%" y="149" width="0.0322%" height="15" fill="rgb(220,229,9)" fg:x="61531" fg:w="21"/><text x="94.4782%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (20 samples, 0.03%)</title><rect x="94.2603%" y="149" width="0.0306%" height="15" fill="rgb(250,87,22)" fg:x="61552" fg:w="20"/><text x="94.5103%" y="159.50"></text></g><g><title>__rdl_realloc (47 samples, 0.07%)</title><rect x="94.3216%" y="85" width="0.0720%" height="15" fill="rgb(239,43,17)" fg:x="61592" fg:w="47"/><text x="94.5716%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (985 samples, 1.51%)</title><rect x="94.3124%" y="133" width="1.5084%" height="15" fill="rgb(231,177,25)" fg:x="61586" fg:w="985"/><text x="94.5624%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (985 samples, 1.51%)</title><rect x="94.3124%" y="117" width="1.5084%" height="15" fill="rgb(219,179,1)" fg:x="61586" fg:w="985"/><text x="94.5624%" y="127.50"></text></g><g><title>alloc::alloc::realloc (984 samples, 1.51%)</title><rect x="94.3139%" y="101" width="1.5069%" height="15" fill="rgb(238,219,53)" fg:x="61587" fg:w="984"/><text x="94.5639%" y="111.50"></text></g><g><title>realloc (926 samples, 1.42%)</title><rect x="94.4028%" y="85" width="1.4181%" height="15" fill="rgb(232,167,36)" fg:x="61645" fg:w="926"/><text x="94.6528%" y="95.50"></text></g><g><title>[libc.so.6] (709 samples, 1.09%)</title><rect x="94.7351%" y="69" width="1.0858%" height="15" fill="rgb(244,19,51)" fg:x="61862" fg:w="709"/><text x="94.9851%" y="79.50"></text></g><g><title>[libc.so.6] (544 samples, 0.83%)</title><rect x="94.9877%" y="53" width="0.8331%" height="15" fill="rgb(224,6,22)" fg:x="62027" fg:w="544"/><text x="95.2377%" y="63.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="95.8086%" y="37" width="0.0123%" height="15" fill="rgb(224,145,5)" fg:x="62563" fg:w="8"/><text x="96.0586%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,021 samples, 1.56%)</title><rect x="94.2925%" y="149" width="1.5636%" height="15" fill="rgb(234,130,49)" fg:x="61573" fg:w="1021"/><text x="94.5425%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (23 samples, 0.04%)</title><rect x="95.8208%" y="133" width="0.0352%" height="15" fill="rgb(254,6,2)" fg:x="62571" fg:w="23"/><text x="96.0708%" y="143.50"></text></g><g><title>core::cmp::max (29 samples, 0.04%)</title><rect x="95.8606%" y="149" width="0.0444%" height="15" fill="rgb(208,96,46)" fg:x="62597" fg:w="29"/><text x="96.1106%" y="159.50"></text></g><g><title>core::cmp::Ord::max (29 samples, 0.04%)</title><rect x="95.8606%" y="133" width="0.0444%" height="15" fill="rgb(239,3,39)" fg:x="62597" fg:w="29"/><text x="96.1106%" y="143.50"></text></g><g><title>core::cmp::max_by (29 samples, 0.04%)</title><rect x="95.8606%" y="117" width="0.0444%" height="15" fill="rgb(233,210,1)" fg:x="62597" fg:w="29"/><text x="96.1106%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,115 samples, 1.71%)</title><rect x="94.1991%" y="213" width="1.7075%" height="15" fill="rgb(244,137,37)" fg:x="61512" fg:w="1115"/><text x="94.4491%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,115 samples, 1.71%)</title><rect x="94.1991%" y="197" width="1.7075%" height="15" fill="rgb(240,136,2)" fg:x="61512" fg:w="1115"/><text x="94.4491%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,110 samples, 1.70%)</title><rect x="94.2067%" y="181" width="1.6998%" height="15" fill="rgb(239,18,37)" fg:x="61517" fg:w="1110"/><text x="94.4567%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,110 samples, 1.70%)</title><rect x="94.2067%" y="165" width="1.6998%" height="15" fill="rgb(218,185,22)" fg:x="61517" fg:w="1110"/><text x="94.4567%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,358 samples, 3.61%)</title><rect x="92.5926%" y="245" width="3.6110%" height="15" fill="rgb(225,218,4)" fg:x="60463" fg:w="2358"/><text x="92.8426%" y="255.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2,358 samples, 3.61%)</title><rect x="92.5926%" y="229" width="3.6110%" height="15" fill="rgb(230,182,32)" fg:x="60463" fg:w="2358"/><text x="92.8426%" y="239.50">allo..</text></g><g><title>core::ptr::write (194 samples, 0.30%)</title><rect x="95.9066%" y="213" width="0.2971%" height="15" fill="rgb(242,56,43)" fg:x="62627" fg:w="194"/><text x="96.1566%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.01%)</title><rect x="96.2772%" y="197" width="0.0123%" height="15" fill="rgb(233,99,24)" fg:x="62869" fg:w="8"/><text x="96.5272%" y="207.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (7 samples, 0.01%)</title><rect x="96.2894%" y="197" width="0.0107%" height="15" fill="rgb(234,209,42)" fg:x="62877" fg:w="7"/><text x="96.5394%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.01%)</title><rect x="96.2894%" y="181" width="0.0107%" height="15" fill="rgb(227,7,12)" fg:x="62877" fg:w="7"/><text x="96.5394%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.01%)</title><rect x="96.2894%" y="165" width="0.0107%" height="15" fill="rgb(245,203,43)" fg:x="62877" fg:w="7"/><text x="96.5394%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (33 samples, 0.05%)</title><rect x="96.3002%" y="197" width="0.0505%" height="15" fill="rgb(238,205,33)" fg:x="62884" fg:w="33"/><text x="96.5502%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (33 samples, 0.05%)</title><rect x="96.3002%" y="181" width="0.0505%" height="15" fill="rgb(231,56,7)" fg:x="62884" fg:w="33"/><text x="96.5502%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (33 samples, 0.05%)</title><rect x="96.3002%" y="165" width="0.0505%" height="15" fill="rgb(244,186,29)" fg:x="62884" fg:w="33"/><text x="96.5502%" y="175.50"></text></g><g><title>[libc.so.6] (23 samples, 0.04%)</title><rect x="96.3155%" y="149" width="0.0352%" height="15" fill="rgb(234,111,31)" fg:x="62894" fg:w="23"/><text x="96.5655%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (8 samples, 0.01%)</title><rect x="96.3507%" y="197" width="0.0123%" height="15" fill="rgb(241,149,10)" fg:x="62917" fg:w="8"/><text x="96.6007%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (8 samples, 0.01%)</title><rect x="96.3507%" y="181" width="0.0123%" height="15" fill="rgb(249,206,44)" fg:x="62917" fg:w="8"/><text x="96.6007%" y="191.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (160 samples, 0.25%)</title><rect x="96.2037%" y="245" width="0.2450%" height="15" fill="rgb(251,153,30)" fg:x="62821" fg:w="160"/><text x="96.4537%" y="255.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (160 samples, 0.25%)</title><rect x="96.2037%" y="229" width="0.2450%" height="15" fill="rgb(239,152,38)" fg:x="62821" fg:w="160"/><text x="96.4537%" y="239.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (150 samples, 0.23%)</title><rect x="96.2190%" y="213" width="0.2297%" height="15" fill="rgb(249,139,47)" fg:x="62831" fg:w="150"/><text x="96.4690%" y="223.50"></text></g><g><title>core::slice::memchr::memchr (56 samples, 0.09%)</title><rect x="96.3629%" y="197" width="0.0858%" height="15" fill="rgb(244,64,35)" fg:x="62925" fg:w="56"/><text x="96.6129%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_aligned (49 samples, 0.08%)</title><rect x="96.3737%" y="181" width="0.0750%" height="15" fill="rgb(216,46,15)" fg:x="62932" fg:w="49"/><text x="96.6237%" y="191.50"></text></g><g><title>__rdl_alloc (11 samples, 0.02%)</title><rect x="96.4732%" y="133" width="0.0168%" height="15" fill="rgb(250,74,19)" fg:x="62997" fg:w="11"/><text x="96.7232%" y="143.50"></text></g><g><title>__rust_alloc (10 samples, 0.02%)</title><rect x="96.4900%" y="133" width="0.0153%" height="15" fill="rgb(249,42,33)" fg:x="63008" fg:w="10"/><text x="96.7400%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (157 samples, 0.24%)</title><rect x="96.4487%" y="245" width="0.2404%" height="15" fill="rgb(242,149,17)" fg:x="62981" fg:w="157"/><text x="96.6987%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (157 samples, 0.24%)</title><rect x="96.4487%" y="229" width="0.2404%" height="15" fill="rgb(244,29,21)" fg:x="62981" fg:w="157"/><text x="96.6987%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (157 samples, 0.24%)</title><rect x="96.4487%" y="213" width="0.2404%" height="15" fill="rgb(220,130,37)" fg:x="62981" fg:w="157"/><text x="96.6987%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (150 samples, 0.23%)</title><rect x="96.4594%" y="197" width="0.2297%" height="15" fill="rgb(211,67,2)" fg:x="62988" fg:w="150"/><text x="96.7094%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (150 samples, 0.23%)</title><rect x="96.4594%" y="181" width="0.2297%" height="15" fill="rgb(235,68,52)" fg:x="62988" fg:w="150"/><text x="96.7094%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (150 samples, 0.23%)</title><rect x="96.4594%" y="165" width="0.2297%" height="15" fill="rgb(246,142,3)" fg:x="62988" fg:w="150"/><text x="96.7094%" y="175.50"></text></g><g><title>alloc::alloc::alloc (150 samples, 0.23%)</title><rect x="96.4594%" y="149" width="0.2297%" height="15" fill="rgb(241,25,7)" fg:x="62988" fg:w="150"/><text x="96.7094%" y="159.50"></text></g><g><title>malloc (119 samples, 0.18%)</title><rect x="96.5069%" y="133" width="0.1822%" height="15" fill="rgb(242,119,39)" fg:x="63019" fg:w="119"/><text x="96.7569%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,772 samples, 4.25%)</title><rect x="92.4456%" y="309" width="4.2450%" height="15" fill="rgb(241,98,45)" fg:x="60367" fg:w="2772"/><text x="92.6956%" y="319.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,772 samples, 4.25%)</title><rect x="92.4456%" y="293" width="4.2450%" height="15" fill="rgb(254,28,30)" fg:x="60367" fg:w="2772"/><text x="92.6956%" y="303.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,771 samples, 4.24%)</title><rect x="92.4472%" y="277" width="4.2435%" height="15" fill="rgb(241,142,54)" fg:x="60368" fg:w="2771"/><text x="92.6972%" y="287.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,759 samples, 4.23%)</title><rect x="92.4655%" y="261" width="4.2251%" height="15" fill="rgb(222,85,15)" fg:x="60380" fg:w="2759"/><text x="92.7155%" y="271.50">&lt;allo..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (38 samples, 0.06%)</title><rect x="96.6907%" y="309" width="0.0582%" height="15" fill="rgb(210,85,47)" fg:x="63139" fg:w="38"/><text x="96.9407%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.06%)</title><rect x="96.6907%" y="293" width="0.0582%" height="15" fill="rgb(224,206,25)" fg:x="63139" fg:w="38"/><text x="96.9407%" y="303.50"></text></g><g><title>core::str::validations::next_code_point (38 samples, 0.06%)</title><rect x="96.6907%" y="277" width="0.0582%" height="15" fill="rgb(243,201,19)" fg:x="63139" fg:w="38"/><text x="96.9407%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="96.7351%" y="261" width="0.0138%" height="15" fill="rgb(236,59,4)" fg:x="63168" fg:w="9"/><text x="96.9851%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (9 samples, 0.01%)</title><rect x="96.7351%" y="245" width="0.0138%" height="15" fill="rgb(254,179,45)" fg:x="63168" fg:w="9"/><text x="96.9851%" y="255.50"></text></g><g><title>__rust_dealloc (9 samples, 0.01%)</title><rect x="96.7841%" y="229" width="0.0138%" height="15" fill="rgb(226,14,10)" fg:x="63200" fg:w="9"/><text x="97.0341%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (621 samples, 0.95%)</title><rect x="96.7534%" y="261" width="0.9510%" height="15" fill="rgb(244,27,41)" fg:x="63180" fg:w="621"/><text x="97.0034%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (621 samples, 0.95%)</title><rect x="96.7534%" y="245" width="0.9510%" height="15" fill="rgb(235,35,32)" fg:x="63180" fg:w="621"/><text x="97.0034%" y="255.50"></text></g><g><title>cfree (592 samples, 0.91%)</title><rect x="96.7979%" y="229" width="0.9066%" height="15" fill="rgb(218,68,31)" fg:x="63209" fg:w="592"/><text x="97.0479%" y="239.50"></text></g><g><title>[libc.so.6] (446 samples, 0.68%)</title><rect x="97.0214%" y="213" width="0.6830%" height="15" fill="rgb(207,120,37)" fg:x="63355" fg:w="446"/><text x="97.2714%" y="223.50"></text></g><g><title>[libc.so.6] (69 samples, 0.11%)</title><rect x="97.5988%" y="197" width="0.1057%" height="15" fill="rgb(227,98,0)" fg:x="63732" fg:w="69"/><text x="97.8488%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (625 samples, 0.96%)</title><rect x="96.7489%" y="309" width="0.9571%" height="15" fill="rgb(207,7,3)" fg:x="63177" fg:w="625"/><text x="96.9989%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (625 samples, 0.96%)</title><rect x="96.7489%" y="293" width="0.9571%" height="15" fill="rgb(206,98,19)" fg:x="63177" fg:w="625"/><text x="96.9989%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (625 samples, 0.96%)</title><rect x="96.7489%" y="277" width="0.9571%" height="15" fill="rgb(217,5,26)" fg:x="63177" fg:w="625"/><text x="96.9989%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (65 samples, 0.10%)</title><rect x="97.7060%" y="309" width="0.0995%" height="15" fill="rgb(235,190,38)" fg:x="63802" fg:w="65"/><text x="97.9560%" y="319.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for isize&gt;::from_str (393 samples, 0.60%)</title><rect x="97.8254%" y="293" width="0.6018%" height="15" fill="rgb(247,86,24)" fg:x="63880" fg:w="393"/><text x="98.0754%" y="303.50"></text></g><g><title>core::num::from_str_radix (331 samples, 0.51%)</title><rect x="97.9204%" y="277" width="0.5069%" height="15" fill="rgb(205,101,16)" fg:x="63942" fg:w="331"/><text x="98.1704%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (743 samples, 1.14%)</title><rect x="97.8055%" y="309" width="1.1378%" height="15" fill="rgb(246,168,33)" fg:x="63867" fg:w="743"/><text x="98.0555%" y="319.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (337 samples, 0.52%)</title><rect x="98.4273%" y="293" width="0.5161%" height="15" fill="rgb(231,114,1)" fg:x="64273" fg:w="337"/><text x="98.6773%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (40 samples, 0.06%)</title><rect x="98.9433%" y="309" width="0.0613%" height="15" fill="rgb(207,184,53)" fg:x="64610" fg:w="40"/><text x="99.1933%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (28 samples, 0.04%)</title><rect x="99.7320%" y="293" width="0.0429%" height="15" fill="rgb(224,95,51)" fg:x="65125" fg:w="28"/><text x="99.9820%" y="303.50"></text></g><g><title>core::ptr::write (18 samples, 0.03%)</title><rect x="99.7473%" y="277" width="0.0276%" height="15" fill="rgb(212,188,45)" fg:x="65135" fg:w="18"/><text x="99.9973%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5,581 samples, 8.55%)</title><rect x="91.2695%" y="373" width="8.5467%" height="15" fill="rgb(223,154,38)" fg:x="59599" fg:w="5581"/><text x="91.5195%" y="383.50">core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (5,581 samples, 8.55%)</title><rect x="91.2695%" y="357" width="8.5467%" height="15" fill="rgb(251,22,52)" fg:x="59599" fg:w="5581"/><text x="91.5195%" y="367.50">core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5,119 samples, 7.84%)</title><rect x="91.9770%" y="341" width="7.8392%" height="15" fill="rgb(229,209,22)" fg:x="60061" fg:w="5119"/><text x="92.2270%" y="351.50">core::iter:..</text></g><g><title>main::parser::parsed_graph::_{{closure}} (5,119 samples, 7.84%)</title><rect x="91.9770%" y="325" width="7.8392%" height="15" fill="rgb(234,138,34)" fg:x="60061" fg:w="5119"/><text x="92.2270%" y="335.50">main::parse..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (530 samples, 0.81%)</title><rect x="99.0046%" y="309" width="0.8116%" height="15" fill="rgb(212,95,11)" fg:x="64650" fg:w="530"/><text x="99.2546%" y="319.50"></text></g><g><title>petgraph::graph_impl::index_twice (26 samples, 0.04%)</title><rect x="99.7764%" y="293" width="0.0398%" height="15" fill="rgb(240,179,47)" fg:x="65154" fg:w="26"/><text x="100.0264%" y="303.50"></text></g><g><title>_start (64,443 samples, 98.69%)</title><rect x="1.2190%" y="533" width="98.6876%" height="15" fill="rgb(240,163,11)" fg:x="796" fg:w="64443"/><text x="1.4690%" y="543.50">_start</text></g><g><title>__libc_start_main (64,443 samples, 98.69%)</title><rect x="1.2190%" y="517" width="98.6876%" height="15" fill="rgb(236,37,12)" fg:x="796" fg:w="64443"/><text x="1.4690%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (64,443 samples, 98.69%)</title><rect x="1.2190%" y="501" width="98.6876%" height="15" fill="rgb(232,164,16)" fg:x="796" fg:w="64443"/><text x="1.4690%" y="511.50">[libc.so.6]</text></g><g><title>main (64,443 samples, 98.69%)</title><rect x="1.2190%" y="485" width="98.6876%" height="15" fill="rgb(244,205,15)" fg:x="796" fg:w="64443"/><text x="1.4690%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (64,443 samples, 98.69%)</title><rect x="1.2190%" y="469" width="98.6876%" height="15" fill="rgb(223,117,47)" fg:x="796" fg:w="64443"/><text x="1.4690%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (64,443 samples, 98.69%)</title><rect x="1.2190%" y="453" width="98.6876%" height="15" fill="rgb(244,107,35)" fg:x="796" fg:w="64443"/><text x="1.4690%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (64,443 samples, 98.69%)</title><rect x="1.2190%" y="437" width="98.6876%" height="15" fill="rgb(205,140,8)" fg:x="796" fg:w="64443"/><text x="1.4690%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (64,443 samples, 98.69%)</title><rect x="1.2190%" y="421" width="98.6876%" height="15" fill="rgb(228,84,46)" fg:x="796" fg:w="64443"/><text x="1.4690%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (64,443 samples, 98.69%)</title><rect x="1.2190%" y="405" width="98.6876%" height="15" fill="rgb(254,188,9)" fg:x="796" fg:w="64443"/><text x="1.4690%" y="415.50">main::main</text></g><g><title>main::parser::parsed_graph (5,640 samples, 8.64%)</title><rect x="91.2695%" y="389" width="8.6371%" height="15" fill="rgb(206,112,54)" fg:x="59599" fg:w="5640"/><text x="91.5195%" y="399.50">main::parser..</text></g><g><title>std::fs::read_to_string (59 samples, 0.09%)</title><rect x="99.8162%" y="373" width="0.0904%" height="15" fill="rgb(216,84,49)" fg:x="65180" fg:w="59"/><text x="100.0662%" y="383.50"></text></g><g><title>std::fs::read_to_string::inner (59 samples, 0.09%)</title><rect x="99.8162%" y="357" width="0.0904%" height="15" fill="rgb(214,194,35)" fg:x="65180" fg:w="59"/><text x="100.0662%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (59 samples, 0.09%)</title><rect x="99.8162%" y="341" width="0.0904%" height="15" fill="rgb(249,28,3)" fg:x="65180" fg:w="59"/><text x="100.0662%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.04%)</title><rect x="99.9066%" y="533" width="0.0398%" height="15" fill="rgb(222,56,52)" fg:x="65239" fg:w="26"/><text x="100.1566%" y="543.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for isize&gt;::from_str (11 samples, 0.02%)</title><rect x="99.9479%" y="533" width="0.0168%" height="15" fill="rgb(245,217,50)" fg:x="65266" fg:w="11"/><text x="100.1979%" y="543.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (8 samples, 0.01%)</title><rect x="99.9648%" y="533" width="0.0123%" height="15" fill="rgb(213,201,24)" fg:x="65277" fg:w="8"/><text x="100.2148%" y="543.50"></text></g><g><title>all (65,300 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(248,116,28)" fg:x="0" fg:w="65300"/><text x="0.2500%" y="575.50"></text></g><g><title>main (65,300 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(219,72,43)" fg:x="0" fg:w="65300"/><text x="0.2500%" y="559.50">main</text></g><g><title>core::slice::memchr::memchr_aligned (15 samples, 0.02%)</title><rect x="99.9770%" y="533" width="0.0230%" height="15" fill="rgb(209,138,14)" fg:x="65285" fg:w="15"/><text x="100.2270%" y="543.50"></text></g></svg></svg>