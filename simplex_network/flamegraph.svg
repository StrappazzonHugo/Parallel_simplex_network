<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="651252"><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (255 samples, 0.04%)</title><rect x="0.0000%" y="709" width="0.0392%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="255"/><text x="0.2500%" y="719.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (185 samples, 0.03%)</title><rect x="0.0524%" y="693" width="0.0284%" height="15" fill="rgb(217,0,24)" fg:x="341" fg:w="185"/><text x="0.3024%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (185 samples, 0.03%)</title><rect x="0.0524%" y="677" width="0.0284%" height="15" fill="rgb(221,193,54)" fg:x="341" fg:w="185"/><text x="0.3024%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (185 samples, 0.03%)</title><rect x="0.0524%" y="661" width="0.0284%" height="15" fill="rgb(248,212,6)" fg:x="341" fg:w="185"/><text x="0.3024%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (185 samples, 0.03%)</title><rect x="0.0524%" y="645" width="0.0284%" height="15" fill="rgb(208,68,35)" fg:x="341" fg:w="185"/><text x="0.3024%" y="655.50"></text></g><g><title>[[heap]] (359 samples, 0.06%)</title><rect x="0.0399%" y="709" width="0.0551%" height="15" fill="rgb(232,128,0)" fg:x="260" fg:w="359"/><text x="0.2899%" y="719.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (78 samples, 0.01%)</title><rect x="0.0831%" y="693" width="0.0120%" height="15" fill="rgb(207,160,47)" fg:x="541" fg:w="78"/><text x="0.3331%" y="703.50"></text></g><g><title>[[stack]] (324 samples, 0.05%)</title><rect x="0.0950%" y="709" width="0.0498%" height="15" fill="rgb(228,23,34)" fg:x="619" fg:w="324"/><text x="0.3450%" y="719.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (380 samples, 0.06%)</title><rect x="0.1904%" y="661" width="0.0583%" height="15" fill="rgb(218,30,26)" fg:x="1240" fg:w="380"/><text x="0.4404%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (380 samples, 0.06%)</title><rect x="0.1904%" y="645" width="0.0583%" height="15" fill="rgb(220,122,19)" fg:x="1240" fg:w="380"/><text x="0.4404%" y="655.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (380 samples, 0.06%)</title><rect x="0.1904%" y="629" width="0.0583%" height="15" fill="rgb(250,228,42)" fg:x="1240" fg:w="380"/><text x="0.4404%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,288 samples, 0.20%)</title><rect x="0.1448%" y="693" width="0.1978%" height="15" fill="rgb(240,193,28)" fg:x="943" fg:w="1288"/><text x="0.3948%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (991 samples, 0.15%)</title><rect x="0.1904%" y="677" width="0.1522%" height="15" fill="rgb(216,20,37)" fg:x="1240" fg:w="991"/><text x="0.4404%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (611 samples, 0.09%)</title><rect x="0.2488%" y="661" width="0.0938%" height="15" fill="rgb(206,188,39)" fg:x="1620" fg:w="611"/><text x="0.4988%" y="671.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (611 samples, 0.09%)</title><rect x="0.2488%" y="645" width="0.0938%" height="15" fill="rgb(217,207,13)" fg:x="1620" fg:w="611"/><text x="0.4988%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (611 samples, 0.09%)</title><rect x="0.2488%" y="629" width="0.0938%" height="15" fill="rgb(231,73,38)" fg:x="1620" fg:w="611"/><text x="0.4988%" y="639.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (611 samples, 0.09%)</title><rect x="0.2488%" y="613" width="0.0938%" height="15" fill="rgb(225,20,46)" fg:x="1620" fg:w="611"/><text x="0.4988%" y="623.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (360 samples, 0.06%)</title><rect x="0.3426%" y="693" width="0.0553%" height="15" fill="rgb(210,31,41)" fg:x="2231" fg:w="360"/><text x="0.5926%" y="703.50"></text></g><g><title>crossbeam_epoch::atomic::Shared&lt;T&gt;::as_ref (199 samples, 0.03%)</title><rect x="0.3673%" y="677" width="0.0306%" height="15" fill="rgb(221,200,47)" fg:x="2392" fg:w="199"/><text x="0.6173%" y="687.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (331 samples, 0.05%)</title><rect x="0.4018%" y="693" width="0.0508%" height="15" fill="rgb(226,26,5)" fg:x="2617" fg:w="331"/><text x="0.6518%" y="703.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1,053 samples, 0.16%)</title><rect x="0.4527%" y="693" width="0.1617%" height="15" fill="rgb(249,33,26)" fg:x="2948" fg:w="1053"/><text x="0.7027%" y="703.50"></text></g><g><title>crossbeam_epoch::default::pin (116 samples, 0.02%)</title><rect x="0.5965%" y="677" width="0.0178%" height="15" fill="rgb(235,183,28)" fg:x="3885" fg:w="116"/><text x="0.8465%" y="687.50"></text></g><g><title>crossbeam_epoch::default::with_handle (653 samples, 0.10%)</title><rect x="0.6160%" y="693" width="0.1003%" height="15" fill="rgb(221,5,38)" fg:x="4012" fg:w="653"/><text x="0.8660%" y="703.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (206 samples, 0.03%)</title><rect x="0.7206%" y="693" width="0.0316%" height="15" fill="rgb(247,18,42)" fg:x="4693" fg:w="206"/><text x="0.9706%" y="703.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (744 samples, 0.11%)</title><rect x="0.7794%" y="677" width="0.1142%" height="15" fill="rgb(241,131,45)" fg:x="5076" fg:w="744"/><text x="1.0294%" y="687.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (905 samples, 0.14%)</title><rect x="0.7549%" y="693" width="0.1390%" height="15" fill="rgb(249,31,29)" fg:x="4916" fg:w="905"/><text x="1.0049%" y="703.50"></text></g><g><title>[anon] (4,884 samples, 0.75%)</title><rect x="0.1448%" y="709" width="0.7499%" height="15" fill="rgb(225,111,53)" fg:x="943" fg:w="4884"/><text x="0.3948%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (135 samples, 0.02%)</title><rect x="0.9261%" y="437" width="0.0207%" height="15" fill="rgb(238,160,17)" fg:x="6031" fg:w="135"/><text x="1.1761%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (135 samples, 0.02%)</title><rect x="0.9261%" y="421" width="0.0207%" height="15" fill="rgb(214,148,48)" fg:x="6031" fg:w="135"/><text x="1.1761%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (135 samples, 0.02%)</title><rect x="0.9261%" y="405" width="0.0207%" height="15" fill="rgb(232,36,49)" fg:x="6031" fg:w="135"/><text x="1.1761%" y="415.50"></text></g><g><title>rayon_core::latch::CoreLatch::probe (798 samples, 0.12%)</title><rect x="0.9555%" y="437" width="0.1225%" height="15" fill="rgb(209,103,24)" fg:x="6223" fg:w="798"/><text x="1.2055%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (733 samples, 0.11%)</title><rect x="0.9655%" y="421" width="0.1126%" height="15" fill="rgb(229,88,8)" fg:x="6288" fg:w="733"/><text x="1.2155%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (733 samples, 0.11%)</title><rect x="0.9655%" y="405" width="0.1126%" height="15" fill="rgb(213,181,19)" fg:x="6288" fg:w="733"/><text x="1.2155%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (186 samples, 0.03%)</title><rect x="1.1000%" y="357" width="0.0286%" height="15" fill="rgb(254,191,54)" fg:x="7164" fg:w="186"/><text x="1.3500%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (147 samples, 0.02%)</title><rect x="1.1060%" y="341" width="0.0226%" height="15" fill="rgb(241,83,37)" fg:x="7203" fg:w="147"/><text x="1.3560%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (147 samples, 0.02%)</title><rect x="1.1060%" y="325" width="0.0226%" height="15" fill="rgb(233,36,39)" fg:x="7203" fg:w="147"/><text x="1.3560%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (147 samples, 0.02%)</title><rect x="1.1060%" y="309" width="0.0226%" height="15" fill="rgb(226,3,54)" fg:x="7203" fg:w="147"/><text x="1.3560%" y="319.50"></text></g><g><title>&lt;rayon_core::latch::LatchRef&lt;L&gt; as rayon_core::latch::Latch&gt;::set (352 samples, 0.05%)</title><rect x="1.0805%" y="389" width="0.0540%" height="15" fill="rgb(245,192,40)" fg:x="7037" fg:w="352"/><text x="1.3305%" y="399.50"></text></g><g><title>&lt;rayon_core::latch::LockLatch as rayon_core::latch::Latch&gt;::set (352 samples, 0.05%)</title><rect x="1.0805%" y="373" width="0.0540%" height="15" fill="rgb(238,167,29)" fg:x="7037" fg:w="352"/><text x="1.3305%" y="383.50"></text></g><g><title>core::ptr::read (309 samples, 0.05%)</title><rect x="1.1347%" y="357" width="0.0474%" height="15" fill="rgb(232,182,51)" fg:x="7390" fg:w="309"/><text x="1.3847%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (334 samples, 0.05%)</title><rect x="1.1347%" y="389" width="0.0513%" height="15" fill="rgb(231,60,39)" fg:x="7390" fg:w="334"/><text x="1.3847%" y="399.50"></text></g><g><title>core::mem::replace (334 samples, 0.05%)</title><rect x="1.1347%" y="373" width="0.0513%" height="15" fill="rgb(208,69,12)" fg:x="7390" fg:w="334"/><text x="1.3847%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (75 samples, 0.01%)</title><rect x="1.2344%" y="133" width="0.0115%" height="15" fill="rgb(235,93,37)" fg:x="8039" fg:w="75"/><text x="1.4844%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (108 samples, 0.02%)</title><rect x="1.2309%" y="165" width="0.0166%" height="15" fill="rgb(213,116,39)" fg:x="8016" fg:w="108"/><text x="1.4809%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (108 samples, 0.02%)</title><rect x="1.2309%" y="149" width="0.0166%" height="15" fill="rgb(222,207,29)" fg:x="8016" fg:w="108"/><text x="1.4809%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (180 samples, 0.03%)</title><rect x="1.2244%" y="181" width="0.0276%" height="15" fill="rgb(206,96,30)" fg:x="7974" fg:w="180"/><text x="1.4744%" y="191.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (337 samples, 0.05%)</title><rect x="1.2026%" y="245" width="0.0517%" height="15" fill="rgb(218,138,4)" fg:x="7832" fg:w="337"/><text x="1.4526%" y="255.50"></text></g><g><title>rayon_core::join::join_context::call_b::_{{closure}} (330 samples, 0.05%)</title><rect x="1.2037%" y="229" width="0.0507%" height="15" fill="rgb(250,191,14)" fg:x="7839" fg:w="330"/><text x="1.4537%" y="239.50"></text></g><g><title>rayon_core::join::join::call::_{{closure}} (330 samples, 0.05%)</title><rect x="1.2037%" y="213" width="0.0507%" height="15" fill="rgb(239,60,40)" fg:x="7839" fg:w="330"/><text x="1.4537%" y="223.50"></text></g><g><title>main::update_sptree::_{{closure}} (330 samples, 0.05%)</title><rect x="1.2037%" y="197" width="0.0507%" height="15" fill="rgb(206,27,48)" fg:x="7839" fg:w="330"/><text x="1.4537%" y="207.50"></text></g><g><title>core::sync::atomic::fence (85 samples, 0.01%)</title><rect x="1.2691%" y="213" width="0.0131%" height="15" fill="rgb(225,35,8)" fg:x="8265" fg:w="85"/><text x="1.5191%" y="223.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (152 samples, 0.02%)</title><rect x="1.2594%" y="245" width="0.0233%" height="15" fill="rgb(250,213,24)" fg:x="8202" fg:w="152"/><text x="1.5094%" y="255.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (152 samples, 0.02%)</title><rect x="1.2594%" y="229" width="0.0233%" height="15" fill="rgb(247,123,22)" fg:x="8202" fg:w="152"/><text x="1.5094%" y="239.50"></text></g><g><title>__rdl_alloc (98 samples, 0.02%)</title><rect x="1.3173%" y="53" width="0.0150%" height="15" fill="rgb(231,138,38)" fg:x="8579" fg:w="98"/><text x="1.5673%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,146 samples, 0.18%)</title><rect x="1.3092%" y="69" width="0.1760%" height="15" fill="rgb(231,145,46)" fg:x="8526" fg:w="1146"/><text x="1.5592%" y="79.50"></text></g><g><title>malloc (971 samples, 0.15%)</title><rect x="1.3360%" y="53" width="0.1491%" height="15" fill="rgb(251,118,11)" fg:x="8701" fg:w="971"/><text x="1.5860%" y="63.50"></text></g><g><title>[libc.so.6] (360 samples, 0.06%)</title><rect x="1.4299%" y="37" width="0.0553%" height="15" fill="rgb(217,147,25)" fg:x="9312" fg:w="360"/><text x="1.6799%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,165 samples, 0.18%)</title><rect x="1.3075%" y="101" width="0.1789%" height="15" fill="rgb(247,81,37)" fg:x="8515" fg:w="1165"/><text x="1.5575%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,165 samples, 0.18%)</title><rect x="1.3075%" y="85" width="0.1789%" height="15" fill="rgb(209,12,38)" fg:x="8515" fg:w="1165"/><text x="1.5575%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,199 samples, 0.18%)</title><rect x="1.3036%" y="117" width="0.1841%" height="15" fill="rgb(227,1,9)" fg:x="8490" fg:w="1199"/><text x="1.5536%" y="127.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,960 samples, 0.30%)</title><rect x="1.1917%" y="261" width="0.3010%" height="15" fill="rgb(248,47,43)" fg:x="7761" fg:w="1960"/><text x="1.4417%" y="271.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1,364 samples, 0.21%)</title><rect x="1.2832%" y="245" width="0.2094%" height="15" fill="rgb(221,10,30)" fg:x="8357" fg:w="1364"/><text x="1.5332%" y="255.50"></text></g><g><title>std::panic::catch_unwind (1,362 samples, 0.21%)</title><rect x="1.2835%" y="229" width="0.2091%" height="15" fill="rgb(210,229,1)" fg:x="8359" fg:w="1362"/><text x="1.5335%" y="239.50"></text></g><g><title>std::panicking::try (1,362 samples, 0.21%)</title><rect x="1.2835%" y="213" width="0.2091%" height="15" fill="rgb(222,148,37)" fg:x="8359" fg:w="1362"/><text x="1.5335%" y="223.50"></text></g><g><title>std::panicking::try::do_call (1,362 samples, 0.21%)</title><rect x="1.2835%" y="197" width="0.2091%" height="15" fill="rgb(234,67,33)" fg:x="8359" fg:w="1362"/><text x="1.5335%" y="207.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,362 samples, 0.21%)</title><rect x="1.2835%" y="181" width="0.2091%" height="15" fill="rgb(247,98,35)" fg:x="8359" fg:w="1362"/><text x="1.5335%" y="191.50"></text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,362 samples, 0.21%)</title><rect x="1.2835%" y="165" width="0.2091%" height="15" fill="rgb(247,138,52)" fg:x="8359" fg:w="1362"/><text x="1.5335%" y="175.50"></text></g><g><title>rayon_core::join::join::call::_{{closure}} (1,362 samples, 0.21%)</title><rect x="1.2835%" y="149" width="0.2091%" height="15" fill="rgb(213,79,30)" fg:x="8359" fg:w="1362"/><text x="1.5335%" y="159.50"></text></g><g><title>main::update_sptree::_{{closure}} (1,362 samples, 0.21%)</title><rect x="1.2835%" y="133" width="0.2091%" height="15" fill="rgb(246,177,23)" fg:x="8359" fg:w="1362"/><text x="1.5335%" y="143.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (2,696 samples, 0.41%)</title><rect x="1.0790%" y="405" width="0.4140%" height="15" fill="rgb(230,62,27)" fg:x="7027" fg:w="2696"/><text x="1.3290%" y="415.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (1,994 samples, 0.31%)</title><rect x="1.1868%" y="389" width="0.3062%" height="15" fill="rgb(216,154,8)" fg:x="7729" fg:w="1994"/><text x="1.4368%" y="399.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1,992 samples, 0.31%)</title><rect x="1.1871%" y="373" width="0.3059%" height="15" fill="rgb(244,35,45)" fg:x="7731" fg:w="1992"/><text x="1.4371%" y="383.50"></text></g><g><title>std::panic::catch_unwind (1,992 samples, 0.31%)</title><rect x="1.1871%" y="357" width="0.3059%" height="15" fill="rgb(251,115,12)" fg:x="7731" fg:w="1992"/><text x="1.4371%" y="367.50"></text></g><g><title>std::panicking::try (1,992 samples, 0.31%)</title><rect x="1.1871%" y="341" width="0.3059%" height="15" fill="rgb(240,54,50)" fg:x="7731" fg:w="1992"/><text x="1.4371%" y="351.50"></text></g><g><title>std::panicking::try::do_call (1,992 samples, 0.31%)</title><rect x="1.1871%" y="325" width="0.3059%" height="15" fill="rgb(233,84,52)" fg:x="7731" fg:w="1992"/><text x="1.4371%" y="335.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,992 samples, 0.31%)</title><rect x="1.1871%" y="309" width="0.3059%" height="15" fill="rgb(207,117,47)" fg:x="7731" fg:w="1992"/><text x="1.4371%" y="319.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::_{{closure}} (1,992 samples, 0.31%)</title><rect x="1.1871%" y="293" width="0.3059%" height="15" fill="rgb(249,43,39)" fg:x="7731" fg:w="1992"/><text x="1.4371%" y="303.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::_{{closure}}::_{{closure}} (1,967 samples, 0.30%)</title><rect x="1.1909%" y="277" width="0.3020%" height="15" fill="rgb(209,38,44)" fg:x="7756" fg:w="1967"/><text x="1.4409%" y="287.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (2,856 samples, 0.44%)</title><rect x="1.0781%" y="437" width="0.4385%" height="15" fill="rgb(236,212,23)" fg:x="7021" fg:w="2856"/><text x="1.3281%" y="447.50"></text></g><g><title>rayon_core::job::JobRef::execute (2,856 samples, 0.44%)</title><rect x="1.0781%" y="421" width="0.4385%" height="15" fill="rgb(242,79,21)" fg:x="7021" fg:w="2856"/><text x="1.3281%" y="431.50"></text></g><g><title>[main] (154 samples, 0.02%)</title><rect x="1.4930%" y="405" width="0.0236%" height="15" fill="rgb(211,96,35)" fg:x="9723" fg:w="154"/><text x="1.7430%" y="415.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (154 samples, 0.02%)</title><rect x="1.4930%" y="389" width="0.0236%" height="15" fill="rgb(253,215,40)" fg:x="9723" fg:w="154"/><text x="1.7430%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (154 samples, 0.02%)</title><rect x="1.4930%" y="373" width="0.0236%" height="15" fill="rgb(211,81,21)" fg:x="9723" fg:w="154"/><text x="1.7430%" y="383.50"></text></g><g><title>core::mem::replace (154 samples, 0.02%)</title><rect x="1.4930%" y="357" width="0.0236%" height="15" fill="rgb(208,190,38)" fg:x="9723" fg:w="154"/><text x="1.7430%" y="367.50"></text></g><g><title>core::ptr::read (154 samples, 0.02%)</title><rect x="1.4930%" y="341" width="0.0236%" height="15" fill="rgb(235,213,38)" fg:x="9723" fg:w="154"/><text x="1.7430%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (784 samples, 0.12%)</title><rect x="1.6975%" y="357" width="0.1204%" height="15" fill="rgb(237,122,38)" fg:x="11055" fg:w="784"/><text x="1.9475%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (784 samples, 0.12%)</title><rect x="1.6975%" y="341" width="0.1204%" height="15" fill="rgb(244,218,35)" fg:x="11055" fg:w="784"/><text x="1.9475%" y="351.50"></text></g><g><title>core::sync::atomic::fence (7,482 samples, 1.15%)</title><rect x="1.8179%" y="357" width="1.1489%" height="15" fill="rgb(240,68,47)" fg:x="11839" fg:w="7482"/><text x="2.0679%" y="367.50"></text></g><g><title>rayon_core::registry::Registry::pop_injected_job (9,390 samples, 1.44%)</title><rect x="1.5452%" y="389" width="1.4418%" height="15" fill="rgb(210,16,53)" fg:x="10063" fg:w="9390"/><text x="1.7952%" y="399.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (9,158 samples, 1.41%)</title><rect x="1.5808%" y="373" width="1.4062%" height="15" fill="rgb(235,124,12)" fg:x="10295" fg:w="9158"/><text x="1.8308%" y="383.50"></text></g><g><title>crossbeam_deque::deque::Slot&lt;T&gt;::wait_write (101 samples, 0.02%)</title><rect x="2.9715%" y="357" width="0.0155%" height="15" fill="rgb(224,169,11)" fg:x="19352" fg:w="101"/><text x="3.2215%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (101 samples, 0.02%)</title><rect x="2.9715%" y="341" width="0.0155%" height="15" fill="rgb(250,166,2)" fg:x="19352" fg:w="101"/><text x="3.2215%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (101 samples, 0.02%)</title><rect x="2.9715%" y="325" width="0.0155%" height="15" fill="rgb(242,216,29)" fg:x="19352" fg:w="101"/><text x="3.2215%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (97 samples, 0.01%)</title><rect x="3.0546%" y="373" width="0.0149%" height="15" fill="rgb(230,116,27)" fg:x="19893" fg:w="97"/><text x="3.3046%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (97 samples, 0.01%)</title><rect x="3.0546%" y="357" width="0.0149%" height="15" fill="rgb(228,99,48)" fg:x="19893" fg:w="97"/><text x="3.3046%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (97 samples, 0.01%)</title><rect x="3.0546%" y="341" width="0.0149%" height="15" fill="rgb(253,11,6)" fg:x="19893" fg:w="97"/><text x="3.3046%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::filter (276 samples, 0.04%)</title><rect x="3.0781%" y="373" width="0.0424%" height="15" fill="rgb(247,143,39)" fg:x="20046" fg:w="276"/><text x="3.3281%" y="383.50"></text></g><g><title>core::iter::adapters::filter::Filter&lt;I,P&gt;::new (276 samples, 0.04%)</title><rect x="3.0781%" y="357" width="0.0424%" height="15" fill="rgb(236,97,10)" fg:x="20046" fg:w="276"/><text x="3.3281%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (344 samples, 0.05%)</title><rect x="3.8090%" y="245" width="0.0528%" height="15" fill="rgb(233,208,19)" fg:x="24806" fg:w="344"/><text x="4.0590%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (344 samples, 0.05%)</title><rect x="3.8090%" y="229" width="0.0528%" height="15" fill="rgb(216,164,2)" fg:x="24806" fg:w="344"/><text x="4.0590%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (344 samples, 0.05%)</title><rect x="3.8090%" y="213" width="0.0528%" height="15" fill="rgb(220,129,5)" fg:x="24806" fg:w="344"/><text x="4.0590%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (280 samples, 0.04%)</title><rect x="3.8655%" y="197" width="0.0430%" height="15" fill="rgb(242,17,10)" fg:x="25174" fg:w="280"/><text x="4.1155%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::guard::Guard&gt; (604 samples, 0.09%)</title><rect x="3.8626%" y="245" width="0.0927%" height="15" fill="rgb(242,107,0)" fg:x="25155" fg:w="604"/><text x="4.1126%" y="255.50"></text></g><g><title>&lt;crossbeam_epoch::guard::Guard as core::ops::drop::Drop&gt;::drop (604 samples, 0.09%)</title><rect x="3.8626%" y="229" width="0.0927%" height="15" fill="rgb(251,28,31)" fg:x="25155" fg:w="604"/><text x="4.1126%" y="239.50"></text></g><g><title>crossbeam_epoch::internal::Local::unpin (602 samples, 0.09%)</title><rect x="3.8629%" y="213" width="0.0924%" height="15" fill="rgb(233,223,10)" fg:x="25157" fg:w="602"/><text x="4.1129%" y="223.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::store (301 samples, 0.05%)</title><rect x="3.9091%" y="197" width="0.0462%" height="15" fill="rgb(215,21,27)" fg:x="25458" fg:w="301"/><text x="4.1591%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (301 samples, 0.05%)</title><rect x="3.9091%" y="181" width="0.0462%" height="15" fill="rgb(232,23,21)" fg:x="25458" fg:w="301"/><text x="4.1591%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_store (301 samples, 0.05%)</title><rect x="3.9091%" y="165" width="0.0462%" height="15" fill="rgb(244,5,23)" fg:x="25458" fg:w="301"/><text x="4.1591%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (737 samples, 0.11%)</title><rect x="3.9553%" y="245" width="0.1132%" height="15" fill="rgb(226,81,46)" fg:x="25759" fg:w="737"/><text x="4.2053%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (737 samples, 0.11%)</title><rect x="3.9553%" y="229" width="0.1132%" height="15" fill="rgb(247,70,30)" fg:x="25759" fg:w="737"/><text x="4.2053%" y="239.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (1,278 samples, 0.20%)</title><rect x="4.0689%" y="245" width="0.1962%" height="15" fill="rgb(212,68,19)" fg:x="26499" fg:w="1278"/><text x="4.3189%" y="255.50"></text></g><g><title>crossbeam_epoch::default::with_handle (1,278 samples, 0.20%)</title><rect x="4.0689%" y="229" width="0.1962%" height="15" fill="rgb(240,187,13)" fg:x="26499" fg:w="1278"/><text x="4.3189%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,278 samples, 0.20%)</title><rect x="4.0689%" y="213" width="0.1962%" height="15" fill="rgb(223,113,26)" fg:x="26499" fg:w="1278"/><text x="4.3189%" y="223.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (845 samples, 0.13%)</title><rect x="4.1354%" y="197" width="0.1298%" height="15" fill="rgb(206,192,2)" fg:x="26932" fg:w="845"/><text x="4.3854%" y="207.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (845 samples, 0.13%)</title><rect x="4.1354%" y="181" width="0.1298%" height="15" fill="rgb(241,108,4)" fg:x="26932" fg:w="845"/><text x="4.3854%" y="191.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (549 samples, 0.08%)</title><rect x="4.1809%" y="165" width="0.0843%" height="15" fill="rgb(247,173,49)" fg:x="27228" fg:w="549"/><text x="4.4309%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (549 samples, 0.08%)</title><rect x="4.1809%" y="149" width="0.0843%" height="15" fill="rgb(224,114,35)" fg:x="27228" fg:w="549"/><text x="4.4309%" y="159.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (678 samples, 0.10%)</title><rect x="4.3017%" y="197" width="0.1041%" height="15" fill="rgb(245,159,27)" fg:x="28015" fg:w="678"/><text x="4.5517%" y="207.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (678 samples, 0.10%)</title><rect x="4.3017%" y="181" width="0.1041%" height="15" fill="rgb(245,172,44)" fg:x="28015" fg:w="678"/><text x="4.5517%" y="191.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (396 samples, 0.06%)</title><rect x="4.3450%" y="165" width="0.0608%" height="15" fill="rgb(236,23,11)" fg:x="28297" fg:w="396"/><text x="4.5950%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (396 samples, 0.06%)</title><rect x="4.3450%" y="149" width="0.0608%" height="15" fill="rgb(205,117,38)" fg:x="28297" fg:w="396"/><text x="4.5950%" y="159.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;usize&gt; as core::ops::arith::Add&gt;::add (238 samples, 0.04%)</title><rect x="4.4542%" y="133" width="0.0365%" height="15" fill="rgb(237,72,25)" fg:x="29008" fg:w="238"/><text x="4.7042%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (238 samples, 0.04%)</title><rect x="4.4542%" y="117" width="0.0365%" height="15" fill="rgb(244,70,9)" fg:x="29008" fg:w="238"/><text x="4.7042%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (413 samples, 0.06%)</title><rect x="4.4907%" y="133" width="0.0634%" height="15" fill="rgb(217,125,39)" fg:x="29246" fg:w="413"/><text x="4.7407%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (410 samples, 0.06%)</title><rect x="4.5542%" y="133" width="0.0630%" height="15" fill="rgb(235,36,10)" fg:x="29659" fg:w="410"/><text x="4.8042%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (410 samples, 0.06%)</title><rect x="4.5542%" y="117" width="0.0630%" height="15" fill="rgb(251,123,47)" fg:x="29659" fg:w="410"/><text x="4.8042%" y="127.50"></text></g><g><title>core::mem::replace (410 samples, 0.06%)</title><rect x="4.5542%" y="101" width="0.0630%" height="15" fill="rgb(221,13,13)" fg:x="29659" fg:w="410"/><text x="4.8042%" y="111.50"></text></g><g><title>core::ptr::write (410 samples, 0.06%)</title><rect x="4.5542%" y="85" width="0.0630%" height="15" fill="rgb(238,131,9)" fg:x="29659" fg:w="410"/><text x="4.8042%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (124 samples, 0.02%)</title><rect x="4.6171%" y="133" width="0.0190%" height="15" fill="rgb(211,50,8)" fg:x="30069" fg:w="124"/><text x="4.8671%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (124 samples, 0.02%)</title><rect x="4.6171%" y="117" width="0.0190%" height="15" fill="rgb(245,182,24)" fg:x="30069" fg:w="124"/><text x="4.8671%" y="127.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (5,967 samples, 0.92%)</title><rect x="4.6361%" y="133" width="0.9162%" height="15" fill="rgb(242,14,37)" fg:x="30193" fg:w="5967"/><text x="4.8861%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (5,967 samples, 0.92%)</title><rect x="4.6361%" y="117" width="0.9162%" height="15" fill="rgb(246,228,12)" fg:x="30193" fg:w="5967"/><text x="4.8861%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5,967 samples, 0.92%)</title><rect x="4.6361%" y="101" width="0.9162%" height="15" fill="rgb(213,55,15)" fg:x="30193" fg:w="5967"/><text x="4.8861%" y="111.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (224 samples, 0.03%)</title><rect x="5.5524%" y="133" width="0.0344%" height="15" fill="rgb(209,9,3)" fg:x="36160" fg:w="224"/><text x="5.8024%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (224 samples, 0.03%)</title><rect x="5.5524%" y="117" width="0.0344%" height="15" fill="rgb(230,59,30)" fg:x="36160" fg:w="224"/><text x="5.8024%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (224 samples, 0.03%)</title><rect x="5.5524%" y="101" width="0.0344%" height="15" fill="rgb(209,121,21)" fg:x="36160" fg:w="224"/><text x="5.8024%" y="111.50"></text></g><g><title>crossbeam_epoch::epoch::Epoch::pinned (287 samples, 0.04%)</title><rect x="5.5868%" y="133" width="0.0441%" height="15" fill="rgb(220,109,13)" fg:x="36384" fg:w="287"/><text x="5.8368%" y="143.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (1,198 samples, 0.18%)</title><rect x="5.6720%" y="85" width="0.1840%" height="15" fill="rgb(232,18,1)" fg:x="36939" fg:w="1198"/><text x="5.9220%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,198 samples, 0.18%)</title><rect x="5.6720%" y="69" width="0.1840%" height="15" fill="rgb(215,41,42)" fg:x="36939" fg:w="1198"/><text x="5.9220%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_load (1,198 samples, 0.18%)</title><rect x="5.6720%" y="53" width="0.1840%" height="15" fill="rgb(224,123,36)" fg:x="36939" fg:w="1198"/><text x="5.9220%" y="63.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,349 samples, 0.21%)</title><rect x="5.6582%" y="101" width="0.2071%" height="15" fill="rgb(240,125,3)" fg:x="36849" fg:w="1349"/><text x="5.9082%" y="111.50"></text></g><g><title>core::sync::atomic::fence (285 samples, 0.04%)</title><rect x="5.8653%" y="101" width="0.0438%" height="15" fill="rgb(205,98,50)" fg:x="38198" fg:w="285"/><text x="6.1153%" y="111.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (276 samples, 0.04%)</title><rect x="5.9091%" y="101" width="0.0424%" height="15" fill="rgb(205,185,37)" fg:x="38483" fg:w="276"/><text x="6.1591%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (276 samples, 0.04%)</title><rect x="5.9091%" y="85" width="0.0424%" height="15" fill="rgb(238,207,15)" fg:x="38483" fg:w="276"/><text x="6.1591%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_load (276 samples, 0.04%)</title><rect x="5.9091%" y="69" width="0.0424%" height="15" fill="rgb(213,199,42)" fg:x="38483" fg:w="276"/><text x="6.1591%" y="79.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (2,161 samples, 0.33%)</title><rect x="5.6308%" y="133" width="0.3318%" height="15" fill="rgb(235,201,11)" fg:x="36671" fg:w="2161"/><text x="5.8808%" y="143.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (2,085 samples, 0.32%)</title><rect x="5.6425%" y="117" width="0.3202%" height="15" fill="rgb(207,46,11)" fg:x="36747" fg:w="2085"/><text x="5.8925%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (15,312 samples, 2.35%)</title><rect x="3.6146%" y="293" width="2.3512%" height="15" fill="rgb(241,35,35)" fg:x="23540" fg:w="15312"/><text x="3.8646%" y="303.50">c..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (15,312 samples, 2.35%)</title><rect x="3.6146%" y="277" width="2.3512%" height="15" fill="rgb(243,32,47)" fg:x="23540" fg:w="15312"/><text x="3.8646%" y="287.50">r..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (14,696 samples, 2.26%)</title><rect x="3.7092%" y="261" width="2.2566%" height="15" fill="rgb(247,202,23)" fg:x="24156" fg:w="14696"/><text x="3.9592%" y="271.50">c..</text></g><g><title>crossbeam_epoch::default::pin (11,075 samples, 1.70%)</title><rect x="4.2652%" y="245" width="1.7006%" height="15" fill="rgb(219,102,11)" fg:x="27777" fg:w="11075"/><text x="4.5152%" y="255.50"></text></g><g><title>crossbeam_epoch::default::with_handle (11,070 samples, 1.70%)</title><rect x="4.2659%" y="229" width="1.6998%" height="15" fill="rgb(243,110,44)" fg:x="27782" fg:w="11070"/><text x="4.5159%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,843 samples, 1.66%)</title><rect x="4.3008%" y="213" width="1.6649%" height="15" fill="rgb(222,74,54)" fg:x="28009" fg:w="10843"/><text x="4.5508%" y="223.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (10,159 samples, 1.56%)</title><rect x="4.4058%" y="197" width="1.5599%" height="15" fill="rgb(216,99,12)" fg:x="28693" fg:w="10159"/><text x="4.6558%" y="207.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (10,159 samples, 1.56%)</title><rect x="4.4058%" y="181" width="1.5599%" height="15" fill="rgb(226,22,26)" fg:x="28693" fg:w="10159"/><text x="4.6558%" y="191.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (10,159 samples, 1.56%)</title><rect x="4.4058%" y="165" width="1.5599%" height="15" fill="rgb(217,163,10)" fg:x="28693" fg:w="10159"/><text x="4.6558%" y="175.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (10,159 samples, 1.56%)</title><rect x="4.4058%" y="149" width="1.5599%" height="15" fill="rgb(213,25,53)" fg:x="28693" fg:w="10159"/><text x="4.6558%" y="159.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (15,663 samples, 2.41%)</title><rect x="3.5955%" y="309" width="2.4051%" height="15" fill="rgb(252,105,26)" fg:x="23416" fg:w="15663"/><text x="3.8455%" y="319.50">co..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (227 samples, 0.03%)</title><rect x="5.9657%" y="293" width="0.0349%" height="15" fill="rgb(220,39,43)" fg:x="38852" fg:w="227"/><text x="6.2157%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,472 samples, 0.23%)</title><rect x="6.0006%" y="309" width="0.2260%" height="15" fill="rgb(229,68,48)" fg:x="39079" fg:w="1472"/><text x="6.2506%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,472 samples, 0.23%)</title><rect x="6.0006%" y="293" width="0.2260%" height="15" fill="rgb(252,8,32)" fg:x="39079" fg:w="1472"/><text x="6.2506%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (92 samples, 0.01%)</title><rect x="6.2125%" y="277" width="0.0141%" height="15" fill="rgb(223,20,43)" fg:x="40459" fg:w="92"/><text x="6.4625%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (288 samples, 0.04%)</title><rect x="6.5595%" y="229" width="0.0442%" height="15" fill="rgb(229,81,49)" fg:x="42719" fg:w="288"/><text x="6.8095%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (288 samples, 0.04%)</title><rect x="6.5595%" y="213" width="0.0442%" height="15" fill="rgb(236,28,36)" fg:x="42719" fg:w="288"/><text x="6.8095%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (288 samples, 0.04%)</title><rect x="6.5595%" y="197" width="0.0442%" height="15" fill="rgb(249,185,26)" fg:x="42719" fg:w="288"/><text x="6.8095%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (435 samples, 0.07%)</title><rect x="6.6114%" y="181" width="0.0668%" height="15" fill="rgb(249,174,33)" fg:x="43057" fg:w="435"/><text x="6.8614%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::guard::Guard&gt; (891 samples, 0.14%)</title><rect x="6.6050%" y="229" width="0.1368%" height="15" fill="rgb(233,201,37)" fg:x="43015" fg:w="891"/><text x="6.8550%" y="239.50"></text></g><g><title>&lt;crossbeam_epoch::guard::Guard as core::ops::drop::Drop&gt;::drop (891 samples, 0.14%)</title><rect x="6.6050%" y="213" width="0.1368%" height="15" fill="rgb(221,78,26)" fg:x="43015" fg:w="891"/><text x="6.8550%" y="223.50"></text></g><g><title>crossbeam_epoch::internal::Local::unpin (886 samples, 0.14%)</title><rect x="6.6057%" y="197" width="0.1360%" height="15" fill="rgb(250,127,30)" fg:x="43020" fg:w="886"/><text x="6.8557%" y="207.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::store (405 samples, 0.06%)</title><rect x="6.6796%" y="181" width="0.0622%" height="15" fill="rgb(230,49,44)" fg:x="43501" fg:w="405"/><text x="6.9296%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (405 samples, 0.06%)</title><rect x="6.6796%" y="165" width="0.0622%" height="15" fill="rgb(229,67,23)" fg:x="43501" fg:w="405"/><text x="6.9296%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_store (405 samples, 0.06%)</title><rect x="6.6796%" y="149" width="0.0622%" height="15" fill="rgb(249,83,47)" fg:x="43501" fg:w="405"/><text x="6.9296%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (1,247 samples, 0.19%)</title><rect x="6.7418%" y="229" width="0.1915%" height="15" fill="rgb(215,43,3)" fg:x="43906" fg:w="1247"/><text x="6.9918%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (1,247 samples, 0.19%)</title><rect x="6.7418%" y="213" width="0.1915%" height="15" fill="rgb(238,154,13)" fg:x="43906" fg:w="1247"/><text x="6.9918%" y="223.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (1,726 samples, 0.27%)</title><rect x="6.9336%" y="229" width="0.2650%" height="15" fill="rgb(219,56,2)" fg:x="45155" fg:w="1726"/><text x="7.1836%" y="239.50"></text></g><g><title>crossbeam_epoch::default::with_handle (1,726 samples, 0.27%)</title><rect x="6.9336%" y="213" width="0.2650%" height="15" fill="rgb(233,0,4)" fg:x="45155" fg:w="1726"/><text x="7.1836%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,726 samples, 0.27%)</title><rect x="6.9336%" y="197" width="0.2650%" height="15" fill="rgb(235,30,7)" fg:x="45155" fg:w="1726"/><text x="7.1836%" y="207.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (1,169 samples, 0.18%)</title><rect x="7.0191%" y="181" width="0.1795%" height="15" fill="rgb(250,79,13)" fg:x="45712" fg:w="1169"/><text x="7.2691%" y="191.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (1,169 samples, 0.18%)</title><rect x="7.0191%" y="165" width="0.1795%" height="15" fill="rgb(211,146,34)" fg:x="45712" fg:w="1169"/><text x="7.2691%" y="175.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (707 samples, 0.11%)</title><rect x="7.0900%" y="149" width="0.1086%" height="15" fill="rgb(228,22,38)" fg:x="46174" fg:w="707"/><text x="7.3400%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (707 samples, 0.11%)</title><rect x="7.0900%" y="133" width="0.1086%" height="15" fill="rgb(235,168,5)" fg:x="46174" fg:w="707"/><text x="7.3400%" y="143.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (1,144 samples, 0.18%)</title><rect x="7.2537%" y="181" width="0.1757%" height="15" fill="rgb(221,155,16)" fg:x="47240" fg:w="1144"/><text x="7.5037%" y="191.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (1,144 samples, 0.18%)</title><rect x="7.2537%" y="165" width="0.1757%" height="15" fill="rgb(215,215,53)" fg:x="47240" fg:w="1144"/><text x="7.5037%" y="175.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (674 samples, 0.10%)</title><rect x="7.3259%" y="149" width="0.1035%" height="15" fill="rgb(223,4,10)" fg:x="47710" fg:w="674"/><text x="7.5759%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (674 samples, 0.10%)</title><rect x="7.3259%" y="133" width="0.1035%" height="15" fill="rgb(234,103,6)" fg:x="47710" fg:w="674"/><text x="7.5759%" y="143.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;usize&gt; as core::ops::arith::Add&gt;::add (436 samples, 0.07%)</title><rect x="7.5089%" y="117" width="0.0669%" height="15" fill="rgb(227,97,0)" fg:x="48902" fg:w="436"/><text x="7.7589%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (436 samples, 0.07%)</title><rect x="7.5089%" y="101" width="0.0669%" height="15" fill="rgb(234,150,53)" fg:x="48902" fg:w="436"/><text x="7.7589%" y="111.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (555 samples, 0.09%)</title><rect x="7.5759%" y="117" width="0.0852%" height="15" fill="rgb(228,201,54)" fg:x="49338" fg:w="555"/><text x="7.8259%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (677 samples, 0.10%)</title><rect x="7.6611%" y="117" width="0.1040%" height="15" fill="rgb(222,22,37)" fg:x="49893" fg:w="677"/><text x="7.9111%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (677 samples, 0.10%)</title><rect x="7.6611%" y="101" width="0.1040%" height="15" fill="rgb(237,53,32)" fg:x="49893" fg:w="677"/><text x="7.9111%" y="111.50"></text></g><g><title>core::mem::replace (677 samples, 0.10%)</title><rect x="7.6611%" y="85" width="0.1040%" height="15" fill="rgb(233,25,53)" fg:x="49893" fg:w="677"/><text x="7.9111%" y="95.50"></text></g><g><title>core::ptr::write (677 samples, 0.10%)</title><rect x="7.6611%" y="69" width="0.1040%" height="15" fill="rgb(210,40,34)" fg:x="49893" fg:w="677"/><text x="7.9111%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (185 samples, 0.03%)</title><rect x="7.7650%" y="117" width="0.0284%" height="15" fill="rgb(241,220,44)" fg:x="50570" fg:w="185"/><text x="8.0150%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (185 samples, 0.03%)</title><rect x="7.7650%" y="101" width="0.0284%" height="15" fill="rgb(235,28,35)" fg:x="50570" fg:w="185"/><text x="8.0150%" y="111.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (9,707 samples, 1.49%)</title><rect x="7.7935%" y="117" width="1.4905%" height="15" fill="rgb(210,56,17)" fg:x="50755" fg:w="9707"/><text x="8.0435%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (9,707 samples, 1.49%)</title><rect x="7.7935%" y="101" width="1.4905%" height="15" fill="rgb(224,130,29)" fg:x="50755" fg:w="9707"/><text x="8.0435%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9,707 samples, 1.49%)</title><rect x="7.7935%" y="85" width="1.4905%" height="15" fill="rgb(235,212,8)" fg:x="50755" fg:w="9707"/><text x="8.0435%" y="95.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (358 samples, 0.05%)</title><rect x="9.2840%" y="117" width="0.0550%" height="15" fill="rgb(223,33,50)" fg:x="60462" fg:w="358"/><text x="9.5340%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (358 samples, 0.05%)</title><rect x="9.2840%" y="101" width="0.0550%" height="15" fill="rgb(219,149,13)" fg:x="60462" fg:w="358"/><text x="9.5340%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (358 samples, 0.05%)</title><rect x="9.2840%" y="85" width="0.0550%" height="15" fill="rgb(250,156,29)" fg:x="60462" fg:w="358"/><text x="9.5340%" y="95.50"></text></g><g><title>crossbeam_epoch::epoch::Epoch::pinned (433 samples, 0.07%)</title><rect x="9.3389%" y="117" width="0.0665%" height="15" fill="rgb(216,193,19)" fg:x="60820" fg:w="433"/><text x="9.5889%" y="127.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (2,002 samples, 0.31%)</title><rect x="9.4742%" y="69" width="0.3074%" height="15" fill="rgb(216,135,14)" fg:x="61701" fg:w="2002"/><text x="9.7242%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2,002 samples, 0.31%)</title><rect x="9.4742%" y="53" width="0.3074%" height="15" fill="rgb(241,47,5)" fg:x="61701" fg:w="2002"/><text x="9.7242%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_load (2,002 samples, 0.31%)</title><rect x="9.4742%" y="37" width="0.3074%" height="15" fill="rgb(233,42,35)" fg:x="61701" fg:w="2002"/><text x="9.7242%" y="47.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,276 samples, 0.35%)</title><rect x="9.4469%" y="85" width="0.3495%" height="15" fill="rgb(231,13,6)" fg:x="61523" fg:w="2276"/><text x="9.6969%" y="95.50"></text></g><g><title>crossbeam_epoch::atomic::Shared&lt;T&gt;::tag (90 samples, 0.01%)</title><rect x="9.7825%" y="69" width="0.0138%" height="15" fill="rgb(207,181,40)" fg:x="63709" fg:w="90"/><text x="10.0325%" y="79.50"></text></g><g><title>crossbeam_epoch::atomic::decompose_tag (90 samples, 0.01%)</title><rect x="9.7825%" y="53" width="0.0138%" height="15" fill="rgb(254,173,49)" fg:x="63709" fg:w="90"/><text x="10.0325%" y="63.50"></text></g><g><title>core::sync::atomic::fence (472 samples, 0.07%)</title><rect x="9.7964%" y="85" width="0.0725%" height="15" fill="rgb(221,1,38)" fg:x="63799" fg:w="472"/><text x="10.0464%" y="95.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (453 samples, 0.07%)</title><rect x="9.8688%" y="85" width="0.0696%" height="15" fill="rgb(206,124,46)" fg:x="64271" fg:w="453"/><text x="10.1188%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (453 samples, 0.07%)</title><rect x="9.8688%" y="69" width="0.0696%" height="15" fill="rgb(249,21,11)" fg:x="64271" fg:w="453"/><text x="10.1188%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_load (453 samples, 0.07%)</title><rect x="9.8688%" y="53" width="0.0696%" height="15" fill="rgb(222,201,40)" fg:x="64271" fg:w="453"/><text x="10.1188%" y="63.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (3,574 samples, 0.55%)</title><rect x="9.4054%" y="117" width="0.5488%" height="15" fill="rgb(235,61,29)" fg:x="61253" fg:w="3574"/><text x="9.6554%" y="127.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (3,463 samples, 0.53%)</title><rect x="9.4225%" y="101" width="0.5317%" height="15" fill="rgb(219,207,3)" fg:x="61364" fg:w="3463"/><text x="9.6725%" y="111.50"></text></g><g><title>crossbeam_epoch::sync::list::List&lt;T,C&gt;::iter (84 samples, 0.01%)</title><rect x="9.9413%" y="85" width="0.0129%" height="15" fill="rgb(222,56,46)" fg:x="64743" fg:w="84"/><text x="10.1913%" y="95.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (66 samples, 0.01%)</title><rect x="9.9441%" y="69" width="0.0101%" height="15" fill="rgb(239,76,54)" fg:x="64761" fg:w="66"/><text x="10.1941%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (66 samples, 0.01%)</title><rect x="9.9441%" y="53" width="0.0101%" height="15" fill="rgb(231,124,27)" fg:x="64761" fg:w="66"/><text x="10.1941%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_load (66 samples, 0.01%)</title><rect x="9.9441%" y="37" width="0.0101%" height="15" fill="rgb(249,195,6)" fg:x="64761" fg:w="66"/><text x="10.1941%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (24,198 samples, 3.72%)</title><rect x="6.2458%" y="277" width="3.7156%" height="15" fill="rgb(237,174,47)" fg:x="40676" fg:w="24198"/><text x="6.4958%" y="287.50">core..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (24,198 samples, 3.72%)</title><rect x="6.2458%" y="261" width="3.7156%" height="15" fill="rgb(206,201,31)" fg:x="40676" fg:w="24198"/><text x="6.4958%" y="271.50">rayo..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (23,110 samples, 3.55%)</title><rect x="6.4129%" y="245" width="3.5485%" height="15" fill="rgb(231,57,52)" fg:x="41764" fg:w="23110"/><text x="6.6629%" y="255.50">cros..</text></g><g><title>crossbeam_epoch::default::pin (17,993 samples, 2.76%)</title><rect x="7.1986%" y="229" width="2.7628%" height="15" fill="rgb(248,177,22)" fg:x="46881" fg:w="17993"/><text x="7.4486%" y="239.50">cr..</text></g><g><title>crossbeam_epoch::default::with_handle (17,980 samples, 2.76%)</title><rect x="7.2006%" y="213" width="2.7608%" height="15" fill="rgb(215,211,37)" fg:x="46894" fg:w="17980"/><text x="7.4506%" y="223.50">cr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17,639 samples, 2.71%)</title><rect x="7.2530%" y="197" width="2.7085%" height="15" fill="rgb(241,128,51)" fg:x="47235" fg:w="17639"/><text x="7.5030%" y="207.50">st..</text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (16,490 samples, 2.53%)</title><rect x="7.4294%" y="181" width="2.5320%" height="15" fill="rgb(227,165,31)" fg:x="48384" fg:w="16490"/><text x="7.6794%" y="191.50">cr..</text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (16,490 samples, 2.53%)</title><rect x="7.4294%" y="165" width="2.5320%" height="15" fill="rgb(228,167,24)" fg:x="48384" fg:w="16490"/><text x="7.6794%" y="175.50">cr..</text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (16,490 samples, 2.53%)</title><rect x="7.4294%" y="149" width="2.5320%" height="15" fill="rgb(228,143,12)" fg:x="48384" fg:w="16490"/><text x="7.6794%" y="159.50">cr..</text></g><g><title>crossbeam_epoch::internal::Local::pin (16,490 samples, 2.53%)</title><rect x="7.4294%" y="133" width="2.5320%" height="15" fill="rgb(249,149,8)" fg:x="48384" fg:w="16490"/><text x="7.6794%" y="143.50">cr..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44,813 samples, 6.88%)</title><rect x="3.1307%" y="341" width="6.8811%" height="15" fill="rgb(243,35,44)" fg:x="20389" fg:w="44813"/><text x="3.3807%" y="351.50">&lt;core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (43,395 samples, 6.66%)</title><rect x="3.3485%" y="325" width="6.6633%" height="15" fill="rgb(246,89,9)" fg:x="21807" fg:w="43395"/><text x="3.5985%" y="335.50">core::ite..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24,651 samples, 3.79%)</title><rect x="6.2266%" y="309" width="3.7852%" height="15" fill="rgb(233,213,13)" fg:x="40551" fg:w="24651"/><text x="6.4766%" y="319.50">core..</text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (24,651 samples, 3.79%)</title><rect x="6.2266%" y="293" width="3.7852%" height="15" fill="rgb(233,141,41)" fg:x="40551" fg:w="24651"/><text x="6.4766%" y="303.50">core..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (328 samples, 0.05%)</title><rect x="9.9614%" y="277" width="0.0504%" height="15" fill="rgb(239,167,4)" fg:x="64874" fg:w="328"/><text x="10.2114%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (45,046 samples, 6.92%)</title><rect x="3.1205%" y="373" width="6.9168%" height="15" fill="rgb(209,217,16)" fg:x="20322" fg:w="45046"/><text x="3.3705%" y="383.50">core::ite..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (45,046 samples, 6.92%)</title><rect x="3.1205%" y="357" width="6.9168%" height="15" fill="rgb(219,88,35)" fg:x="20322" fg:w="45046"/><text x="3.3705%" y="367.50">&lt;core::it..</text></g><g><title>core::iter::adapters::filter::filter_try_fold (166 samples, 0.03%)</title><rect x="10.0118%" y="341" width="0.0255%" height="15" fill="rgb(220,193,23)" fg:x="65202" fg:w="166"/><text x="10.2618%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (57,228 samples, 8.79%)</title><rect x="1.5221%" y="421" width="8.7874%" height="15" fill="rgb(230,90,52)" fg:x="9913" fg:w="57228"/><text x="1.7721%" y="431.50">core::option..</text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (57,191 samples, 8.78%)</title><rect x="1.5278%" y="405" width="8.7817%" height="15" fill="rgb(252,106,19)" fg:x="9950" fg:w="57191"/><text x="1.7778%" y="415.50">rayon_core::..</text></g><g><title>rayon_core::registry::WorkerThread::steal (47,688 samples, 7.32%)</title><rect x="2.9870%" y="389" width="7.3225%" height="15" fill="rgb(206,74,20)" fg:x="19453" fg:w="47688"/><text x="3.2370%" y="399.50">rayon_core..</text></g><g><title>rayon_core::registry::XorShift64Star::next_usize (1,756 samples, 0.27%)</title><rect x="10.0399%" y="373" width="0.2696%" height="15" fill="rgb(230,138,44)" fg:x="65385" fg:w="1756"/><text x="10.2899%" y="383.50"></text></g><g><title>rayon_core::registry::XorShift64Star::next (310 samples, 0.05%)</title><rect x="10.2619%" y="357" width="0.0476%" height="15" fill="rgb(235,182,43)" fg:x="66831" fg:w="310"/><text x="10.5119%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (87 samples, 0.01%)</title><rect x="10.2962%" y="341" width="0.0134%" height="15" fill="rgb(242,16,51)" fg:x="67054" fg:w="87"/><text x="10.5462%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (103 samples, 0.02%)</title><rect x="10.3917%" y="341" width="0.0158%" height="15" fill="rgb(248,9,4)" fg:x="67676" fg:w="103"/><text x="10.6417%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::guard::Guard&gt; (216 samples, 0.03%)</title><rect x="10.3895%" y="389" width="0.0332%" height="15" fill="rgb(210,31,22)" fg:x="67662" fg:w="216"/><text x="10.6395%" y="399.50"></text></g><g><title>&lt;crossbeam_epoch::guard::Guard as core::ops::drop::Drop&gt;::drop (216 samples, 0.03%)</title><rect x="10.3895%" y="373" width="0.0332%" height="15" fill="rgb(239,54,39)" fg:x="67662" fg:w="216"/><text x="10.6395%" y="383.50"></text></g><g><title>crossbeam_epoch::internal::Local::unpin (211 samples, 0.03%)</title><rect x="10.3903%" y="357" width="0.0324%" height="15" fill="rgb(230,99,41)" fg:x="67667" fg:w="211"/><text x="10.6403%" y="367.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::store (99 samples, 0.02%)</title><rect x="10.4075%" y="341" width="0.0152%" height="15" fill="rgb(253,106,12)" fg:x="67779" fg:w="99"/><text x="10.6575%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (99 samples, 0.02%)</title><rect x="10.4075%" y="325" width="0.0152%" height="15" fill="rgb(213,46,41)" fg:x="67779" fg:w="99"/><text x="10.6575%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_store (99 samples, 0.02%)</title><rect x="10.4075%" y="309" width="0.0152%" height="15" fill="rgb(215,133,35)" fg:x="67779" fg:w="99"/><text x="10.6575%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (504 samples, 0.08%)</title><rect x="10.4227%" y="389" width="0.0774%" height="15" fill="rgb(213,28,5)" fg:x="67878" fg:w="504"/><text x="10.6727%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (504 samples, 0.08%)</title><rect x="10.4227%" y="373" width="0.0774%" height="15" fill="rgb(215,77,49)" fg:x="67878" fg:w="504"/><text x="10.6727%" y="383.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (2,352 samples, 0.36%)</title><rect x="10.5001%" y="389" width="0.3612%" height="15" fill="rgb(248,100,22)" fg:x="68382" fg:w="2352"/><text x="10.7501%" y="399.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2,352 samples, 0.36%)</title><rect x="10.5001%" y="373" width="0.3612%" height="15" fill="rgb(208,67,9)" fg:x="68382" fg:w="2352"/><text x="10.7501%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,352 samples, 0.36%)</title><rect x="10.5001%" y="357" width="0.3612%" height="15" fill="rgb(219,133,21)" fg:x="68382" fg:w="2352"/><text x="10.7501%" y="367.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (758 samples, 0.12%)</title><rect x="10.7448%" y="341" width="0.1164%" height="15" fill="rgb(246,46,29)" fg:x="69976" fg:w="758"/><text x="10.9948%" y="351.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (758 samples, 0.12%)</title><rect x="10.7448%" y="325" width="0.1164%" height="15" fill="rgb(246,185,52)" fg:x="69976" fg:w="758"/><text x="10.9948%" y="335.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (649 samples, 0.10%)</title><rect x="10.7616%" y="309" width="0.0997%" height="15" fill="rgb(252,136,11)" fg:x="70085" fg:w="649"/><text x="11.0116%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (649 samples, 0.10%)</title><rect x="10.7616%" y="293" width="0.0997%" height="15" fill="rgb(219,138,53)" fg:x="70085" fg:w="649"/><text x="11.0116%" y="303.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (210 samples, 0.03%)</title><rect x="10.8784%" y="341" width="0.0322%" height="15" fill="rgb(211,51,23)" fg:x="70846" fg:w="210"/><text x="11.1284%" y="351.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (210 samples, 0.03%)</title><rect x="10.8784%" y="325" width="0.0322%" height="15" fill="rgb(247,221,28)" fg:x="70846" fg:w="210"/><text x="11.1284%" y="335.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (103 samples, 0.02%)</title><rect x="10.8949%" y="309" width="0.0158%" height="15" fill="rgb(251,222,45)" fg:x="70953" fg:w="103"/><text x="11.1449%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (103 samples, 0.02%)</title><rect x="10.8949%" y="293" width="0.0158%" height="15" fill="rgb(217,162,53)" fg:x="70953" fg:w="103"/><text x="11.1449%" y="303.50"></text></g><g><title>&lt;core::num::wrapping::Wrapping&lt;usize&gt; as core::ops::arith::Add&gt;::add (111 samples, 0.02%)</title><rect x="10.9291%" y="277" width="0.0170%" height="15" fill="rgb(229,93,14)" fg:x="71176" fg:w="111"/><text x="11.1791%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (111 samples, 0.02%)</title><rect x="10.9291%" y="261" width="0.0170%" height="15" fill="rgb(209,67,49)" fg:x="71176" fg:w="111"/><text x="11.1791%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (123 samples, 0.02%)</title><rect x="10.9461%" y="277" width="0.0189%" height="15" fill="rgb(213,87,29)" fg:x="71287" fg:w="123"/><text x="11.1961%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (331 samples, 0.05%)</title><rect x="10.9650%" y="277" width="0.0508%" height="15" fill="rgb(205,151,52)" fg:x="71410" fg:w="331"/><text x="11.2150%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (331 samples, 0.05%)</title><rect x="10.9650%" y="261" width="0.0508%" height="15" fill="rgb(253,215,39)" fg:x="71410" fg:w="331"/><text x="11.2150%" y="271.50"></text></g><g><title>core::mem::replace (331 samples, 0.05%)</title><rect x="10.9650%" y="245" width="0.0508%" height="15" fill="rgb(221,220,41)" fg:x="71410" fg:w="331"/><text x="11.2150%" y="255.50"></text></g><g><title>core::ptr::write (331 samples, 0.05%)</title><rect x="10.9650%" y="229" width="0.0508%" height="15" fill="rgb(218,133,21)" fg:x="71410" fg:w="331"/><text x="11.2150%" y="239.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (2,039 samples, 0.31%)</title><rect x="11.0231%" y="277" width="0.3131%" height="15" fill="rgb(221,193,43)" fg:x="71788" fg:w="2039"/><text x="11.2731%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,039 samples, 0.31%)</title><rect x="11.0231%" y="261" width="0.3131%" height="15" fill="rgb(240,128,52)" fg:x="71788" fg:w="2039"/><text x="11.2731%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,039 samples, 0.31%)</title><rect x="11.0231%" y="245" width="0.3131%" height="15" fill="rgb(253,114,12)" fg:x="71788" fg:w="2039"/><text x="11.2731%" y="255.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (1,417 samples, 0.22%)</title><rect x="11.3362%" y="277" width="0.2176%" height="15" fill="rgb(215,223,47)" fg:x="73827" fg:w="1417"/><text x="11.5862%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,417 samples, 0.22%)</title><rect x="11.3362%" y="261" width="0.2176%" height="15" fill="rgb(248,225,23)" fg:x="73827" fg:w="1417"/><text x="11.5862%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (1,417 samples, 0.22%)</title><rect x="11.3362%" y="245" width="0.2176%" height="15" fill="rgb(250,108,0)" fg:x="73827" fg:w="1417"/><text x="11.5862%" y="255.50"></text></g><g><title>crossbeam_epoch::epoch::Epoch::pinned (144 samples, 0.02%)</title><rect x="11.5537%" y="277" width="0.0221%" height="15" fill="rgb(228,208,7)" fg:x="75244" fg:w="144"/><text x="11.8037%" y="287.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (484 samples, 0.07%)</title><rect x="11.5917%" y="229" width="0.0743%" height="15" fill="rgb(244,45,10)" fg:x="75491" fg:w="484"/><text x="11.8417%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (484 samples, 0.07%)</title><rect x="11.5917%" y="213" width="0.0743%" height="15" fill="rgb(207,125,25)" fg:x="75491" fg:w="484"/><text x="11.8417%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (484 samples, 0.07%)</title><rect x="11.5917%" y="197" width="0.0743%" height="15" fill="rgb(210,195,18)" fg:x="75491" fg:w="484"/><text x="11.8417%" y="207.50"></text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (537 samples, 0.08%)</title><rect x="11.5866%" y="245" width="0.0825%" height="15" fill="rgb(249,80,12)" fg:x="75458" fg:w="537"/><text x="11.8366%" y="255.50"></text></g><g><title>core::sync::atomic::fence (112 samples, 0.02%)</title><rect x="11.6691%" y="245" width="0.0172%" height="15" fill="rgb(221,65,9)" fg:x="75995" fg:w="112"/><text x="11.9191%" y="255.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::load (132 samples, 0.02%)</title><rect x="11.6863%" y="245" width="0.0203%" height="15" fill="rgb(235,49,36)" fg:x="76107" fg:w="132"/><text x="11.9363%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (132 samples, 0.02%)</title><rect x="11.6863%" y="229" width="0.0203%" height="15" fill="rgb(225,32,20)" fg:x="76107" fg:w="132"/><text x="11.9363%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (132 samples, 0.02%)</title><rect x="11.6863%" y="213" width="0.0203%" height="15" fill="rgb(215,141,46)" fg:x="76107" fg:w="132"/><text x="11.9363%" y="223.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (848 samples, 0.13%)</title><rect x="11.5805%" y="261" width="0.1302%" height="15" fill="rgb(250,160,47)" fg:x="75418" fg:w="848"/><text x="11.8305%" y="271.50"></text></g><g><title>[libc.so.6] (377 samples, 0.06%)</title><rect x="11.7208%" y="245" width="0.0579%" height="15" fill="rgb(216,222,40)" fg:x="76332" fg:w="377"/><text x="11.9708%" y="255.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1,345 samples, 0.21%)</title><rect x="11.5759%" y="277" width="0.2065%" height="15" fill="rgb(234,217,39)" fg:x="75388" fg:w="1345"/><text x="11.8259%" y="287.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (467 samples, 0.07%)</title><rect x="11.7107%" y="261" width="0.0717%" height="15" fill="rgb(207,178,40)" fg:x="76266" fg:w="467"/><text x="11.9607%" y="271.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (9,489 samples, 1.46%)</title><rect x="10.3525%" y="405" width="1.4570%" height="15" fill="rgb(221,136,13)" fg:x="67421" fg:w="9489"/><text x="10.6025%" y="415.50"></text></g><g><title>crossbeam_epoch::default::pin (6,176 samples, 0.95%)</title><rect x="10.8612%" y="389" width="0.9483%" height="15" fill="rgb(249,199,10)" fg:x="70734" fg:w="6176"/><text x="11.1112%" y="399.50"></text></g><g><title>crossbeam_epoch::default::with_handle (6,173 samples, 0.95%)</title><rect x="10.8617%" y="373" width="0.9479%" height="15" fill="rgb(249,222,13)" fg:x="70737" fg:w="6173"/><text x="11.1117%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,065 samples, 0.93%)</title><rect x="10.8783%" y="357" width="0.9313%" height="15" fill="rgb(244,185,38)" fg:x="70845" fg:w="6065"/><text x="11.1283%" y="367.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (5,854 samples, 0.90%)</title><rect x="10.9107%" y="341" width="0.8989%" height="15" fill="rgb(236,202,9)" fg:x="71056" fg:w="5854"/><text x="11.1607%" y="351.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (5,854 samples, 0.90%)</title><rect x="10.9107%" y="325" width="0.8989%" height="15" fill="rgb(250,229,37)" fg:x="71056" fg:w="5854"/><text x="11.1607%" y="335.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (5,854 samples, 0.90%)</title><rect x="10.9107%" y="309" width="0.8989%" height="15" fill="rgb(206,174,23)" fg:x="71056" fg:w="5854"/><text x="11.1607%" y="319.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (5,854 samples, 0.90%)</title><rect x="10.9107%" y="293" width="0.8989%" height="15" fill="rgb(211,33,43)" fg:x="71056" fg:w="5854"/><text x="11.1607%" y="303.50"></text></g><g><title>crossbeam_epoch::internal::Local::global (177 samples, 0.03%)</title><rect x="11.7824%" y="277" width="0.0272%" height="15" fill="rgb(245,58,50)" fg:x="76733" fg:w="177"/><text x="12.0324%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (177 samples, 0.03%)</title><rect x="11.7824%" y="261" width="0.0272%" height="15" fill="rgb(244,68,36)" fg:x="76733" fg:w="177"/><text x="12.0324%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (177 samples, 0.03%)</title><rect x="11.7824%" y="245" width="0.0272%" height="15" fill="rgb(232,229,15)" fg:x="76733" fg:w="177"/><text x="12.0324%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (177 samples, 0.03%)</title><rect x="11.7824%" y="229" width="0.0272%" height="15" fill="rgb(254,30,23)" fg:x="76733" fg:w="177"/><text x="12.0324%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (211 samples, 0.03%)</title><rect x="11.8272%" y="389" width="0.0324%" height="15" fill="rgb(235,160,14)" fg:x="77025" fg:w="211"/><text x="12.0772%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (211 samples, 0.03%)</title><rect x="11.8272%" y="373" width="0.0324%" height="15" fill="rgb(212,155,44)" fg:x="77025" fg:w="211"/><text x="12.0772%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (211 samples, 0.03%)</title><rect x="11.8272%" y="357" width="0.0324%" height="15" fill="rgb(226,2,50)" fg:x="77025" fg:w="211"/><text x="12.0772%" y="367.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (106 samples, 0.02%)</title><rect x="11.8596%" y="389" width="0.0163%" height="15" fill="rgb(234,177,6)" fg:x="77236" fg:w="106"/><text x="12.1096%" y="399.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (68,882 samples, 10.58%)</title><rect x="1.5166%" y="437" width="10.5769%" height="15" fill="rgb(217,24,9)" fg:x="9877" fg:w="68882"/><text x="1.7666%" y="447.50">rayon_core::reg..</text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (11,618 samples, 1.78%)</title><rect x="10.3095%" y="421" width="1.7839%" height="15" fill="rgb(220,13,46)" fg:x="67141" fg:w="11618"/><text x="10.5595%" y="431.50">r..</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (1,849 samples, 0.28%)</title><rect x="11.8096%" y="405" width="0.2839%" height="15" fill="rgb(239,221,27)" fg:x="76910" fg:w="1849"/><text x="12.0596%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (1,417 samples, 0.22%)</title><rect x="11.8759%" y="389" width="0.2176%" height="15" fill="rgb(222,198,25)" fg:x="77342" fg:w="1417"/><text x="12.1259%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (1,417 samples, 0.22%)</title><rect x="11.8759%" y="373" width="0.2176%" height="15" fill="rgb(211,99,13)" fg:x="77342" fg:w="1417"/><text x="12.1259%" y="383.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (102 samples, 0.02%)</title><rect x="12.0939%" y="421" width="0.0157%" height="15" fill="rgb(232,111,31)" fg:x="78762" fg:w="102"/><text x="12.3439%" y="431.50"></text></g><g><title>crossbeam_epoch::default::pin (71 samples, 0.01%)</title><rect x="12.0987%" y="405" width="0.0109%" height="15" fill="rgb(245,82,37)" fg:x="78793" fg:w="71"/><text x="12.3487%" y="415.50"></text></g><g><title>crossbeam_epoch::default::with_handle (71 samples, 0.01%)</title><rect x="12.0987%" y="389" width="0.0109%" height="15" fill="rgb(227,149,46)" fg:x="78793" fg:w="71"/><text x="12.3487%" y="399.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (126 samples, 0.02%)</title><rect x="12.0935%" y="437" width="0.0193%" height="15" fill="rgb(218,36,50)" fg:x="78759" fg:w="126"/><text x="12.3435%" y="447.50"></text></g><g><title>__sched_yield (4,799 samples, 0.74%)</title><rect x="12.2612%" y="421" width="0.7369%" height="15" fill="rgb(226,80,48)" fg:x="79851" fg:w="4799"/><text x="12.5112%" y="431.50"></text></g><g><title>rayon_core::sleep::counters::AtomicCounters::load (210 samples, 0.03%)</title><rect x="13.0026%" y="389" width="0.0322%" height="15" fill="rgb(238,224,15)" fg:x="84680" fg:w="210"/><text x="13.2526%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (210 samples, 0.03%)</title><rect x="13.0026%" y="373" width="0.0322%" height="15" fill="rgb(241,136,10)" fg:x="84680" fg:w="210"/><text x="13.2526%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (210 samples, 0.03%)</title><rect x="13.0026%" y="357" width="0.0322%" height="15" fill="rgb(208,32,45)" fg:x="84680" fg:w="210"/><text x="13.2526%" y="367.50"></text></g><g><title>rayon_core::sleep::counters::AtomicCounters::increment_jobs_event_counter_if (264 samples, 0.04%)</title><rect x="13.0013%" y="405" width="0.0405%" height="15" fill="rgb(207,135,9)" fg:x="84671" fg:w="264"/><text x="13.2513%" y="415.50"></text></g><g><title>rayon_core::sleep::Sleep::announce_sleepy (299 samples, 0.05%)</title><rect x="12.9980%" y="421" width="0.0459%" height="15" fill="rgb(206,86,44)" fg:x="84650" fg:w="299"/><text x="13.2480%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;bool&gt;&gt; (104 samples, 0.02%)</title><rect x="13.0621%" y="405" width="0.0160%" height="15" fill="rgb(245,177,15)" fg:x="85067" fg:w="104"/><text x="13.3121%" y="415.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.02%)</title><rect x="13.0621%" y="389" width="0.0160%" height="15" fill="rgb(206,64,50)" fg:x="85067" fg:w="104"/><text x="13.3121%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (84 samples, 0.01%)</title><rect x="13.0651%" y="373" width="0.0129%" height="15" fill="rgb(234,36,40)" fg:x="85087" fg:w="84"/><text x="13.3151%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (83 samples, 0.01%)</title><rect x="13.0653%" y="357" width="0.0127%" height="15" fill="rgb(213,64,8)" fg:x="85088" fg:w="83"/><text x="13.3153%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (83 samples, 0.01%)</title><rect x="13.0653%" y="341" width="0.0127%" height="15" fill="rgb(210,75,36)" fg:x="85088" fg:w="83"/><text x="13.3153%" y="351.50"></text></g><g><title>core::sync::atomic::fence (176 samples, 0.03%)</title><rect x="13.0794%" y="405" width="0.0270%" height="15" fill="rgb(229,88,21)" fg:x="85180" fg:w="176"/><text x="13.3294%" y="415.50"></text></g><g><title>rayon_core::latch::CoreLatch::fall_asleep (70 samples, 0.01%)</title><rect x="13.1064%" y="405" width="0.0107%" height="15" fill="rgb(252,204,47)" fg:x="85356" fg:w="70"/><text x="13.3564%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (70 samples, 0.01%)</title><rect x="13.1064%" y="389" width="0.0107%" height="15" fill="rgb(208,77,27)" fg:x="85356" fg:w="70"/><text x="13.3564%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (70 samples, 0.01%)</title><rect x="13.1064%" y="373" width="0.0107%" height="15" fill="rgb(221,76,26)" fg:x="85356" fg:w="70"/><text x="13.3564%" y="383.50"></text></g><g><title>rayon_core::latch::CoreLatch::get_sleepy (291 samples, 0.04%)</title><rect x="13.1172%" y="405" width="0.0447%" height="15" fill="rgb(225,139,18)" fg:x="85426" fg:w="291"/><text x="13.3672%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (291 samples, 0.04%)</title><rect x="13.1172%" y="389" width="0.0447%" height="15" fill="rgb(230,137,11)" fg:x="85426" fg:w="291"/><text x="13.3672%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (291 samples, 0.04%)</title><rect x="13.1172%" y="373" width="0.0447%" height="15" fill="rgb(212,28,1)" fg:x="85426" fg:w="291"/><text x="13.3672%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (271 samples, 0.04%)</title><rect x="13.1692%" y="389" width="0.0416%" height="15" fill="rgb(248,164,17)" fg:x="85765" fg:w="271"/><text x="13.4192%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (271 samples, 0.04%)</title><rect x="13.1692%" y="373" width="0.0416%" height="15" fill="rgb(222,171,42)" fg:x="85765" fg:w="271"/><text x="13.4192%" y="383.50"></text></g><g><title>rayon_core::latch::CoreLatch::wake_up (571 samples, 0.09%)</title><rect x="13.1619%" y="405" width="0.0877%" height="15" fill="rgb(243,84,45)" fg:x="85717" fg:w="571"/><text x="13.4119%" y="415.50"></text></g><g><title>rayon_core::latch::CoreLatch::probe (252 samples, 0.04%)</title><rect x="13.2109%" y="389" width="0.0387%" height="15" fill="rgb(252,49,23)" fg:x="86036" fg:w="252"/><text x="13.4609%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (252 samples, 0.04%)</title><rect x="13.2109%" y="373" width="0.0387%" height="15" fill="rgb(215,19,7)" fg:x="86036" fg:w="252"/><text x="13.4609%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (252 samples, 0.04%)</title><rect x="13.2109%" y="357" width="0.0387%" height="15" fill="rgb(238,81,41)" fg:x="86036" fg:w="252"/><text x="13.4609%" y="367.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::is_empty (217 samples, 0.03%)</title><rect x="13.2506%" y="373" width="0.0333%" height="15" fill="rgb(210,199,37)" fg:x="86295" fg:w="217"/><text x="13.5006%" y="383.50"></text></g><g><title>core::sync::atomic::fence (194 samples, 0.03%)</title><rect x="13.2542%" y="357" width="0.0298%" height="15" fill="rgb(244,192,49)" fg:x="86318" fg:w="194"/><text x="13.5042%" y="367.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold::_{{closure}} (226 samples, 0.03%)</title><rect x="13.2496%" y="405" width="0.0347%" height="15" fill="rgb(226,211,11)" fg:x="86288" fg:w="226"/><text x="13.4996%" y="415.50"></text></g><g><title>rayon_core::registry::WorkerThread::has_injected_job (226 samples, 0.03%)</title><rect x="13.2496%" y="389" width="0.0347%" height="15" fill="rgb(236,162,54)" fg:x="86288" fg:w="226"/><text x="13.4996%" y="399.50"></text></g><g><title>rayon_core::sleep::IdleState::wake_fully (109 samples, 0.02%)</title><rect x="13.2843%" y="405" width="0.0167%" height="15" fill="rgb(220,229,9)" fg:x="86514" fg:w="109"/><text x="13.5343%" y="415.50"></text></g><g><title>rayon_core::sleep::counters::AtomicCounters::try_add_sleeping_thread (68 samples, 0.01%)</title><rect x="13.3022%" y="405" width="0.0104%" height="15" fill="rgb(250,87,22)" fg:x="86631" fg:w="68"/><text x="13.5522%" y="415.50"></text></g><g><title>rayon_core::sleep::counters::AtomicCounters::try_exchange (68 samples, 0.01%)</title><rect x="13.3022%" y="389" width="0.0104%" height="15" fill="rgb(239,43,17)" fg:x="86631" fg:w="68"/><text x="13.5522%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (68 samples, 0.01%)</title><rect x="13.3022%" y="373" width="0.0104%" height="15" fill="rgb(231,177,25)" fg:x="86631" fg:w="68"/><text x="13.5522%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (68 samples, 0.01%)</title><rect x="13.3022%" y="357" width="0.0104%" height="15" fill="rgb(219,179,1)" fg:x="86631" fg:w="68"/><text x="13.5522%" y="367.50"></text></g><g><title>std::sync::poison::Flag::get (207 samples, 0.03%)</title><rect x="13.3144%" y="389" width="0.0318%" height="15" fill="rgb(238,219,53)" fg:x="86710" fg:w="207"/><text x="13.5644%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (207 samples, 0.03%)</title><rect x="13.3144%" y="373" width="0.0318%" height="15" fill="rgb(232,167,36)" fg:x="86710" fg:w="207"/><text x="13.5644%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (207 samples, 0.03%)</title><rect x="13.3144%" y="357" width="0.0318%" height="15" fill="rgb(244,19,51)" fg:x="86710" fg:w="207"/><text x="13.5644%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::wait (2,659 samples, 0.41%)</title><rect x="13.3128%" y="405" width="0.4083%" height="15" fill="rgb(224,6,22)" fg:x="86700" fg:w="2659"/><text x="13.5628%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (2,442 samples, 0.37%)</title><rect x="13.3461%" y="389" width="0.3750%" height="15" fill="rgb(224,145,5)" fg:x="86917" fg:w="2442"/><text x="13.5961%" y="399.50"></text></g><g><title>syscall (912 samples, 0.14%)</title><rect x="13.5811%" y="373" width="0.1400%" height="15" fill="rgb(234,130,49)" fg:x="88447" fg:w="912"/><text x="13.8311%" y="383.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (4,502 samples, 0.69%)</title><rect x="13.0440%" y="421" width="0.6913%" height="15" fill="rgb(254,6,2)" fg:x="84949" fg:w="4502"/><text x="13.2940%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (92 samples, 0.01%)</title><rect x="13.7211%" y="405" width="0.0141%" height="15" fill="rgb(208,96,46)" fg:x="89359" fg:w="92"/><text x="13.9711%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (85 samples, 0.01%)</title><rect x="13.7222%" y="389" width="0.0131%" height="15" fill="rgb(239,3,39)" fg:x="89366" fg:w="85"/><text x="13.9722%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (82 samples, 0.01%)</title><rect x="13.7226%" y="373" width="0.0126%" height="15" fill="rgb(233,210,1)" fg:x="89369" fg:w="82"/><text x="13.9726%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (82 samples, 0.01%)</title><rect x="13.7226%" y="357" width="0.0126%" height="15" fill="rgb(244,137,37)" fg:x="89369" fg:w="82"/><text x="13.9726%" y="367.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (11,425 samples, 1.75%)</title><rect x="12.1128%" y="437" width="1.7543%" height="15" fill="rgb(240,136,2)" fg:x="78885" fg:w="11425"/><text x="12.3628%" y="447.50"></text></g><g><title>std::thread::yield_now (859 samples, 0.13%)</title><rect x="13.7352%" y="421" width="0.1319%" height="15" fill="rgb(239,18,37)" fg:x="89451" fg:w="859"/><text x="13.9852%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;bool&gt;&gt; (76 samples, 0.01%)</title><rect x="13.8747%" y="389" width="0.0117%" height="15" fill="rgb(218,185,22)" fg:x="90359" fg:w="76"/><text x="14.1247%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.01%)</title><rect x="13.8747%" y="373" width="0.0117%" height="15" fill="rgb(225,218,4)" fg:x="90359" fg:w="76"/><text x="14.1247%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (68 samples, 0.01%)</title><rect x="13.8759%" y="357" width="0.0104%" height="15" fill="rgb(230,182,32)" fg:x="90367" fg:w="68"/><text x="14.1259%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (68 samples, 0.01%)</title><rect x="13.8759%" y="341" width="0.0104%" height="15" fill="rgb(242,56,43)" fg:x="90367" fg:w="68"/><text x="14.1259%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (68 samples, 0.01%)</title><rect x="13.8759%" y="325" width="0.0104%" height="15" fill="rgb(233,99,24)" fg:x="90367" fg:w="68"/><text x="14.1259%" y="335.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (104 samples, 0.02%)</title><rect x="13.8928%" y="389" width="0.0160%" height="15" fill="rgb(234,209,42)" fg:x="90477" fg:w="104"/><text x="14.1428%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (131 samples, 0.02%)</title><rect x="13.9087%" y="389" width="0.0201%" height="15" fill="rgb(227,7,12)" fg:x="90581" fg:w="131"/><text x="14.1587%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (126 samples, 0.02%)</title><rect x="13.9095%" y="373" width="0.0193%" height="15" fill="rgb(245,203,43)" fg:x="90586" fg:w="126"/><text x="14.1595%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (124 samples, 0.02%)</title><rect x="13.9098%" y="357" width="0.0190%" height="15" fill="rgb(238,205,33)" fg:x="90588" fg:w="124"/><text x="14.1598%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (124 samples, 0.02%)</title><rect x="13.9098%" y="341" width="0.0190%" height="15" fill="rgb(231,56,7)" fg:x="90588" fg:w="124"/><text x="14.1598%" y="351.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (490 samples, 0.08%)</title><rect x="13.8702%" y="421" width="0.0752%" height="15" fill="rgb(244,186,29)" fg:x="90330" fg:w="490"/><text x="14.1202%" y="431.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (468 samples, 0.07%)</title><rect x="13.8736%" y="405" width="0.0719%" height="15" fill="rgb(234,111,31)" fg:x="90352" fg:w="468"/><text x="14.1236%" y="415.50"></text></g><g><title>syscall (108 samples, 0.02%)</title><rect x="13.9289%" y="389" width="0.0166%" height="15" fill="rgb(241,149,10)" fg:x="90712" fg:w="108"/><text x="14.1789%" y="399.50"></text></g><g><title>std::panic::catch_unwind (85,005 samples, 13.05%)</title><rect x="0.8998%" y="629" width="13.0526%" height="15" fill="rgb(249,206,44)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="639.50">std::panic::catch_un..</text></g><g><title>std::panicking::try (85,005 samples, 13.05%)</title><rect x="0.8998%" y="613" width="13.0526%" height="15" fill="rgb(251,153,30)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (85,005 samples, 13.05%)</title><rect x="0.8998%" y="597" width="13.0526%" height="15" fill="rgb(239,152,38)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="607.50">std::panicking::try:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (85,005 samples, 13.05%)</title><rect x="0.8998%" y="581" width="13.0526%" height="15" fill="rgb(249,139,47)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="591.50">&lt;core::panic::unwind..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (85,005 samples, 13.05%)</title><rect x="0.8998%" y="565" width="13.0526%" height="15" fill="rgb(244,64,35)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="575.50">std::thread::Builder..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (85,005 samples, 13.05%)</title><rect x="0.8998%" y="549" width="13.0526%" height="15" fill="rgb(216,46,15)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="559.50">std::sys_common::bac..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (85,005 samples, 13.05%)</title><rect x="0.8998%" y="533" width="13.0526%" height="15" fill="rgb(250,74,19)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="543.50">&lt;rayon_core::registr..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (85,005 samples, 13.05%)</title><rect x="0.8998%" y="517" width="13.0526%" height="15" fill="rgb(249,42,33)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="527.50">rayon_core::registry..</text></g><g><title>rayon_core::registry::main_loop (85,005 samples, 13.05%)</title><rect x="0.8998%" y="501" width="13.0526%" height="15" fill="rgb(242,149,17)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="511.50">rayon_core::registry..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (85,005 samples, 13.05%)</title><rect x="0.8998%" y="485" width="13.0526%" height="15" fill="rgb(244,29,21)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="495.50">rayon_core::registry..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (85,005 samples, 13.05%)</title><rect x="0.8998%" y="469" width="13.0526%" height="15" fill="rgb(220,130,37)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="479.50">rayon_core::registry..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (85,005 samples, 13.05%)</title><rect x="0.8998%" y="453" width="13.0526%" height="15" fill="rgb(211,67,2)" fg:x="5860" fg:w="85005"/><text x="1.1498%" y="463.50">rayon_core::registry..</text></g><g><title>rayon_core::sleep::Sleep::work_found (535 samples, 0.08%)</title><rect x="13.8702%" y="437" width="0.0821%" height="15" fill="rgb(235,68,52)" fg:x="90330" fg:w="535"/><text x="14.1202%" y="447.50"></text></g><g><title>[libc.so.6] (85,014 samples, 13.05%)</title><rect x="0.8986%" y="693" width="13.0539%" height="15" fill="rgb(246,142,3)" fg:x="5852" fg:w="85014"/><text x="1.1486%" y="703.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (85,006 samples, 13.05%)</title><rect x="0.8998%" y="677" width="13.0527%" height="15" fill="rgb(241,25,7)" fg:x="5860" fg:w="85006"/><text x="1.1498%" y="687.50">std::sys::unix::thre..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (85,006 samples, 13.05%)</title><rect x="0.8998%" y="661" width="13.0527%" height="15" fill="rgb(242,119,39)" fg:x="5860" fg:w="85006"/><text x="1.1498%" y="671.50">core::ops::function:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (85,006 samples, 13.05%)</title><rect x="0.8998%" y="645" width="13.0527%" height="15" fill="rgb(241,98,45)" fg:x="5860" fg:w="85006"/><text x="1.1498%" y="655.50">std::thread::Builder..</text></g><g><title>[libc.so.6] (1,303 samples, 0.20%)</title><rect x="13.9544%" y="117" width="0.2001%" height="15" fill="rgb(254,28,30)" fg:x="90878" fg:w="1303"/><text x="14.2044%" y="127.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (1,389 samples, 0.21%)</title><rect x="13.9525%" y="325" width="0.2133%" height="15" fill="rgb(241,142,54)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (1,389 samples, 0.21%)</title><rect x="13.9525%" y="309" width="0.2133%" height="15" fill="rgb(222,85,15)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="319.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (1,389 samples, 0.21%)</title><rect x="13.9525%" y="293" width="0.2133%" height="15" fill="rgb(210,85,47)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="303.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1,389 samples, 0.21%)</title><rect x="13.9525%" y="277" width="0.2133%" height="15" fill="rgb(224,206,25)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="287.50"></text></g><g><title>crossbeam_epoch::default::pin (1,389 samples, 0.21%)</title><rect x="13.9525%" y="261" width="0.2133%" height="15" fill="rgb(243,201,19)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="271.50"></text></g><g><title>crossbeam_epoch::default::with_handle (1,389 samples, 0.21%)</title><rect x="13.9525%" y="245" width="0.2133%" height="15" fill="rgb(236,59,4)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,389 samples, 0.21%)</title><rect x="13.9525%" y="229" width="0.2133%" height="15" fill="rgb(254,179,45)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="239.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (1,389 samples, 0.21%)</title><rect x="13.9525%" y="213" width="0.2133%" height="15" fill="rgb(226,14,10)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="223.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (1,389 samples, 0.21%)</title><rect x="13.9525%" y="197" width="0.2133%" height="15" fill="rgb(244,27,41)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="207.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (1,389 samples, 0.21%)</title><rect x="13.9525%" y="181" width="0.2133%" height="15" fill="rgb(235,35,32)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="191.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (1,389 samples, 0.21%)</title><rect x="13.9525%" y="165" width="0.2133%" height="15" fill="rgb(218,68,31)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="175.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1,389 samples, 0.21%)</title><rect x="13.9525%" y="149" width="0.2133%" height="15" fill="rgb(207,120,37)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="159.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (1,389 samples, 0.21%)</title><rect x="13.9525%" y="133" width="0.2133%" height="15" fill="rgb(227,98,0)" fg:x="90866" fg:w="1389"/><text x="14.2025%" y="143.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::pop_if_internal (74 samples, 0.01%)</title><rect x="14.1544%" y="117" width="0.0114%" height="15" fill="rgb(207,7,3)" fg:x="92181" fg:w="74"/><text x="14.4044%" y="127.50"></text></g><g><title>[libc.so.6] (2,091 samples, 0.32%)</title><rect x="14.1704%" y="101" width="0.3211%" height="15" fill="rgb(206,98,19)" fg:x="92285" fg:w="2091"/><text x="14.4204%" y="111.50"></text></g><g><title>[libc.so.6] (88,631 samples, 13.61%)</title><rect x="0.8961%" y="709" width="13.6093%" height="15" fill="rgb(217,5,26)" fg:x="5836" fg:w="88631"/><text x="1.1461%" y="719.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,601 samples, 0.55%)</title><rect x="13.9525%" y="693" width="0.5529%" height="15" fill="rgb(235,190,38)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,601 samples, 0.55%)</title><rect x="13.9525%" y="677" width="0.5529%" height="15" fill="rgb(247,86,24)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="687.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (3,601 samples, 0.55%)</title><rect x="13.9525%" y="661" width="0.5529%" height="15" fill="rgb(205,101,16)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="671.50"></text></g><g><title>std::panic::catch_unwind (3,601 samples, 0.55%)</title><rect x="13.9525%" y="645" width="0.5529%" height="15" fill="rgb(246,168,33)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="655.50"></text></g><g><title>std::panicking::try (3,601 samples, 0.55%)</title><rect x="13.9525%" y="629" width="0.5529%" height="15" fill="rgb(231,114,1)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="639.50"></text></g><g><title>std::panicking::try::do_call (3,601 samples, 0.55%)</title><rect x="13.9525%" y="613" width="0.5529%" height="15" fill="rgb(207,184,53)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="623.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,601 samples, 0.55%)</title><rect x="13.9525%" y="597" width="0.5529%" height="15" fill="rgb(224,95,51)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="607.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (3,601 samples, 0.55%)</title><rect x="13.9525%" y="581" width="0.5529%" height="15" fill="rgb(212,188,45)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="591.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,601 samples, 0.55%)</title><rect x="13.9525%" y="565" width="0.5529%" height="15" fill="rgb(223,154,38)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="575.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (3,601 samples, 0.55%)</title><rect x="13.9525%" y="549" width="0.5529%" height="15" fill="rgb(251,22,52)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="559.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (3,601 samples, 0.55%)</title><rect x="13.9525%" y="533" width="0.5529%" height="15" fill="rgb(229,209,22)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="543.50"></text></g><g><title>rayon_core::registry::main_loop (3,601 samples, 0.55%)</title><rect x="13.9525%" y="517" width="0.5529%" height="15" fill="rgb(234,138,34)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="527.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (3,601 samples, 0.55%)</title><rect x="13.9525%" y="501" width="0.5529%" height="15" fill="rgb(212,95,11)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="511.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (3,601 samples, 0.55%)</title><rect x="13.9525%" y="485" width="0.5529%" height="15" fill="rgb(240,179,47)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="495.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (3,601 samples, 0.55%)</title><rect x="13.9525%" y="469" width="0.5529%" height="15" fill="rgb(240,163,11)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="479.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (3,601 samples, 0.55%)</title><rect x="13.9525%" y="453" width="0.5529%" height="15" fill="rgb(236,37,12)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (3,601 samples, 0.55%)</title><rect x="13.9525%" y="437" width="0.5529%" height="15" fill="rgb(232,164,16)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="447.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (3,601 samples, 0.55%)</title><rect x="13.9525%" y="421" width="0.5529%" height="15" fill="rgb(244,205,15)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="431.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (3,601 samples, 0.55%)</title><rect x="13.9525%" y="405" width="0.5529%" height="15" fill="rgb(223,117,47)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (3,601 samples, 0.55%)</title><rect x="13.9525%" y="389" width="0.5529%" height="15" fill="rgb(244,107,35)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,601 samples, 0.55%)</title><rect x="13.9525%" y="373" width="0.5529%" height="15" fill="rgb(205,140,8)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,601 samples, 0.55%)</title><rect x="13.9525%" y="357" width="0.5529%" height="15" fill="rgb(228,84,46)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,601 samples, 0.55%)</title><rect x="13.9525%" y="341" width="0.5529%" height="15" fill="rgb(254,188,9)" fg:x="90866" fg:w="3601"/><text x="14.2025%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,212 samples, 0.34%)</title><rect x="14.1658%" y="325" width="0.3397%" height="15" fill="rgb(206,112,54)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="335.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (2,212 samples, 0.34%)</title><rect x="14.1658%" y="309" width="0.3397%" height="15" fill="rgb(216,84,49)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (2,212 samples, 0.34%)</title><rect x="14.1658%" y="293" width="0.3397%" height="15" fill="rgb(214,194,35)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="303.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (2,212 samples, 0.34%)</title><rect x="14.1658%" y="277" width="0.3397%" height="15" fill="rgb(249,28,3)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="287.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (2,212 samples, 0.34%)</title><rect x="14.1658%" y="261" width="0.3397%" height="15" fill="rgb(222,56,52)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="271.50"></text></g><g><title>crossbeam_epoch::default::pin (2,212 samples, 0.34%)</title><rect x="14.1658%" y="245" width="0.3397%" height="15" fill="rgb(245,217,50)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="255.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2,212 samples, 0.34%)</title><rect x="14.1658%" y="229" width="0.3397%" height="15" fill="rgb(213,201,24)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,212 samples, 0.34%)</title><rect x="14.1658%" y="213" width="0.3397%" height="15" fill="rgb(248,116,28)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="223.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (2,212 samples, 0.34%)</title><rect x="14.1658%" y="197" width="0.3397%" height="15" fill="rgb(219,72,43)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="207.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (2,212 samples, 0.34%)</title><rect x="14.1658%" y="181" width="0.3397%" height="15" fill="rgb(209,138,14)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="191.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (2,212 samples, 0.34%)</title><rect x="14.1658%" y="165" width="0.3397%" height="15" fill="rgb(222,18,33)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="175.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (2,212 samples, 0.34%)</title><rect x="14.1658%" y="149" width="0.3397%" height="15" fill="rgb(213,199,7)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="159.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (2,212 samples, 0.34%)</title><rect x="14.1658%" y="133" width="0.3397%" height="15" fill="rgb(250,110,10)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="143.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (2,212 samples, 0.34%)</title><rect x="14.1658%" y="117" width="0.3397%" height="15" fill="rgb(248,123,6)" fg:x="92255" fg:w="2212"/><text x="14.4158%" y="127.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::pop_if_internal (91 samples, 0.01%)</title><rect x="14.4915%" y="101" width="0.0140%" height="15" fill="rgb(206,91,31)" fg:x="94376" fg:w="91"/><text x="14.7415%" y="111.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (78 samples, 0.01%)</title><rect x="14.4935%" y="85" width="0.0120%" height="15" fill="rgb(211,154,13)" fg:x="94389" fg:w="78"/><text x="14.7435%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (78 samples, 0.01%)</title><rect x="14.4935%" y="69" width="0.0120%" height="15" fill="rgb(225,148,7)" fg:x="94389" fg:w="78"/><text x="14.7435%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_load (78 samples, 0.01%)</title><rect x="14.4935%" y="53" width="0.0120%" height="15" fill="rgb(220,160,43)" fg:x="94389" fg:w="78"/><text x="14.7435%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (112 samples, 0.02%)</title><rect x="14.5054%" y="693" width="0.0172%" height="15" fill="rgb(213,52,39)" fg:x="94467" fg:w="112"/><text x="14.7554%" y="703.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (100 samples, 0.02%)</title><rect x="14.5245%" y="693" width="0.0154%" height="15" fill="rgb(243,137,7)" fg:x="94591" fg:w="100"/><text x="14.7745%" y="703.50"></text></g><g><title>[main] (421 samples, 0.06%)</title><rect x="14.5054%" y="709" width="0.0646%" height="15" fill="rgb(230,79,13)" fg:x="94467" fg:w="421"/><text x="14.7554%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (90 samples, 0.01%)</title><rect x="14.5727%" y="693" width="0.0138%" height="15" fill="rgb(247,105,23)" fg:x="94905" fg:w="90"/><text x="14.8227%" y="703.50"></text></g><g><title>[libc.so.6] (98 samples, 0.02%)</title><rect x="14.5910%" y="693" width="0.0150%" height="15" fill="rgb(223,179,41)" fg:x="95024" fg:w="98"/><text x="14.8410%" y="703.50"></text></g><g><title>__sched_yield (848 samples, 0.13%)</title><rect x="14.6082%" y="693" width="0.1302%" height="15" fill="rgb(218,9,34)" fg:x="95136" fg:w="848"/><text x="14.8582%" y="703.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1,786 samples, 0.27%)</title><rect x="14.7459%" y="693" width="0.2742%" height="15" fill="rgb(222,106,8)" fg:x="96033" fg:w="1786"/><text x="14.9959%" y="703.50"></text></g><g><title>crossbeam_epoch::default::pin (743 samples, 0.11%)</title><rect x="14.9061%" y="677" width="0.1141%" height="15" fill="rgb(211,220,0)" fg:x="97076" fg:w="743"/><text x="15.1561%" y="687.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (216 samples, 0.03%)</title><rect x="15.0301%" y="693" width="0.0332%" height="15" fill="rgb(229,52,16)" fg:x="97884" fg:w="216"/><text x="15.2801%" y="703.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (97 samples, 0.01%)</title><rect x="15.0633%" y="693" width="0.0149%" height="15" fill="rgb(212,155,18)" fg:x="98100" fg:w="97"/><text x="15.3133%" y="703.50"></text></g><g><title>rayon_core::registry::Registry::pop_injected_job (103 samples, 0.02%)</title><rect x="15.3205%" y="645" width="0.0158%" height="15" fill="rgb(242,21,14)" fg:x="99775" fg:w="103"/><text x="15.5705%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (150 samples, 0.02%)</title><rect x="15.3205%" y="677" width="0.0230%" height="15" fill="rgb(222,19,48)" fg:x="99775" fg:w="150"/><text x="15.5705%" y="687.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (150 samples, 0.02%)</title><rect x="15.3205%" y="661" width="0.0230%" height="15" fill="rgb(232,45,27)" fg:x="99775" fg:w="150"/><text x="15.5705%" y="671.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (1,807 samples, 0.28%)</title><rect x="15.0928%" y="693" width="0.2775%" height="15" fill="rgb(249,103,42)" fg:x="98292" fg:w="1807"/><text x="15.3428%" y="703.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (174 samples, 0.03%)</title><rect x="15.3435%" y="677" width="0.0267%" height="15" fill="rgb(246,81,33)" fg:x="99925" fg:w="174"/><text x="15.5935%" y="687.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (153 samples, 0.02%)</title><rect x="15.3702%" y="693" width="0.0235%" height="15" fill="rgb(252,33,42)" fg:x="100099" fg:w="153"/><text x="15.6202%" y="703.50"></text></g><g><title>[unknown] (6,094 samples, 0.94%)</title><rect x="14.5701%" y="709" width="0.9357%" height="15" fill="rgb(209,212,41)" fg:x="94888" fg:w="6094"/><text x="14.8201%" y="719.50"></text></g><g><title>syscall (638 samples, 0.10%)</title><rect x="15.4079%" y="693" width="0.0980%" height="15" fill="rgb(207,154,6)" fg:x="100344" fg:w="638"/><text x="15.6579%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (98 samples, 0.02%)</title><rect x="15.5078%" y="549" width="0.0150%" height="15" fill="rgb(223,64,47)" fg:x="100995" fg:w="98"/><text x="15.7578%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (98 samples, 0.02%)</title><rect x="15.5078%" y="533" width="0.0150%" height="15" fill="rgb(211,161,38)" fg:x="100995" fg:w="98"/><text x="15.7578%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.02%)</title><rect x="15.5078%" y="517" width="0.0150%" height="15" fill="rgb(219,138,40)" fg:x="100995" fg:w="98"/><text x="15.7578%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (98 samples, 0.02%)</title><rect x="15.5078%" y="501" width="0.0150%" height="15" fill="rgb(241,228,46)" fg:x="100995" fg:w="98"/><text x="15.7578%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (98 samples, 0.02%)</title><rect x="15.5078%" y="485" width="0.0150%" height="15" fill="rgb(223,209,38)" fg:x="100995" fg:w="98"/><text x="15.7578%" y="495.50"></text></g><g><title>cfree (98 samples, 0.02%)</title><rect x="15.5078%" y="469" width="0.0150%" height="15" fill="rgb(236,164,45)" fg:x="100995" fg:w="98"/><text x="15.7578%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,444 samples, 0.22%)</title><rect x="17.7008%" y="517" width="0.2217%" height="15" fill="rgb(231,15,5)" fg:x="115277" fg:w="1444"/><text x="17.9508%" y="527.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,444 samples, 0.22%)</title><rect x="17.7008%" y="501" width="0.2217%" height="15" fill="rgb(252,35,15)" fg:x="115277" fg:w="1444"/><text x="17.9508%" y="511.50"></text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (25,714 samples, 3.95%)</title><rect x="25.5261%" y="501" width="3.9484%" height="15" fill="rgb(248,181,18)" fg:x="166239" fg:w="25714"/><text x="25.7761%" y="511.50">&lt;i64..</text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (18,344 samples, 2.82%)</title><rect x="29.4745%" y="501" width="2.8167%" height="15" fill="rgb(233,39,42)" fg:x="191953" fg:w="18344"/><text x="29.7245%" y="511.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (18,344 samples, 2.82%)</title><rect x="29.4745%" y="485" width="2.8167%" height="15" fill="rgb(238,110,33)" fg:x="191953" fg:w="18344"/><text x="29.7245%" y="495.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18,344 samples, 2.82%)</title><rect x="29.4745%" y="469" width="2.8167%" height="15" fill="rgb(233,195,10)" fg:x="191953" fg:w="18344"/><text x="29.7245%" y="479.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18,344 samples, 2.82%)</title><rect x="29.4745%" y="453" width="2.8167%" height="15" fill="rgb(254,105,3)" fg:x="191953" fg:w="18344"/><text x="29.7245%" y="463.50">&lt;u..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13,398 samples, 2.06%)</title><rect x="32.2915%" y="485" width="2.0573%" height="15" fill="rgb(221,225,9)" fg:x="210299" fg:w="13398"/><text x="32.5415%" y="495.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13,398 samples, 2.06%)</title><rect x="32.2915%" y="469" width="2.0573%" height="15" fill="rgb(224,227,45)" fg:x="210299" fg:w="13398"/><text x="32.5415%" y="479.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13,398 samples, 2.06%)</title><rect x="32.2915%" y="453" width="2.0573%" height="15" fill="rgb(229,198,43)" fg:x="210299" fg:w="13398"/><text x="32.5415%" y="463.50">&lt;..</text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (13,499 samples, 2.07%)</title><rect x="34.3488%" y="485" width="2.0728%" height="15" fill="rgb(206,209,35)" fg:x="223697" fg:w="13499"/><text x="34.5988%" y="495.50">&lt;..</text></g><g><title>&lt;i64 as core::ops::arith::Sub&gt;::sub (25,938 samples, 3.98%)</title><rect x="36.4215%" y="485" width="3.9828%" height="15" fill="rgb(245,195,53)" fg:x="237196" fg:w="25938"/><text x="36.6715%" y="495.50">&lt;i64..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (244,391 samples, 37.53%)</title><rect x="40.4043%" y="485" width="37.5263%" height="15" fill="rgb(240,92,26)" fg:x="263134" fg:w="244391"/><text x="40.6543%" y="495.50">petgraph::graph_impl::Edge&lt;E,Ix&gt;::source</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (410,649 samples, 63.06%)</title><rect x="15.5233%" y="533" width="63.0553%" height="15" fill="rgb(207,40,23)" fg:x="101096" fg:w="410649"/><text x="15.7733%" y="543.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find</text></g><g><title>main::_find_first_arc::_{{closure}} (395,024 samples, 60.66%)</title><rect x="17.9226%" y="517" width="60.6561%" height="15" fill="rgb(223,111,35)" fg:x="116721" fg:w="395024"/><text x="18.1726%" y="527.50">main::_find_first_arc::_{{closure}}</text></g><g><title>main::get_reduced_cost_edgeindex (301,446 samples, 46.29%)</title><rect x="32.2915%" y="501" width="46.2872%" height="15" fill="rgb(229,147,28)" fg:x="210299" fg:w="301446"/><text x="32.5415%" y="511.50">main::get_reduced_cost_edgeindex</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (4,220 samples, 0.65%)</title><rect x="77.9307%" y="485" width="0.6480%" height="15" fill="rgb(211,29,28)" fg:x="507525" fg:w="4220"/><text x="78.1807%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (67,879 samples, 10.42%)</title><rect x="78.5837%" y="469" width="10.4228%" height="15" fill="rgb(228,72,33)" fg:x="511778" fg:w="67879"/><text x="78.8337%" y="479.50">&lt;alloc::vec::Ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (67,879 samples, 10.42%)</title><rect x="78.5837%" y="453" width="10.4228%" height="15" fill="rgb(205,214,31)" fg:x="511778" fg:w="67879"/><text x="78.8337%" y="463.50">alloc::vec::Vec..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (67,878 samples, 10.42%)</title><rect x="78.5839%" y="437" width="10.4227%" height="15" fill="rgb(224,111,15)" fg:x="511779" fg:w="67878"/><text x="78.8339%" y="447.50">core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67,878 samples, 10.42%)</title><rect x="78.5839%" y="421" width="10.4227%" height="15" fill="rgb(253,21,26)" fg:x="511779" fg:w="67878"/><text x="78.8339%" y="431.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67,875 samples, 10.42%)</title><rect x="78.5843%" y="405" width="10.4222%" height="15" fill="rgb(245,139,43)" fg:x="511782" fg:w="67875"/><text x="78.8343%" y="415.50">&lt;core::slice::i..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (29,228 samples, 4.49%)</title><rect x="84.5186%" y="389" width="4.4880%" height="15" fill="rgb(252,170,7)" fg:x="550429" fg:w="29228"/><text x="84.7686%" y="399.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (29,228 samples, 4.49%)</title><rect x="84.5186%" y="373" width="4.4880%" height="15" fill="rgb(231,118,14)" fg:x="550429" fg:w="29228"/><text x="84.7686%" y="383.50">core:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (29,228 samples, 4.49%)</title><rect x="84.5186%" y="357" width="4.4880%" height="15" fill="rgb(238,83,0)" fg:x="550429" fg:w="29228"/><text x="84.7686%" y="367.50">alloc..</text></g><g><title>core::ptr::write (29,228 samples, 4.49%)</title><rect x="84.5186%" y="341" width="4.4880%" height="15" fill="rgb(221,39,39)" fg:x="550429" fg:w="29228"/><text x="84.7686%" y="351.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (67,949 samples, 10.43%)</title><rect x="78.5788%" y="533" width="10.4336%" height="15" fill="rgb(222,119,46)" fg:x="511746" fg:w="67949"/><text x="78.8288%" y="543.50">core::iter::tra..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (67,949 samples, 10.43%)</title><rect x="78.5788%" y="517" width="10.4336%" height="15" fill="rgb(222,165,49)" fg:x="511746" fg:w="67949"/><text x="78.8288%" y="527.50">&lt;alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (67,949 samples, 10.43%)</title><rect x="78.5788%" y="501" width="10.4336%" height="15" fill="rgb(219,113,52)" fg:x="511746" fg:w="67949"/><text x="78.8288%" y="511.50">&lt;alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (67,949 samples, 10.43%)</title><rect x="78.5788%" y="485" width="10.4336%" height="15" fill="rgb(214,7,15)" fg:x="511746" fg:w="67949"/><text x="78.8288%" y="495.50">&lt;alloc::vec::Ve..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (131 samples, 0.02%)</title><rect x="89.0147%" y="485" width="0.0201%" height="15" fill="rgb(235,32,4)" fg:x="579710" fg:w="131"/><text x="89.2647%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (131 samples, 0.02%)</title><rect x="89.0147%" y="469" width="0.0201%" height="15" fill="rgb(238,90,54)" fg:x="579710" fg:w="131"/><text x="89.2647%" y="479.50"></text></g><g><title>cfree (106 samples, 0.02%)</title><rect x="89.0185%" y="453" width="0.0163%" height="15" fill="rgb(213,208,19)" fg:x="579735" fg:w="106"/><text x="89.2685%" y="463.50"></text></g><g><title>main::_find_first_arc (478,751 samples, 73.51%)</title><rect x="15.5229%" y="549" width="73.5124%" height="15" fill="rgb(233,156,4)" fg:x="101093" fg:w="478751"/><text x="15.7729%" y="559.50">main::_find_first_arc</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;petgraph::graph_impl::EdgeIndex&gt;&gt; (149 samples, 0.02%)</title><rect x="89.0124%" y="533" width="0.0229%" height="15" fill="rgb(207,194,5)" fg:x="579695" fg:w="149"/><text x="89.2624%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;petgraph::graph_impl::EdgeIndex&gt;&gt; (149 samples, 0.02%)</title><rect x="89.0124%" y="517" width="0.0229%" height="15" fill="rgb(206,111,30)" fg:x="579695" fg:w="149"/><text x="89.2624%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (149 samples, 0.02%)</title><rect x="89.0124%" y="501" width="0.0229%" height="15" fill="rgb(243,70,54)" fg:x="579695" fg:w="149"/><text x="89.2624%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (70 samples, 0.01%)</title><rect x="89.0365%" y="501" width="0.0107%" height="15" fill="rgb(242,28,8)" fg:x="579852" fg:w="70"/><text x="89.2865%" y="511.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1,975 samples, 0.30%)</title><rect x="89.1210%" y="469" width="0.3033%" height="15" fill="rgb(219,106,18)" fg:x="580402" fg:w="1975"/><text x="89.3710%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1,975 samples, 0.30%)</title><rect x="89.1210%" y="453" width="0.3033%" height="15" fill="rgb(244,222,10)" fg:x="580402" fg:w="1975"/><text x="89.3710%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (2,529 samples, 0.39%)</title><rect x="89.0362%" y="533" width="0.3883%" height="15" fill="rgb(236,179,52)" fg:x="579850" fg:w="2529"/><text x="89.2862%" y="543.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (2,527 samples, 0.39%)</title><rect x="89.0365%" y="517" width="0.3880%" height="15" fill="rgb(213,23,39)" fg:x="579852" fg:w="2527"/><text x="89.2865%" y="527.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (2,454 samples, 0.38%)</title><rect x="89.0477%" y="501" width="0.3768%" height="15" fill="rgb(238,48,10)" fg:x="579925" fg:w="2454"/><text x="89.2977%" y="511.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (2,444 samples, 0.38%)</title><rect x="89.0492%" y="485" width="0.3753%" height="15" fill="rgb(251,196,23)" fg:x="579935" fg:w="2444"/><text x="89.2992%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(petgraph::graph_impl::NodeIndex,petgraph::graph_impl::NodeIndex)&gt;&gt; (73 samples, 0.01%)</title><rect x="89.4328%" y="341" width="0.0112%" height="15" fill="rgb(250,152,24)" fg:x="582433" fg:w="73"/><text x="89.6828%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(petgraph::graph_impl::NodeIndex,petgraph::graph_impl::NodeIndex)&gt;&gt; (73 samples, 0.01%)</title><rect x="89.4328%" y="325" width="0.0112%" height="15" fill="rgb(209,150,17)" fg:x="582433" fg:w="73"/><text x="89.6828%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.01%)</title><rect x="89.4328%" y="309" width="0.0112%" height="15" fill="rgb(234,202,34)" fg:x="582433" fg:w="73"/><text x="89.6828%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (192 samples, 0.03%)</title><rect x="89.4546%" y="261" width="0.0295%" height="15" fill="rgb(253,148,53)" fg:x="582575" fg:w="192"/><text x="89.7046%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (192 samples, 0.03%)</title><rect x="89.4546%" y="245" width="0.0295%" height="15" fill="rgb(218,129,16)" fg:x="582575" fg:w="192"/><text x="89.7046%" y="255.50"></text></g><g><title>alloc::alloc::realloc (192 samples, 0.03%)</title><rect x="89.4546%" y="229" width="0.0295%" height="15" fill="rgb(216,85,19)" fg:x="582575" fg:w="192"/><text x="89.7046%" y="239.50"></text></g><g><title>realloc (191 samples, 0.03%)</title><rect x="89.4548%" y="213" width="0.0293%" height="15" fill="rgb(235,228,7)" fg:x="582576" fg:w="191"/><text x="89.7048%" y="223.50"></text></g><g><title>[libc.so.6] (145 samples, 0.02%)</title><rect x="89.4618%" y="197" width="0.0223%" height="15" fill="rgb(245,175,0)" fg:x="582622" fg:w="145"/><text x="89.7118%" y="207.50"></text></g><g><title>[libc.so.6] (132 samples, 0.02%)</title><rect x="89.4638%" y="181" width="0.0203%" height="15" fill="rgb(208,168,36)" fg:x="582635" fg:w="132"/><text x="89.7138%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (196 samples, 0.03%)</title><rect x="89.4545%" y="277" width="0.0301%" height="15" fill="rgb(246,171,24)" fg:x="582574" fg:w="196"/><text x="89.7045%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (210 samples, 0.03%)</title><rect x="89.4529%" y="309" width="0.0322%" height="15" fill="rgb(215,142,24)" fg:x="582564" fg:w="210"/><text x="89.7029%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (210 samples, 0.03%)</title><rect x="89.4529%" y="293" width="0.0322%" height="15" fill="rgb(250,187,7)" fg:x="582564" fg:w="210"/><text x="89.7029%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (217 samples, 0.03%)</title><rect x="89.4529%" y="325" width="0.0333%" height="15" fill="rgb(228,66,33)" fg:x="582564" fg:w="217"/><text x="89.7029%" y="335.50"></text></g><g><title>main::is_forward (425 samples, 0.07%)</title><rect x="89.4324%" y="357" width="0.0653%" height="15" fill="rgb(234,215,21)" fg:x="582430" fg:w="425"/><text x="89.6824%" y="367.50"></text></g><g><title>main::distances_in_cycle (324 samples, 0.05%)</title><rect x="89.4479%" y="341" width="0.0498%" height="15" fill="rgb(222,191,20)" fg:x="582531" fg:w="324"/><text x="89.6979%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (74 samples, 0.01%)</title><rect x="89.4863%" y="325" width="0.0114%" height="15" fill="rgb(245,79,54)" fg:x="582781" fg:w="74"/><text x="89.7363%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (74 samples, 0.01%)</title><rect x="89.4863%" y="309" width="0.0114%" height="15" fill="rgb(240,10,37)" fg:x="582781" fg:w="74"/><text x="89.7363%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (74 samples, 0.01%)</title><rect x="89.4863%" y="293" width="0.0114%" height="15" fill="rgb(214,192,32)" fg:x="582781" fg:w="74"/><text x="89.7363%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (74 samples, 0.01%)</title><rect x="89.4863%" y="277" width="0.0114%" height="15" fill="rgb(209,36,54)" fg:x="582781" fg:w="74"/><text x="89.7363%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (462 samples, 0.07%)</title><rect x="89.4273%" y="389" width="0.0709%" height="15" fill="rgb(220,10,11)" fg:x="582397" fg:w="462"/><text x="89.6773%" y="399.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (456 samples, 0.07%)</title><rect x="89.4282%" y="373" width="0.0700%" height="15" fill="rgb(221,106,17)" fg:x="582403" fg:w="456"/><text x="89.6782%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (480 samples, 0.07%)</title><rect x="89.4247%" y="469" width="0.0737%" height="15" fill="rgb(251,142,44)" fg:x="582380" fg:w="480"/><text x="89.6747%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (480 samples, 0.07%)</title><rect x="89.4247%" y="453" width="0.0737%" height="15" fill="rgb(238,13,15)" fg:x="582380" fg:w="480"/><text x="89.6747%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (480 samples, 0.07%)</title><rect x="89.4247%" y="437" width="0.0737%" height="15" fill="rgb(208,107,27)" fg:x="582380" fg:w="480"/><text x="89.6747%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (480 samples, 0.07%)</title><rect x="89.4247%" y="421" width="0.0737%" height="15" fill="rgb(205,136,37)" fg:x="582380" fg:w="480"/><text x="89.6747%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (478 samples, 0.07%)</title><rect x="89.4250%" y="405" width="0.0734%" height="15" fill="rgb(250,205,27)" fg:x="582382" fg:w="478"/><text x="89.6750%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (496 samples, 0.08%)</title><rect x="89.4245%" y="533" width="0.0762%" height="15" fill="rgb(210,80,43)" fg:x="582379" fg:w="496"/><text x="89.6745%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (496 samples, 0.08%)</title><rect x="89.4245%" y="517" width="0.0762%" height="15" fill="rgb(247,160,36)" fg:x="582379" fg:w="496"/><text x="89.6745%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (496 samples, 0.08%)</title><rect x="89.4245%" y="501" width="0.0762%" height="15" fill="rgb(234,13,49)" fg:x="582379" fg:w="496"/><text x="89.6745%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (496 samples, 0.08%)</title><rect x="89.4245%" y="485" width="0.0762%" height="15" fill="rgb(234,122,0)" fg:x="582379" fg:w="496"/><text x="89.6745%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (118 samples, 0.02%)</title><rect x="89.5105%" y="469" width="0.0181%" height="15" fill="rgb(207,146,38)" fg:x="582939" fg:w="118"/><text x="89.7605%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (117 samples, 0.02%)</title><rect x="89.5107%" y="453" width="0.0180%" height="15" fill="rgb(207,177,25)" fg:x="582940" fg:w="117"/><text x="89.7607%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (117 samples, 0.02%)</title><rect x="89.5107%" y="437" width="0.0180%" height="15" fill="rgb(211,178,42)" fg:x="582940" fg:w="117"/><text x="89.7607%" y="447.50"></text></g><g><title>alloc::alloc::realloc (117 samples, 0.02%)</title><rect x="89.5107%" y="421" width="0.0180%" height="15" fill="rgb(230,69,54)" fg:x="582940" fg:w="117"/><text x="89.7607%" y="431.50"></text></g><g><title>realloc (114 samples, 0.02%)</title><rect x="89.5111%" y="405" width="0.0175%" height="15" fill="rgb(214,135,41)" fg:x="582943" fg:w="114"/><text x="89.7611%" y="415.50"></text></g><g><title>[libc.so.6] (96 samples, 0.01%)</title><rect x="89.5139%" y="389" width="0.0147%" height="15" fill="rgb(237,67,25)" fg:x="582961" fg:w="96"/><text x="89.7639%" y="399.50"></text></g><g><title>[libc.so.6] (86 samples, 0.01%)</title><rect x="89.5154%" y="373" width="0.0132%" height="15" fill="rgb(222,189,50)" fg:x="582971" fg:w="86"/><text x="89.7654%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (129 samples, 0.02%)</title><rect x="89.5090%" y="501" width="0.0198%" height="15" fill="rgb(245,148,34)" fg:x="582929" fg:w="129"/><text x="89.7590%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (129 samples, 0.02%)</title><rect x="89.5090%" y="485" width="0.0198%" height="15" fill="rgb(222,29,6)" fg:x="582929" fg:w="129"/><text x="89.7590%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (130 samples, 0.02%)</title><rect x="89.5090%" y="517" width="0.0200%" height="15" fill="rgb(221,189,43)" fg:x="582929" fg:w="130"/><text x="89.7590%" y="527.50"></text></g><g><title>main::compute_flowchange (3,249 samples, 0.50%)</title><rect x="89.0353%" y="549" width="0.4989%" height="15" fill="rgb(207,36,27)" fg:x="579844" fg:w="3249"/><text x="89.2853%" y="559.50"></text></g><g><title>main::distances_in_cycle (183 samples, 0.03%)</title><rect x="89.5061%" y="533" width="0.0281%" height="15" fill="rgb(217,90,24)" fg:x="582910" fg:w="183"/><text x="89.7561%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (67 samples, 0.01%)</title><rect x="89.5514%" y="469" width="0.0103%" height="15" fill="rgb(224,66,35)" fg:x="583205" fg:w="67"/><text x="89.8014%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (67 samples, 0.01%)</title><rect x="89.5514%" y="453" width="0.0103%" height="15" fill="rgb(221,13,50)" fg:x="583205" fg:w="67"/><text x="89.8014%" y="463.50"></text></g><g><title>alloc::alloc::realloc (67 samples, 0.01%)</title><rect x="89.5514%" y="437" width="0.0103%" height="15" fill="rgb(236,68,49)" fg:x="583205" fg:w="67"/><text x="89.8014%" y="447.50"></text></g><g><title>realloc (66 samples, 0.01%)</title><rect x="89.5515%" y="421" width="0.0101%" height="15" fill="rgb(229,146,28)" fg:x="583206" fg:w="66"/><text x="89.8015%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 samples, 0.02%)</title><rect x="89.5497%" y="485" width="0.0206%" height="15" fill="rgb(225,31,38)" fg:x="583194" fg:w="134"/><text x="89.7997%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (144 samples, 0.02%)</title><rect x="89.5484%" y="533" width="0.0221%" height="15" fill="rgb(250,208,3)" fg:x="583186" fg:w="144"/><text x="89.7984%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (138 samples, 0.02%)</title><rect x="89.5494%" y="517" width="0.0212%" height="15" fill="rgb(246,54,23)" fg:x="583192" fg:w="138"/><text x="89.7994%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (138 samples, 0.02%)</title><rect x="89.5494%" y="501" width="0.0212%" height="15" fill="rgb(243,76,11)" fg:x="583192" fg:w="138"/><text x="89.7994%" y="511.50"></text></g><g><title>main::find_cycle_with_arc (277 samples, 0.04%)</title><rect x="89.5343%" y="549" width="0.0425%" height="15" fill="rgb(245,21,50)" fg:x="583094" fg:w="277"/><text x="89.7843%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (142 samples, 0.02%)</title><rect x="89.5811%" y="533" width="0.0218%" height="15" fill="rgb(228,9,43)" fg:x="583399" fg:w="142"/><text x="89.8311%" y="543.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (141 samples, 0.02%)</title><rect x="89.5813%" y="517" width="0.0217%" height="15" fill="rgb(208,100,47)" fg:x="583400" fg:w="141"/><text x="89.8313%" y="527.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (100 samples, 0.02%)</title><rect x="89.5876%" y="501" width="0.0154%" height="15" fill="rgb(232,26,8)" fg:x="583441" fg:w="100"/><text x="89.8376%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 0.02%)</title><rect x="89.6579%" y="389" width="0.0184%" height="15" fill="rgb(216,166,38)" fg:x="583899" fg:w="120"/><text x="89.9079%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (228 samples, 0.04%)</title><rect x="89.6415%" y="405" width="0.0350%" height="15" fill="rgb(251,202,51)" fg:x="583792" fg:w="228"/><text x="89.8915%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (210 samples, 0.03%)</title><rect x="89.6856%" y="357" width="0.0322%" height="15" fill="rgb(254,216,34)" fg:x="584079" fg:w="210"/><text x="89.9356%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (210 samples, 0.03%)</title><rect x="89.6856%" y="341" width="0.0322%" height="15" fill="rgb(251,32,27)" fg:x="584079" fg:w="210"/><text x="89.9356%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (210 samples, 0.03%)</title><rect x="89.6856%" y="325" width="0.0322%" height="15" fill="rgb(208,127,28)" fg:x="584079" fg:w="210"/><text x="89.9356%" y="335.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (210 samples, 0.03%)</title><rect x="89.6856%" y="309" width="0.0322%" height="15" fill="rgb(224,137,22)" fg:x="584079" fg:w="210"/><text x="89.9356%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (210 samples, 0.03%)</title><rect x="89.6856%" y="293" width="0.0322%" height="15" fill="rgb(254,70,32)" fg:x="584079" fg:w="210"/><text x="89.9356%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::gt (210 samples, 0.03%)</title><rect x="89.6856%" y="277" width="0.0322%" height="15" fill="rgb(229,75,37)" fg:x="584079" fg:w="210"/><text x="89.9356%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (95 samples, 0.01%)</title><rect x="89.7180%" y="341" width="0.0146%" height="15" fill="rgb(252,64,23)" fg:x="584290" fg:w="95"/><text x="89.9680%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (597 samples, 0.09%)</title><rect x="89.6415%" y="421" width="0.0917%" height="15" fill="rgb(232,162,48)" fg:x="583792" fg:w="597"/><text x="89.8915%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (369 samples, 0.06%)</title><rect x="89.6765%" y="405" width="0.0567%" height="15" fill="rgb(246,160,12)" fg:x="584020" fg:w="369"/><text x="89.9265%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (369 samples, 0.06%)</title><rect x="89.6765%" y="389" width="0.0567%" height="15" fill="rgb(247,166,0)" fg:x="584020" fg:w="369"/><text x="89.9265%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (369 samples, 0.06%)</title><rect x="89.6765%" y="373" width="0.0567%" height="15" fill="rgb(249,219,21)" fg:x="584020" fg:w="369"/><text x="89.9265%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.02%)</title><rect x="89.7178%" y="357" width="0.0154%" height="15" fill="rgb(205,209,3)" fg:x="584289" fg:w="100"/><text x="89.9678%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,064 samples, 0.32%)</title><rect x="89.7332%" y="357" width="0.3169%" height="15" fill="rgb(243,44,1)" fg:x="584389" fg:w="2064"/><text x="89.9832%" y="367.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints::_{{closure}} (2,064 samples, 0.32%)</title><rect x="89.7332%" y="341" width="0.3169%" height="15" fill="rgb(206,159,16)" fg:x="584389" fg:w="2064"/><text x="89.9832%" y="351.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (2,064 samples, 0.32%)</title><rect x="89.7332%" y="325" width="0.3169%" height="15" fill="rgb(244,77,30)" fg:x="584389" fg:w="2064"/><text x="89.9832%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,671 samples, 0.41%)</title><rect x="89.6404%" y="437" width="0.4101%" height="15" fill="rgb(218,69,12)" fg:x="583785" fg:w="2671"/><text x="89.8904%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,067 samples, 0.32%)</title><rect x="89.7332%" y="421" width="0.3174%" height="15" fill="rgb(212,87,7)" fg:x="584389" fg:w="2067"/><text x="89.9832%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,067 samples, 0.32%)</title><rect x="89.7332%" y="405" width="0.3174%" height="15" fill="rgb(245,114,25)" fg:x="584389" fg:w="2067"/><text x="89.9832%" y="415.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (2,067 samples, 0.32%)</title><rect x="89.7332%" y="389" width="0.3174%" height="15" fill="rgb(210,61,42)" fg:x="584389" fg:w="2067"/><text x="89.9832%" y="399.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints (2,067 samples, 0.32%)</title><rect x="89.7332%" y="373" width="0.3174%" height="15" fill="rgb(211,52,33)" fg:x="584389" fg:w="2067"/><text x="89.9832%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (413 samples, 0.06%)</title><rect x="90.0573%" y="357" width="0.0634%" height="15" fill="rgb(234,58,33)" fg:x="586500" fg:w="413"/><text x="90.3073%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (413 samples, 0.06%)</title><rect x="90.0573%" y="341" width="0.0634%" height="15" fill="rgb(220,115,36)" fg:x="586500" fg:w="413"/><text x="90.3073%" y="351.50"></text></g><g><title>alloc::alloc::realloc (411 samples, 0.06%)</title><rect x="90.0576%" y="325" width="0.0631%" height="15" fill="rgb(243,153,54)" fg:x="586502" fg:w="411"/><text x="90.3076%" y="335.50"></text></g><g><title>realloc (390 samples, 0.06%)</title><rect x="90.0608%" y="309" width="0.0599%" height="15" fill="rgb(251,47,18)" fg:x="586523" fg:w="390"/><text x="90.3108%" y="319.50"></text></g><g><title>[libc.so.6] (242 samples, 0.04%)</title><rect x="90.0836%" y="293" width="0.0372%" height="15" fill="rgb(242,102,42)" fg:x="586671" fg:w="242"/><text x="90.3336%" y="303.50"></text></g><g><title>[libc.so.6] (194 samples, 0.03%)</title><rect x="90.0909%" y="277" width="0.0298%" height="15" fill="rgb(234,31,38)" fg:x="586719" fg:w="194"/><text x="90.3409%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (419 samples, 0.06%)</title><rect x="90.0568%" y="373" width="0.0643%" height="15" fill="rgb(221,117,51)" fg:x="586497" fg:w="419"/><text x="90.3068%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (464 samples, 0.07%)</title><rect x="90.0509%" y="437" width="0.0712%" height="15" fill="rgb(212,20,18)" fg:x="586458" fg:w="464"/><text x="90.3009%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (464 samples, 0.07%)</title><rect x="90.0509%" y="421" width="0.0712%" height="15" fill="rgb(245,133,36)" fg:x="586458" fg:w="464"/><text x="90.3009%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (450 samples, 0.07%)</title><rect x="90.0530%" y="405" width="0.0691%" height="15" fill="rgb(212,6,19)" fg:x="586472" fg:w="450"/><text x="90.3030%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (450 samples, 0.07%)</title><rect x="90.0530%" y="389" width="0.0691%" height="15" fill="rgb(218,1,36)" fg:x="586472" fg:w="450"/><text x="90.3030%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (140 samples, 0.02%)</title><rect x="90.1223%" y="437" width="0.0215%" height="15" fill="rgb(246,84,54)" fg:x="586923" fg:w="140"/><text x="90.3723%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,697 samples, 0.57%)</title><rect x="89.6108%" y="469" width="0.5677%" height="15" fill="rgb(242,110,6)" fg:x="583592" fg:w="3697"/><text x="89.8608%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,697 samples, 0.57%)</title><rect x="89.6108%" y="453" width="0.5677%" height="15" fill="rgb(214,47,5)" fg:x="583592" fg:w="3697"/><text x="89.8608%" y="463.50"></text></g><g><title>core::ptr::write (226 samples, 0.03%)</title><rect x="90.1438%" y="437" width="0.0347%" height="15" fill="rgb(218,159,25)" fg:x="587063" fg:w="226"/><text x="90.3938%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (86 samples, 0.01%)</title><rect x="90.1808%" y="389" width="0.0132%" height="15" fill="rgb(215,211,28)" fg:x="587304" fg:w="86"/><text x="90.4308%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 0.02%)</title><rect x="90.1785%" y="453" width="0.0241%" height="15" fill="rgb(238,59,32)" fg:x="587289" fg:w="157"/><text x="90.4285%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (153 samples, 0.02%)</title><rect x="90.1791%" y="437" width="0.0235%" height="15" fill="rgb(226,82,3)" fg:x="587293" fg:w="153"/><text x="90.4291%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (153 samples, 0.02%)</title><rect x="90.1791%" y="421" width="0.0235%" height="15" fill="rgb(240,164,32)" fg:x="587293" fg:w="153"/><text x="90.4291%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (153 samples, 0.02%)</title><rect x="90.1791%" y="405" width="0.0235%" height="15" fill="rgb(232,46,7)" fg:x="587293" fg:w="153"/><text x="90.4291%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (173 samples, 0.03%)</title><rect x="90.1785%" y="469" width="0.0266%" height="15" fill="rgb(229,129,53)" fg:x="587289" fg:w="173"/><text x="90.4285%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,980 samples, 0.61%)</title><rect x="89.6031%" y="533" width="0.6111%" height="15" fill="rgb(234,188,29)" fg:x="583542" fg:w="3980"/><text x="89.8531%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,980 samples, 0.61%)</title><rect x="89.6031%" y="517" width="0.6111%" height="15" fill="rgb(246,141,4)" fg:x="583542" fg:w="3980"/><text x="89.8531%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,980 samples, 0.61%)</title><rect x="89.6031%" y="501" width="0.6111%" height="15" fill="rgb(229,23,39)" fg:x="583542" fg:w="3980"/><text x="89.8531%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,980 samples, 0.61%)</title><rect x="89.6031%" y="485" width="0.6111%" height="15" fill="rgb(206,12,3)" fg:x="583542" fg:w="3980"/><text x="89.8531%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;petgraph::graph_impl::Graph&lt;(),f32,petgraph::Undirected&gt;&gt; (100 samples, 0.02%)</title><rect x="90.2216%" y="533" width="0.0154%" height="15" fill="rgb(252,226,20)" fg:x="587570" fg:w="100"/><text x="90.4716%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::Node&lt;()&gt;&gt;&gt; (89 samples, 0.01%)</title><rect x="90.2233%" y="517" width="0.0137%" height="15" fill="rgb(216,123,35)" fg:x="587581" fg:w="89"/><text x="90.4733%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::Node&lt;()&gt;&gt;&gt; (89 samples, 0.01%)</title><rect x="90.2233%" y="501" width="0.0137%" height="15" fill="rgb(212,68,40)" fg:x="587581" fg:w="89"/><text x="90.4733%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.01%)</title><rect x="90.2233%" y="485" width="0.0137%" height="15" fill="rgb(254,125,32)" fg:x="587581" fg:w="89"/><text x="90.4733%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (89 samples, 0.01%)</title><rect x="90.2233%" y="469" width="0.0137%" height="15" fill="rgb(253,97,22)" fg:x="587581" fg:w="89"/><text x="90.4733%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (89 samples, 0.01%)</title><rect x="90.2233%" y="453" width="0.0137%" height="15" fill="rgb(241,101,14)" fg:x="587581" fg:w="89"/><text x="90.4733%" y="463.50"></text></g><g><title>cfree (87 samples, 0.01%)</title><rect x="90.2236%" y="437" width="0.0134%" height="15" fill="rgb(238,103,29)" fg:x="587583" fg:w="87"/><text x="90.4736%" y="447.50"></text></g><g><title>[libc.so.6] (83 samples, 0.01%)</title><rect x="90.2242%" y="421" width="0.0127%" height="15" fill="rgb(233,195,47)" fg:x="587587" fg:w="83"/><text x="90.4742%" y="431.50"></text></g><g><title>[libc.so.6] (77 samples, 0.01%)</title><rect x="90.2251%" y="405" width="0.0118%" height="15" fill="rgb(246,218,30)" fg:x="587593" fg:w="77"/><text x="90.4751%" y="415.50"></text></g><g><title>[libc.so.6] (73 samples, 0.01%)</title><rect x="90.2257%" y="389" width="0.0112%" height="15" fill="rgb(219,145,47)" fg:x="587597" fg:w="73"/><text x="90.4757%" y="399.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (238 samples, 0.04%)</title><rect x="90.3292%" y="517" width="0.0365%" height="15" fill="rgb(243,12,26)" fg:x="588271" fg:w="238"/><text x="90.5792%" y="527.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (238 samples, 0.04%)</title><rect x="90.3292%" y="501" width="0.0365%" height="15" fill="rgb(214,87,16)" fg:x="588271" fg:w="238"/><text x="90.5792%" y="511.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (238 samples, 0.04%)</title><rect x="90.3292%" y="485" width="0.0365%" height="15" fill="rgb(208,99,42)" fg:x="588271" fg:w="238"/><text x="90.5792%" y="495.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (117 samples, 0.02%)</title><rect x="90.3478%" y="469" width="0.0180%" height="15" fill="rgb(253,99,2)" fg:x="588392" fg:w="117"/><text x="90.5978%" y="479.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (117 samples, 0.02%)</title><rect x="90.3478%" y="453" width="0.0180%" height="15" fill="rgb(220,168,23)" fg:x="588392" fg:w="117"/><text x="90.5978%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (192 samples, 0.03%)</title><rect x="90.3658%" y="517" width="0.0295%" height="15" fill="rgb(242,38,24)" fg:x="588509" fg:w="192"/><text x="90.6158%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (192 samples, 0.03%)</title><rect x="90.3658%" y="501" width="0.0295%" height="15" fill="rgb(225,182,9)" fg:x="588509" fg:w="192"/><text x="90.6158%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (192 samples, 0.03%)</title><rect x="90.3658%" y="485" width="0.0295%" height="15" fill="rgb(243,178,37)" fg:x="588509" fg:w="192"/><text x="90.6158%" y="495.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (224 samples, 0.03%)</title><rect x="90.3953%" y="517" width="0.0344%" height="15" fill="rgb(232,139,19)" fg:x="588701" fg:w="224"/><text x="90.6453%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (324 samples, 0.05%)</title><rect x="90.5794%" y="501" width="0.0498%" height="15" fill="rgb(225,201,24)" fg:x="589900" fg:w="324"/><text x="90.8294%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (324 samples, 0.05%)</title><rect x="90.5794%" y="485" width="0.0498%" height="15" fill="rgb(221,47,46)" fg:x="589900" fg:w="324"/><text x="90.8294%" y="495.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,420 samples, 0.22%)</title><rect x="90.4297%" y="517" width="0.2180%" height="15" fill="rgb(249,23,13)" fg:x="588925" fg:w="1420"/><text x="90.6797%" y="527.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (121 samples, 0.02%)</title><rect x="90.6291%" y="501" width="0.0186%" height="15" fill="rgb(219,9,5)" fg:x="590224" fg:w="121"/><text x="90.8791%" y="511.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (121 samples, 0.02%)</title><rect x="90.6291%" y="485" width="0.0186%" height="15" fill="rgb(254,171,16)" fg:x="590224" fg:w="121"/><text x="90.8791%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (419 samples, 0.06%)</title><rect x="90.6485%" y="517" width="0.0643%" height="15" fill="rgb(230,171,20)" fg:x="590350" fg:w="419"/><text x="90.8985%" y="527.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (742 samples, 0.11%)</title><rect x="91.0032%" y="501" width="0.1139%" height="15" fill="rgb(210,71,41)" fg:x="592660" fg:w="742"/><text x="91.2532%" y="511.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (742 samples, 0.11%)</title><rect x="91.0032%" y="485" width="0.1139%" height="15" fill="rgb(206,173,20)" fg:x="592660" fg:w="742"/><text x="91.2532%" y="495.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (742 samples, 0.11%)</title><rect x="91.0032%" y="469" width="0.1139%" height="15" fill="rgb(233,88,34)" fg:x="592660" fg:w="742"/><text x="91.2532%" y="479.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (343 samples, 0.05%)</title><rect x="91.0644%" y="453" width="0.0527%" height="15" fill="rgb(223,209,46)" fg:x="593059" fg:w="343"/><text x="91.3144%" y="463.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (343 samples, 0.05%)</title><rect x="91.0644%" y="437" width="0.0527%" height="15" fill="rgb(250,43,18)" fg:x="593059" fg:w="343"/><text x="91.3144%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (571 samples, 0.09%)</title><rect x="91.1171%" y="501" width="0.0877%" height="15" fill="rgb(208,13,10)" fg:x="593402" fg:w="571"/><text x="91.3671%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (571 samples, 0.09%)</title><rect x="91.1171%" y="485" width="0.0877%" height="15" fill="rgb(212,200,36)" fg:x="593402" fg:w="571"/><text x="91.3671%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (571 samples, 0.09%)</title><rect x="91.1171%" y="469" width="0.0877%" height="15" fill="rgb(225,90,30)" fg:x="593402" fg:w="571"/><text x="91.3671%" y="479.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (557 samples, 0.09%)</title><rect x="91.2094%" y="501" width="0.0855%" height="15" fill="rgb(236,182,39)" fg:x="594003" fg:w="557"/><text x="91.4594%" y="511.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (140 samples, 0.02%)</title><rect x="91.6954%" y="485" width="0.0215%" height="15" fill="rgb(212,144,35)" fg:x="597168" fg:w="140"/><text x="91.9454%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (140 samples, 0.02%)</title><rect x="91.6954%" y="469" width="0.0215%" height="15" fill="rgb(228,63,44)" fg:x="597168" fg:w="140"/><text x="91.9454%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (899 samples, 0.14%)</title><rect x="91.7169%" y="485" width="0.1380%" height="15" fill="rgb(228,109,6)" fg:x="597308" fg:w="899"/><text x="91.9669%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (899 samples, 0.14%)</title><rect x="91.7169%" y="469" width="0.1380%" height="15" fill="rgb(238,117,24)" fg:x="597308" fg:w="899"/><text x="91.9669%" y="479.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,997 samples, 0.61%)</title><rect x="91.2949%" y="501" width="0.6137%" height="15" fill="rgb(242,26,26)" fg:x="594560" fg:w="3997"/><text x="91.5449%" y="511.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (350 samples, 0.05%)</title><rect x="91.8549%" y="485" width="0.0537%" height="15" fill="rgb(221,92,48)" fg:x="598207" fg:w="350"/><text x="92.1049%" y="495.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (350 samples, 0.05%)</title><rect x="91.8549%" y="469" width="0.0537%" height="15" fill="rgb(209,209,32)" fg:x="598207" fg:w="350"/><text x="92.1049%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (301 samples, 0.05%)</title><rect x="91.9119%" y="469" width="0.0462%" height="15" fill="rgb(221,70,22)" fg:x="598578" fg:w="301"/><text x="92.1619%" y="479.50"></text></g><g><title>core::ptr::write (257 samples, 0.04%)</title><rect x="91.9186%" y="453" width="0.0395%" height="15" fill="rgb(248,145,5)" fg:x="598622" fg:w="257"/><text x="92.1686%" y="463.50"></text></g><g><title>alloc::vec::from_elem (395 samples, 0.06%)</title><rect x="91.9119%" y="501" width="0.0607%" height="15" fill="rgb(226,116,26)" fg:x="598578" fg:w="395"/><text x="92.1619%" y="511.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (395 samples, 0.06%)</title><rect x="91.9119%" y="485" width="0.0607%" height="15" fill="rgb(244,5,17)" fg:x="598578" fg:w="395"/><text x="92.1619%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (94 samples, 0.01%)</title><rect x="91.9581%" y="469" width="0.0144%" height="15" fill="rgb(252,159,33)" fg:x="598879" fg:w="94"/><text x="92.2081%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (94 samples, 0.01%)</title><rect x="91.9581%" y="453" width="0.0144%" height="15" fill="rgb(206,71,0)" fg:x="598879" fg:w="94"/><text x="92.2081%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (94 samples, 0.01%)</title><rect x="91.9581%" y="437" width="0.0144%" height="15" fill="rgb(233,118,54)" fg:x="598879" fg:w="94"/><text x="92.2081%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (82 samples, 0.01%)</title><rect x="91.9599%" y="421" width="0.0126%" height="15" fill="rgb(234,83,48)" fg:x="598891" fg:w="82"/><text x="92.2099%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (82 samples, 0.01%)</title><rect x="91.9599%" y="405" width="0.0126%" height="15" fill="rgb(228,3,54)" fg:x="598891" fg:w="82"/><text x="92.2099%" y="415.50"></text></g><g><title>alloc::alloc::alloc (82 samples, 0.01%)</title><rect x="91.9599%" y="389" width="0.0126%" height="15" fill="rgb(226,155,13)" fg:x="598891" fg:w="82"/><text x="92.2099%" y="399.50"></text></g><g><title>malloc (75 samples, 0.01%)</title><rect x="91.9610%" y="373" width="0.0115%" height="15" fill="rgb(241,28,37)" fg:x="598898" fg:w="75"/><text x="92.2110%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (985 samples, 0.15%)</title><rect x="91.9725%" y="501" width="0.1512%" height="15" fill="rgb(233,93,10)" fg:x="598973" fg:w="985"/><text x="92.2225%" y="511.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (12,254 samples, 1.88%)</title><rect x="90.2428%" y="533" width="1.8816%" height="15" fill="rgb(225,113,19)" fg:x="587708" fg:w="12254"/><text x="90.4928%" y="543.50">p..</text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (9,193 samples, 1.41%)</title><rect x="90.7128%" y="517" width="1.4116%" height="15" fill="rgb(241,2,18)" fg:x="590769" fg:w="9193"/><text x="90.9628%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (188 samples, 0.03%)</title><rect x="92.1542%" y="501" width="0.0289%" height="15" fill="rgb(228,207,21)" fg:x="600156" fg:w="188"/><text x="92.4042%" y="511.50"></text></g><g><title>core::ptr::read (152 samples, 0.02%)</title><rect x="92.1597%" y="485" width="0.0233%" height="15" fill="rgb(213,211,35)" fg:x="600192" fg:w="152"/><text x="92.4097%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (73 samples, 0.01%)</title><rect x="92.1834%" y="437" width="0.0112%" height="15" fill="rgb(209,83,10)" fg:x="600346" fg:w="73"/><text x="92.4334%" y="447.50"></text></g><g><title>malloc (69 samples, 0.01%)</title><rect x="92.1840%" y="421" width="0.0106%" height="15" fill="rgb(209,164,1)" fg:x="600350" fg:w="69"/><text x="92.4340%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (79 samples, 0.01%)</title><rect x="92.1831%" y="501" width="0.0121%" height="15" fill="rgb(213,184,43)" fg:x="600344" fg:w="79"/><text x="92.4331%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (79 samples, 0.01%)</title><rect x="92.1831%" y="485" width="0.0121%" height="15" fill="rgb(231,61,34)" fg:x="600344" fg:w="79"/><text x="92.4331%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (79 samples, 0.01%)</title><rect x="92.1831%" y="469" width="0.0121%" height="15" fill="rgb(235,75,3)" fg:x="600344" fg:w="79"/><text x="92.4331%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (79 samples, 0.01%)</title><rect x="92.1831%" y="453" width="0.0121%" height="15" fill="rgb(220,106,47)" fg:x="600344" fg:w="79"/><text x="92.4331%" y="463.50"></text></g><g><title>core::cmp::max (131 samples, 0.02%)</title><rect x="92.1952%" y="501" width="0.0201%" height="15" fill="rgb(210,196,33)" fg:x="600423" fg:w="131"/><text x="92.4452%" y="511.50"></text></g><g><title>core::cmp::Ord::max (131 samples, 0.02%)</title><rect x="92.1952%" y="485" width="0.0201%" height="15" fill="rgb(229,154,42)" fg:x="600423" fg:w="131"/><text x="92.4452%" y="495.50"></text></g><g><title>core::cmp::max_by (131 samples, 0.02%)</title><rect x="92.1952%" y="469" width="0.0201%" height="15" fill="rgb(228,114,26)" fg:x="600423" fg:w="131"/><text x="92.4452%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (69 samples, 0.01%)</title><rect x="92.2153%" y="405" width="0.0106%" height="15" fill="rgb(208,144,1)" fg:x="600554" fg:w="69"/><text x="92.4653%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (69 samples, 0.01%)</title><rect x="92.2153%" y="389" width="0.0106%" height="15" fill="rgb(239,112,37)" fg:x="600554" fg:w="69"/><text x="92.4653%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u32,u32,f32)&gt;&gt; (70 samples, 0.01%)</title><rect x="92.2153%" y="501" width="0.0107%" height="15" fill="rgb(210,96,50)" fg:x="600554" fg:w="70"/><text x="92.4653%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.01%)</title><rect x="92.2153%" y="485" width="0.0107%" height="15" fill="rgb(222,178,2)" fg:x="600554" fg:w="70"/><text x="92.4653%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u32,u32,f32),alloc::alloc::Global&gt;&gt; (70 samples, 0.01%)</title><rect x="92.2153%" y="469" width="0.0107%" height="15" fill="rgb(226,74,18)" fg:x="600554" fg:w="70"/><text x="92.4653%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.01%)</title><rect x="92.2153%" y="453" width="0.0107%" height="15" fill="rgb(225,67,54)" fg:x="600554" fg:w="70"/><text x="92.4653%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u32,u32,f32)&gt;&gt; (70 samples, 0.01%)</title><rect x="92.2153%" y="437" width="0.0107%" height="15" fill="rgb(251,92,32)" fg:x="600554" fg:w="70"/><text x="92.4653%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.01%)</title><rect x="92.2153%" y="421" width="0.0107%" height="15" fill="rgb(228,149,22)" fg:x="600554" fg:w="70"/><text x="92.4653%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (107 samples, 0.02%)</title><rect x="92.2865%" y="485" width="0.0164%" height="15" fill="rgb(243,54,13)" fg:x="601018" fg:w="107"/><text x="92.5365%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (107 samples, 0.02%)</title><rect x="92.2865%" y="469" width="0.0164%" height="15" fill="rgb(243,180,28)" fg:x="601018" fg:w="107"/><text x="92.5365%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (107 samples, 0.02%)</title><rect x="92.2865%" y="453" width="0.0164%" height="15" fill="rgb(208,167,24)" fg:x="601018" fg:w="107"/><text x="92.5365%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (579 samples, 0.09%)</title><rect x="92.3036%" y="485" width="0.0889%" height="15" fill="rgb(245,73,45)" fg:x="601129" fg:w="579"/><text x="92.5536%" y="495.50"></text></g><g><title>core::ptr::write (287 samples, 0.04%)</title><rect x="92.3484%" y="469" width="0.0441%" height="15" fill="rgb(237,203,48)" fg:x="601421" fg:w="287"/><text x="92.5984%" y="479.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1,209 samples, 0.19%)</title><rect x="92.2261%" y="501" width="0.1856%" height="15" fill="rgb(211,197,16)" fg:x="600624" fg:w="1209"/><text x="92.4761%" y="511.50"></text></g><g><title>petgraph::graph_impl::index_twice (123 samples, 0.02%)</title><rect x="92.3928%" y="485" width="0.0189%" height="15" fill="rgb(243,99,51)" fg:x="601710" fg:w="123"/><text x="92.6428%" y="495.50"></text></g><g><title>core::cmp::max (118 samples, 0.02%)</title><rect x="92.3936%" y="469" width="0.0181%" height="15" fill="rgb(215,123,29)" fg:x="601715" fg:w="118"/><text x="92.6436%" y="479.50"></text></g><g><title>core::cmp::Ord::max (118 samples, 0.02%)</title><rect x="92.3936%" y="453" width="0.0181%" height="15" fill="rgb(239,186,37)" fg:x="601715" fg:w="118"/><text x="92.6436%" y="463.50"></text></g><g><title>core::cmp::max_by (118 samples, 0.02%)</title><rect x="92.3936%" y="437" width="0.0181%" height="15" fill="rgb(252,136,39)" fg:x="601715" fg:w="118"/><text x="92.6436%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (224 samples, 0.03%)</title><rect x="92.4627%" y="421" width="0.0344%" height="15" fill="rgb(223,213,32)" fg:x="602165" fg:w="224"/><text x="92.7127%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (224 samples, 0.03%)</title><rect x="92.4627%" y="405" width="0.0344%" height="15" fill="rgb(233,115,5)" fg:x="602165" fg:w="224"/><text x="92.7127%" y="415.50"></text></g><g><title>alloc::alloc::realloc (223 samples, 0.03%)</title><rect x="92.4628%" y="389" width="0.0342%" height="15" fill="rgb(207,226,44)" fg:x="602166" fg:w="223"/><text x="92.7128%" y="399.50"></text></g><g><title>realloc (216 samples, 0.03%)</title><rect x="92.4639%" y="373" width="0.0332%" height="15" fill="rgb(208,126,0)" fg:x="602173" fg:w="216"/><text x="92.7139%" y="383.50"></text></g><g><title>[libc.so.6] (132 samples, 0.02%)</title><rect x="92.4768%" y="357" width="0.0203%" height="15" fill="rgb(244,66,21)" fg:x="602257" fg:w="132"/><text x="92.7268%" y="367.50"></text></g><g><title>[libc.so.6] (116 samples, 0.02%)</title><rect x="92.4793%" y="341" width="0.0178%" height="15" fill="rgb(222,97,12)" fg:x="602273" fg:w="116"/><text x="92.7293%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (241 samples, 0.04%)</title><rect x="92.4622%" y="437" width="0.0370%" height="15" fill="rgb(219,213,19)" fg:x="602162" fg:w="241"/><text x="92.7122%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (254 samples, 0.04%)</title><rect x="92.4608%" y="469" width="0.0390%" height="15" fill="rgb(252,169,30)" fg:x="602153" fg:w="254"/><text x="92.7108%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (254 samples, 0.04%)</title><rect x="92.4608%" y="453" width="0.0390%" height="15" fill="rgb(206,32,51)" fg:x="602153" fg:w="254"/><text x="92.7108%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (967 samples, 0.15%)</title><rect x="92.4120%" y="485" width="0.1485%" height="15" fill="rgb(250,172,42)" fg:x="601835" fg:w="967"/><text x="92.6620%" y="495.50"></text></g><g><title>core::ptr::write (371 samples, 0.06%)</title><rect x="92.5035%" y="469" width="0.0570%" height="15" fill="rgb(209,34,43)" fg:x="602431" fg:w="371"/><text x="92.7535%" y="479.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (978 samples, 0.15%)</title><rect x="92.4117%" y="501" width="0.1502%" height="15" fill="rgb(223,11,35)" fg:x="601833" fg:w="978"/><text x="92.6617%" y="511.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (2,920 samples, 0.45%)</title><rect x="92.1253%" y="533" width="0.4484%" height="15" fill="rgb(251,219,26)" fg:x="599968" fg:w="2920"/><text x="92.3753%" y="543.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (2,917 samples, 0.45%)</title><rect x="92.1258%" y="517" width="0.4479%" height="15" fill="rgb(231,119,3)" fg:x="599971" fg:w="2917"/><text x="92.3758%" y="527.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_count (77 samples, 0.01%)</title><rect x="92.5619%" y="501" width="0.0118%" height="15" fill="rgb(216,97,11)" fg:x="602811" fg:w="77"/><text x="92.8119%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (77 samples, 0.01%)</title><rect x="92.5619%" y="485" width="0.0118%" height="15" fill="rgb(223,59,9)" fg:x="602811" fg:w="77"/><text x="92.8119%" y="495.50"></text></g><g><title>main::update_node_potentials (19,493 samples, 2.99%)</title><rect x="89.5808%" y="549" width="2.9932%" height="15" fill="rgb(233,93,31)" fg:x="583397" fg:w="19493"/><text x="89.8308%" y="559.50">mai..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (378 samples, 0.06%)</title><rect x="92.8754%" y="517" width="0.0580%" height="15" fill="rgb(239,81,33)" fg:x="604853" fg:w="378"/><text x="93.1254%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (37,144 samples, 5.70%)</title><rect x="92.5780%" y="533" width="5.7035%" height="15" fill="rgb(213,120,34)" fg:x="602916" fg:w="37144"/><text x="92.8280%" y="543.50">&lt;core::..</text></g><g><title>main::update_sptree::_{{closure}} (34,829 samples, 5.35%)</title><rect x="92.9335%" y="517" width="5.3480%" height="15" fill="rgb(243,49,53)" fg:x="605231" fg:w="34829"/><text x="93.1835%" y="527.50">main::u..</text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (34,829 samples, 5.35%)</title><rect x="92.9335%" y="501" width="5.3480%" height="15" fill="rgb(247,216,33)" fg:x="605231" fg:w="34829"/><text x="93.1835%" y="511.50">&lt;petgra..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (34,829 samples, 5.35%)</title><rect x="92.9335%" y="485" width="5.3480%" height="15" fill="rgb(226,26,14)" fg:x="605231" fg:w="34829"/><text x="93.1835%" y="495.50">core::c..</text></g><g><title>core::intrinsics::copy (9,792 samples, 1.50%)</title><rect x="98.2864%" y="517" width="1.5036%" height="15" fill="rgb(215,49,53)" fg:x="640092" fg:w="9792"/><text x="98.5364%" y="527.50"></text></g><g><title>[libc.so.6] (9,792 samples, 1.50%)</title><rect x="98.2864%" y="501" width="1.5036%" height="15" fill="rgb(245,162,40)" fg:x="640092" fg:w="9792"/><text x="98.5364%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (9,799 samples, 1.50%)</title><rect x="98.2858%" y="533" width="1.5046%" height="15" fill="rgb(229,68,17)" fg:x="640088" fg:w="9799"/><text x="98.5358%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (118 samples, 0.02%)</title><rect x="99.7942%" y="533" width="0.0181%" height="15" fill="rgb(213,182,10)" fg:x="649912" fg:w="118"/><text x="100.0442%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (118 samples, 0.02%)</title><rect x="99.7942%" y="517" width="0.0181%" height="15" fill="rgb(245,125,30)" fg:x="649912" fg:w="118"/><text x="100.0442%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.02%)</title><rect x="99.7942%" y="501" width="0.0181%" height="15" fill="rgb(232,202,2)" fg:x="649912" fg:w="118"/><text x="100.0442%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (116 samples, 0.02%)</title><rect x="99.7945%" y="485" width="0.0178%" height="15" fill="rgb(237,140,51)" fg:x="649914" fg:w="116"/><text x="100.0445%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (116 samples, 0.02%)</title><rect x="99.7945%" y="469" width="0.0178%" height="15" fill="rgb(236,157,25)" fg:x="649914" fg:w="116"/><text x="100.0445%" y="479.50"></text></g><g><title>cfree (98 samples, 0.02%)</title><rect x="99.7973%" y="453" width="0.0150%" height="15" fill="rgb(219,209,0)" fg:x="649932" fg:w="98"/><text x="100.0473%" y="463.50"></text></g><g><title>std::sync::condvar::Condvar::wait (117 samples, 0.02%)</title><rect x="99.8207%" y="389" width="0.0180%" height="15" fill="rgb(240,116,54)" fg:x="650084" fg:w="117"/><text x="100.0707%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (96 samples, 0.01%)</title><rect x="99.8239%" y="373" width="0.0147%" height="15" fill="rgb(216,10,36)" fg:x="650105" fg:w="96"/><text x="100.0739%" y="383.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (139 samples, 0.02%)</title><rect x="99.8180%" y="405" width="0.0213%" height="15" fill="rgb(222,72,44)" fg:x="650067" fg:w="139"/><text x="100.0680%" y="415.50"></text></g><g><title>rayon_core::registry::Registry::inject (81 samples, 0.01%)</title><rect x="99.8394%" y="405" width="0.0124%" height="15" fill="rgb(232,159,9)" fg:x="650206" fg:w="81"/><text x="100.0894%" y="415.50"></text></g><g><title>rayon_core::registry::Registry::in_worker (327 samples, 0.05%)</title><rect x="99.8137%" y="485" width="0.0502%" height="15" fill="rgb(210,39,32)" fg:x="650039" fg:w="327"/><text x="100.0637%" y="495.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold (314 samples, 0.05%)</title><rect x="99.8157%" y="469" width="0.0482%" height="15" fill="rgb(216,194,45)" fg:x="650052" fg:w="314"/><text x="100.0657%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (314 samples, 0.05%)</title><rect x="99.8157%" y="453" width="0.0482%" height="15" fill="rgb(218,18,35)" fg:x="650052" fg:w="314"/><text x="100.0657%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (314 samples, 0.05%)</title><rect x="99.8157%" y="437" width="0.0482%" height="15" fill="rgb(207,83,51)" fg:x="650052" fg:w="314"/><text x="100.0657%" y="447.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::_{{closure}} (313 samples, 0.05%)</title><rect x="99.8159%" y="421" width="0.0481%" height="15" fill="rgb(225,63,43)" fg:x="650053" fg:w="313"/><text x="100.0659%" y="431.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (79 samples, 0.01%)</title><rect x="99.8518%" y="405" width="0.0121%" height="15" fill="rgb(207,57,36)" fg:x="650287" fg:w="79"/><text x="100.1018%" y="415.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (68 samples, 0.01%)</title><rect x="99.8535%" y="389" width="0.0104%" height="15" fill="rgb(216,99,33)" fg:x="650298" fg:w="68"/><text x="100.1035%" y="399.50"></text></g><g><title>main::min_cost (549,398 samples, 84.36%)</title><rect x="15.5067%" y="565" width="84.3603%" height="15" fill="rgb(225,42,16)" fg:x="100988" fg:w="549398"/><text x="15.7567%" y="575.50">main::min_cost</text></g><g><title>main::update_sptree (47,496 samples, 7.29%)</title><rect x="92.5740%" y="549" width="7.2930%" height="15" fill="rgb(220,201,45)" fg:x="602890" fg:w="47496"/><text x="92.8240%" y="559.50">main::upda..</text></g><g><title>rayon_core::join::join (349 samples, 0.05%)</title><rect x="99.8134%" y="533" width="0.0536%" height="15" fill="rgb(225,33,4)" fg:x="650037" fg:w="349"/><text x="100.0634%" y="543.50"></text></g><g><title>rayon_core::join::join_context (347 samples, 0.05%)</title><rect x="99.8137%" y="517" width="0.0533%" height="15" fill="rgb(224,33,50)" fg:x="650039" fg:w="347"/><text x="100.0637%" y="527.50"></text></g><g><title>rayon_core::registry::in_worker (347 samples, 0.05%)</title><rect x="99.8137%" y="501" width="0.0533%" height="15" fill="rgb(246,198,51)" fg:x="650039" fg:w="347"/><text x="100.0637%" y="511.50"></text></g><g><title>_start (549,414 samples, 84.36%)</title><rect x="15.5058%" y="709" width="84.3627%" height="15" fill="rgb(205,22,4)" fg:x="100982" fg:w="549414"/><text x="15.7558%" y="719.50">_start</text></g><g><title>__libc_start_main (549,414 samples, 84.36%)</title><rect x="15.5058%" y="693" width="84.3627%" height="15" fill="rgb(206,3,8)" fg:x="100982" fg:w="549414"/><text x="15.7558%" y="703.50">__libc_start_main</text></g><g><title>[libc.so.6] (549,414 samples, 84.36%)</title><rect x="15.5058%" y="677" width="84.3627%" height="15" fill="rgb(251,23,15)" fg:x="100982" fg:w="549414"/><text x="15.7558%" y="687.50">[libc.so.6]</text></g><g><title>main (549,414 samples, 84.36%)</title><rect x="15.5058%" y="661" width="84.3627%" height="15" fill="rgb(252,88,28)" fg:x="100982" fg:w="549414"/><text x="15.7558%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (549,414 samples, 84.36%)</title><rect x="15.5058%" y="645" width="84.3627%" height="15" fill="rgb(212,127,14)" fg:x="100982" fg:w="549414"/><text x="15.7558%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (549,414 samples, 84.36%)</title><rect x="15.5058%" y="629" width="84.3627%" height="15" fill="rgb(247,145,37)" fg:x="100982" fg:w="549414"/><text x="15.7558%" y="639.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (549,414 samples, 84.36%)</title><rect x="15.5058%" y="613" width="84.3627%" height="15" fill="rgb(209,117,53)" fg:x="100982" fg:w="549414"/><text x="15.7558%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (549,414 samples, 84.36%)</title><rect x="15.5058%" y="597" width="84.3627%" height="15" fill="rgb(212,90,42)" fg:x="100982" fg:w="549414"/><text x="15.7558%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (549,414 samples, 84.36%)</title><rect x="15.5058%" y="581" width="84.3627%" height="15" fill="rgb(218,164,37)" fg:x="100982" fg:w="549414"/><text x="15.7558%" y="591.50">main::main</text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (189 samples, 0.03%)</title><rect x="99.8702%" y="709" width="0.0290%" height="15" fill="rgb(246,65,34)" fg:x="650407" fg:w="189"/><text x="100.1202%" y="719.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (81 samples, 0.01%)</title><rect x="99.8993%" y="709" width="0.0124%" height="15" fill="rgb(231,100,33)" fg:x="650596" fg:w="81"/><text x="100.1493%" y="719.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (152 samples, 0.02%)</title><rect x="99.9117%" y="709" width="0.0233%" height="15" fill="rgb(228,126,14)" fg:x="650677" fg:w="152"/><text x="100.1617%" y="719.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (70 samples, 0.01%)</title><rect x="99.9350%" y="677" width="0.0107%" height="15" fill="rgb(215,173,21)" fg:x="650829" fg:w="70"/><text x="100.1850%" y="687.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (70 samples, 0.01%)</title><rect x="99.9350%" y="661" width="0.0107%" height="15" fill="rgb(210,6,40)" fg:x="650829" fg:w="70"/><text x="100.1850%" y="671.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (70 samples, 0.01%)</title><rect x="99.9350%" y="645" width="0.0107%" height="15" fill="rgb(212,48,18)" fg:x="650829" fg:w="70"/><text x="100.1850%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (70 samples, 0.01%)</title><rect x="99.9350%" y="629" width="0.0107%" height="15" fill="rgb(230,214,11)" fg:x="650829" fg:w="70"/><text x="100.1850%" y="639.50"></text></g><g><title>crossbeam_epoch::default::with_handle (175 samples, 0.03%)</title><rect x="99.9350%" y="709" width="0.0269%" height="15" fill="rgb(254,105,39)" fg:x="650829" fg:w="175"/><text x="100.1850%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (175 samples, 0.03%)</title><rect x="99.9350%" y="693" width="0.0269%" height="15" fill="rgb(245,158,5)" fg:x="650829" fg:w="175"/><text x="100.1850%" y="703.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (105 samples, 0.02%)</title><rect x="99.9458%" y="677" width="0.0161%" height="15" fill="rgb(249,208,11)" fg:x="650899" fg:w="105"/><text x="100.1958%" y="687.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (105 samples, 0.02%)</title><rect x="99.9458%" y="661" width="0.0161%" height="15" fill="rgb(210,39,28)" fg:x="650899" fg:w="105"/><text x="100.1958%" y="671.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (105 samples, 0.02%)</title><rect x="99.9458%" y="645" width="0.0161%" height="15" fill="rgb(211,56,53)" fg:x="650899" fg:w="105"/><text x="100.1958%" y="655.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (105 samples, 0.02%)</title><rect x="99.9458%" y="629" width="0.0161%" height="15" fill="rgb(226,201,30)" fg:x="650899" fg:w="105"/><text x="100.1958%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (155 samples, 0.02%)</title><rect x="99.9742%" y="709" width="0.0238%" height="15" fill="rgb(239,101,34)" fg:x="651084" fg:w="155"/><text x="100.2242%" y="719.50"></text></g><g><title>all (651,252 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(226,209,5)" fg:x="0" fg:w="651252"/><text x="0.2500%" y="751.50"></text></g><g><title>main (651,252 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(250,105,47)" fg:x="0" fg:w="651252"/><text x="0.2500%" y="735.50">main</text></g></svg></svg>