<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="4499"><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.20%)</title><rect x="0.0000%" y="421" width="0.2000%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.07%)</title><rect x="0.1334%" y="405" width="0.0667%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="3"/><text x="0.3834%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.07%)</title><rect x="0.1334%" y="389" width="0.0667%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="3"/><text x="0.3834%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.07%)</title><rect x="0.1334%" y="373" width="0.0667%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="3"/><text x="0.3834%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.04%)</title><rect x="0.1556%" y="357" width="0.0445%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="2"/><text x="0.4056%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.04%)</title><rect x="0.1556%" y="341" width="0.0445%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="2"/><text x="0.4056%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.04%)</title><rect x="0.1556%" y="325" width="0.0445%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="2"/><text x="0.4056%" y="335.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="0.2000%" y="405" width="0.0889%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="4"/><text x="0.4500%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.2890%" y="405" width="0.0222%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="1"/><text x="0.5390%" y="415.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="0.3112%" y="405" width="0.0222%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="1"/><text x="0.5612%" y="415.50"></text></g><g><title>[unknown] (8 samples, 0.18%)</title><rect x="0.2000%" y="421" width="0.1778%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="8"/><text x="0.4500%" y="431.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="0.3334%" y="405" width="0.0445%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="2"/><text x="0.5834%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="0.4445%" y="277" width="0.0222%" height="15" fill="rgb(216,20,37)" fg:x="20" fg:w="1"/><text x="0.6945%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.5335%" y="181" width="0.0222%" height="15" fill="rgb(206,188,39)" fg:x="24" fg:w="1"/><text x="0.7835%" y="191.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.5335%" y="165" width="0.0222%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="1"/><text x="0.7835%" y="175.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="0.5335%" y="261" width="0.0445%" height="15" fill="rgb(231,73,38)" fg:x="24" fg:w="2"/><text x="0.7835%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="0.5335%" y="245" width="0.0445%" height="15" fill="rgb(225,20,46)" fg:x="24" fg:w="2"/><text x="0.7835%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.04%)</title><rect x="0.5335%" y="229" width="0.0445%" height="15" fill="rgb(210,31,41)" fg:x="24" fg:w="2"/><text x="0.7835%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.04%)</title><rect x="0.5335%" y="213" width="0.0445%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="2"/><text x="0.7835%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.04%)</title><rect x="0.5335%" y="197" width="0.0445%" height="15" fill="rgb(226,26,5)" fg:x="24" fg:w="2"/><text x="0.7835%" y="207.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.02%)</title><rect x="0.5557%" y="181" width="0.0222%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="1"/><text x="0.8057%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.04%)</title><rect x="0.5779%" y="261" width="0.0445%" height="15" fill="rgb(235,183,28)" fg:x="26" fg:w="2"/><text x="0.8279%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.04%)</title><rect x="0.5779%" y="245" width="0.0445%" height="15" fill="rgb(221,5,38)" fg:x="26" fg:w="2"/><text x="0.8279%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.04%)</title><rect x="0.5779%" y="229" width="0.0445%" height="15" fill="rgb(247,18,42)" fg:x="26" fg:w="2"/><text x="0.8279%" y="239.50"></text></g><g><title>main::min_cost::_{{closure}} (2 samples, 0.04%)</title><rect x="0.5779%" y="213" width="0.0445%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="2"/><text x="0.8279%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (611 samples, 13.58%)</title><rect x="18.5152%" y="245" width="13.5808%" height="15" fill="rgb(249,31,29)" fg:x="833" fg:w="611"/><text x="18.7652%" y="255.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (611 samples, 13.58%)</title><rect x="18.5152%" y="229" width="13.5808%" height="15" fill="rgb(225,111,53)" fg:x="833" fg:w="611"/><text x="18.7652%" y="239.50">core::slice::index::&lt;..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (611 samples, 13.58%)</title><rect x="18.5152%" y="213" width="13.5808%" height="15" fill="rgb(238,160,17)" fg:x="833" fg:w="611"/><text x="18.7652%" y="223.50">&lt;usize as core::slice..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (434 samples, 9.65%)</title><rect x="32.0960%" y="245" width="9.6466%" height="15" fill="rgb(214,148,48)" fg:x="1444" fg:w="434"/><text x="32.3460%" y="255.50">&lt;i32 as core::..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (502 samples, 11.16%)</title><rect x="41.7426%" y="245" width="11.1580%" height="15" fill="rgb(232,36,49)" fg:x="1878" fg:w="502"/><text x="41.9926%" y="255.50">&lt;i32 as core::op..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (79 samples, 1.76%)</title><rect x="52.9006%" y="245" width="1.7559%" height="15" fill="rgb(209,103,24)" fg:x="2380" fg:w="79"/><text x="53.1506%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (290 samples, 6.45%)</title><rect x="54.6566%" y="245" width="6.4459%" height="15" fill="rgb(229,88,8)" fg:x="2459" fg:w="290"/><text x="54.9066%" y="255.50">core::cm..</text></g><g><title>main::__find_block_search (2,767 samples, 61.50%)</title><rect x="0.6224%" y="261" width="61.5026%" height="15" fill="rgb(213,181,19)" fg:x="28" fg:w="2767"/><text x="0.8724%" y="271.50">main::__find_block_search</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (46 samples, 1.02%)</title><rect x="61.1025%" y="245" width="1.0224%" height="15" fill="rgb(254,191,54)" fg:x="2749" fg:w="46"/><text x="61.3525%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (46 samples, 1.02%)</title><rect x="61.1025%" y="229" width="1.0224%" height="15" fill="rgb(241,83,37)" fg:x="2749" fg:w="46"/><text x="61.3525%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="62.1694%" y="245" width="0.0222%" height="15" fill="rgb(233,36,39)" fg:x="2797" fg:w="1"/><text x="62.4194%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="62.1694%" y="229" width="0.0222%" height="15" fill="rgb(226,3,54)" fg:x="2797" fg:w="1"/><text x="62.4194%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="62.1694%" y="213" width="0.0222%" height="15" fill="rgb(245,192,40)" fg:x="2797" fg:w="1"/><text x="62.4194%" y="223.50"></text></g><g><title>main::_find_best_arc (4 samples, 0.09%)</title><rect x="62.1249%" y="261" width="0.0889%" height="15" fill="rgb(238,167,29)" fg:x="2795" fg:w="4"/><text x="62.3749%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.02%)</title><rect x="62.1916%" y="245" width="0.0222%" height="15" fill="rgb(232,182,51)" fg:x="2798" fg:w="1"/><text x="62.4416%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (68 samples, 1.51%)</title><rect x="80.7068%" y="245" width="1.5114%" height="15" fill="rgb(231,60,39)" fg:x="3631" fg:w="68"/><text x="80.9568%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (68 samples, 1.51%)</title><rect x="80.7068%" y="229" width="1.5114%" height="15" fill="rgb(208,69,12)" fg:x="3631" fg:w="68"/><text x="80.9568%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (68 samples, 1.51%)</title><rect x="80.7068%" y="213" width="1.5114%" height="15" fill="rgb(235,93,37)" fg:x="3631" fg:w="68"/><text x="80.9568%" y="223.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (53 samples, 1.18%)</title><rect x="82.2183%" y="245" width="1.1780%" height="15" fill="rgb(213,116,39)" fg:x="3699" fg:w="53"/><text x="82.4683%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (2 samples, 0.04%)</title><rect x="83.3963%" y="245" width="0.0445%" height="15" fill="rgb(222,207,29)" fg:x="3752" fg:w="2"/><text x="83.6463%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (9 samples, 0.20%)</title><rect x="83.4408%" y="245" width="0.2000%" height="15" fill="rgb(206,96,30)" fg:x="3754" fg:w="9"/><text x="83.6908%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::gt (1 samples, 0.02%)</title><rect x="83.6408%" y="245" width="0.0222%" height="15" fill="rgb(218,138,4)" fg:x="3763" fg:w="1"/><text x="83.8908%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (10 samples, 0.22%)</title><rect x="83.6630%" y="245" width="0.2223%" height="15" fill="rgb(250,191,14)" fg:x="3764" fg:w="10"/><text x="83.9130%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (7 samples, 0.16%)</title><rect x="83.8853%" y="245" width="0.1556%" height="15" fill="rgb(239,60,40)" fg:x="3774" fg:w="7"/><text x="84.1353%" y="255.50"></text></g><g><title>main::compute_flowchange (1,023 samples, 22.74%)</title><rect x="62.2138%" y="261" width="22.7384%" height="15" fill="rgb(206,27,48)" fg:x="2799" fg:w="1023"/><text x="62.4638%" y="271.50">main::compute_flowchange</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (41 samples, 0.91%)</title><rect x="84.0409%" y="245" width="0.9113%" height="15" fill="rgb(225,35,8)" fg:x="3781" fg:w="41"/><text x="84.2909%" y="255.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.02%)</title><rect x="84.9744%" y="245" width="0.0222%" height="15" fill="rgb(250,213,24)" fg:x="3823" fg:w="1"/><text x="85.2244%" y="255.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="84.9744%" y="229" width="0.0222%" height="15" fill="rgb(247,123,22)" fg:x="3823" fg:w="1"/><text x="85.2244%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="84.9744%" y="213" width="0.0222%" height="15" fill="rgb(231,138,38)" fg:x="3823" fg:w="1"/><text x="85.2244%" y="223.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="84.9744%" y="197" width="0.0222%" height="15" fill="rgb(231,145,46)" fg:x="3823" fg:w="1"/><text x="85.2244%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="84.9967%" y="213" width="0.0445%" height="15" fill="rgb(251,118,11)" fg:x="3824" fg:w="2"/><text x="85.2467%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.04%)</title><rect x="84.9967%" y="197" width="0.0445%" height="15" fill="rgb(217,147,25)" fg:x="3824" fg:w="2"/><text x="85.2467%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2 samples, 0.04%)</title><rect x="84.9967%" y="181" width="0.0445%" height="15" fill="rgb(247,81,37)" fg:x="3824" fg:w="2"/><text x="85.2467%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="85.1745%" y="165" width="0.0222%" height="15" fill="rgb(209,12,38)" fg:x="3832" fg:w="1"/><text x="85.4245%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="85.1745%" y="149" width="0.0222%" height="15" fill="rgb(227,1,9)" fg:x="3832" fg:w="1"/><text x="85.4245%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="85.1745%" y="133" width="0.0222%" height="15" fill="rgb(248,47,43)" fg:x="3832" fg:w="1"/><text x="85.4245%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="85.1745%" y="117" width="0.0222%" height="15" fill="rgb(221,10,30)" fg:x="3832" fg:w="1"/><text x="85.4245%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="85.1745%" y="101" width="0.0222%" height="15" fill="rgb(210,229,1)" fg:x="3832" fg:w="1"/><text x="85.4245%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="85.1745%" y="85" width="0.0222%" height="15" fill="rgb(222,148,37)" fg:x="3832" fg:w="1"/><text x="85.4245%" y="95.50"></text></g><g><title>realloc (1 samples, 0.02%)</title><rect x="85.1745%" y="69" width="0.0222%" height="15" fill="rgb(234,67,33)" fg:x="3832" fg:w="1"/><text x="85.4245%" y="79.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="85.1745%" y="53" width="0.0222%" height="15" fill="rgb(247,98,35)" fg:x="3832" fg:w="1"/><text x="85.4245%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="85.1745%" y="37" width="0.0222%" height="15" fill="rgb(247,138,52)" fg:x="3832" fg:w="1"/><text x="85.4245%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.22%)</title><rect x="84.9967%" y="245" width="0.2223%" height="15" fill="rgb(213,79,30)" fg:x="3824" fg:w="10"/><text x="85.2467%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.22%)</title><rect x="84.9967%" y="229" width="0.2223%" height="15" fill="rgb(246,177,23)" fg:x="3824" fg:w="10"/><text x="85.2467%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8 samples, 0.18%)</title><rect x="85.0411%" y="213" width="0.1778%" height="15" fill="rgb(230,62,27)" fg:x="3826" fg:w="8"/><text x="85.2911%" y="223.50"></text></g><g><title>main::initialization::_{{closure}} (8 samples, 0.18%)</title><rect x="85.0411%" y="197" width="0.1778%" height="15" fill="rgb(216,154,8)" fg:x="3826" fg:w="8"/><text x="85.2911%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.04%)</title><rect x="85.1745%" y="181" width="0.0445%" height="15" fill="rgb(244,35,45)" fg:x="3832" fg:w="2"/><text x="85.4245%" y="191.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="85.1967%" y="165" width="0.0222%" height="15" fill="rgb(251,115,12)" fg:x="3833" fg:w="1"/><text x="85.4467%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3 samples, 0.07%)</title><rect x="85.2189%" y="149" width="0.0667%" height="15" fill="rgb(240,54,50)" fg:x="3834" fg:w="3"/><text x="85.4689%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="85.2412%" y="133" width="0.0445%" height="15" fill="rgb(233,84,52)" fg:x="3835" fg:w="2"/><text x="85.4912%" y="143.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="85.2412%" y="117" width="0.0445%" height="15" fill="rgb(207,117,47)" fg:x="3835" fg:w="2"/><text x="85.4912%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.09%)</title><rect x="85.2189%" y="229" width="0.0889%" height="15" fill="rgb(249,43,39)" fg:x="3834" fg:w="4"/><text x="85.4689%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.09%)</title><rect x="85.2189%" y="213" width="0.0889%" height="15" fill="rgb(209,38,44)" fg:x="3834" fg:w="4"/><text x="85.4689%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.09%)</title><rect x="85.2189%" y="197" width="0.0889%" height="15" fill="rgb(236,212,23)" fg:x="3834" fg:w="4"/><text x="85.4689%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.09%)</title><rect x="85.2189%" y="181" width="0.0889%" height="15" fill="rgb(242,79,21)" fg:x="3834" fg:w="4"/><text x="85.4689%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.09%)</title><rect x="85.2189%" y="165" width="0.0889%" height="15" fill="rgb(211,96,35)" fg:x="3834" fg:w="4"/><text x="85.4689%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="85.2856%" y="149" width="0.0222%" height="15" fill="rgb(253,215,40)" fg:x="3837" fg:w="1"/><text x="85.5356%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="85.2856%" y="133" width="0.0222%" height="15" fill="rgb(211,81,21)" fg:x="3837" fg:w="1"/><text x="85.5356%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="85.2856%" y="117" width="0.0222%" height="15" fill="rgb(208,190,38)" fg:x="3837" fg:w="1"/><text x="85.5356%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="85.2856%" y="101" width="0.0222%" height="15" fill="rgb(235,213,38)" fg:x="3837" fg:w="1"/><text x="85.5356%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="85.2856%" y="85" width="0.0222%" height="15" fill="rgb(237,122,38)" fg:x="3837" fg:w="1"/><text x="85.5356%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="85.3078%" y="229" width="0.0222%" height="15" fill="rgb(244,218,35)" fg:x="3838" fg:w="1"/><text x="85.5578%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="85.3078%" y="213" width="0.0222%" height="15" fill="rgb(240,68,47)" fg:x="3838" fg:w="1"/><text x="85.5578%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="85.3078%" y="197" width="0.0222%" height="15" fill="rgb(210,16,53)" fg:x="3838" fg:w="1"/><text x="85.5578%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="85.3078%" y="181" width="0.0222%" height="15" fill="rgb(235,124,12)" fg:x="3838" fg:w="1"/><text x="85.5578%" y="191.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (1 samples, 0.02%)</title><rect x="85.3078%" y="165" width="0.0222%" height="15" fill="rgb(224,169,11)" fg:x="3838" fg:w="1"/><text x="85.5578%" y="175.50"></text></g><g><title>itertools::Itertools::sorted_by_key (1 samples, 0.02%)</title><rect x="85.3301%" y="229" width="0.0222%" height="15" fill="rgb(250,166,2)" fg:x="3839" fg:w="1"/><text x="85.5801%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.02%)</title><rect x="85.3301%" y="213" width="0.0222%" height="15" fill="rgb(242,216,29)" fg:x="3839" fg:w="1"/><text x="85.5801%" y="223.50"></text></g><g><title>alloc::slice::stable_sort (1 samples, 0.02%)</title><rect x="85.3301%" y="197" width="0.0222%" height="15" fill="rgb(230,116,27)" fg:x="3839" fg:w="1"/><text x="85.5801%" y="207.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.02%)</title><rect x="85.3301%" y="181" width="0.0222%" height="15" fill="rgb(228,99,48)" fg:x="3839" fg:w="1"/><text x="85.5801%" y="191.50"></text></g><g><title>core::slice::sort::merge (1 samples, 0.02%)</title><rect x="85.3301%" y="165" width="0.0222%" height="15" fill="rgb(253,11,6)" fg:x="3839" fg:w="1"/><text x="85.5801%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="85.3301%" y="149" width="0.0222%" height="15" fill="rgb(247,143,39)" fg:x="3839" fg:w="1"/><text x="85.5801%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="85.3301%" y="133" width="0.0222%" height="15" fill="rgb(236,97,10)" fg:x="3839" fg:w="1"/><text x="85.5801%" y="143.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="85.3523%" y="213" width="0.0222%" height="15" fill="rgb(233,208,19)" fg:x="3840" fg:w="1"/><text x="85.6023%" y="223.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (1 samples, 0.02%)</title><rect x="85.3968%" y="197" width="0.0222%" height="15" fill="rgb(216,164,2)" fg:x="3842" fg:w="1"/><text x="85.6468%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (1 samples, 0.02%)</title><rect x="85.3968%" y="181" width="0.0222%" height="15" fill="rgb(220,129,5)" fg:x="3842" fg:w="1"/><text x="85.6468%" y="191.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (1 samples, 0.02%)</title><rect x="85.3968%" y="165" width="0.0222%" height="15" fill="rgb(242,17,10)" fg:x="3842" fg:w="1"/><text x="85.6468%" y="175.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.02%)</title><rect x="85.4190%" y="197" width="0.0222%" height="15" fill="rgb(242,107,0)" fg:x="3843" fg:w="1"/><text x="85.6690%" y="207.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (11 samples, 0.24%)</title><rect x="85.3523%" y="229" width="0.2445%" height="15" fill="rgb(251,28,31)" fg:x="3840" fg:w="11"/><text x="85.6023%" y="239.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (10 samples, 0.22%)</title><rect x="85.3745%" y="213" width="0.2223%" height="15" fill="rgb(233,223,10)" fg:x="3841" fg:w="10"/><text x="85.6245%" y="223.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.16%)</title><rect x="85.4412%" y="197" width="0.1556%" height="15" fill="rgb(215,21,27)" fg:x="3844" fg:w="7"/><text x="85.6912%" y="207.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (1 samples, 0.02%)</title><rect x="85.5746%" y="181" width="0.0222%" height="15" fill="rgb(232,23,21)" fg:x="3850" fg:w="1"/><text x="85.8246%" y="191.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (1 samples, 0.02%)</title><rect x="85.5746%" y="165" width="0.0222%" height="15" fill="rgb(244,5,23)" fg:x="3850" fg:w="1"/><text x="85.8246%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="85.5968%" y="197" width="0.0222%" height="15" fill="rgb(226,81,46)" fg:x="3851" fg:w="1"/><text x="85.8468%" y="207.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="85.5968%" y="181" width="0.0222%" height="15" fill="rgb(247,70,30)" fg:x="3851" fg:w="1"/><text x="85.8468%" y="191.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (3 samples, 0.07%)</title><rect x="85.6190%" y="197" width="0.0667%" height="15" fill="rgb(212,68,19)" fg:x="3852" fg:w="3"/><text x="85.8690%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.04%)</title><rect x="85.6413%" y="181" width="0.0445%" height="15" fill="rgb(240,187,13)" fg:x="3853" fg:w="2"/><text x="85.8913%" y="191.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="85.6635%" y="165" width="0.0222%" height="15" fill="rgb(223,113,26)" fg:x="3854" fg:w="1"/><text x="85.9135%" y="175.50"></text></g><g><title>main::compute_node_potentials (22 samples, 0.49%)</title><rect x="85.2189%" y="245" width="0.4890%" height="15" fill="rgb(206,192,2)" fg:x="3834" fg:w="22"/><text x="85.4689%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (5 samples, 0.11%)</title><rect x="85.5968%" y="229" width="0.1111%" height="15" fill="rgb(241,108,4)" fg:x="3851" fg:w="5"/><text x="85.8468%" y="239.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (5 samples, 0.11%)</title><rect x="85.5968%" y="213" width="0.1111%" height="15" fill="rgb(247,173,49)" fg:x="3851" fg:w="5"/><text x="85.8468%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (1 samples, 0.02%)</title><rect x="85.6857%" y="197" width="0.0222%" height="15" fill="rgb(224,114,35)" fg:x="3855" fg:w="1"/><text x="85.9357%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="85.6857%" y="181" width="0.0222%" height="15" fill="rgb(245,159,27)" fg:x="3855" fg:w="1"/><text x="85.9357%" y="191.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="85.6857%" y="165" width="0.0222%" height="15" fill="rgb(245,172,44)" fg:x="3855" fg:w="1"/><text x="85.9357%" y="175.50"></text></g><g><title>main::initialization (37 samples, 0.82%)</title><rect x="84.9522%" y="261" width="0.8224%" height="15" fill="rgb(236,23,11)" fg:x="3822" fg:w="37"/><text x="85.2022%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (3 samples, 0.07%)</title><rect x="85.7079%" y="245" width="0.0667%" height="15" fill="rgb(205,117,38)" fg:x="3856" fg:w="3"/><text x="85.9579%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.04%)</title><rect x="85.7302%" y="229" width="0.0445%" height="15" fill="rgb(237,72,25)" fg:x="3857" fg:w="2"/><text x="85.9802%" y="239.50"></text></g><g><title>core::ptr::write (2 samples, 0.04%)</title><rect x="85.7302%" y="213" width="0.0445%" height="15" fill="rgb(244,70,9)" fg:x="3857" fg:w="2"/><text x="85.9802%" y="223.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (16 samples, 0.36%)</title><rect x="86.0413%" y="245" width="0.3556%" height="15" fill="rgb(217,125,39)" fg:x="3871" fg:w="16"/><text x="86.2913%" y="255.50"></text></g><g><title>main::update_node_potentials (31 samples, 0.69%)</title><rect x="85.7746%" y="261" width="0.6890%" height="15" fill="rgb(235,36,10)" fg:x="3859" fg:w="31"/><text x="86.0246%" y="271.50"></text></g><g><title>main::get_reduced_cost_edgeindex (3 samples, 0.07%)</title><rect x="86.3970%" y="245" width="0.0667%" height="15" fill="rgb(251,123,47)" fg:x="3887" fg:w="3"/><text x="86.6470%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.11%)</title><rect x="96.5992%" y="229" width="0.1111%" height="15" fill="rgb(221,13,13)" fg:x="4346" fg:w="5"/><text x="96.8492%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.07%)</title><rect x="96.6437%" y="213" width="0.0667%" height="15" fill="rgb(238,131,9)" fg:x="4348" fg:w="3"/><text x="96.8937%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.07%)</title><rect x="96.6437%" y="197" width="0.0667%" height="15" fill="rgb(211,50,8)" fg:x="4348" fg:w="3"/><text x="96.8937%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.24%)</title><rect x="96.5992%" y="245" width="0.2445%" height="15" fill="rgb(245,182,24)" fg:x="4346" fg:w="11"/><text x="96.8492%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.13%)</title><rect x="96.7104%" y="229" width="0.1334%" height="15" fill="rgb(242,14,37)" fg:x="4351" fg:w="6"/><text x="96.9604%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.13%)</title><rect x="96.7104%" y="213" width="0.1334%" height="15" fill="rgb(246,228,12)" fg:x="4351" fg:w="6"/><text x="96.9604%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.04%)</title><rect x="96.8437%" y="229" width="0.0445%" height="15" fill="rgb(213,55,15)" fg:x="4357" fg:w="2"/><text x="97.0937%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="96.8660%" y="213" width="0.0222%" height="15" fill="rgb(209,9,3)" fg:x="4358" fg:w="1"/><text x="97.1160%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="96.8660%" y="197" width="0.0222%" height="15" fill="rgb(230,59,30)" fg:x="4358" fg:w="1"/><text x="97.1160%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.07%)</title><rect x="96.8437%" y="245" width="0.0667%" height="15" fill="rgb(209,121,21)" fg:x="4357" fg:w="3"/><text x="97.0937%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.02%)</title><rect x="96.8882%" y="229" width="0.0222%" height="15" fill="rgb(220,109,13)" fg:x="4359" fg:w="1"/><text x="97.1382%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="96.8882%" y="213" width="0.0222%" height="15" fill="rgb(232,18,1)" fg:x="4359" fg:w="1"/><text x="97.1382%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="97.2661%" y="181" width="0.0222%" height="15" fill="rgb(215,41,42)" fg:x="4376" fg:w="1"/><text x="97.5161%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.04%)</title><rect x="97.2661%" y="197" width="0.0445%" height="15" fill="rgb(224,123,36)" fg:x="4376" fg:w="2"/><text x="97.5161%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="97.2883%" y="181" width="0.0222%" height="15" fill="rgb(240,125,3)" fg:x="4377" fg:w="1"/><text x="97.5383%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="97.2883%" y="165" width="0.0222%" height="15" fill="rgb(205,98,50)" fg:x="4377" fg:w="1"/><text x="97.5383%" y="175.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.04%)</title><rect x="97.3105%" y="197" width="0.0445%" height="15" fill="rgb(205,185,37)" fg:x="4378" fg:w="2"/><text x="97.5605%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (21 samples, 0.47%)</title><rect x="96.9104%" y="245" width="0.4668%" height="15" fill="rgb(238,207,15)" fg:x="4360" fg:w="21"/><text x="97.1604%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (21 samples, 0.47%)</title><rect x="96.9104%" y="229" width="0.4668%" height="15" fill="rgb(213,199,42)" fg:x="4360" fg:w="21"/><text x="97.1604%" y="239.50"></text></g><g><title>main::update_sptree::_{{closure}} (21 samples, 0.47%)</title><rect x="96.9104%" y="213" width="0.4668%" height="15" fill="rgb(235,201,11)" fg:x="4360" fg:w="21"/><text x="97.1604%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="97.3550%" y="197" width="0.0222%" height="15" fill="rgb(207,46,11)" fg:x="4380" fg:w="1"/><text x="97.6050%" y="207.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="97.3550%" y="181" width="0.0222%" height="15" fill="rgb(241,35,35)" fg:x="4380" fg:w="1"/><text x="97.6050%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="97.3772%" y="229" width="0.0222%" height="15" fill="rgb(243,32,47)" fg:x="4381" fg:w="1"/><text x="97.6272%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.04%)</title><rect x="97.4661%" y="213" width="0.0445%" height="15" fill="rgb(247,202,23)" fg:x="4385" fg:w="2"/><text x="97.7161%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.04%)</title><rect x="97.4661%" y="197" width="0.0445%" height="15" fill="rgb(219,102,11)" fg:x="4385" fg:w="2"/><text x="97.7161%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.04%)</title><rect x="97.4661%" y="181" width="0.0445%" height="15" fill="rgb(243,110,44)" fg:x="4385" fg:w="2"/><text x="97.7161%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (16 samples, 0.36%)</title><rect x="97.3772%" y="245" width="0.3556%" height="15" fill="rgb(222,74,54)" fg:x="4381" fg:w="16"/><text x="97.6272%" y="255.50"></text></g><g><title>main::update_sptree::_{{closure}} (15 samples, 0.33%)</title><rect x="97.3994%" y="229" width="0.3334%" height="15" fill="rgb(216,99,12)" fg:x="4382" fg:w="15"/><text x="97.6494%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (10 samples, 0.22%)</title><rect x="97.5106%" y="213" width="0.2223%" height="15" fill="rgb(226,22,26)" fg:x="4387" fg:w="10"/><text x="97.7606%" y="223.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (3 samples, 0.07%)</title><rect x="97.7328%" y="245" width="0.0667%" height="15" fill="rgb(217,163,10)" fg:x="4397" fg:w="3"/><text x="97.9828%" y="255.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="97.9773%" y="133" width="0.0222%" height="15" fill="rgb(213,25,53)" fg:x="4408" fg:w="1"/><text x="98.2273%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (14 samples, 0.31%)</title><rect x="97.9773%" y="181" width="0.3112%" height="15" fill="rgb(252,105,26)" fg:x="4408" fg:w="14"/><text x="98.2273%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (14 samples, 0.31%)</title><rect x="97.9773%" y="165" width="0.3112%" height="15" fill="rgb(220,39,43)" fg:x="4408" fg:w="14"/><text x="98.2273%" y="175.50"></text></g><g><title>alloc::alloc::realloc (14 samples, 0.31%)</title><rect x="97.9773%" y="149" width="0.3112%" height="15" fill="rgb(229,68,48)" fg:x="4408" fg:w="14"/><text x="98.2273%" y="159.50"></text></g><g><title>realloc (13 samples, 0.29%)</title><rect x="97.9996%" y="133" width="0.2890%" height="15" fill="rgb(252,8,32)" fg:x="4409" fg:w="13"/><text x="98.2496%" y="143.50"></text></g><g><title>[libc.so.6] (11 samples, 0.24%)</title><rect x="98.0440%" y="117" width="0.2445%" height="15" fill="rgb(223,20,43)" fg:x="4411" fg:w="11"/><text x="98.2940%" y="127.50"></text></g><g><title>[libc.so.6] (9 samples, 0.20%)</title><rect x="98.0885%" y="101" width="0.2000%" height="15" fill="rgb(229,81,49)" fg:x="4413" fg:w="9"/><text x="98.3385%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="98.2663%" y="85" width="0.0222%" height="15" fill="rgb(236,28,36)" fg:x="4421" fg:w="1"/><text x="98.5163%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.36%)</title><rect x="97.9551%" y="197" width="0.3556%" height="15" fill="rgb(249,185,26)" fg:x="4407" fg:w="16"/><text x="98.2051%" y="207.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="98.2885%" y="181" width="0.0222%" height="15" fill="rgb(249,174,33)" fg:x="4422" fg:w="1"/><text x="98.5385%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.38%)</title><rect x="97.9551%" y="229" width="0.3779%" height="15" fill="rgb(233,201,37)" fg:x="4407" fg:w="17"/><text x="98.2051%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.38%)</title><rect x="97.9551%" y="213" width="0.3779%" height="15" fill="rgb(221,78,26)" fg:x="4407" fg:w="17"/><text x="98.2051%" y="223.50"></text></g><g><title>core::cmp::max (1 samples, 0.02%)</title><rect x="98.3107%" y="197" width="0.0222%" height="15" fill="rgb(250,127,30)" fg:x="4423" fg:w="1"/><text x="98.5607%" y="207.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="98.3107%" y="181" width="0.0222%" height="15" fill="rgb(230,49,44)" fg:x="4423" fg:w="1"/><text x="98.5607%" y="191.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.02%)</title><rect x="98.3107%" y="165" width="0.0222%" height="15" fill="rgb(229,67,23)" fg:x="4423" fg:w="1"/><text x="98.5607%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25 samples, 0.56%)</title><rect x="97.7995%" y="245" width="0.5557%" height="15" fill="rgb(249,83,47)" fg:x="4400" fg:w="25"/><text x="98.0495%" y="255.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="98.3330%" y="229" width="0.0222%" height="15" fill="rgb(215,43,3)" fg:x="4424" fg:w="1"/><text x="98.5830%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="98.3552%" y="245" width="0.0222%" height="15" fill="rgb(238,154,13)" fg:x="4425" fg:w="1"/><text x="98.6052%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="98.4441%" y="197" width="0.0222%" height="15" fill="rgb(219,56,2)" fg:x="4429" fg:w="1"/><text x="98.6941%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.02%)</title><rect x="98.4441%" y="181" width="0.0222%" height="15" fill="rgb(233,0,4)" fg:x="4429" fg:w="1"/><text x="98.6941%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.27%)</title><rect x="98.3774%" y="213" width="0.2667%" height="15" fill="rgb(235,30,7)" fg:x="4426" fg:w="12"/><text x="98.6274%" y="223.50"></text></g><g><title>core::ptr::write (8 samples, 0.18%)</title><rect x="98.4663%" y="197" width="0.1778%" height="15" fill="rgb(250,79,13)" fg:x="4430" fg:w="8"/><text x="98.7163%" y="207.50"></text></g><g><title>alloc::vec::from_elem (37 samples, 0.82%)</title><rect x="98.3774%" y="245" width="0.8224%" height="15" fill="rgb(211,146,34)" fg:x="4426" fg:w="37"/><text x="98.6274%" y="255.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (37 samples, 0.82%)</title><rect x="98.3774%" y="229" width="0.8224%" height="15" fill="rgb(228,22,38)" fg:x="4426" fg:w="37"/><text x="98.6274%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (25 samples, 0.56%)</title><rect x="98.6441%" y="213" width="0.5557%" height="15" fill="rgb(235,168,5)" fg:x="4438" fg:w="25"/><text x="98.8941%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.56%)</title><rect x="98.6441%" y="197" width="0.5557%" height="15" fill="rgb(221,155,16)" fg:x="4438" fg:w="25"/><text x="98.8941%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.56%)</title><rect x="98.6441%" y="181" width="0.5557%" height="15" fill="rgb(215,215,53)" fg:x="4438" fg:w="25"/><text x="98.8941%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.56%)</title><rect x="98.6441%" y="165" width="0.5557%" height="15" fill="rgb(223,4,10)" fg:x="4438" fg:w="25"/><text x="98.8941%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.56%)</title><rect x="98.6441%" y="149" width="0.5557%" height="15" fill="rgb(234,103,6)" fg:x="4438" fg:w="25"/><text x="98.8941%" y="159.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.56%)</title><rect x="98.6441%" y="133" width="0.5557%" height="15" fill="rgb(227,97,0)" fg:x="4438" fg:w="25"/><text x="98.8941%" y="143.50"></text></g><g><title>malloc (25 samples, 0.56%)</title><rect x="98.6441%" y="117" width="0.5557%" height="15" fill="rgb(234,150,53)" fg:x="4438" fg:w="25"/><text x="98.8941%" y="127.50"></text></g><g><title>[libc.so.6] (12 samples, 0.27%)</title><rect x="98.9331%" y="101" width="0.2667%" height="15" fill="rgb(228,201,54)" fg:x="4451" fg:w="12"/><text x="99.1831%" y="111.50"></text></g><g><title>[libc.so.6] (6 samples, 0.13%)</title><rect x="99.0665%" y="85" width="0.1334%" height="15" fill="rgb(222,22,37)" fg:x="4457" fg:w="6"/><text x="99.3165%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="99.2220%" y="181" width="0.0222%" height="15" fill="rgb(237,53,32)" fg:x="4464" fg:w="1"/><text x="99.4720%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="99.2220%" y="165" width="0.0222%" height="15" fill="rgb(233,25,53)" fg:x="4464" fg:w="1"/><text x="99.4720%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="99.2220%" y="149" width="0.0222%" height="15" fill="rgb(210,40,34)" fg:x="4464" fg:w="1"/><text x="99.4720%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="99.2220%" y="133" width="0.0222%" height="15" fill="rgb(241,220,44)" fg:x="4464" fg:w="1"/><text x="99.4720%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="99.2220%" y="117" width="0.0222%" height="15" fill="rgb(235,28,35)" fg:x="4464" fg:w="1"/><text x="99.4720%" y="127.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.02%)</title><rect x="99.2220%" y="101" width="0.0222%" height="15" fill="rgb(210,56,17)" fg:x="4464" fg:w="1"/><text x="99.4720%" y="111.50"></text></g><g><title>main::update_sptree::_{{closure}} (1 samples, 0.02%)</title><rect x="99.2220%" y="85" width="0.0222%" height="15" fill="rgb(224,130,29)" fg:x="4464" fg:w="1"/><text x="99.4720%" y="95.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="99.2443%" y="69" width="0.0222%" height="15" fill="rgb(235,212,8)" fg:x="4465" fg:w="1"/><text x="99.4943%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.11%)</title><rect x="99.1998%" y="245" width="0.1111%" height="15" fill="rgb(223,33,50)" fg:x="4463" fg:w="5"/><text x="99.4498%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.11%)</title><rect x="99.1998%" y="229" width="0.1111%" height="15" fill="rgb(219,149,13)" fg:x="4463" fg:w="5"/><text x="99.4498%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.11%)</title><rect x="99.1998%" y="213" width="0.1111%" height="15" fill="rgb(250,156,29)" fg:x="4463" fg:w="5"/><text x="99.4498%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.11%)</title><rect x="99.1998%" y="197" width="0.1111%" height="15" fill="rgb(216,193,19)" fg:x="4463" fg:w="5"/><text x="99.4498%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.07%)</title><rect x="99.2443%" y="181" width="0.0667%" height="15" fill="rgb(216,135,14)" fg:x="4465" fg:w="3"/><text x="99.4943%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.07%)</title><rect x="99.2443%" y="165" width="0.0667%" height="15" fill="rgb(241,47,5)" fg:x="4465" fg:w="3"/><text x="99.4943%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.07%)</title><rect x="99.2443%" y="149" width="0.0667%" height="15" fill="rgb(233,42,35)" fg:x="4465" fg:w="3"/><text x="99.4943%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.07%)</title><rect x="99.2443%" y="133" width="0.0667%" height="15" fill="rgb(231,13,6)" fg:x="4465" fg:w="3"/><text x="99.4943%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.07%)</title><rect x="99.2443%" y="117" width="0.0667%" height="15" fill="rgb(207,181,40)" fg:x="4465" fg:w="3"/><text x="99.4943%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.07%)</title><rect x="99.2443%" y="101" width="0.0667%" height="15" fill="rgb(254,173,49)" fg:x="4465" fg:w="3"/><text x="99.4943%" y="111.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.07%)</title><rect x="99.2443%" y="85" width="0.0667%" height="15" fill="rgb(221,1,38)" fg:x="4465" fg:w="3"/><text x="99.4943%" y="95.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="99.2665%" y="69" width="0.0445%" height="15" fill="rgb(206,124,46)" fg:x="4466" fg:w="2"/><text x="99.5165%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="99.3110%" y="229" width="0.0222%" height="15" fill="rgb(249,21,11)" fg:x="4468" fg:w="1"/><text x="99.5610%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="99.3110%" y="213" width="0.0222%" height="15" fill="rgb(222,201,40)" fg:x="4468" fg:w="1"/><text x="99.5610%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="99.3110%" y="197" width="0.0222%" height="15" fill="rgb(235,61,29)" fg:x="4468" fg:w="1"/><text x="99.5610%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1 samples, 0.02%)</title><rect x="99.3110%" y="181" width="0.0222%" height="15" fill="rgb(219,207,3)" fg:x="4468" fg:w="1"/><text x="99.5610%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="99.3110%" y="165" width="0.0222%" height="15" fill="rgb(222,56,46)" fg:x="4468" fg:w="1"/><text x="99.5610%" y="175.50"></text></g><g><title>main::update_sptree::_{{closure}} (1 samples, 0.02%)</title><rect x="99.3110%" y="149" width="0.0222%" height="15" fill="rgb(239,76,54)" fg:x="4468" fg:w="1"/><text x="99.5610%" y="159.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="99.3332%" y="213" width="0.0445%" height="15" fill="rgb(231,124,27)" fg:x="4469" fg:w="2"/><text x="99.5832%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="99.3554%" y="197" width="0.0222%" height="15" fill="rgb(249,195,6)" fg:x="4470" fg:w="1"/><text x="99.6054%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.04%)</title><rect x="99.3776%" y="213" width="0.0445%" height="15" fill="rgb(237,174,47)" fg:x="4471" fg:w="2"/><text x="99.6276%" y="223.50"></text></g><g><title>main::update_sptree::_{{closure}} (2 samples, 0.04%)</title><rect x="99.3776%" y="197" width="0.0445%" height="15" fill="rgb(206,201,31)" fg:x="4471" fg:w="2"/><text x="99.6276%" y="207.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="99.4221%" y="85" width="0.0222%" height="15" fill="rgb(231,57,52)" fg:x="4473" fg:w="1"/><text x="99.6721%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 0.20%)</title><rect x="99.3110%" y="245" width="0.2000%" height="15" fill="rgb(248,177,22)" fg:x="4468" fg:w="9"/><text x="99.5610%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.18%)</title><rect x="99.3332%" y="229" width="0.1778%" height="15" fill="rgb(215,211,37)" fg:x="4469" fg:w="8"/><text x="99.5832%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (4 samples, 0.09%)</title><rect x="99.4221%" y="213" width="0.0889%" height="15" fill="rgb(241,128,51)" fg:x="4473" fg:w="4"/><text x="99.6721%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.09%)</title><rect x="99.4221%" y="197" width="0.0889%" height="15" fill="rgb(227,165,31)" fg:x="4473" fg:w="4"/><text x="99.6721%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (4 samples, 0.09%)</title><rect x="99.4221%" y="181" width="0.0889%" height="15" fill="rgb(228,167,24)" fg:x="4473" fg:w="4"/><text x="99.6721%" y="191.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.09%)</title><rect x="99.4221%" y="165" width="0.0889%" height="15" fill="rgb(228,143,12)" fg:x="4473" fg:w="4"/><text x="99.6721%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (4 samples, 0.09%)</title><rect x="99.4221%" y="149" width="0.0889%" height="15" fill="rgb(249,149,8)" fg:x="4473" fg:w="4"/><text x="99.6721%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.09%)</title><rect x="99.4221%" y="133" width="0.0889%" height="15" fill="rgb(243,35,44)" fg:x="4473" fg:w="4"/><text x="99.6721%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.09%)</title><rect x="99.4221%" y="117" width="0.0889%" height="15" fill="rgb(246,89,9)" fg:x="4473" fg:w="4"/><text x="99.6721%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.09%)</title><rect x="99.4221%" y="101" width="0.0889%" height="15" fill="rgb(233,213,13)" fg:x="4473" fg:w="4"/><text x="99.6721%" y="111.50"></text></g><g><title>cfree (3 samples, 0.07%)</title><rect x="99.4443%" y="85" width="0.0667%" height="15" fill="rgb(233,141,41)" fg:x="4474" fg:w="3"/><text x="99.6943%" y="95.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="99.4665%" y="69" width="0.0445%" height="15" fill="rgb(239,167,4)" fg:x="4475" fg:w="2"/><text x="99.7165%" y="79.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (4 samples, 0.09%)</title><rect x="99.5110%" y="245" width="0.0889%" height="15" fill="rgb(209,217,16)" fg:x="4477" fg:w="4"/><text x="99.7610%" y="255.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="99.5999%" y="165" width="0.0222%" height="15" fill="rgb(219,88,35)" fg:x="4481" fg:w="1"/><text x="99.8499%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (7 samples, 0.16%)</title><rect x="99.5999%" y="245" width="0.1556%" height="15" fill="rgb(220,193,23)" fg:x="4481" fg:w="7"/><text x="99.8499%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (7 samples, 0.16%)</title><rect x="99.5999%" y="229" width="0.1556%" height="15" fill="rgb(230,90,52)" fg:x="4481" fg:w="7"/><text x="99.8499%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.16%)</title><rect x="99.5999%" y="213" width="0.1556%" height="15" fill="rgb(252,106,19)" fg:x="4481" fg:w="7"/><text x="99.8499%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.16%)</title><rect x="99.5999%" y="197" width="0.1556%" height="15" fill="rgb(206,74,20)" fg:x="4481" fg:w="7"/><text x="99.8499%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.16%)</title><rect x="99.5999%" y="181" width="0.1556%" height="15" fill="rgb(230,138,44)" fg:x="4481" fg:w="7"/><text x="99.8499%" y="191.50"></text></g><g><title>cfree (6 samples, 0.13%)</title><rect x="99.6221%" y="165" width="0.1334%" height="15" fill="rgb(235,182,43)" fg:x="4482" fg:w="6"/><text x="99.8721%" y="175.50"></text></g><g><title>[libc.so.6] (5 samples, 0.11%)</title><rect x="99.6444%" y="149" width="0.1111%" height="15" fill="rgb(242,16,51)" fg:x="4483" fg:w="5"/><text x="99.8944%" y="159.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="99.6888%" y="133" width="0.0667%" height="15" fill="rgb(248,9,4)" fg:x="4485" fg:w="3"/><text x="99.9388%" y="143.50"></text></g><g><title>main::min_cost (4,470 samples, 99.36%)</title><rect x="0.4668%" y="277" width="99.3554%" height="15" fill="rgb(210,31,22)" fg:x="21" fg:w="4470"/><text x="0.7168%" y="287.50">main::min_cost</text></g><g><title>main::update_sptree (601 samples, 13.36%)</title><rect x="86.4637%" y="261" width="13.3585%" height="15" fill="rgb(239,54,39)" fg:x="3890" fg:w="601"/><text x="86.7137%" y="271.50">main::update_sptree</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3 samples, 0.07%)</title><rect x="99.7555%" y="245" width="0.0667%" height="15" fill="rgb(230,99,41)" fg:x="4488" fg:w="3"/><text x="100.0055%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.04%)</title><rect x="99.8222%" y="277" width="0.0445%" height="15" fill="rgb(253,106,12)" fg:x="4491" fg:w="2"/><text x="100.0722%" y="287.50"></text></g><g><title>petgraph::graph_impl::index_twice (1 samples, 0.02%)</title><rect x="99.8444%" y="261" width="0.0222%" height="15" fill="rgb(213,46,41)" fg:x="4492" fg:w="1"/><text x="100.0944%" y="271.50"></text></g><g><title>core::cmp::max (1 samples, 0.02%)</title><rect x="99.8444%" y="245" width="0.0222%" height="15" fill="rgb(215,133,35)" fg:x="4492" fg:w="1"/><text x="100.0944%" y="255.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="99.8444%" y="229" width="0.0222%" height="15" fill="rgb(213,28,5)" fg:x="4492" fg:w="1"/><text x="100.0944%" y="239.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.02%)</title><rect x="99.8444%" y="213" width="0.0222%" height="15" fill="rgb(215,77,49)" fg:x="4492" fg:w="1"/><text x="100.0944%" y="223.50"></text></g><g><title>rand::rng::Rng::gen (1 samples, 0.02%)</title><rect x="99.8666%" y="277" width="0.0222%" height="15" fill="rgb(248,100,22)" fg:x="4493" fg:w="1"/><text x="100.1166%" y="287.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.02%)</title><rect x="99.8666%" y="261" width="0.0222%" height="15" fill="rgb(208,67,9)" fg:x="4493" fg:w="1"/><text x="100.1166%" y="271.50"></text></g><g><title>_start (4,478 samples, 99.53%)</title><rect x="0.3779%" y="421" width="99.5332%" height="15" fill="rgb(219,133,21)" fg:x="17" fg:w="4478"/><text x="0.6279%" y="431.50">_start</text></g><g><title>__libc_start_main (4,478 samples, 99.53%)</title><rect x="0.3779%" y="405" width="99.5332%" height="15" fill="rgb(246,46,29)" fg:x="17" fg:w="4478"/><text x="0.6279%" y="415.50">__libc_start_main</text></g><g><title>[libc.so.6] (4,478 samples, 99.53%)</title><rect x="0.3779%" y="389" width="99.5332%" height="15" fill="rgb(246,185,52)" fg:x="17" fg:w="4478"/><text x="0.6279%" y="399.50">[libc.so.6]</text></g><g><title>main (4,478 samples, 99.53%)</title><rect x="0.3779%" y="373" width="99.5332%" height="15" fill="rgb(252,136,11)" fg:x="17" fg:w="4478"/><text x="0.6279%" y="383.50">main</text></g><g><title>std::rt::lang_start_internal (4,478 samples, 99.53%)</title><rect x="0.3779%" y="357" width="99.5332%" height="15" fill="rgb(219,138,53)" fg:x="17" fg:w="4478"/><text x="0.6279%" y="367.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (4,478 samples, 99.53%)</title><rect x="0.3779%" y="341" width="99.5332%" height="15" fill="rgb(211,51,23)" fg:x="17" fg:w="4478"/><text x="0.6279%" y="351.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,478 samples, 99.53%)</title><rect x="0.3779%" y="325" width="99.5332%" height="15" fill="rgb(247,221,28)" fg:x="17" fg:w="4478"/><text x="0.6279%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (4,478 samples, 99.53%)</title><rect x="0.3779%" y="309" width="99.5332%" height="15" fill="rgb(251,222,45)" fg:x="17" fg:w="4478"/><text x="0.6279%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (4,478 samples, 99.53%)</title><rect x="0.3779%" y="293" width="99.5332%" height="15" fill="rgb(217,162,53)" fg:x="17" fg:w="4478"/><text x="0.6279%" y="303.50">main::main</text></g><g><title>std::io::stdio::_print (1 samples, 0.02%)</title><rect x="99.8889%" y="277" width="0.0222%" height="15" fill="rgb(229,93,14)" fg:x="4494" fg:w="1"/><text x="100.1389%" y="287.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.02%)</title><rect x="99.8889%" y="261" width="0.0222%" height="15" fill="rgb(209,67,49)" fg:x="4494" fg:w="1"/><text x="100.1389%" y="271.50"></text></g><g><title>core::fmt::write (1 samples, 0.02%)</title><rect x="99.8889%" y="245" width="0.0222%" height="15" fill="rgb(213,87,29)" fg:x="4494" fg:w="1"/><text x="100.1389%" y="255.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (1 samples, 0.02%)</title><rect x="99.8889%" y="229" width="0.0222%" height="15" fill="rgb(205,151,52)" fg:x="4494" fg:w="1"/><text x="100.1389%" y="239.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="99.9111%" y="421" width="0.0222%" height="15" fill="rgb(253,215,39)" fg:x="4495" fg:w="1"/><text x="100.1611%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="99.9333%" y="389" width="0.0222%" height="15" fill="rgb(221,220,41)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="99.9333%" y="373" width="0.0222%" height="15" fill="rgb(218,133,21)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9333%" y="357" width="0.0222%" height="15" fill="rgb(221,193,43)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9333%" y="341" width="0.0222%" height="15" fill="rgb(240,128,52)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9333%" y="325" width="0.0222%" height="15" fill="rgb(253,114,12)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9333%" y="309" width="0.0222%" height="15" fill="rgb(215,223,47)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9333%" y="293" width="0.0222%" height="15" fill="rgb(248,225,23)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9333%" y="277" width="0.0222%" height="15" fill="rgb(250,108,0)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="99.9333%" y="261" width="0.0222%" height="15" fill="rgb(228,208,7)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="99.9333%" y="245" width="0.0222%" height="15" fill="rgb(244,45,10)" fg:x="4496" fg:w="1"/><text x="100.1833%" y="255.50"></text></g><g><title>main::min_cost (2 samples, 0.04%)</title><rect x="99.9333%" y="421" width="0.0445%" height="15" fill="rgb(207,125,25)" fg:x="4496" fg:w="2"/><text x="100.1833%" y="431.50"></text></g><g><title>main::update_sptree (2 samples, 0.04%)</title><rect x="99.9333%" y="405" width="0.0445%" height="15" fill="rgb(210,195,18)" fg:x="4496" fg:w="2"/><text x="100.1833%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9555%" y="389" width="0.0222%" height="15" fill="rgb(249,80,12)" fg:x="4497" fg:w="1"/><text x="100.2055%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9555%" y="373" width="0.0222%" height="15" fill="rgb(221,65,9)" fg:x="4497" fg:w="1"/><text x="100.2055%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9555%" y="357" width="0.0222%" height="15" fill="rgb(235,49,36)" fg:x="4497" fg:w="1"/><text x="100.2055%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="99.9555%" y="341" width="0.0222%" height="15" fill="rgb(225,32,20)" fg:x="4497" fg:w="1"/><text x="100.2055%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="99.9555%" y="325" width="0.0222%" height="15" fill="rgb(215,141,46)" fg:x="4497" fg:w="1"/><text x="100.2055%" y="335.50"></text></g><g><title>all (4,499 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="4499"/><text x="0.2500%" y="463.50"></text></g><g><title>main (4,499 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="4499"/><text x="0.2500%" y="447.50">main</text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.9778%" y="421" width="0.0222%" height="15" fill="rgb(234,217,39)" fg:x="4498" fg:w="1"/><text x="100.2278%" y="431.50"></text></g></svg></svg>