<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="13218"><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0378%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50"></text></g><g><title>[[heap]] (6 samples, 0.05%)</title><rect x="0.0000%" y="469" width="0.0454%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50"></text></g><g><title>[[stack]] (2 samples, 0.02%)</title><rect x="0.0454%" y="469" width="0.0151%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="2"/><text x="0.2954%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.1059%" y="453" width="0.0227%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="3"/><text x="0.3559%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.1059%" y="437" width="0.0227%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="3"/><text x="0.3559%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.1059%" y="421" width="0.0227%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="3"/><text x="0.3559%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 0.08%)</title><rect x="0.0605%" y="469" width="0.0757%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="10"/><text x="0.3105%" y="479.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="0.1362%" y="469" width="0.0151%" height="15" fill="rgb(228,23,34)" fg:x="18" fg:w="2"/><text x="0.3862%" y="479.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="0.1513%" y="453" width="0.0227%" height="15" fill="rgb(218,30,26)" fg:x="20" fg:w="3"/><text x="0.4013%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="0.1740%" y="453" width="0.0151%" height="15" fill="rgb(220,122,19)" fg:x="23" fg:w="2"/><text x="0.4240%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="0.1740%" y="437" width="0.0151%" height="15" fill="rgb(250,228,42)" fg:x="23" fg:w="2"/><text x="0.4240%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.02%)</title><rect x="0.1740%" y="421" width="0.0151%" height="15" fill="rgb(240,193,28)" fg:x="23" fg:w="2"/><text x="0.4240%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.02%)</title><rect x="0.1740%" y="405" width="0.0151%" height="15" fill="rgb(216,20,37)" fg:x="23" fg:w="2"/><text x="0.4240%" y="415.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="0.1967%" y="453" width="0.0151%" height="15" fill="rgb(206,188,39)" fg:x="26" fg:w="2"/><text x="0.4467%" y="463.50"></text></g><g><title>[unknown] (9 samples, 0.07%)</title><rect x="0.1513%" y="469" width="0.0681%" height="15" fill="rgb(217,207,13)" fg:x="20" fg:w="9"/><text x="0.4013%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (8 samples, 0.06%)</title><rect x="0.2724%" y="309" width="0.0605%" height="15" fill="rgb(231,73,38)" fg:x="36" fg:w="8"/><text x="0.5224%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (8 samples, 0.06%)</title><rect x="0.2724%" y="293" width="0.0605%" height="15" fill="rgb(225,20,46)" fg:x="36" fg:w="8"/><text x="0.5224%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.06%)</title><rect x="0.2724%" y="277" width="0.0605%" height="15" fill="rgb(210,31,41)" fg:x="36" fg:w="8"/><text x="0.5224%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.06%)</title><rect x="0.2724%" y="261" width="0.0605%" height="15" fill="rgb(221,200,47)" fg:x="36" fg:w="8"/><text x="0.5224%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.06%)</title><rect x="0.2724%" y="245" width="0.0605%" height="15" fill="rgb(226,26,5)" fg:x="36" fg:w="8"/><text x="0.5224%" y="255.50"></text></g><g><title>cfree (7 samples, 0.05%)</title><rect x="0.2799%" y="229" width="0.0530%" height="15" fill="rgb(249,33,26)" fg:x="37" fg:w="7"/><text x="0.5299%" y="239.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="0.3102%" y="213" width="0.0227%" height="15" fill="rgb(235,183,28)" fg:x="41" fg:w="3"/><text x="0.5602%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="0.3177%" y="197" width="0.0151%" height="15" fill="rgb(221,5,38)" fg:x="42" fg:w="2"/><text x="0.5677%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (14 samples, 0.11%)</title><rect x="0.4237%" y="293" width="0.1059%" height="15" fill="rgb(247,18,42)" fg:x="56" fg:w="14"/><text x="0.6737%" y="303.50"></text></g><g><title>main::get_reduced_cost_edgeindex (2 samples, 0.02%)</title><rect x="0.5296%" y="293" width="0.0151%" height="15" fill="rgb(241,131,45)" fg:x="70" fg:w="2"/><text x="0.7796%" y="303.50"></text></g><g><title>main::__update_node_potentials (29 samples, 0.22%)</title><rect x="0.3329%" y="309" width="0.2194%" height="15" fill="rgb(249,31,29)" fg:x="44" fg:w="29"/><text x="0.5829%" y="319.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1,646 samples, 12.45%)</title><rect x="20.2754%" y="293" width="12.4527%" height="15" fill="rgb(225,111,53)" fg:x="2680" fg:w="1646"/><text x="20.5254%" y="303.50">&lt;i32 as core::ops::..</text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (572 samples, 4.33%)</title><rect x="32.7281%" y="293" width="4.3274%" height="15" fill="rgb(238,160,17)" fg:x="4326" fg:w="572"/><text x="32.9781%" y="303.50">&lt;petg..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (572 samples, 4.33%)</title><rect x="32.7281%" y="277" width="4.3274%" height="15" fill="rgb(214,148,48)" fg:x="4326" fg:w="572"/><text x="32.9781%" y="287.50">&lt;allo..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (572 samples, 4.33%)</title><rect x="32.7281%" y="261" width="4.3274%" height="15" fill="rgb(232,36,49)" fg:x="4326" fg:w="572"/><text x="32.9781%" y="271.50">core:..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (572 samples, 4.33%)</title><rect x="32.7281%" y="245" width="4.3274%" height="15" fill="rgb(209,103,24)" fg:x="4326" fg:w="572"/><text x="32.9781%" y="255.50">&lt;usiz..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (499 samples, 3.78%)</title><rect x="37.0555%" y="293" width="3.7752%" height="15" fill="rgb(229,88,8)" fg:x="4898" fg:w="499"/><text x="37.3055%" y="303.50">core..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (499 samples, 3.78%)</title><rect x="37.0555%" y="277" width="3.7752%" height="15" fill="rgb(213,181,19)" fg:x="4898" fg:w="499"/><text x="37.3055%" y="287.50">&lt;cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (499 samples, 3.78%)</title><rect x="37.0555%" y="261" width="3.7752%" height="15" fill="rgb(254,191,54)" fg:x="4898" fg:w="499"/><text x="37.3055%" y="271.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,681 samples, 12.72%)</title><rect x="40.8307%" y="277" width="12.7175%" height="15" fill="rgb(241,83,37)" fg:x="5397" fg:w="1681"/><text x="41.0807%" y="287.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,681 samples, 12.72%)</title><rect x="40.8307%" y="261" width="12.7175%" height="15" fill="rgb(233,36,39)" fg:x="5397" fg:w="1681"/><text x="41.0807%" y="271.50">core::slice::index:..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,681 samples, 12.72%)</title><rect x="40.8307%" y="245" width="12.7175%" height="15" fill="rgb(226,3,54)" fg:x="5397" fg:w="1681"/><text x="41.0807%" y="255.50">&lt;usize as core::sli..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (1,726 samples, 13.06%)</title><rect x="53.5482%" y="277" width="13.0580%" height="15" fill="rgb(245,192,40)" fg:x="7078" fg:w="1726"/><text x="53.7982%" y="287.50">&lt;i32 as core::ops::a..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1,136 samples, 8.59%)</title><rect x="66.6061%" y="277" width="8.5943%" height="15" fill="rgb(238,167,29)" fg:x="8804" fg:w="1136"/><text x="66.8561%" y="287.50">&lt;i32 as core..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (2,339 samples, 17.70%)</title><rect x="75.2005%" y="277" width="17.6956%" height="15" fill="rgb(232,182,51)" fg:x="9940" fg:w="2339"/><text x="75.4505%" y="287.50">petgraph::graph_impl::Edge&lt;..</text></g><g><title>main::_find_best_arc (12,389 samples, 93.73%)</title><rect x="0.5523%" y="309" width="93.7282%" height="15" fill="rgb(231,60,39)" fg:x="73" fg:w="12389"/><text x="0.8023%" y="319.50">main::_find_best_arc</text></g><g><title>main::get_reduced_cost_edgeindex (7,065 samples, 53.45%)</title><rect x="40.8307%" y="293" width="53.4498%" height="15" fill="rgb(208,69,12)" fg:x="5397" fg:w="7065"/><text x="41.0807%" y="303.50">main::get_reduced_cost_edgeindex</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (183 samples, 1.38%)</title><rect x="92.8961%" y="277" width="1.3845%" height="15" fill="rgb(235,93,37)" fg:x="12279" fg:w="183"/><text x="93.1461%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="94.3108%" y="181" width="0.0151%" height="15" fill="rgb(213,116,39)" fg:x="12466" fg:w="2"/><text x="94.5608%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (10 samples, 0.08%)</title><rect x="94.3108%" y="261" width="0.0757%" height="15" fill="rgb(222,207,29)" fg:x="12466" fg:w="10"/><text x="94.5608%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.08%)</title><rect x="94.3108%" y="245" width="0.0757%" height="15" fill="rgb(206,96,30)" fg:x="12466" fg:w="10"/><text x="94.5608%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (10 samples, 0.08%)</title><rect x="94.3108%" y="229" width="0.0757%" height="15" fill="rgb(218,138,4)" fg:x="12466" fg:w="10"/><text x="94.5608%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.08%)</title><rect x="94.3108%" y="213" width="0.0757%" height="15" fill="rgb(250,191,14)" fg:x="12466" fg:w="10"/><text x="94.5608%" y="223.50"></text></g><g><title>alloc::alloc::alloc_zeroed (10 samples, 0.08%)</title><rect x="94.3108%" y="197" width="0.0757%" height="15" fill="rgb(239,60,40)" fg:x="12466" fg:w="10"/><text x="94.5608%" y="207.50"></text></g><g><title>__libc_calloc (8 samples, 0.06%)</title><rect x="94.3259%" y="181" width="0.0605%" height="15" fill="rgb(206,27,48)" fg:x="12468" fg:w="8"/><text x="94.5759%" y="191.50"></text></g><g><title>[libc.so.6] (8 samples, 0.06%)</title><rect x="94.3259%" y="165" width="0.0605%" height="15" fill="rgb(225,35,8)" fg:x="12468" fg:w="8"/><text x="94.5759%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (5 samples, 0.04%)</title><rect x="94.3864%" y="261" width="0.0378%" height="15" fill="rgb(250,213,24)" fg:x="12476" fg:w="5"/><text x="94.6364%" y="271.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="94.4016%" y="245" width="0.0227%" height="15" fill="rgb(247,123,22)" fg:x="12478" fg:w="3"/><text x="94.6516%" y="255.50"></text></g><g><title>alloc::vec::from_elem (20 samples, 0.15%)</title><rect x="94.3108%" y="293" width="0.1513%" height="15" fill="rgb(231,138,38)" fg:x="12466" fg:w="20"/><text x="94.5608%" y="303.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (20 samples, 0.15%)</title><rect x="94.3108%" y="277" width="0.1513%" height="15" fill="rgb(231,145,46)" fg:x="12466" fg:w="20"/><text x="94.5608%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="94.4243%" y="261" width="0.0378%" height="15" fill="rgb(251,118,11)" fg:x="12481" fg:w="5"/><text x="94.6743%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="94.4243%" y="245" width="0.0378%" height="15" fill="rgb(217,147,25)" fg:x="12481" fg:w="5"/><text x="94.6743%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.04%)</title><rect x="94.4243%" y="229" width="0.0378%" height="15" fill="rgb(247,81,37)" fg:x="12481" fg:w="5"/><text x="94.6743%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="94.4243%" y="213" width="0.0378%" height="15" fill="rgb(209,12,38)" fg:x="12481" fg:w="5"/><text x="94.6743%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="94.4243%" y="197" width="0.0378%" height="15" fill="rgb(227,1,9)" fg:x="12481" fg:w="5"/><text x="94.6743%" y="207.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="94.4243%" y="181" width="0.0378%" height="15" fill="rgb(248,47,43)" fg:x="12481" fg:w="5"/><text x="94.6743%" y="191.50"></text></g><g><title>malloc (5 samples, 0.04%)</title><rect x="94.4243%" y="165" width="0.0378%" height="15" fill="rgb(221,10,30)" fg:x="12481" fg:w="5"/><text x="94.6743%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="94.4394%" y="149" width="0.0227%" height="15" fill="rgb(210,229,1)" fg:x="12483" fg:w="3"/><text x="94.6894%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="94.6512%" y="197" width="0.0227%" height="15" fill="rgb(222,148,37)" fg:x="12511" fg:w="3"/><text x="94.9012%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="94.6512%" y="181" width="0.0227%" height="15" fill="rgb(234,67,33)" fg:x="12511" fg:w="3"/><text x="94.9012%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="94.6512%" y="165" width="0.0227%" height="15" fill="rgb(247,98,35)" fg:x="12511" fg:w="3"/><text x="94.9012%" y="175.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (2 samples, 0.02%)</title><rect x="94.6739%" y="197" width="0.0151%" height="15" fill="rgb(247,138,52)" fg:x="12514" fg:w="2"/><text x="94.9239%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (6 samples, 0.05%)</title><rect x="94.6891%" y="197" width="0.0454%" height="15" fill="rgb(213,79,30)" fg:x="12516" fg:w="6"/><text x="94.9391%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.05%)</title><rect x="94.6891%" y="181" width="0.0454%" height="15" fill="rgb(246,177,23)" fg:x="12516" fg:w="6"/><text x="94.9391%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.05%)</title><rect x="94.6891%" y="165" width="0.0454%" height="15" fill="rgb(230,62,27)" fg:x="12516" fg:w="6"/><text x="94.9391%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.05%)</title><rect x="94.6891%" y="149" width="0.0454%" height="15" fill="rgb(216,154,8)" fg:x="12516" fg:w="6"/><text x="94.9391%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (37 samples, 0.28%)</title><rect x="94.4621%" y="261" width="0.2799%" height="15" fill="rgb(244,35,45)" fg:x="12486" fg:w="37"/><text x="94.7121%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (31 samples, 0.23%)</title><rect x="94.5075%" y="245" width="0.2345%" height="15" fill="rgb(251,115,12)" fg:x="12492" fg:w="31"/><text x="94.7575%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (31 samples, 0.23%)</title><rect x="94.5075%" y="229" width="0.2345%" height="15" fill="rgb(240,54,50)" fg:x="12492" fg:w="31"/><text x="94.7575%" y="239.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (31 samples, 0.23%)</title><rect x="94.5075%" y="213" width="0.2345%" height="15" fill="rgb(233,84,52)" fg:x="12492" fg:w="31"/><text x="94.7575%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (14 samples, 0.11%)</title><rect x="94.8404%" y="197" width="0.1059%" height="15" fill="rgb(207,117,47)" fg:x="12536" fg:w="14"/><text x="95.0904%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (14 samples, 0.11%)</title><rect x="94.8404%" y="181" width="0.1059%" height="15" fill="rgb(249,43,39)" fg:x="12536" fg:w="14"/><text x="95.0904%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (14 samples, 0.11%)</title><rect x="94.8404%" y="165" width="0.1059%" height="15" fill="rgb(209,38,44)" fg:x="12536" fg:w="14"/><text x="95.0904%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.03%)</title><rect x="94.9463%" y="181" width="0.0303%" height="15" fill="rgb(236,212,23)" fg:x="12550" fg:w="4"/><text x="95.1963%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.03%)</title><rect x="94.9463%" y="165" width="0.0303%" height="15" fill="rgb(242,79,21)" fg:x="12550" fg:w="4"/><text x="95.1963%" y="175.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (74 samples, 0.56%)</title><rect x="95.9676%" y="165" width="0.5598%" height="15" fill="rgb(211,96,35)" fg:x="12685" fg:w="74"/><text x="96.2176%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (74 samples, 0.56%)</title><rect x="95.9676%" y="149" width="0.5598%" height="15" fill="rgb(253,215,40)" fg:x="12685" fg:w="74"/><text x="96.2176%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (233 samples, 1.76%)</title><rect x="94.7798%" y="245" width="1.7627%" height="15" fill="rgb(211,81,21)" fg:x="12528" fg:w="233"/><text x="95.0298%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (230 samples, 1.74%)</title><rect x="94.8025%" y="229" width="1.7401%" height="15" fill="rgb(208,190,38)" fg:x="12531" fg:w="230"/><text x="95.0525%" y="239.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (230 samples, 1.74%)</title><rect x="94.8025%" y="213" width="1.7401%" height="15" fill="rgb(235,213,38)" fg:x="12531" fg:w="230"/><text x="95.0525%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (211 samples, 1.60%)</title><rect x="94.9463%" y="197" width="1.5963%" height="15" fill="rgb(237,122,38)" fg:x="12550" fg:w="211"/><text x="95.1963%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (207 samples, 1.57%)</title><rect x="94.9765%" y="181" width="1.5660%" height="15" fill="rgb(244,218,35)" fg:x="12554" fg:w="207"/><text x="95.2265%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.02%)</title><rect x="96.5275%" y="165" width="0.0151%" height="15" fill="rgb(240,68,47)" fg:x="12759" fg:w="2"/><text x="96.7775%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.02%)</title><rect x="96.5275%" y="149" width="0.0151%" height="15" fill="rgb(210,16,53)" fg:x="12759" fg:w="2"/><text x="96.7775%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (279 samples, 2.11%)</title><rect x="94.4621%" y="293" width="2.1108%" height="15" fill="rgb(235,124,12)" fg:x="12486" fg:w="279"/><text x="94.7121%" y="303.50">c..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (279 samples, 2.11%)</title><rect x="94.4621%" y="277" width="2.1108%" height="15" fill="rgb(224,169,11)" fg:x="12486" fg:w="279"/><text x="94.7121%" y="287.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (242 samples, 1.83%)</title><rect x="94.7420%" y="261" width="1.8308%" height="15" fill="rgb(250,166,2)" fg:x="12523" fg:w="242"/><text x="94.9920%" y="271.50">c..</text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="96.5426%" y="245" width="0.0303%" height="15" fill="rgb(242,216,29)" fg:x="12761" fg:w="4"/><text x="96.7926%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="96.5426%" y="229" width="0.0303%" height="15" fill="rgb(230,116,27)" fg:x="12761" fg:w="4"/><text x="96.7926%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.02%)</title><rect x="96.5502%" y="213" width="0.0227%" height="15" fill="rgb(228,99,48)" fg:x="12762" fg:w="3"/><text x="96.8002%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (3 samples, 0.02%)</title><rect x="96.5502%" y="197" width="0.0227%" height="15" fill="rgb(253,11,6)" fg:x="12762" fg:w="3"/><text x="96.8002%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (11 samples, 0.08%)</title><rect x="96.5804%" y="229" width="0.0832%" height="15" fill="rgb(247,143,39)" fg:x="12766" fg:w="11"/><text x="96.8304%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (11 samples, 0.08%)</title><rect x="96.5804%" y="213" width="0.0832%" height="15" fill="rgb(236,97,10)" fg:x="12766" fg:w="11"/><text x="96.8304%" y="223.50"></text></g><g><title>core::cmp::min_by (11 samples, 0.08%)</title><rect x="96.5804%" y="197" width="0.0832%" height="15" fill="rgb(233,208,19)" fg:x="12766" fg:w="11"/><text x="96.8304%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 0.02%)</title><rect x="96.6409%" y="181" width="0.0227%" height="15" fill="rgb(216,164,2)" fg:x="12774" fg:w="3"/><text x="96.8909%" y="191.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (3 samples, 0.02%)</title><rect x="96.6409%" y="165" width="0.0227%" height="15" fill="rgb(220,129,5)" fg:x="12774" fg:w="3"/><text x="96.8909%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (13 samples, 0.10%)</title><rect x="96.5729%" y="293" width="0.0984%" height="15" fill="rgb(242,17,10)" fg:x="12765" fg:w="13"/><text x="96.8229%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (13 samples, 0.10%)</title><rect x="96.5729%" y="277" width="0.0984%" height="15" fill="rgb(242,107,0)" fg:x="12765" fg:w="13"/><text x="96.8229%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.10%)</title><rect x="96.5729%" y="261" width="0.0984%" height="15" fill="rgb(251,28,31)" fg:x="12765" fg:w="13"/><text x="96.8229%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.10%)</title><rect x="96.5729%" y="245" width="0.0984%" height="15" fill="rgb(233,223,10)" fg:x="12765" fg:w="13"/><text x="96.8229%" y="255.50"></text></g><g><title>main::compute_flowchange (319 samples, 2.41%)</title><rect x="94.2881%" y="309" width="2.4134%" height="15" fill="rgb(215,21,27)" fg:x="12463" fg:w="319"/><text x="94.5381%" y="319.50">ma..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (4 samples, 0.03%)</title><rect x="96.6712%" y="293" width="0.0303%" height="15" fill="rgb(232,23,21)" fg:x="12778" fg:w="4"/><text x="96.9212%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (4 samples, 0.03%)</title><rect x="96.6712%" y="277" width="0.0303%" height="15" fill="rgb(244,5,23)" fg:x="12778" fg:w="4"/><text x="96.9212%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="96.6712%" y="261" width="0.0303%" height="15" fill="rgb(226,81,46)" fg:x="12778" fg:w="4"/><text x="96.9212%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.03%)</title><rect x="96.6712%" y="245" width="0.0303%" height="15" fill="rgb(247,70,30)" fg:x="12778" fg:w="4"/><text x="96.9212%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.03%)</title><rect x="96.6712%" y="229" width="0.0303%" height="15" fill="rgb(212,68,19)" fg:x="12778" fg:w="4"/><text x="96.9212%" y="239.50"></text></g><g><title>cfree (4 samples, 0.03%)</title><rect x="96.6712%" y="213" width="0.0303%" height="15" fill="rgb(240,187,13)" fg:x="12778" fg:w="4"/><text x="96.9212%" y="223.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="96.6788%" y="197" width="0.0227%" height="15" fill="rgb(223,113,26)" fg:x="12779" fg:w="3"/><text x="96.9288%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="96.7015%" y="197" width="0.0303%" height="15" fill="rgb(206,192,2)" fg:x="12782" fg:w="4"/><text x="96.9515%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="96.7015%" y="181" width="0.0303%" height="15" fill="rgb(241,108,4)" fg:x="12782" fg:w="4"/><text x="96.9515%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6 samples, 0.05%)</title><rect x="96.7015%" y="213" width="0.0454%" height="15" fill="rgb(247,173,49)" fg:x="12782" fg:w="6"/><text x="96.9515%" y="223.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="96.7317%" y="197" width="0.0151%" height="15" fill="rgb(224,114,35)" fg:x="12786" fg:w="2"/><text x="96.9817%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.06%)</title><rect x="96.7015%" y="293" width="0.0605%" height="15" fill="rgb(245,159,27)" fg:x="12782" fg:w="8"/><text x="96.9515%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="96.7015%" y="277" width="0.0605%" height="15" fill="rgb(245,172,44)" fg:x="12782" fg:w="8"/><text x="96.9515%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="96.7015%" y="261" width="0.0605%" height="15" fill="rgb(236,23,11)" fg:x="12782" fg:w="8"/><text x="96.9515%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="96.7015%" y="245" width="0.0605%" height="15" fill="rgb(205,117,38)" fg:x="12782" fg:w="8"/><text x="96.9515%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.06%)</title><rect x="96.7015%" y="229" width="0.0605%" height="15" fill="rgb(237,72,25)" fg:x="12782" fg:w="8"/><text x="96.9515%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.02%)</title><rect x="96.7469%" y="213" width="0.0151%" height="15" fill="rgb(244,70,9)" fg:x="12788" fg:w="2"/><text x="96.9969%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="96.7469%" y="197" width="0.0151%" height="15" fill="rgb(217,125,39)" fg:x="12788" fg:w="2"/><text x="96.9969%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="96.7469%" y="181" width="0.0151%" height="15" fill="rgb(235,36,10)" fg:x="12788" fg:w="2"/><text x="96.9969%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="96.7469%" y="165" width="0.0151%" height="15" fill="rgb(251,123,47)" fg:x="12788" fg:w="2"/><text x="96.9969%" y="175.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="96.7469%" y="149" width="0.0151%" height="15" fill="rgb(221,13,13)" fg:x="12788" fg:w="2"/><text x="96.9969%" y="159.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (2 samples, 0.02%)</title><rect x="96.7469%" y="133" width="0.0151%" height="15" fill="rgb(238,131,9)" fg:x="12788" fg:w="2"/><text x="96.9969%" y="143.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (3 samples, 0.02%)</title><rect x="96.7771%" y="293" width="0.0227%" height="15" fill="rgb(211,50,8)" fg:x="12792" fg:w="3"/><text x="97.0271%" y="303.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (2 samples, 0.02%)</title><rect x="96.7847%" y="277" width="0.0151%" height="15" fill="rgb(245,182,24)" fg:x="12793" fg:w="2"/><text x="97.0347%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="96.7847%" y="261" width="0.0151%" height="15" fill="rgb(242,14,37)" fg:x="12793" fg:w="2"/><text x="97.0347%" y="271.50"></text></g><g><title>main::compute_node_potentials (14 samples, 0.11%)</title><rect x="96.7015%" y="309" width="0.1059%" height="15" fill="rgb(246,228,12)" fg:x="12782" fg:w="14"/><text x="96.9515%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.05%)</title><rect x="97.5942%" y="293" width="0.0530%" height="15" fill="rgb(213,55,15)" fg:x="12900" fg:w="7"/><text x="97.8442%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.05%)</title><rect x="97.5942%" y="277" width="0.0530%" height="15" fill="rgb(209,9,3)" fg:x="12900" fg:w="7"/><text x="97.8442%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.05%)</title><rect x="97.5942%" y="261" width="0.0530%" height="15" fill="rgb(230,59,30)" fg:x="12900" fg:w="7"/><text x="97.8442%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.02%)</title><rect x="97.6471%" y="293" width="0.0151%" height="15" fill="rgb(209,121,21)" fg:x="12907" fg:w="2"/><text x="97.8971%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="97.6471%" y="277" width="0.0151%" height="15" fill="rgb(220,109,13)" fg:x="12907" fg:w="2"/><text x="97.8971%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="97.6471%" y="261" width="0.0151%" height="15" fill="rgb(232,18,1)" fg:x="12907" fg:w="2"/><text x="97.8971%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="97.6471%" y="245" width="0.0151%" height="15" fill="rgb(215,41,42)" fg:x="12907" fg:w="2"/><text x="97.8971%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (30 samples, 0.23%)</title><rect x="97.6774%" y="245" width="0.2270%" height="15" fill="rgb(224,123,36)" fg:x="12911" fg:w="30"/><text x="97.9274%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (30 samples, 0.23%)</title><rect x="97.6774%" y="229" width="0.2270%" height="15" fill="rgb(240,125,3)" fg:x="12911" fg:w="30"/><text x="97.9274%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (30 samples, 0.23%)</title><rect x="97.6774%" y="213" width="0.2270%" height="15" fill="rgb(205,98,50)" fg:x="12911" fg:w="30"/><text x="97.9274%" y="223.50"></text></g><g><title>alloc::alloc::realloc (30 samples, 0.23%)</title><rect x="97.6774%" y="197" width="0.2270%" height="15" fill="rgb(205,185,37)" fg:x="12911" fg:w="30"/><text x="97.9274%" y="207.50"></text></g><g><title>realloc (29 samples, 0.22%)</title><rect x="97.6850%" y="181" width="0.2194%" height="15" fill="rgb(238,207,15)" fg:x="12912" fg:w="29"/><text x="97.9350%" y="191.50"></text></g><g><title>[libc.so.6] (26 samples, 0.20%)</title><rect x="97.7077%" y="165" width="0.1967%" height="15" fill="rgb(213,199,42)" fg:x="12915" fg:w="26"/><text x="97.9577%" y="175.50"></text></g><g><title>[libc.so.6] (21 samples, 0.16%)</title><rect x="97.7455%" y="149" width="0.1589%" height="15" fill="rgb(235,201,11)" fg:x="12920" fg:w="21"/><text x="97.9955%" y="159.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="97.8741%" y="133" width="0.0303%" height="15" fill="rgb(207,46,11)" fg:x="12937" fg:w="4"/><text x="98.1241%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.23%)</title><rect x="97.6774%" y="277" width="0.2345%" height="15" fill="rgb(241,35,35)" fg:x="12911" fg:w="31"/><text x="97.9274%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (31 samples, 0.23%)</title><rect x="97.6774%" y="261" width="0.2345%" height="15" fill="rgb(243,32,47)" fg:x="12911" fg:w="31"/><text x="97.9274%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.04%)</title><rect x="97.9119%" y="277" width="0.0378%" height="15" fill="rgb(247,202,23)" fg:x="12942" fg:w="5"/><text x="98.1619%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.04%)</title><rect x="97.9119%" y="261" width="0.0378%" height="15" fill="rgb(219,102,11)" fg:x="12942" fg:w="5"/><text x="98.1619%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (40 samples, 0.30%)</title><rect x="97.6623%" y="293" width="0.3026%" height="15" fill="rgb(243,110,44)" fg:x="12909" fg:w="40"/><text x="97.9123%" y="303.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="97.9498%" y="277" width="0.0151%" height="15" fill="rgb(222,74,54)" fg:x="12947" fg:w="2"/><text x="98.1998%" y="287.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.02%)</title><rect x="97.9649%" y="293" width="0.0227%" height="15" fill="rgb(216,99,12)" fg:x="12949" fg:w="3"/><text x="98.2149%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="97.9649%" y="277" width="0.0227%" height="15" fill="rgb(226,22,26)" fg:x="12949" fg:w="3"/><text x="98.2149%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (3 samples, 0.02%)</title><rect x="97.9649%" y="261" width="0.0227%" height="15" fill="rgb(217,163,10)" fg:x="12949" fg:w="3"/><text x="98.2149%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.04%)</title><rect x="98.0103%" y="181" width="0.0378%" height="15" fill="rgb(213,25,53)" fg:x="12955" fg:w="5"/><text x="98.2603%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.04%)</title><rect x="98.0103%" y="165" width="0.0378%" height="15" fill="rgb(252,105,26)" fg:x="12955" fg:w="5"/><text x="98.2603%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.04%)</title><rect x="98.0103%" y="149" width="0.0378%" height="15" fill="rgb(220,39,43)" fg:x="12955" fg:w="5"/><text x="98.2603%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.04%)</title><rect x="98.0103%" y="133" width="0.0378%" height="15" fill="rgb(229,68,48)" fg:x="12955" fg:w="5"/><text x="98.2603%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.04%)</title><rect x="98.0103%" y="117" width="0.0378%" height="15" fill="rgb(252,8,32)" fg:x="12955" fg:w="5"/><text x="98.2603%" y="127.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.04%)</title><rect x="98.0103%" y="101" width="0.0378%" height="15" fill="rgb(223,20,43)" fg:x="12955" fg:w="5"/><text x="98.2603%" y="111.50"></text></g><g><title>realloc (5 samples, 0.04%)</title><rect x="98.0103%" y="85" width="0.0378%" height="15" fill="rgb(229,81,49)" fg:x="12955" fg:w="5"/><text x="98.2603%" y="95.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="98.0103%" y="69" width="0.0378%" height="15" fill="rgb(236,28,36)" fg:x="12955" fg:w="5"/><text x="98.2603%" y="79.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="98.0103%" y="53" width="0.0378%" height="15" fill="rgb(249,185,26)" fg:x="12955" fg:w="5"/><text x="98.2603%" y="63.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="98.0330%" y="37" width="0.0151%" height="15" fill="rgb(249,174,33)" fg:x="12958" fg:w="2"/><text x="98.2830%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.02%)</title><rect x="98.0481%" y="181" width="0.0151%" height="15" fill="rgb(233,201,37)" fg:x="12960" fg:w="2"/><text x="98.2981%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="98.0481%" y="165" width="0.0151%" height="15" fill="rgb(221,78,26)" fg:x="12960" fg:w="2"/><text x="98.2981%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16 samples, 0.12%)</title><rect x="97.9876%" y="293" width="0.1210%" height="15" fill="rgb(250,127,30)" fg:x="12952" fg:w="16"/><text x="98.2376%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.12%)</title><rect x="97.9876%" y="277" width="0.1210%" height="15" fill="rgb(230,49,44)" fg:x="12952" fg:w="16"/><text x="98.2376%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.12%)</title><rect x="97.9876%" y="261" width="0.1210%" height="15" fill="rgb(229,67,23)" fg:x="12952" fg:w="16"/><text x="98.2376%" y="271.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (16 samples, 0.12%)</title><rect x="97.9876%" y="245" width="0.1210%" height="15" fill="rgb(249,83,47)" fg:x="12952" fg:w="16"/><text x="98.2376%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (16 samples, 0.12%)</title><rect x="97.9876%" y="229" width="0.1210%" height="15" fill="rgb(215,43,3)" fg:x="12952" fg:w="16"/><text x="98.2376%" y="239.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (16 samples, 0.12%)</title><rect x="97.9876%" y="213" width="0.1210%" height="15" fill="rgb(238,154,13)" fg:x="12952" fg:w="16"/><text x="98.2376%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.12%)</title><rect x="97.9876%" y="197" width="0.1210%" height="15" fill="rgb(219,56,2)" fg:x="12952" fg:w="16"/><text x="98.2376%" y="207.50"></text></g><g><title>core::ptr::write (6 samples, 0.05%)</title><rect x="98.0632%" y="181" width="0.0454%" height="15" fill="rgb(233,0,4)" fg:x="12962" fg:w="6"/><text x="98.3132%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (27 samples, 0.20%)</title><rect x="98.1086%" y="293" width="0.2043%" height="15" fill="rgb(235,30,7)" fg:x="12968" fg:w="27"/><text x="98.3586%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.02%)</title><rect x="98.3129%" y="293" width="0.0151%" height="15" fill="rgb(250,79,13)" fg:x="12995" fg:w="2"/><text x="98.5629%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.02%)</title><rect x="98.3129%" y="277" width="0.0151%" height="15" fill="rgb(211,146,34)" fg:x="12995" fg:w="2"/><text x="98.5629%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="98.3129%" y="261" width="0.0151%" height="15" fill="rgb(228,22,38)" fg:x="12995" fg:w="2"/><text x="98.5629%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="98.3129%" y="245" width="0.0151%" height="15" fill="rgb(235,168,5)" fg:x="12995" fg:w="2"/><text x="98.5629%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="98.3129%" y="229" width="0.0151%" height="15" fill="rgb(221,155,16)" fg:x="12995" fg:w="2"/><text x="98.5629%" y="239.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="98.3129%" y="213" width="0.0151%" height="15" fill="rgb(215,215,53)" fg:x="12995" fg:w="2"/><text x="98.5629%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints (2 samples, 0.02%)</title><rect x="98.3280%" y="293" width="0.0151%" height="15" fill="rgb(223,4,10)" fg:x="12997" fg:w="2"/><text x="98.5780%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.02%)</title><rect x="98.3280%" y="277" width="0.0151%" height="15" fill="rgb(234,103,6)" fg:x="12997" fg:w="2"/><text x="98.5780%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints::_{{closure}} (2 samples, 0.02%)</title><rect x="98.3280%" y="261" width="0.0151%" height="15" fill="rgb(227,97,0)" fg:x="12997" fg:w="2"/><text x="98.5780%" y="271.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (2 samples, 0.02%)</title><rect x="98.3280%" y="245" width="0.0151%" height="15" fill="rgb(234,150,53)" fg:x="12997" fg:w="2"/><text x="98.5780%" y="255.50"></text></g><g><title>main::find_cycle_with_arc (205 samples, 1.55%)</title><rect x="96.8074%" y="309" width="1.5509%" height="15" fill="rgb(228,201,54)" fg:x="12796" fg:w="205"/><text x="97.0574%" y="319.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (2 samples, 0.02%)</title><rect x="98.3432%" y="293" width="0.0151%" height="15" fill="rgb(222,22,37)" fg:x="12999" fg:w="2"/><text x="98.5932%" y="303.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.02%)</title><rect x="98.3432%" y="277" width="0.0151%" height="15" fill="rgb(237,53,32)" fg:x="12999" fg:w="2"/><text x="98.5932%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="98.3583%" y="293" width="0.0227%" height="15" fill="rgb(233,25,53)" fg:x="13001" fg:w="3"/><text x="98.6083%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="98.3583%" y="277" width="0.0227%" height="15" fill="rgb(210,40,34)" fg:x="13001" fg:w="3"/><text x="98.6083%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.02%)</title><rect x="98.3583%" y="261" width="0.0227%" height="15" fill="rgb(241,220,44)" fg:x="13001" fg:w="3"/><text x="98.6083%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.02%)</title><rect x="98.3583%" y="245" width="0.0227%" height="15" fill="rgb(235,28,35)" fg:x="13001" fg:w="3"/><text x="98.6083%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.02%)</title><rect x="98.3583%" y="229" width="0.0227%" height="15" fill="rgb(210,56,17)" fg:x="13001" fg:w="3"/><text x="98.6083%" y="239.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="98.3659%" y="213" width="0.0151%" height="15" fill="rgb(224,130,29)" fg:x="13002" fg:w="2"/><text x="98.6159%" y="223.50"></text></g><g><title>main::initialization (8 samples, 0.06%)</title><rect x="98.3583%" y="309" width="0.0605%" height="15" fill="rgb(235,212,8)" fg:x="13001" fg:w="8"/><text x="98.6083%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (3 samples, 0.02%)</title><rect x="98.3961%" y="293" width="0.0227%" height="15" fill="rgb(223,33,50)" fg:x="13006" fg:w="3"/><text x="98.6461%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.05%)</title><rect x="98.9333%" y="293" width="0.0454%" height="15" fill="rgb(219,149,13)" fg:x="13077" fg:w="6"/><text x="99.1833%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.04%)</title><rect x="98.9408%" y="277" width="0.0378%" height="15" fill="rgb(250,156,29)" fg:x="13078" fg:w="5"/><text x="99.1908%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.04%)</title><rect x="98.9408%" y="261" width="0.0378%" height="15" fill="rgb(216,193,19)" fg:x="13078" fg:w="5"/><text x="99.1908%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="99.1300%" y="245" width="0.0151%" height="15" fill="rgb(216,135,14)" fg:x="13103" fg:w="2"/><text x="99.3800%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="99.1300%" y="229" width="0.0151%" height="15" fill="rgb(241,47,5)" fg:x="13103" fg:w="2"/><text x="99.3800%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="99.1300%" y="213" width="0.0151%" height="15" fill="rgb(233,42,35)" fg:x="13103" fg:w="2"/><text x="99.3800%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="99.1527%" y="229" width="0.0227%" height="15" fill="rgb(231,13,6)" fg:x="13106" fg:w="3"/><text x="99.4027%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.02%)</title><rect x="99.1527%" y="213" width="0.0227%" height="15" fill="rgb(207,181,40)" fg:x="13106" fg:w="3"/><text x="99.4027%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="99.1527%" y="197" width="0.0227%" height="15" fill="rgb(254,173,49)" fg:x="13106" fg:w="3"/><text x="99.4027%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.02%)</title><rect x="99.1527%" y="181" width="0.0227%" height="15" fill="rgb(221,1,38)" fg:x="13106" fg:w="3"/><text x="99.4027%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.02%)</title><rect x="99.1527%" y="165" width="0.0227%" height="15" fill="rgb(206,124,46)" fg:x="13106" fg:w="3"/><text x="99.4027%" y="175.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.02%)</title><rect x="99.1527%" y="149" width="0.0227%" height="15" fill="rgb(249,21,11)" fg:x="13106" fg:w="3"/><text x="99.4027%" y="159.50"></text></g><g><title>realloc (3 samples, 0.02%)</title><rect x="99.1527%" y="133" width="0.0227%" height="15" fill="rgb(222,201,40)" fg:x="13106" fg:w="3"/><text x="99.4027%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="99.1527%" y="117" width="0.0227%" height="15" fill="rgb(235,61,29)" fg:x="13106" fg:w="3"/><text x="99.4027%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="99.1602%" y="101" width="0.0151%" height="15" fill="rgb(219,207,3)" fg:x="13107" fg:w="2"/><text x="99.4102%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (28 samples, 0.21%)</title><rect x="98.9787%" y="293" width="0.2118%" height="15" fill="rgb(222,56,46)" fg:x="13083" fg:w="28"/><text x="99.2287%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (28 samples, 0.21%)</title><rect x="98.9787%" y="277" width="0.2118%" height="15" fill="rgb(239,76,54)" fg:x="13083" fg:w="28"/><text x="99.2287%" y="287.50"></text></g><g><title>main::update_sptree::_{{closure}} (28 samples, 0.21%)</title><rect x="98.9787%" y="261" width="0.2118%" height="15" fill="rgb(231,124,27)" fg:x="13083" fg:w="28"/><text x="99.2287%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.05%)</title><rect x="99.1451%" y="245" width="0.0454%" height="15" fill="rgb(249,195,6)" fg:x="13105" fg:w="6"/><text x="99.3951%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (13 samples, 0.10%)</title><rect x="99.1981%" y="293" width="0.0984%" height="15" fill="rgb(237,174,47)" fg:x="13112" fg:w="13"/><text x="99.4481%" y="303.50"></text></g><g><title>main::update_sptree::_{{closure}} (13 samples, 0.10%)</title><rect x="99.1981%" y="277" width="0.0984%" height="15" fill="rgb(206,201,31)" fg:x="13112" fg:w="13"/><text x="99.4481%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (3 samples, 0.02%)</title><rect x="99.2737%" y="261" width="0.0227%" height="15" fill="rgb(231,57,52)" fg:x="13122" fg:w="3"/><text x="99.5237%" y="271.50"></text></g><g><title>__rust_realloc (2 samples, 0.02%)</title><rect x="99.4175%" y="181" width="0.0151%" height="15" fill="rgb(248,177,22)" fg:x="13141" fg:w="2"/><text x="99.6675%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (26 samples, 0.20%)</title><rect x="99.4099%" y="229" width="0.1967%" height="15" fill="rgb(215,211,37)" fg:x="13140" fg:w="26"/><text x="99.6599%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (26 samples, 0.20%)</title><rect x="99.4099%" y="213" width="0.1967%" height="15" fill="rgb(241,128,51)" fg:x="13140" fg:w="26"/><text x="99.6599%" y="223.50"></text></g><g><title>alloc::alloc::realloc (26 samples, 0.20%)</title><rect x="99.4099%" y="197" width="0.1967%" height="15" fill="rgb(227,165,31)" fg:x="13140" fg:w="26"/><text x="99.6599%" y="207.50"></text></g><g><title>realloc (23 samples, 0.17%)</title><rect x="99.4326%" y="181" width="0.1740%" height="15" fill="rgb(228,167,24)" fg:x="13143" fg:w="23"/><text x="99.6826%" y="191.50"></text></g><g><title>[libc.so.6] (22 samples, 0.17%)</title><rect x="99.4402%" y="165" width="0.1664%" height="15" fill="rgb(228,143,12)" fg:x="13144" fg:w="22"/><text x="99.6902%" y="175.50"></text></g><g><title>[libc.so.6] (20 samples, 0.15%)</title><rect x="99.4553%" y="149" width="0.1513%" height="15" fill="rgb(249,149,8)" fg:x="13146" fg:w="20"/><text x="99.7053%" y="159.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="99.5763%" y="133" width="0.0303%" height="15" fill="rgb(243,35,44)" fg:x="13162" fg:w="4"/><text x="99.8263%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 0.24%)</title><rect x="99.3872%" y="277" width="0.2421%" height="15" fill="rgb(246,89,9)" fg:x="13137" fg:w="32"/><text x="99.6372%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (32 samples, 0.24%)</title><rect x="99.3872%" y="261" width="0.2421%" height="15" fill="rgb(233,213,13)" fg:x="13137" fg:w="32"/><text x="99.6372%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.23%)</title><rect x="99.3948%" y="245" width="0.2345%" height="15" fill="rgb(233,141,41)" fg:x="13138" fg:w="31"/><text x="99.6448%" y="255.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="99.6066%" y="229" width="0.0227%" height="15" fill="rgb(239,167,4)" fg:x="13166" fg:w="3"/><text x="99.8566%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (47 samples, 0.36%)</title><rect x="99.2964%" y="293" width="0.3556%" height="15" fill="rgb(209,217,16)" fg:x="13125" fg:w="47"/><text x="99.5464%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.02%)</title><rect x="99.6293%" y="277" width="0.0227%" height="15" fill="rgb(219,88,35)" fg:x="13169" fg:w="3"/><text x="99.8793%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.02%)</title><rect x="99.6293%" y="261" width="0.0227%" height="15" fill="rgb(220,193,23)" fg:x="13169" fg:w="3"/><text x="99.8793%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="99.6520%" y="277" width="0.0151%" height="15" fill="rgb(230,90,52)" fg:x="13172" fg:w="2"/><text x="99.9020%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.03%)</title><rect x="99.6671%" y="261" width="0.0303%" height="15" fill="rgb(252,106,19)" fg:x="13174" fg:w="4"/><text x="99.9171%" y="271.50"></text></g><g><title>main::update_sptree::_{{closure}} (4 samples, 0.03%)</title><rect x="99.6671%" y="245" width="0.0303%" height="15" fill="rgb(206,74,20)" fg:x="13174" fg:w="4"/><text x="99.9171%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.06%)</title><rect x="99.6520%" y="293" width="0.0605%" height="15" fill="rgb(230,138,44)" fg:x="13172" fg:w="8"/><text x="99.9020%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.05%)</title><rect x="99.6671%" y="277" width="0.0454%" height="15" fill="rgb(235,182,43)" fg:x="13174" fg:w="6"/><text x="99.9171%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.02%)</title><rect x="99.6974%" y="261" width="0.0151%" height="15" fill="rgb(242,16,51)" fg:x="13178" fg:w="2"/><text x="99.9474%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="99.6974%" y="245" width="0.0151%" height="15" fill="rgb(248,9,4)" fg:x="13178" fg:w="2"/><text x="99.9474%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (2 samples, 0.02%)</title><rect x="99.6974%" y="229" width="0.0151%" height="15" fill="rgb(210,31,22)" fg:x="13178" fg:w="2"/><text x="99.9474%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="99.6974%" y="213" width="0.0151%" height="15" fill="rgb(239,54,39)" fg:x="13178" fg:w="2"/><text x="99.9474%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.02%)</title><rect x="99.6974%" y="197" width="0.0151%" height="15" fill="rgb(230,99,41)" fg:x="13178" fg:w="2"/><text x="99.9474%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="99.6974%" y="181" width="0.0151%" height="15" fill="rgb(253,106,12)" fg:x="13178" fg:w="2"/><text x="99.9474%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="99.6974%" y="165" width="0.0151%" height="15" fill="rgb(213,46,41)" fg:x="13178" fg:w="2"/><text x="99.9474%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="99.6974%" y="149" width="0.0151%" height="15" fill="rgb(215,133,35)" fg:x="13178" fg:w="2"/><text x="99.9474%" y="159.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="99.6974%" y="133" width="0.0151%" height="15" fill="rgb(213,28,5)" fg:x="13178" fg:w="2"/><text x="99.9474%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (12 samples, 0.09%)</title><rect x="99.7125%" y="293" width="0.0908%" height="15" fill="rgb(215,77,49)" fg:x="13180" fg:w="12"/><text x="99.9625%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (12 samples, 0.09%)</title><rect x="99.7125%" y="277" width="0.0908%" height="15" fill="rgb(248,100,22)" fg:x="13180" fg:w="12"/><text x="99.9625%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (10 samples, 0.08%)</title><rect x="99.8033%" y="293" width="0.0757%" height="15" fill="rgb(208,67,9)" fg:x="13192" fg:w="10"/><text x="100.0533%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (10 samples, 0.08%)</title><rect x="99.8033%" y="277" width="0.0757%" height="15" fill="rgb(219,133,21)" fg:x="13192" fg:w="10"/><text x="100.0533%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.08%)</title><rect x="99.8033%" y="261" width="0.0757%" height="15" fill="rgb(246,46,29)" fg:x="13192" fg:w="10"/><text x="100.0533%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.08%)</title><rect x="99.8033%" y="245" width="0.0757%" height="15" fill="rgb(246,185,52)" fg:x="13192" fg:w="10"/><text x="100.0533%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.08%)</title><rect x="99.8033%" y="229" width="0.0757%" height="15" fill="rgb(252,136,11)" fg:x="13192" fg:w="10"/><text x="100.0533%" y="239.50"></text></g><g><title>cfree (10 samples, 0.08%)</title><rect x="99.8033%" y="213" width="0.0757%" height="15" fill="rgb(219,138,53)" fg:x="13192" fg:w="10"/><text x="100.0533%" y="223.50"></text></g><g><title>[libc.so.6] (9 samples, 0.07%)</title><rect x="99.8109%" y="197" width="0.0681%" height="15" fill="rgb(211,51,23)" fg:x="13193" fg:w="9"/><text x="100.0609%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="99.8563%" y="181" width="0.0227%" height="15" fill="rgb(247,221,28)" fg:x="13199" fg:w="3"/><text x="100.1063%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (7 samples, 0.05%)</title><rect x="99.8790%" y="293" width="0.0530%" height="15" fill="rgb(251,222,45)" fg:x="13202" fg:w="7"/><text x="100.1290%" y="303.50"></text></g><g><title>main::min_cost (13,182 samples, 99.73%)</title><rect x="0.2194%" y="325" width="99.7276%" height="15" fill="rgb(217,162,53)" fg:x="29" fg:w="13182"/><text x="0.4694%" y="335.50">main::min_cost</text></g><g><title>main::update_sptree (202 samples, 1.53%)</title><rect x="98.4188%" y="309" width="1.5282%" height="15" fill="rgb(229,93,14)" fg:x="13009" fg:w="202"/><text x="98.6688%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.02%)</title><rect x="99.9470%" y="325" width="0.0151%" height="15" fill="rgb(209,67,49)" fg:x="13211" fg:w="2"/><text x="100.1970%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="99.9470%" y="309" width="0.0151%" height="15" fill="rgb(213,87,29)" fg:x="13211" fg:w="2"/><text x="100.1970%" y="319.50"></text></g><g><title>_start (13,186 samples, 99.76%)</title><rect x="0.2194%" y="469" width="99.7579%" height="15" fill="rgb(205,151,52)" fg:x="29" fg:w="13186"/><text x="0.4694%" y="479.50">_start</text></g><g><title>__libc_start_main (13,186 samples, 99.76%)</title><rect x="0.2194%" y="453" width="99.7579%" height="15" fill="rgb(253,215,39)" fg:x="29" fg:w="13186"/><text x="0.4694%" y="463.50">__libc_start_main</text></g><g><title>[libc.so.6] (13,186 samples, 99.76%)</title><rect x="0.2194%" y="437" width="99.7579%" height="15" fill="rgb(221,220,41)" fg:x="29" fg:w="13186"/><text x="0.4694%" y="447.50">[libc.so.6]</text></g><g><title>main (13,186 samples, 99.76%)</title><rect x="0.2194%" y="421" width="99.7579%" height="15" fill="rgb(218,133,21)" fg:x="29" fg:w="13186"/><text x="0.4694%" y="431.50">main</text></g><g><title>std::rt::lang_start_internal (13,186 samples, 99.76%)</title><rect x="0.2194%" y="405" width="99.7579%" height="15" fill="rgb(221,193,43)" fg:x="29" fg:w="13186"/><text x="0.4694%" y="415.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (13,186 samples, 99.76%)</title><rect x="0.2194%" y="389" width="99.7579%" height="15" fill="rgb(240,128,52)" fg:x="29" fg:w="13186"/><text x="0.4694%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,186 samples, 99.76%)</title><rect x="0.2194%" y="373" width="99.7579%" height="15" fill="rgb(253,114,12)" fg:x="29" fg:w="13186"/><text x="0.4694%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (13,186 samples, 99.76%)</title><rect x="0.2194%" y="357" width="99.7579%" height="15" fill="rgb(215,223,47)" fg:x="29" fg:w="13186"/><text x="0.4694%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (13,186 samples, 99.76%)</title><rect x="0.2194%" y="341" width="99.7579%" height="15" fill="rgb(248,225,23)" fg:x="29" fg:w="13186"/><text x="0.4694%" y="351.50">main::main</text></g><g><title>all (13,218 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="13218"/><text x="0.2500%" y="511.50"></text></g><g><title>main (13,218 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="13218"/><text x="0.2500%" y="495.50">main</text></g><g><title>main::min_cost (3 samples, 0.02%)</title><rect x="99.9773%" y="469" width="0.0227%" height="15" fill="rgb(244,45,10)" fg:x="13215" fg:w="3"/><text x="100.2273%" y="479.50"></text></g><g><title>main::update_sptree (2 samples, 0.02%)</title><rect x="99.9849%" y="453" width="0.0151%" height="15" fill="rgb(207,125,25)" fg:x="13216" fg:w="2"/><text x="100.2349%" y="463.50"></text></g></svg></svg>