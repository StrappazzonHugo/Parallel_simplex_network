<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="11260"><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="0.0000%" y="517" width="0.0178%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="527.50"></text></g><g><title>[[stack]] (445 samples, 3.95%)</title><rect x="0.0178%" y="517" width="3.9520%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="445"/><text x="0.2678%" y="527.50">[[st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (444 samples, 3.94%)</title><rect x="0.0266%" y="501" width="3.9432%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="444"/><text x="0.2766%" y="511.50">core..</text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.07%)</title><rect x="3.9698%" y="517" width="0.0710%" height="15" fill="rgb(248,212,6)" fg:x="447" fg:w="8"/><text x="4.2198%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="4.0231%" y="501" width="0.0178%" height="15" fill="rgb(208,68,35)" fg:x="453" fg:w="2"/><text x="4.2731%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="4.0231%" y="485" width="0.0178%" height="15" fill="rgb(232,128,0)" fg:x="453" fg:w="2"/><text x="4.2731%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="4.0231%" y="469" width="0.0178%" height="15" fill="rgb(207,160,47)" fg:x="453" fg:w="2"/><text x="4.2731%" y="479.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.02%)</title><rect x="4.1119%" y="437" width="0.0178%" height="15" fill="rgb(228,23,34)" fg:x="463" fg:w="2"/><text x="4.3619%" y="447.50"></text></g><g><title>std::panicking::try (2 samples, 0.02%)</title><rect x="4.1119%" y="421" width="0.0178%" height="15" fill="rgb(218,30,26)" fg:x="463" fg:w="2"/><text x="4.3619%" y="431.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.02%)</title><rect x="4.1119%" y="405" width="0.0178%" height="15" fill="rgb(220,122,19)" fg:x="463" fg:w="2"/><text x="4.3619%" y="415.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.02%)</title><rect x="4.1119%" y="389" width="0.0178%" height="15" fill="rgb(250,228,42)" fg:x="463" fg:w="2"/><text x="4.3619%" y="399.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (2 samples, 0.02%)</title><rect x="4.1119%" y="373" width="0.0178%" height="15" fill="rgb(240,193,28)" fg:x="463" fg:w="2"/><text x="4.3619%" y="383.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.02%)</title><rect x="4.1119%" y="357" width="0.0178%" height="15" fill="rgb(216,20,37)" fg:x="463" fg:w="2"/><text x="4.3619%" y="367.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (2 samples, 0.02%)</title><rect x="4.1119%" y="341" width="0.0178%" height="15" fill="rgb(206,188,39)" fg:x="463" fg:w="2"/><text x="4.3619%" y="351.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (2 samples, 0.02%)</title><rect x="4.1119%" y="325" width="0.0178%" height="15" fill="rgb(217,207,13)" fg:x="463" fg:w="2"/><text x="4.3619%" y="335.50"></text></g><g><title>rayon_core::registry::main_loop (2 samples, 0.02%)</title><rect x="4.1119%" y="309" width="0.0178%" height="15" fill="rgb(231,73,38)" fg:x="463" fg:w="2"/><text x="4.3619%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5 samples, 0.04%)</title><rect x="4.1030%" y="469" width="0.0444%" height="15" fill="rgb(225,20,46)" fg:x="462" fg:w="5"/><text x="4.3530%" y="479.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (5 samples, 0.04%)</title><rect x="4.1030%" y="453" width="0.0444%" height="15" fill="rgb(210,31,41)" fg:x="462" fg:w="5"/><text x="4.3530%" y="463.50"></text></g><g><title>std::sys::pal::unix::thread::guard::current (2 samples, 0.02%)</title><rect x="4.1297%" y="437" width="0.0178%" height="15" fill="rgb(221,200,47)" fg:x="465" fg:w="2"/><text x="4.3797%" y="447.50"></text></g><g><title>pthread_getattr_np (2 samples, 0.02%)</title><rect x="4.1297%" y="421" width="0.0178%" height="15" fill="rgb(226,26,5)" fg:x="465" fg:w="2"/><text x="4.3797%" y="431.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="4.1297%" y="405" width="0.0178%" height="15" fill="rgb(249,33,26)" fg:x="465" fg:w="2"/><text x="4.3797%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="4.1297%" y="389" width="0.0178%" height="15" fill="rgb(235,183,28)" fg:x="465" fg:w="2"/><text x="4.3797%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="4.1297%" y="373" width="0.0178%" height="15" fill="rgb(221,5,38)" fg:x="465" fg:w="2"/><text x="4.3797%" y="383.50"></text></g><g><title>[libc.so.6] (7 samples, 0.06%)</title><rect x="4.0941%" y="501" width="0.0622%" height="15" fill="rgb(247,18,42)" fg:x="461" fg:w="7"/><text x="4.3441%" y="511.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (6 samples, 0.05%)</title><rect x="4.1030%" y="485" width="0.0533%" height="15" fill="rgb(241,131,45)" fg:x="462" fg:w="6"/><text x="4.3530%" y="495.50"></text></g><g><title>[libc.so.6] (14 samples, 0.12%)</title><rect x="4.0409%" y="517" width="0.1243%" height="15" fill="rgb(249,31,29)" fg:x="455" fg:w="14"/><text x="4.2909%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (394 samples, 3.50%)</title><rect x="4.1652%" y="501" width="3.4991%" height="15" fill="rgb(225,111,53)" fg:x="469" fg:w="394"/><text x="4.4152%" y="511.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (394 samples, 3.50%)</title><rect x="4.1652%" y="485" width="3.4991%" height="15" fill="rgb(238,160,17)" fg:x="469" fg:w="394"/><text x="4.4152%" y="495.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (394 samples, 3.50%)</title><rect x="4.1652%" y="469" width="3.4991%" height="15" fill="rgb(214,148,48)" fg:x="469" fg:w="394"/><text x="4.4152%" y="479.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (394 samples, 3.50%)</title><rect x="4.1652%" y="453" width="3.4991%" height="15" fill="rgb(232,36,49)" fg:x="469" fg:w="394"/><text x="4.4152%" y="463.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (394 samples, 3.50%)</title><rect x="4.1652%" y="437" width="3.4991%" height="15" fill="rgb(209,103,24)" fg:x="469" fg:w="394"/><text x="4.4152%" y="447.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (394 samples, 3.50%)</title><rect x="4.1652%" y="421" width="3.4991%" height="15" fill="rgb(229,88,8)" fg:x="469" fg:w="394"/><text x="4.4152%" y="431.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (394 samples, 3.50%)</title><rect x="4.1652%" y="405" width="3.4991%" height="15" fill="rgb(213,181,19)" fg:x="469" fg:w="394"/><text x="4.4152%" y="415.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (394 samples, 3.50%)</title><rect x="4.1652%" y="389" width="3.4991%" height="15" fill="rgb(254,191,54)" fg:x="469" fg:w="394"/><text x="4.4152%" y="399.50">cor..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (394 samples, 3.50%)</title><rect x="4.1652%" y="373" width="3.4991%" height="15" fill="rgb(241,83,37)" fg:x="469" fg:w="394"/><text x="4.4152%" y="383.50">&lt;co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (43 samples, 0.38%)</title><rect x="7.6643%" y="501" width="0.3819%" height="15" fill="rgb(233,36,39)" fg:x="863" fg:w="43"/><text x="7.9143%" y="511.50"></text></g><g><title>[unknown] (438 samples, 3.89%)</title><rect x="4.1652%" y="517" width="3.8899%" height="15" fill="rgb(226,3,54)" fg:x="469" fg:w="438"/><text x="4.4152%" y="527.50">[unk..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="8.2149%" y="277" width="0.0178%" height="15" fill="rgb(245,192,40)" fg:x="925" fg:w="2"/><text x="8.4649%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="8.2149%" y="261" width="0.0178%" height="15" fill="rgb(238,167,29)" fg:x="925" fg:w="2"/><text x="8.4649%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="8.2149%" y="245" width="0.0178%" height="15" fill="rgb(232,182,51)" fg:x="925" fg:w="2"/><text x="8.4649%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="8.2149%" y="229" width="0.0178%" height="15" fill="rgb(231,60,39)" fg:x="925" fg:w="2"/><text x="8.4649%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (21 samples, 0.19%)</title><rect x="8.2327%" y="277" width="0.1865%" height="15" fill="rgb(208,69,12)" fg:x="927" fg:w="21"/><text x="8.4827%" y="287.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (21 samples, 0.19%)</title><rect x="8.2327%" y="261" width="0.1865%" height="15" fill="rgb(235,93,37)" fg:x="927" fg:w="21"/><text x="8.4827%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (25 samples, 0.22%)</title><rect x="8.2149%" y="357" width="0.2220%" height="15" fill="rgb(213,116,39)" fg:x="925" fg:w="25"/><text x="8.4649%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.22%)</title><rect x="8.2149%" y="341" width="0.2220%" height="15" fill="rgb(222,207,29)" fg:x="925" fg:w="25"/><text x="8.4649%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.22%)</title><rect x="8.2149%" y="325" width="0.2220%" height="15" fill="rgb(206,96,30)" fg:x="925" fg:w="25"/><text x="8.4649%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.22%)</title><rect x="8.2149%" y="309" width="0.2220%" height="15" fill="rgb(218,138,4)" fg:x="925" fg:w="25"/><text x="8.4649%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.22%)</title><rect x="8.2149%" y="293" width="0.2220%" height="15" fill="rgb(250,191,14)" fg:x="925" fg:w="25"/><text x="8.4649%" y="303.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="8.4192%" y="277" width="0.0178%" height="15" fill="rgb(239,60,40)" fg:x="948" fg:w="2"/><text x="8.6692%" y="287.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.02%)</title><rect x="8.4369%" y="261" width="0.0178%" height="15" fill="rgb(206,27,48)" fg:x="950" fg:w="2"/><text x="8.6869%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.03%)</title><rect x="8.4369%" y="341" width="0.0266%" height="15" fill="rgb(225,35,8)" fg:x="950" fg:w="3"/><text x="8.6869%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.03%)</title><rect x="8.4369%" y="325" width="0.0266%" height="15" fill="rgb(250,213,24)" fg:x="950" fg:w="3"/><text x="8.6869%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (3 samples, 0.03%)</title><rect x="8.4369%" y="309" width="0.0266%" height="15" fill="rgb(247,123,22)" fg:x="950" fg:w="3"/><text x="8.6869%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.03%)</title><rect x="8.4369%" y="293" width="0.0266%" height="15" fill="rgb(231,138,38)" fg:x="950" fg:w="3"/><text x="8.6869%" y="303.50"></text></g><g><title>main::min_cost::_{{closure}} (3 samples, 0.03%)</title><rect x="8.4369%" y="277" width="0.0266%" height="15" fill="rgb(231,145,46)" fg:x="950" fg:w="3"/><text x="8.6869%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (29 samples, 0.26%)</title><rect x="8.4369%" y="357" width="0.2575%" height="15" fill="rgb(251,118,11)" fg:x="950" fg:w="29"/><text x="8.6869%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (26 samples, 0.23%)</title><rect x="8.4636%" y="341" width="0.2309%" height="15" fill="rgb(217,147,25)" fg:x="953" fg:w="26"/><text x="8.7136%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (26 samples, 0.23%)</title><rect x="8.4636%" y="325" width="0.2309%" height="15" fill="rgb(247,81,37)" fg:x="953" fg:w="26"/><text x="8.7136%" y="335.50"></text></g><g><title>main::min_cost::_{{closure}} (26 samples, 0.23%)</title><rect x="8.4636%" y="309" width="0.2309%" height="15" fill="rgb(209,12,38)" fg:x="953" fg:w="26"/><text x="8.7136%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (20 samples, 0.18%)</title><rect x="20.7815%" y="101" width="0.1776%" height="15" fill="rgb(227,1,9)" fg:x="2340" fg:w="20"/><text x="21.0315%" y="111.50"></text></g><g><title>core::cmp::min_by (20 samples, 0.18%)</title><rect x="20.7815%" y="85" width="0.1776%" height="15" fill="rgb(248,47,43)" fg:x="2340" fg:w="20"/><text x="21.0315%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.14%)</title><rect x="21.4210%" y="69" width="0.1421%" height="15" fill="rgb(221,10,30)" fg:x="2412" fg:w="16"/><text x="21.6710%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.04%)</title><rect x="21.5187%" y="53" width="0.0444%" height="15" fill="rgb(210,229,1)" fg:x="2423" fg:w="5"/><text x="21.7687%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.04%)</title><rect x="21.5187%" y="37" width="0.0444%" height="15" fill="rgb(222,148,37)" fg:x="2423" fg:w="5"/><text x="21.7687%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (34 samples, 0.30%)</title><rect x="21.4210%" y="85" width="0.3020%" height="15" fill="rgb(234,67,33)" fg:x="2412" fg:w="34"/><text x="21.6710%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18 samples, 0.16%)</title><rect x="21.5631%" y="69" width="0.1599%" height="15" fill="rgb(247,98,35)" fg:x="2428" fg:w="18"/><text x="21.8131%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18 samples, 0.16%)</title><rect x="21.5631%" y="53" width="0.1599%" height="15" fill="rgb(247,138,52)" fg:x="2428" fg:w="18"/><text x="21.8131%" y="63.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (18 samples, 0.16%)</title><rect x="21.7229%" y="85" width="0.1599%" height="15" fill="rgb(213,79,30)" fg:x="2446" fg:w="18"/><text x="21.9729%" y="95.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (27 samples, 0.24%)</title><rect x="21.8828%" y="85" width="0.2398%" height="15" fill="rgb(246,177,23)" fg:x="2464" fg:w="27"/><text x="22.1328%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (158 samples, 1.40%)</title><rect x="20.7726%" y="165" width="1.4032%" height="15" fill="rgb(230,62,27)" fg:x="2339" fg:w="158"/><text x="21.0226%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (158 samples, 1.40%)</title><rect x="20.7726%" y="149" width="1.4032%" height="15" fill="rgb(216,154,8)" fg:x="2339" fg:w="158"/><text x="21.0226%" y="159.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (157 samples, 1.39%)</title><rect x="20.7815%" y="133" width="1.3943%" height="15" fill="rgb(244,35,45)" fg:x="2340" fg:w="157"/><text x="21.0315%" y="143.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (157 samples, 1.39%)</title><rect x="20.7815%" y="117" width="1.3943%" height="15" fill="rgb(251,115,12)" fg:x="2340" fg:w="157"/><text x="21.0315%" y="127.50"></text></g><g><title>main::_find_block_search::_{{closure}} (137 samples, 1.22%)</title><rect x="20.9591%" y="101" width="1.2167%" height="15" fill="rgb(240,54,50)" fg:x="2360" fg:w="137"/><text x="21.2091%" y="111.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (6 samples, 0.05%)</title><rect x="22.1226%" y="85" width="0.0533%" height="15" fill="rgb(233,84,52)" fg:x="2491" fg:w="6"/><text x="22.3726%" y="95.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::from_try (882 samples, 7.83%)</title><rect x="27.8508%" y="133" width="7.8330%" height="15" fill="rgb(207,117,47)" fg:x="3136" fg:w="882"/><text x="28.1008%" y="143.50">core::ops::..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (1,283 samples, 11.39%)</title><rect x="36.0036%" y="101" width="11.3943%" height="15" fill="rgb(249,43,39)" fg:x="4054" fg:w="1283"/><text x="36.2536%" y="111.50">core::iter::trait..</text></g><g><title>core::cmp::min_by (1,283 samples, 11.39%)</title><rect x="36.0036%" y="85" width="11.3943%" height="15" fill="rgb(209,38,44)" fg:x="4054" fg:w="1283"/><text x="36.2536%" y="95.50">core::cmp::min_by</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (859 samples, 7.63%)</title><rect x="60.2398%" y="69" width="7.6288%" height="15" fill="rgb(236,212,23)" fg:x="6783" fg:w="859"/><text x="60.4898%" y="79.50">&lt;alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.02%)</title><rect x="67.8508%" y="53" width="0.0178%" height="15" fill="rgb(242,79,21)" fg:x="7640" fg:w="2"/><text x="68.1008%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="67.8508%" y="37" width="0.0178%" height="15" fill="rgb(211,96,35)" fg:x="7640" fg:w="2"/><text x="68.1008%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,405 samples, 12.48%)</title><rect x="60.2398%" y="85" width="12.4778%" height="15" fill="rgb(253,215,40)" fg:x="6783" fg:w="1405"/><text x="60.4898%" y="95.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (546 samples, 4.85%)</title><rect x="67.8686%" y="69" width="4.8490%" height="15" fill="rgb(211,81,21)" fg:x="7642" fg:w="546"/><text x="68.1186%" y="79.50">core::..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (546 samples, 4.85%)</title><rect x="67.8686%" y="53" width="4.8490%" height="15" fill="rgb(208,190,38)" fg:x="7642" fg:w="546"/><text x="68.1186%" y="63.50">&lt;usize..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (424 samples, 3.77%)</title><rect x="72.7176%" y="85" width="3.7655%" height="15" fill="rgb(235,213,38)" fg:x="8188" fg:w="424"/><text x="72.9676%" y="95.50">&lt;i32..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1,227 samples, 10.90%)</title><rect x="76.4831%" y="85" width="10.8970%" height="15" fill="rgb(237,122,38)" fg:x="8612" fg:w="1227"/><text x="76.7331%" y="95.50">&lt;i32 as core::op..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (9,289 samples, 82.50%)</title><rect x="8.7567%" y="181" width="82.4956%" height="15" fill="rgb(244,218,35)" fg:x="986" fg:w="9289"/><text x="9.0067%" y="191.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7,778 samples, 69.08%)</title><rect x="22.1758%" y="165" width="69.0764%" height="15" fill="rgb(240,68,47)" fg:x="2497" fg:w="7778"/><text x="22.4258%" y="175.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (7,656 samples, 67.99%)</title><rect x="23.2593%" y="149" width="67.9929%" height="15" fill="rgb(210,16,53)" fg:x="2619" fg:w="7656"/><text x="23.5093%" y="159.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}}</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (6,257 samples, 55.57%)</title><rect x="35.6838%" y="133" width="55.5684%" height="15" fill="rgb(235,124,12)" fg:x="4018" fg:w="6257"/><text x="35.9338%" y="143.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6,257 samples, 55.57%)</title><rect x="35.6838%" y="117" width="55.5684%" height="15" fill="rgb(224,169,11)" fg:x="4018" fg:w="6257"/><text x="35.9338%" y="127.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>main::_find_block_search::_{{closure}} (4,938 samples, 43.85%)</title><rect x="47.3979%" y="101" width="43.8544%" height="15" fill="rgb(250,166,2)" fg:x="5337" fg:w="4938"/><text x="47.6479%" y="111.50">main::_find_block_search::_{{closure}}</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (436 samples, 3.87%)</title><rect x="87.3801%" y="85" width="3.8721%" height="15" fill="rgb(242,216,29)" fg:x="9839" fg:w="436"/><text x="87.6301%" y="95.50">&lt;i32..</text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (413 samples, 3.67%)</title><rect x="91.2522%" y="181" width="3.6679%" height="15" fill="rgb(230,116,27)" fg:x="10275" fg:w="413"/><text x="91.5022%" y="191.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,742 samples, 86.52%)</title><rect x="8.7123%" y="309" width="86.5187%" height="15" fill="rgb(228,99,48)" fg:x="981" fg:w="9742"/><text x="8.9623%" y="319.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,742 samples, 86.52%)</title><rect x="8.7123%" y="293" width="86.5187%" height="15" fill="rgb(253,11,6)" fg:x="981" fg:w="9742"/><text x="8.9623%" y="303.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (9,742 samples, 86.52%)</title><rect x="8.7123%" y="277" width="86.5187%" height="15" fill="rgb(247,143,39)" fg:x="981" fg:w="9742"/><text x="8.9623%" y="287.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,742 samples, 86.52%)</title><rect x="8.7123%" y="261" width="86.5187%" height="15" fill="rgb(236,97,10)" fg:x="981" fg:w="9742"/><text x="8.9623%" y="271.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,742 samples, 86.52%)</title><rect x="8.7123%" y="245" width="86.5187%" height="15" fill="rgb(233,208,19)" fg:x="981" fg:w="9742"/><text x="8.9623%" y="255.50">&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,742 samples, 86.52%)</title><rect x="8.7123%" y="229" width="86.5187%" height="15" fill="rgb(216,164,2)" fg:x="981" fg:w="9742"/><text x="8.9623%" y="239.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9,742 samples, 86.52%)</title><rect x="8.7123%" y="213" width="86.5187%" height="15" fill="rgb(220,129,5)" fg:x="981" fg:w="9742"/><text x="8.9623%" y="223.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9,742 samples, 86.52%)</title><rect x="8.7123%" y="197" width="86.5187%" height="15" fill="rgb(242,17,10)" fg:x="981" fg:w="9742"/><text x="8.9623%" y="207.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.31%)</title><rect x="94.9201%" y="181" width="0.3108%" height="15" fill="rgb(242,107,0)" fg:x="10688" fg:w="35"/><text x="95.1701%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (31 samples, 0.28%)</title><rect x="94.9556%" y="165" width="0.2753%" height="15" fill="rgb(251,28,31)" fg:x="10692" fg:w="31"/><text x="95.2056%" y="175.50"></text></g><g><title>main::_find_block_search (9,745 samples, 86.55%)</title><rect x="8.6945%" y="357" width="86.5453%" height="15" fill="rgb(233,223,10)" fg:x="979" fg:w="9745"/><text x="8.9445%" y="367.50">main::_find_block_search</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (9,743 samples, 86.53%)</title><rect x="8.7123%" y="341" width="86.5275%" height="15" fill="rgb(215,21,27)" fg:x="981" fg:w="9743"/><text x="8.9623%" y="351.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (9,743 samples, 86.53%)</title><rect x="8.7123%" y="325" width="86.5275%" height="15" fill="rgb(232,23,21)" fg:x="981" fg:w="9743"/><text x="8.9623%" y="335.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>main::compute_flowchange (5 samples, 0.04%)</title><rect x="95.2398%" y="357" width="0.0444%" height="15" fill="rgb(244,5,23)" fg:x="10724" fg:w="5"/><text x="95.4898%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="95.2931%" y="293" width="0.0178%" height="15" fill="rgb(226,81,46)" fg:x="10730" fg:w="2"/><text x="95.5431%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.09%)</title><rect x="95.2931%" y="309" width="0.0888%" height="15" fill="rgb(247,70,30)" fg:x="10730" fg:w="10"/><text x="95.5431%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 0.07%)</title><rect x="95.3108%" y="293" width="0.0710%" height="15" fill="rgb(212,68,19)" fg:x="10732" fg:w="8"/><text x="95.5608%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (8 samples, 0.07%)</title><rect x="95.3108%" y="277" width="0.0710%" height="15" fill="rgb(240,187,13)" fg:x="10732" fg:w="8"/><text x="95.5608%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.05%)</title><rect x="95.7371%" y="277" width="0.0533%" height="15" fill="rgb(223,113,26)" fg:x="10780" fg:w="6"/><text x="95.9871%" y="287.50"></text></g><g><title>core::ptr::write (4 samples, 0.04%)</title><rect x="95.7549%" y="261" width="0.0355%" height="15" fill="rgb(206,192,2)" fg:x="10782" fg:w="4"/><text x="96.0049%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (2 samples, 0.02%)</title><rect x="95.7904%" y="277" width="0.0178%" height="15" fill="rgb(241,108,4)" fg:x="10786" fg:w="2"/><text x="96.0404%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (60 samples, 0.53%)</title><rect x="95.2842%" y="341" width="0.5329%" height="15" fill="rgb(247,173,49)" fg:x="10729" fg:w="60"/><text x="95.5342%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (60 samples, 0.53%)</title><rect x="95.2842%" y="325" width="0.5329%" height="15" fill="rgb(224,114,35)" fg:x="10729" fg:w="60"/><text x="95.5342%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (49 samples, 0.44%)</title><rect x="95.3819%" y="309" width="0.4352%" height="15" fill="rgb(245,159,27)" fg:x="10740" fg:w="49"/><text x="95.6319%" y="319.50"></text></g><g><title>main::initialization::_{{closure}} (49 samples, 0.44%)</title><rect x="95.3819%" y="293" width="0.4352%" height="15" fill="rgb(245,172,44)" fg:x="10740" fg:w="49"/><text x="95.6319%" y="303.50"></text></g><g><title>main::initialization (61 samples, 0.54%)</title><rect x="95.2842%" y="357" width="0.5417%" height="15" fill="rgb(236,23,11)" fg:x="10729" fg:w="61"/><text x="95.5342%" y="367.50"></text></g><g><title>main::update_node_potentials (5 samples, 0.04%)</title><rect x="95.8259%" y="357" width="0.0444%" height="15" fill="rgb(205,117,38)" fg:x="10790" fg:w="5"/><text x="96.0759%" y="367.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (3 samples, 0.03%)</title><rect x="95.8437%" y="341" width="0.0266%" height="15" fill="rgb(237,72,25)" fg:x="10792" fg:w="3"/><text x="96.0937%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4 samples, 0.04%)</title><rect x="95.9147%" y="341" width="0.0355%" height="15" fill="rgb(244,70,9)" fg:x="10800" fg:w="4"/><text x="96.1647%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (4 samples, 0.04%)</title><rect x="95.9147%" y="325" width="0.0355%" height="15" fill="rgb(217,125,39)" fg:x="10800" fg:w="4"/><text x="96.1647%" y="335.50"></text></g><g><title>main::update_sptree::_{{closure}} (4 samples, 0.04%)</title><rect x="95.9147%" y="309" width="0.0355%" height="15" fill="rgb(235,36,10)" fg:x="10800" fg:w="4"/><text x="96.1647%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (5 samples, 0.04%)</title><rect x="95.9503%" y="341" width="0.0444%" height="15" fill="rgb(251,123,47)" fg:x="10804" fg:w="5"/><text x="96.2003%" y="351.50"></text></g><g><title>main::update_sptree::_{{closure}} (5 samples, 0.04%)</title><rect x="95.9503%" y="325" width="0.0444%" height="15" fill="rgb(221,13,13)" fg:x="10804" fg:w="5"/><text x="96.2003%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.02%)</title><rect x="95.9769%" y="309" width="0.0178%" height="15" fill="rgb(238,131,9)" fg:x="10807" fg:w="2"/><text x="96.2269%" y="319.50"></text></g><g><title>main::update_sptree (19 samples, 0.17%)</title><rect x="95.8703%" y="357" width="0.1687%" height="15" fill="rgb(211,50,8)" fg:x="10795" fg:w="19"/><text x="96.1203%" y="367.50"></text></g><g><title>main::min_cost (9,890 samples, 87.83%)</title><rect x="8.2149%" y="373" width="87.8330%" height="15" fill="rgb(245,182,24)" fg:x="925" fg:w="9890"/><text x="8.4649%" y="383.50">main::min_cost</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.05%)</title><rect x="96.0835%" y="357" width="0.0533%" height="15" fill="rgb(242,14,37)" fg:x="10819" fg:w="6"/><text x="96.3335%" y="367.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="96.0924%" y="341" width="0.0444%" height="15" fill="rgb(246,228,12)" fg:x="10820" fg:w="5"/><text x="96.3424%" y="351.50"></text></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.02%)</title><rect x="96.1368%" y="357" width="0.0178%" height="15" fill="rgb(213,55,15)" fg:x="10825" fg:w="2"/><text x="96.3868%" y="367.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="96.1368%" y="341" width="0.0178%" height="15" fill="rgb(209,9,3)" fg:x="10825" fg:w="2"/><text x="96.3868%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (2 samples, 0.02%)</title><rect x="96.1368%" y="325" width="0.0178%" height="15" fill="rgb(230,59,30)" fg:x="10825" fg:w="2"/><text x="96.3868%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (15 samples, 0.13%)</title><rect x="96.0480%" y="373" width="0.1332%" height="15" fill="rgb(209,121,21)" fg:x="10815" fg:w="15"/><text x="96.2980%" y="383.50"></text></g><g><title>petgraph::graph_impl::index_twice (3 samples, 0.03%)</title><rect x="96.1545%" y="357" width="0.0266%" height="15" fill="rgb(220,109,13)" fg:x="10827" fg:w="3"/><text x="96.4045%" y="367.50"></text></g><g><title>_start (9,927 samples, 88.16%)</title><rect x="8.0551%" y="517" width="88.1616%" height="15" fill="rgb(232,18,1)" fg:x="907" fg:w="9927"/><text x="8.3051%" y="527.50">_start</text></g><g><title>__libc_start_main (9,927 samples, 88.16%)</title><rect x="8.0551%" y="501" width="88.1616%" height="15" fill="rgb(215,41,42)" fg:x="907" fg:w="9927"/><text x="8.3051%" y="511.50">__libc_start_main</text></g><g><title>[libc.so.6] (9,927 samples, 88.16%)</title><rect x="8.0551%" y="485" width="88.1616%" height="15" fill="rgb(224,123,36)" fg:x="907" fg:w="9927"/><text x="8.3051%" y="495.50">[libc.so.6]</text></g><g><title>main (9,927 samples, 88.16%)</title><rect x="8.0551%" y="469" width="88.1616%" height="15" fill="rgb(240,125,3)" fg:x="907" fg:w="9927"/><text x="8.3051%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (9,927 samples, 88.16%)</title><rect x="8.0551%" y="453" width="88.1616%" height="15" fill="rgb(205,98,50)" fg:x="907" fg:w="9927"/><text x="8.3051%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (9,927 samples, 88.16%)</title><rect x="8.0551%" y="437" width="88.1616%" height="15" fill="rgb(205,185,37)" fg:x="907" fg:w="9927"/><text x="8.3051%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,927 samples, 88.16%)</title><rect x="8.0551%" y="421" width="88.1616%" height="15" fill="rgb(238,207,15)" fg:x="907" fg:w="9927"/><text x="8.3051%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (9,927 samples, 88.16%)</title><rect x="8.0551%" y="405" width="88.1616%" height="15" fill="rgb(213,199,42)" fg:x="907" fg:w="9927"/><text x="8.3051%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (9,927 samples, 88.16%)</title><rect x="8.0551%" y="389" width="88.1616%" height="15" fill="rgb(235,201,11)" fg:x="907" fg:w="9927"/><text x="8.3051%" y="399.50">main::main</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (3 samples, 0.03%)</title><rect x="96.1901%" y="373" width="0.0266%" height="15" fill="rgb(207,46,11)" fg:x="10831" fg:w="3"/><text x="96.4401%" y="383.50"></text></g><g><title>all (11,260 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="11260"/><text x="0.2500%" y="559.50"></text></g><g><title>main (11,260 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="11260"/><text x="0.2500%" y="543.50">main</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (426 samples, 3.78%)</title><rect x="96.2167%" y="517" width="3.7833%" height="15" fill="rgb(247,202,23)" fg:x="10834" fg:w="426"/><text x="96.4667%" y="527.50">core..</text></g></svg></svg>