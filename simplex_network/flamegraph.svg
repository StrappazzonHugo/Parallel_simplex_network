<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="211006"><g><title>[unknown] (23 samples, 0.01%)</title><rect x="0.0100%" y="517" width="0.0109%" height="15" fill="rgb(227,0,7)" fg:x="21" fg:w="23"/><text x="0.2600%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (40 samples, 0.02%)</title><rect x="0.1706%" y="373" width="0.0190%" height="15" fill="rgb(217,0,24)" fg:x="360" fg:w="40"/><text x="0.4206%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (40 samples, 0.02%)</title><rect x="0.1706%" y="357" width="0.0190%" height="15" fill="rgb(221,193,54)" fg:x="360" fg:w="40"/><text x="0.4206%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (40 samples, 0.02%)</title><rect x="0.1706%" y="341" width="0.0190%" height="15" fill="rgb(248,212,6)" fg:x="360" fg:w="40"/><text x="0.4206%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (220 samples, 0.10%)</title><rect x="0.1915%" y="357" width="0.1043%" height="15" fill="rgb(208,68,35)" fg:x="404" fg:w="220"/><text x="0.4415%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (220 samples, 0.10%)</title><rect x="0.1915%" y="341" width="0.1043%" height="15" fill="rgb(232,128,0)" fg:x="404" fg:w="220"/><text x="0.4415%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (210 samples, 0.10%)</title><rect x="0.1962%" y="325" width="0.0995%" height="15" fill="rgb(207,160,47)" fg:x="414" fg:w="210"/><text x="0.4462%" y="335.50"></text></g><g><title>main::min_cost::_{{closure}} (210 samples, 0.10%)</title><rect x="0.1962%" y="309" width="0.0995%" height="15" fill="rgb(228,23,34)" fg:x="414" fg:w="210"/><text x="0.4462%" y="319.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (39 samples, 0.02%)</title><rect x="0.2772%" y="293" width="0.0185%" height="15" fill="rgb(218,30,26)" fg:x="585" fg:w="39"/><text x="0.5272%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (478 samples, 0.23%)</title><rect x="0.4043%" y="101" width="0.2265%" height="15" fill="rgb(220,122,19)" fg:x="853" fg:w="478"/><text x="0.6543%" y="111.50"></text></g><g><title>core::cmp::min_by (478 samples, 0.23%)</title><rect x="0.4043%" y="85" width="0.2265%" height="15" fill="rgb(250,228,42)" fg:x="853" fg:w="478"/><text x="0.6543%" y="95.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (220 samples, 0.10%)</title><rect x="0.8436%" y="85" width="0.1043%" height="15" fill="rgb(240,193,28)" fg:x="1780" fg:w="220"/><text x="1.0936%" y="95.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (226 samples, 0.11%)</title><rect x="0.9478%" y="85" width="0.1071%" height="15" fill="rgb(216,20,37)" fg:x="2000" fg:w="226"/><text x="1.1978%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (66 samples, 0.03%)</title><rect x="1.0237%" y="69" width="0.0313%" height="15" fill="rgb(206,188,39)" fg:x="2160" fg:w="66"/><text x="1.2737%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (66 samples, 0.03%)</title><rect x="1.0237%" y="53" width="0.0313%" height="15" fill="rgb(217,207,13)" fg:x="2160" fg:w="66"/><text x="1.2737%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (66 samples, 0.03%)</title><rect x="1.0237%" y="37" width="0.0313%" height="15" fill="rgb(231,73,38)" fg:x="2160" fg:w="66"/><text x="1.2737%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (171 samples, 0.08%)</title><rect x="1.0914%" y="69" width="0.0810%" height="15" fill="rgb(225,20,46)" fg:x="2303" fg:w="171"/><text x="1.3414%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (171 samples, 0.08%)</title><rect x="1.0914%" y="53" width="0.0810%" height="15" fill="rgb(210,31,41)" fg:x="2303" fg:w="171"/><text x="1.3414%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (171 samples, 0.08%)</title><rect x="1.0914%" y="37" width="0.0810%" height="15" fill="rgb(221,200,47)" fg:x="2303" fg:w="171"/><text x="1.3414%" y="47.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (202 samples, 0.10%)</title><rect x="1.1725%" y="69" width="0.0957%" height="15" fill="rgb(226,26,5)" fg:x="2474" fg:w="202"/><text x="1.4225%" y="79.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (85 samples, 0.04%)</title><rect x="1.2682%" y="69" width="0.0403%" height="15" fill="rgb(249,33,26)" fg:x="2676" fg:w="85"/><text x="1.5182%" y="79.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (543 samples, 0.26%)</title><rect x="1.3085%" y="69" width="0.2573%" height="15" fill="rgb(235,183,28)" fg:x="2761" fg:w="543"/><text x="1.5585%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (2,596 samples, 1.23%)</title><rect x="0.3393%" y="165" width="1.2303%" height="15" fill="rgb(221,5,38)" fg:x="716" fg:w="2596"/><text x="0.5893%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (2,596 samples, 1.23%)</title><rect x="0.3393%" y="149" width="1.2303%" height="15" fill="rgb(247,18,42)" fg:x="716" fg:w="2596"/><text x="0.5893%" y="159.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (2,459 samples, 1.17%)</title><rect x="0.4043%" y="133" width="1.1654%" height="15" fill="rgb(241,131,45)" fg:x="853" fg:w="2459"/><text x="0.6543%" y="143.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,459 samples, 1.17%)</title><rect x="0.4043%" y="117" width="1.1654%" height="15" fill="rgb(249,31,29)" fg:x="853" fg:w="2459"/><text x="0.6543%" y="127.50"></text></g><g><title>main::_find_block_search::_{{closure}} (1,981 samples, 0.94%)</title><rect x="0.6308%" y="101" width="0.9388%" height="15" fill="rgb(225,111,53)" fg:x="1331" fg:w="1981"/><text x="0.8808%" y="111.50"></text></g><g><title>main::get_reduced_cost_edgeindex (1,086 samples, 0.51%)</title><rect x="1.0549%" y="85" width="0.5147%" height="15" fill="rgb(238,160,17)" fg:x="2226" fg:w="1086"/><text x="1.3049%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (27,410 samples, 12.99%)</title><rect x="5.8463%" y="101" width="12.9902%" height="15" fill="rgb(214,148,48)" fg:x="12336" fg:w="27410"/><text x="6.0963%" y="111.50">core::iter::traits::..</text></g><g><title>core::cmp::min_by (27,410 samples, 12.99%)</title><rect x="5.8463%" y="85" width="12.9902%" height="15" fill="rgb(232,36,49)" fg:x="12336" fg:w="27410"/><text x="6.0963%" y="95.50">core::cmp::min_by</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (13,376 samples, 6.34%)</title><rect x="25.7320%" y="85" width="6.3392%" height="15" fill="rgb(209,103,24)" fg:x="54296" fg:w="13376"/><text x="25.9820%" y="95.50">&lt;i32 as ..</text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (19,204 samples, 9.10%)</title><rect x="32.0711%" y="85" width="9.1012%" height="15" fill="rgb(229,88,8)" fg:x="67672" fg:w="19204"/><text x="32.3211%" y="95.50">&lt;petgraph::gr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4,322 samples, 2.05%)</title><rect x="39.1240%" y="69" width="2.0483%" height="15" fill="rgb(213,181,19)" fg:x="82554" fg:w="4322"/><text x="39.3740%" y="79.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,322 samples, 2.05%)</title><rect x="39.1240%" y="53" width="2.0483%" height="15" fill="rgb(254,191,54)" fg:x="82554" fg:w="4322"/><text x="39.3740%" y="63.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,322 samples, 2.05%)</title><rect x="39.1240%" y="37" width="2.0483%" height="15" fill="rgb(241,83,37)" fg:x="82554" fg:w="4322"/><text x="39.3740%" y="47.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (15,813 samples, 7.49%)</title><rect x="43.4803%" y="69" width="7.4941%" height="15" fill="rgb(233,36,39)" fg:x="91746" fg:w="15813"/><text x="43.7303%" y="79.50">&lt;alloc::ve..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15,813 samples, 7.49%)</title><rect x="43.4803%" y="53" width="7.4941%" height="15" fill="rgb(226,3,54)" fg:x="91746" fg:w="15813"/><text x="43.7303%" y="63.50">core::slic..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15,813 samples, 7.49%)</title><rect x="43.4803%" y="37" width="7.4941%" height="15" fill="rgb(245,192,40)" fg:x="91746" fg:w="15813"/><text x="43.7303%" y="47.50">&lt;usize as ..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (17,343 samples, 8.22%)</title><rect x="50.9744%" y="69" width="8.2192%" height="15" fill="rgb(238,167,29)" fg:x="107559" fg:w="17343"/><text x="51.2244%" y="79.50">&lt;i32 as cor..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (4,902 samples, 2.32%)</title><rect x="59.1936%" y="69" width="2.3232%" height="15" fill="rgb(232,182,51)" fg:x="124902" fg:w="4902"/><text x="59.4436%" y="79.50">&lt;..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (49,406 samples, 23.41%)</title><rect x="61.5167%" y="69" width="23.4145%" height="15" fill="rgb(231,60,39)" fg:x="129804" fg:w="49406"/><text x="61.7667%" y="79.50">petgraph::graph_impl::Edge&lt;E,Ix&gt;::sou..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (183,062 samples, 86.76%)</title><rect x="0.3384%" y="181" width="86.7568%" height="15" fill="rgb(208,69,12)" fg:x="714" fg:w="183062"/><text x="0.5884%" y="191.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (180,464 samples, 85.53%)</title><rect x="1.5696%" y="165" width="85.5255%" height="15" fill="rgb(235,93,37)" fg:x="3312" fg:w="180464"/><text x="1.8196%" y="175.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (171,453 samples, 81.26%)</title><rect x="5.8401%" y="149" width="81.2550%" height="15" fill="rgb(213,116,39)" fg:x="12323" fg:w="171453"/><text x="6.0901%" y="159.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}}</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (171,440 samples, 81.25%)</title><rect x="5.8463%" y="133" width="81.2489%" height="15" fill="rgb(222,207,29)" fg:x="12336" fg:w="171440"/><text x="6.0963%" y="143.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (171,440 samples, 81.25%)</title><rect x="5.8463%" y="117" width="81.2489%" height="15" fill="rgb(206,96,30)" fg:x="12336" fg:w="171440"/><text x="6.0963%" y="127.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>main::_find_block_search::_{{closure}} (144,030 samples, 68.26%)</title><rect x="18.8364%" y="101" width="68.2587%" height="15" fill="rgb(218,138,4)" fg:x="39746" fg:w="144030"/><text x="19.0864%" y="111.50">main::_find_block_search::_{{closure}}</text></g><g><title>main::get_reduced_cost_edgeindex (96,900 samples, 45.92%)</title><rect x="41.1723%" y="85" width="45.9229%" height="15" fill="rgb(250,191,14)" fg:x="86876" fg:w="96900"/><text x="41.4223%" y="95.50">main::get_reduced_cost_edgeindex</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (4,566 samples, 2.16%)</title><rect x="84.9312%" y="69" width="2.1639%" height="15" fill="rgb(239,60,40)" fg:x="179210" fg:w="4566"/><text x="85.1812%" y="79.50">p..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15,319 samples, 7.26%)</title><rect x="87.0961%" y="165" width="7.2600%" height="15" fill="rgb(206,27,48)" fg:x="183778" fg:w="15319"/><text x="87.3461%" y="175.50">&lt;core::ptr..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (198,521 samples, 94.08%)</title><rect x="0.3014%" y="309" width="94.0831%" height="15" fill="rgb(225,35,8)" fg:x="636" fg:w="198521"/><text x="0.5514%" y="319.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (198,521 samples, 94.08%)</title><rect x="0.3014%" y="293" width="94.0831%" height="15" fill="rgb(250,213,24)" fg:x="636" fg:w="198521"/><text x="0.5514%" y="303.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (198,521 samples, 94.08%)</title><rect x="0.3014%" y="277" width="94.0831%" height="15" fill="rgb(247,123,22)" fg:x="636" fg:w="198521"/><text x="0.5514%" y="287.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (198,521 samples, 94.08%)</title><rect x="0.3014%" y="261" width="94.0831%" height="15" fill="rgb(231,138,38)" fg:x="636" fg:w="198521"/><text x="0.5514%" y="271.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (198,521 samples, 94.08%)</title><rect x="0.3014%" y="245" width="94.0831%" height="15" fill="rgb(231,145,46)" fg:x="636" fg:w="198521"/><text x="0.5514%" y="255.50">&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (198,521 samples, 94.08%)</title><rect x="0.3014%" y="229" width="94.0831%" height="15" fill="rgb(251,118,11)" fg:x="636" fg:w="198521"/><text x="0.5514%" y="239.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (198,521 samples, 94.08%)</title><rect x="0.3014%" y="213" width="94.0831%" height="15" fill="rgb(217,147,25)" fg:x="636" fg:w="198521"/><text x="0.5514%" y="223.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (198,521 samples, 94.08%)</title><rect x="0.3014%" y="197" width="94.0831%" height="15" fill="rgb(247,81,37)" fg:x="636" fg:w="198521"/><text x="0.5514%" y="207.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,381 samples, 7.29%)</title><rect x="87.0952%" y="181" width="7.2894%" height="15" fill="rgb(209,12,38)" fg:x="183776" fg:w="15381"/><text x="87.3452%" y="191.50">&lt;core::sli..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (60 samples, 0.03%)</title><rect x="94.3561%" y="165" width="0.0284%" height="15" fill="rgb(227,1,9)" fg:x="199097" fg:w="60"/><text x="94.6061%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (60 samples, 0.03%)</title><rect x="94.3561%" y="149" width="0.0284%" height="15" fill="rgb(248,47,43)" fg:x="199097" fg:w="60"/><text x="94.6061%" y="159.50"></text></g><g><title>main::_find_block_search (198,529 samples, 94.09%)</title><rect x="0.2990%" y="357" width="94.0869%" height="15" fill="rgb(221,10,30)" fg:x="631" fg:w="198529"/><text x="0.5490%" y="367.50">main::_find_block_search</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (198,524 samples, 94.08%)</title><rect x="0.3014%" y="341" width="94.0845%" height="15" fill="rgb(210,229,1)" fg:x="636" fg:w="198524"/><text x="0.5514%" y="351.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (198,524 samples, 94.08%)</title><rect x="0.3014%" y="325" width="94.0845%" height="15" fill="rgb(222,148,37)" fg:x="636" fg:w="198524"/><text x="0.5514%" y="335.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (402 samples, 0.19%)</title><rect x="94.3907%" y="293" width="0.1905%" height="15" fill="rgb(234,67,33)" fg:x="199170" fg:w="402"/><text x="94.6407%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (402 samples, 0.19%)</title><rect x="94.3907%" y="277" width="0.1905%" height="15" fill="rgb(247,98,35)" fg:x="199170" fg:w="402"/><text x="94.6407%" y="287.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (402 samples, 0.19%)</title><rect x="94.3907%" y="261" width="0.1905%" height="15" fill="rgb(247,138,52)" fg:x="199170" fg:w="402"/><text x="94.6407%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (402 samples, 0.19%)</title><rect x="94.3907%" y="245" width="0.1905%" height="15" fill="rgb(213,79,30)" fg:x="199170" fg:w="402"/><text x="94.6407%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (402 samples, 0.19%)</title><rect x="94.3907%" y="229" width="0.1905%" height="15" fill="rgb(246,177,23)" fg:x="199170" fg:w="402"/><text x="94.6407%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (344 samples, 0.16%)</title><rect x="94.4182%" y="213" width="0.1630%" height="15" fill="rgb(230,62,27)" fg:x="199228" fg:w="344"/><text x="94.6682%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (344 samples, 0.16%)</title><rect x="94.4182%" y="197" width="0.1630%" height="15" fill="rgb(216,154,8)" fg:x="199228" fg:w="344"/><text x="94.6682%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (406 samples, 0.19%)</title><rect x="94.3893%" y="341" width="0.1924%" height="15" fill="rgb(244,35,45)" fg:x="199167" fg:w="406"/><text x="94.6393%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (406 samples, 0.19%)</title><rect x="94.3893%" y="325" width="0.1924%" height="15" fill="rgb(251,115,12)" fg:x="199167" fg:w="406"/><text x="94.6393%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (403 samples, 0.19%)</title><rect x="94.3907%" y="309" width="0.1910%" height="15" fill="rgb(240,54,50)" fg:x="199170" fg:w="403"/><text x="94.6407%" y="319.50"></text></g><g><title>main::compute_flowchange (416 samples, 0.20%)</title><rect x="94.3859%" y="357" width="0.1972%" height="15" fill="rgb(233,84,52)" fg:x="199160" fg:w="416"/><text x="94.6359%" y="367.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (51 samples, 0.02%)</title><rect x="94.5964%" y="245" width="0.0242%" height="15" fill="rgb(207,117,47)" fg:x="199604" fg:w="51"/><text x="94.8464%" y="255.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (440 samples, 0.21%)</title><rect x="94.5964%" y="261" width="0.2085%" height="15" fill="rgb(249,43,39)" fg:x="199604" fg:w="440"/><text x="94.8464%" y="271.50"></text></g><g><title>core::array::_&lt;impl core::clone::Clone for [T: N]&gt;::clone (389 samples, 0.18%)</title><rect x="94.6205%" y="245" width="0.1844%" height="15" fill="rgb(209,38,44)" fg:x="199655" fg:w="389"/><text x="94.8705%" y="255.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (389 samples, 0.18%)</title><rect x="94.6205%" y="229" width="0.1844%" height="15" fill="rgb(236,212,23)" fg:x="199655" fg:w="389"/><text x="94.8705%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (517 samples, 0.25%)</title><rect x="94.5921%" y="341" width="0.2450%" height="15" fill="rgb(242,79,21)" fg:x="199595" fg:w="517"/><text x="94.8421%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (517 samples, 0.25%)</title><rect x="94.5921%" y="325" width="0.2450%" height="15" fill="rgb(211,96,35)" fg:x="199595" fg:w="517"/><text x="94.8421%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (517 samples, 0.25%)</title><rect x="94.5921%" y="309" width="0.2450%" height="15" fill="rgb(253,215,40)" fg:x="199595" fg:w="517"/><text x="94.8421%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (517 samples, 0.25%)</title><rect x="94.5921%" y="293" width="0.2450%" height="15" fill="rgb(211,81,21)" fg:x="199595" fg:w="517"/><text x="94.8421%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (517 samples, 0.25%)</title><rect x="94.5921%" y="277" width="0.2450%" height="15" fill="rgb(208,190,38)" fg:x="199595" fg:w="517"/><text x="94.8421%" y="287.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (68 samples, 0.03%)</title><rect x="94.8049%" y="261" width="0.0322%" height="15" fill="rgb(235,213,38)" fg:x="200044" fg:w="68"/><text x="95.0549%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.01%)</title><rect x="94.8371%" y="309" width="0.0109%" height="15" fill="rgb(237,122,38)" fg:x="200112" fg:w="23"/><text x="95.0871%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.01%)</title><rect x="94.8371%" y="293" width="0.0109%" height="15" fill="rgb(244,218,35)" fg:x="200112" fg:w="23"/><text x="95.0871%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::IndexMut&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index_mut (63 samples, 0.03%)</title><rect x="94.9494%" y="277" width="0.0299%" height="15" fill="rgb(240,68,47)" fg:x="200349" fg:w="63"/><text x="95.1994%" y="287.50"></text></g><g><title>main::initialization (983 samples, 0.47%)</title><rect x="94.5921%" y="357" width="0.4659%" height="15" fill="rgb(210,16,53)" fg:x="199595" fg:w="983"/><text x="94.8421%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (466 samples, 0.22%)</title><rect x="94.8371%" y="341" width="0.2208%" height="15" fill="rgb(235,124,12)" fg:x="200112" fg:w="466"/><text x="95.0871%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (466 samples, 0.22%)</title><rect x="94.8371%" y="325" width="0.2208%" height="15" fill="rgb(224,169,11)" fg:x="200112" fg:w="466"/><text x="95.0871%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (443 samples, 0.21%)</title><rect x="94.8480%" y="309" width="0.2099%" height="15" fill="rgb(250,166,2)" fg:x="200135" fg:w="443"/><text x="95.0980%" y="319.50"></text></g><g><title>main::initialization::_{{closure}} (443 samples, 0.21%)</title><rect x="94.8480%" y="293" width="0.2099%" height="15" fill="rgb(242,216,29)" fg:x="200135" fg:w="443"/><text x="95.0980%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (166 samples, 0.08%)</title><rect x="94.9793%" y="277" width="0.0787%" height="15" fill="rgb(230,116,27)" fg:x="200412" fg:w="166"/><text x="95.2293%" y="287.50"></text></g><g><title>core::ptr::write (126 samples, 0.06%)</title><rect x="94.9982%" y="261" width="0.0597%" height="15" fill="rgb(228,99,48)" fg:x="200452" fg:w="126"/><text x="95.2482%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 0.06%)</title><rect x="95.1456%" y="197" width="0.0559%" height="15" fill="rgb(253,11,6)" fg:x="200763" fg:w="118"/><text x="95.3956%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (235 samples, 0.11%)</title><rect x="95.0921%" y="229" width="0.1114%" height="15" fill="rgb(247,143,39)" fg:x="200650" fg:w="235"/><text x="95.3421%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (235 samples, 0.11%)</title><rect x="95.0921%" y="213" width="0.1114%" height="15" fill="rgb(236,97,10)" fg:x="200650" fg:w="235"/><text x="95.3421%" y="223.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (610 samples, 0.29%)</title><rect x="95.2035%" y="181" width="0.2891%" height="15" fill="rgb(233,208,19)" fg:x="200885" fg:w="610"/><text x="95.4535%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (971 samples, 0.46%)</title><rect x="95.0911%" y="245" width="0.4602%" height="15" fill="rgb(216,164,2)" fg:x="200648" fg:w="971"/><text x="95.3411%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (734 samples, 0.35%)</title><rect x="95.2035%" y="229" width="0.3479%" height="15" fill="rgb(220,129,5)" fg:x="200885" fg:w="734"/><text x="95.4535%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (734 samples, 0.35%)</title><rect x="95.2035%" y="213" width="0.3479%" height="15" fill="rgb(242,17,10)" fg:x="200885" fg:w="734"/><text x="95.4535%" y="223.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (734 samples, 0.35%)</title><rect x="95.2035%" y="197" width="0.3479%" height="15" fill="rgb(242,107,0)" fg:x="200885" fg:w="734"/><text x="95.4535%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::raw_edges (124 samples, 0.06%)</title><rect x="95.4925%" y="181" width="0.0588%" height="15" fill="rgb(251,28,31)" fg:x="201495" fg:w="124"/><text x="95.7425%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (124 samples, 0.06%)</title><rect x="95.4925%" y="165" width="0.0588%" height="15" fill="rgb(233,223,10)" fg:x="201495" fg:w="124"/><text x="95.7425%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (123 samples, 0.06%)</title><rect x="95.4930%" y="149" width="0.0583%" height="15" fill="rgb(215,21,27)" fg:x="201496" fg:w="123"/><text x="95.7430%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (123 samples, 0.06%)</title><rect x="95.4930%" y="133" width="0.0583%" height="15" fill="rgb(232,23,21)" fg:x="201496" fg:w="123"/><text x="95.7430%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (49 samples, 0.02%)</title><rect x="95.5532%" y="181" width="0.0232%" height="15" fill="rgb(244,5,23)" fg:x="201623" fg:w="49"/><text x="95.8032%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (49 samples, 0.02%)</title><rect x="95.5532%" y="165" width="0.0232%" height="15" fill="rgb(226,81,46)" fg:x="201623" fg:w="49"/><text x="95.8032%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (49 samples, 0.02%)</title><rect x="95.5532%" y="149" width="0.0232%" height="15" fill="rgb(247,70,30)" fg:x="201623" fg:w="49"/><text x="95.8032%" y="159.50"></text></g><g><title>alloc::alloc::realloc (49 samples, 0.02%)</title><rect x="95.5532%" y="133" width="0.0232%" height="15" fill="rgb(212,68,19)" fg:x="201623" fg:w="49"/><text x="95.8032%" y="143.50"></text></g><g><title>realloc (49 samples, 0.02%)</title><rect x="95.5532%" y="117" width="0.0232%" height="15" fill="rgb(240,187,13)" fg:x="201623" fg:w="49"/><text x="95.8032%" y="127.50"></text></g><g><title>[libc.so.6] (45 samples, 0.02%)</title><rect x="95.5551%" y="101" width="0.0213%" height="15" fill="rgb(223,113,26)" fg:x="201627" fg:w="45"/><text x="95.8051%" y="111.50"></text></g><g><title>[libc.so.6] (27 samples, 0.01%)</title><rect x="95.5636%" y="85" width="0.0128%" height="15" fill="rgb(206,192,2)" fg:x="201645" fg:w="27"/><text x="95.8136%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (54 samples, 0.03%)</title><rect x="95.5513%" y="245" width="0.0256%" height="15" fill="rgb(241,108,4)" fg:x="201619" fg:w="54"/><text x="95.8013%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (54 samples, 0.03%)</title><rect x="95.5513%" y="229" width="0.0256%" height="15" fill="rgb(247,173,49)" fg:x="201619" fg:w="54"/><text x="95.8013%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (54 samples, 0.03%)</title><rect x="95.5513%" y="213" width="0.0256%" height="15" fill="rgb(224,114,35)" fg:x="201619" fg:w="54"/><text x="95.8013%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (54 samples, 0.03%)</title><rect x="95.5513%" y="197" width="0.0256%" height="15" fill="rgb(245,159,27)" fg:x="201619" fg:w="54"/><text x="95.8013%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (239 samples, 0.11%)</title><rect x="95.5774%" y="245" width="0.1133%" height="15" fill="rgb(245,172,44)" fg:x="201674" fg:w="239"/><text x="95.8274%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,541 samples, 0.73%)</title><rect x="95.0594%" y="277" width="0.7303%" height="15" fill="rgb(236,23,11)" fg:x="200581" fg:w="1541"/><text x="95.3094%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,541 samples, 0.73%)</title><rect x="95.0594%" y="261" width="0.7303%" height="15" fill="rgb(205,117,38)" fg:x="200581" fg:w="1541"/><text x="95.3094%" y="271.50"></text></g><g><title>core::ptr::write (209 samples, 0.10%)</title><rect x="95.6906%" y="245" width="0.0990%" height="15" fill="rgb(237,72,25)" fg:x="201913" fg:w="209"/><text x="95.9406%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,542 samples, 0.73%)</title><rect x="95.0594%" y="341" width="0.7308%" height="15" fill="rgb(244,70,9)" fg:x="200581" fg:w="1542"/><text x="95.3094%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,542 samples, 0.73%)</title><rect x="95.0594%" y="325" width="0.7308%" height="15" fill="rgb(217,125,39)" fg:x="200581" fg:w="1542"/><text x="95.3094%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,542 samples, 0.73%)</title><rect x="95.0594%" y="309" width="0.7308%" height="15" fill="rgb(235,36,10)" fg:x="200581" fg:w="1542"/><text x="95.3094%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,542 samples, 0.73%)</title><rect x="95.0594%" y="293" width="0.7308%" height="15" fill="rgb(251,123,47)" fg:x="200581" fg:w="1542"/><text x="95.3094%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (179 samples, 0.08%)</title><rect x="95.7902%" y="341" width="0.0848%" height="15" fill="rgb(221,13,13)" fg:x="202123" fg:w="179"/><text x="96.0402%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (179 samples, 0.08%)</title><rect x="95.7902%" y="325" width="0.0848%" height="15" fill="rgb(238,131,9)" fg:x="202123" fg:w="179"/><text x="96.0402%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (179 samples, 0.08%)</title><rect x="95.7902%" y="309" width="0.0848%" height="15" fill="rgb(211,50,8)" fg:x="202123" fg:w="179"/><text x="96.0402%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (124 samples, 0.06%)</title><rect x="95.8162%" y="293" width="0.0588%" height="15" fill="rgb(245,182,24)" fg:x="202178" fg:w="124"/><text x="96.0662%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (123 samples, 0.06%)</title><rect x="95.8167%" y="277" width="0.0583%" height="15" fill="rgb(242,14,37)" fg:x="202179" fg:w="123"/><text x="96.0667%" y="287.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (123 samples, 0.06%)</title><rect x="95.8167%" y="261" width="0.0583%" height="15" fill="rgb(246,228,12)" fg:x="202179" fg:w="123"/><text x="96.0667%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (63 samples, 0.03%)</title><rect x="95.8451%" y="245" width="0.0299%" height="15" fill="rgb(213,55,15)" fg:x="202239" fg:w="63"/><text x="96.0951%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f32&gt;::eq (63 samples, 0.03%)</title><rect x="95.8451%" y="229" width="0.0299%" height="15" fill="rgb(209,9,3)" fg:x="202239" fg:w="63"/><text x="96.0951%" y="239.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (268 samples, 0.13%)</title><rect x="96.1660%" y="325" width="0.1270%" height="15" fill="rgb(230,59,30)" fg:x="202916" fg:w="268"/><text x="96.4160%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (268 samples, 0.13%)</title><rect x="96.1660%" y="309" width="0.1270%" height="15" fill="rgb(209,121,21)" fg:x="202916" fg:w="268"/><text x="96.4160%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (268 samples, 0.13%)</title><rect x="96.1660%" y="293" width="0.1270%" height="15" fill="rgb(220,109,13)" fg:x="202916" fg:w="268"/><text x="96.4160%" y="303.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (128 samples, 0.06%)</title><rect x="96.2323%" y="277" width="0.0607%" height="15" fill="rgb(232,18,1)" fg:x="203056" fg:w="128"/><text x="96.4823%" y="287.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (128 samples, 0.06%)</title><rect x="96.2323%" y="261" width="0.0607%" height="15" fill="rgb(215,41,42)" fg:x="203056" fg:w="128"/><text x="96.4823%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (25 samples, 0.01%)</title><rect x="96.2930%" y="325" width="0.0118%" height="15" fill="rgb(224,123,36)" fg:x="203184" fg:w="25"/><text x="96.5430%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (25 samples, 0.01%)</title><rect x="96.2930%" y="309" width="0.0118%" height="15" fill="rgb(240,125,3)" fg:x="203184" fg:w="25"/><text x="96.5430%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (25 samples, 0.01%)</title><rect x="96.2930%" y="293" width="0.0118%" height="15" fill="rgb(205,98,50)" fg:x="203184" fg:w="25"/><text x="96.5430%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (248 samples, 0.12%)</title><rect x="96.3048%" y="325" width="0.1175%" height="15" fill="rgb(205,185,37)" fg:x="203209" fg:w="248"/><text x="96.5548%" y="335.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (43 samples, 0.02%)</title><rect x="96.7191%" y="309" width="0.0204%" height="15" fill="rgb(238,207,15)" fg:x="204083" fg:w="43"/><text x="96.9691%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (43 samples, 0.02%)</title><rect x="96.7191%" y="293" width="0.0204%" height="15" fill="rgb(213,199,42)" fg:x="204083" fg:w="43"/><text x="96.9691%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (195 samples, 0.09%)</title><rect x="96.7394%" y="309" width="0.0924%" height="15" fill="rgb(235,201,11)" fg:x="204126" fg:w="195"/><text x="96.9894%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (195 samples, 0.09%)</title><rect x="96.7394%" y="293" width="0.0924%" height="15" fill="rgb(207,46,11)" fg:x="204126" fg:w="195"/><text x="96.9894%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (941 samples, 0.45%)</title><rect x="96.4224%" y="325" width="0.4460%" height="15" fill="rgb(241,35,35)" fg:x="203457" fg:w="941"/><text x="96.6724%" y="335.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (77 samples, 0.04%)</title><rect x="96.8318%" y="309" width="0.0365%" height="15" fill="rgb(243,32,47)" fg:x="204321" fg:w="77"/><text x="97.0818%" y="319.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (77 samples, 0.04%)</title><rect x="96.8318%" y="293" width="0.0365%" height="15" fill="rgb(247,202,23)" fg:x="204321" fg:w="77"/><text x="97.0818%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (338 samples, 0.16%)</title><rect x="96.8688%" y="325" width="0.1602%" height="15" fill="rgb(219,102,11)" fg:x="204399" fg:w="338"/><text x="97.1188%" y="335.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (246 samples, 0.12%)</title><rect x="97.2527%" y="309" width="0.1166%" height="15" fill="rgb(243,110,44)" fg:x="205209" fg:w="246"/><text x="97.5027%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (246 samples, 0.12%)</title><rect x="97.2527%" y="293" width="0.1166%" height="15" fill="rgb(222,74,54)" fg:x="205209" fg:w="246"/><text x="97.5027%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (246 samples, 0.12%)</title><rect x="97.2527%" y="277" width="0.1166%" height="15" fill="rgb(216,99,12)" fg:x="205209" fg:w="246"/><text x="97.5027%" y="287.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (122 samples, 0.06%)</title><rect x="97.3115%" y="261" width="0.0578%" height="15" fill="rgb(226,22,26)" fg:x="205333" fg:w="122"/><text x="97.5615%" y="271.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (122 samples, 0.06%)</title><rect x="97.3115%" y="245" width="0.0578%" height="15" fill="rgb(217,163,10)" fg:x="205333" fg:w="122"/><text x="97.5615%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (251 samples, 0.12%)</title><rect x="97.3693%" y="309" width="0.1190%" height="15" fill="rgb(213,25,53)" fg:x="205455" fg:w="251"/><text x="97.6193%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (251 samples, 0.12%)</title><rect x="97.3693%" y="293" width="0.1190%" height="15" fill="rgb(252,105,26)" fg:x="205455" fg:w="251"/><text x="97.6193%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (251 samples, 0.12%)</title><rect x="97.3693%" y="277" width="0.1190%" height="15" fill="rgb(220,39,43)" fg:x="205455" fg:w="251"/><text x="97.6193%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (226 samples, 0.11%)</title><rect x="97.4882%" y="309" width="0.1071%" height="15" fill="rgb(229,68,48)" fg:x="205706" fg:w="226"/><text x="97.7382%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (184 samples, 0.09%)</title><rect x="97.9432%" y="293" width="0.0872%" height="15" fill="rgb(252,8,32)" fg:x="206666" fg:w="184"/><text x="98.1932%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (184 samples, 0.09%)</title><rect x="97.9432%" y="277" width="0.0872%" height="15" fill="rgb(223,20,43)" fg:x="206666" fg:w="184"/><text x="98.1932%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (954 samples, 0.45%)</title><rect x="97.5953%" y="309" width="0.4521%" height="15" fill="rgb(229,81,49)" fg:x="205932" fg:w="954"/><text x="97.8453%" y="319.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (36 samples, 0.02%)</title><rect x="98.0304%" y="293" width="0.0171%" height="15" fill="rgb(236,28,36)" fg:x="206850" fg:w="36"/><text x="98.2804%" y="303.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (36 samples, 0.02%)</title><rect x="98.0304%" y="277" width="0.0171%" height="15" fill="rgb(249,185,26)" fg:x="206850" fg:w="36"/><text x="98.2804%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (190 samples, 0.09%)</title><rect x="98.0474%" y="277" width="0.0900%" height="15" fill="rgb(249,174,33)" fg:x="206886" fg:w="190"/><text x="98.2974%" y="287.50"></text></g><g><title>core::ptr::write (181 samples, 0.09%)</title><rect x="98.0517%" y="261" width="0.0858%" height="15" fill="rgb(233,201,37)" fg:x="206895" fg:w="181"/><text x="98.3017%" y="271.50"></text></g><g><title>alloc::vec::from_elem (195 samples, 0.09%)</title><rect x="98.0474%" y="309" width="0.0924%" height="15" fill="rgb(221,78,26)" fg:x="206886" fg:w="195"/><text x="98.2974%" y="319.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (195 samples, 0.09%)</title><rect x="98.0474%" y="293" width="0.0924%" height="15" fill="rgb(250,127,30)" fg:x="206886" fg:w="195"/><text x="98.2974%" y="303.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (5,118 samples, 2.43%)</title><rect x="95.8892%" y="341" width="2.4255%" height="15" fill="rgb(230,49,44)" fg:x="202332" fg:w="5118"/><text x="96.1392%" y="351.50">pe..</text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (2,713 samples, 1.29%)</title><rect x="97.0290%" y="325" width="1.2857%" height="15" fill="rgb(229,67,23)" fg:x="204737" fg:w="2713"/><text x="97.2790%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (369 samples, 0.17%)</title><rect x="98.1399%" y="309" width="0.1749%" height="15" fill="rgb(249,83,47)" fg:x="207081" fg:w="369"/><text x="98.3899%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 0.08%)</title><rect x="98.4081%" y="309" width="0.0772%" height="15" fill="rgb(215,43,3)" fg:x="207647" fg:w="163"/><text x="98.6581%" y="319.50"></text></g><g><title>core::ptr::read (139 samples, 0.07%)</title><rect x="98.4195%" y="293" width="0.0659%" height="15" fill="rgb(238,154,13)" fg:x="207671" fg:w="139"/><text x="98.6695%" y="303.50"></text></g><g><title>core::cmp::max (126 samples, 0.06%)</title><rect x="98.4910%" y="309" width="0.0597%" height="15" fill="rgb(219,56,2)" fg:x="207822" fg:w="126"/><text x="98.7410%" y="319.50"></text></g><g><title>core::cmp::Ord::max (126 samples, 0.06%)</title><rect x="98.4910%" y="293" width="0.0597%" height="15" fill="rgb(233,0,4)" fg:x="207822" fg:w="126"/><text x="98.7410%" y="303.50"></text></g><g><title>core::cmp::max_by (126 samples, 0.06%)</title><rect x="98.4910%" y="277" width="0.0597%" height="15" fill="rgb(235,30,7)" fg:x="207822" fg:w="126"/><text x="98.7410%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (126 samples, 0.06%)</title><rect x="98.7185%" y="293" width="0.0597%" height="15" fill="rgb(250,79,13)" fg:x="208302" fg:w="126"/><text x="98.9685%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (126 samples, 0.06%)</title><rect x="98.7185%" y="277" width="0.0597%" height="15" fill="rgb(211,146,34)" fg:x="208302" fg:w="126"/><text x="98.9685%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (126 samples, 0.06%)</title><rect x="98.7185%" y="261" width="0.0597%" height="15" fill="rgb(228,22,38)" fg:x="208302" fg:w="126"/><text x="98.9685%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (86 samples, 0.04%)</title><rect x="98.8702%" y="277" width="0.0408%" height="15" fill="rgb(235,168,5)" fg:x="208622" fg:w="86"/><text x="99.1202%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (86 samples, 0.04%)</title><rect x="98.8702%" y="261" width="0.0408%" height="15" fill="rgb(221,155,16)" fg:x="208622" fg:w="86"/><text x="99.1202%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (942 samples, 0.45%)</title><rect x="98.7782%" y="293" width="0.4464%" height="15" fill="rgb(215,215,53)" fg:x="208428" fg:w="942"/><text x="99.0282%" y="303.50"></text></g><g><title>core::ptr::write (657 samples, 0.31%)</title><rect x="98.9133%" y="277" width="0.3114%" height="15" fill="rgb(223,4,10)" fg:x="208713" fg:w="657"/><text x="99.1633%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1,540 samples, 0.73%)</title><rect x="98.5545%" y="309" width="0.7298%" height="15" fill="rgb(234,103,6)" fg:x="207956" fg:w="1540"/><text x="98.8045%" y="319.50"></text></g><g><title>petgraph::graph_impl::index_twice (125 samples, 0.06%)</title><rect x="99.2251%" y="293" width="0.0592%" height="15" fill="rgb(227,97,0)" fg:x="209371" fg:w="125"/><text x="99.4751%" y="303.50"></text></g><g><title>core::cmp::max (122 samples, 0.06%)</title><rect x="99.2266%" y="277" width="0.0578%" height="15" fill="rgb(234,150,53)" fg:x="209374" fg:w="122"/><text x="99.4766%" y="287.50"></text></g><g><title>core::cmp::Ord::max (122 samples, 0.06%)</title><rect x="99.2266%" y="261" width="0.0578%" height="15" fill="rgb(228,201,54)" fg:x="209374" fg:w="122"/><text x="99.4766%" y="271.50"></text></g><g><title>core::cmp::max_by (122 samples, 0.06%)</title><rect x="99.2266%" y="245" width="0.0578%" height="15" fill="rgb(222,22,37)" fg:x="209374" fg:w="122"/><text x="99.4766%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (79 samples, 0.04%)</title><rect x="99.4223%" y="229" width="0.0374%" height="15" fill="rgb(237,53,32)" fg:x="209787" fg:w="79"/><text x="99.6723%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (79 samples, 0.04%)</title><rect x="99.4223%" y="213" width="0.0374%" height="15" fill="rgb(233,25,53)" fg:x="209787" fg:w="79"/><text x="99.6723%" y="223.50"></text></g><g><title>alloc::alloc::realloc (79 samples, 0.04%)</title><rect x="99.4223%" y="197" width="0.0374%" height="15" fill="rgb(210,40,34)" fg:x="209787" fg:w="79"/><text x="99.6723%" y="207.50"></text></g><g><title>realloc (79 samples, 0.04%)</title><rect x="99.4223%" y="181" width="0.0374%" height="15" fill="rgb(241,220,44)" fg:x="209787" fg:w="79"/><text x="99.6723%" y="191.50"></text></g><g><title>[libc.so.6] (73 samples, 0.03%)</title><rect x="99.4251%" y="165" width="0.0346%" height="15" fill="rgb(235,28,35)" fg:x="209793" fg:w="73"/><text x="99.6751%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (82 samples, 0.04%)</title><rect x="99.4223%" y="245" width="0.0389%" height="15" fill="rgb(210,56,17)" fg:x="209787" fg:w="82"/><text x="99.6723%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (87 samples, 0.04%)</title><rect x="99.4209%" y="277" width="0.0412%" height="15" fill="rgb(224,130,29)" fg:x="209784" fg:w="87"/><text x="99.6709%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (87 samples, 0.04%)</title><rect x="99.4209%" y="261" width="0.0412%" height="15" fill="rgb(235,212,8)" fg:x="209784" fg:w="87"/><text x="99.6709%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (920 samples, 0.44%)</title><rect x="99.2844%" y="293" width="0.4360%" height="15" fill="rgb(223,33,50)" fg:x="209496" fg:w="920"/><text x="99.5344%" y="303.50"></text></g><g><title>core::ptr::write (535 samples, 0.25%)</title><rect x="99.4668%" y="277" width="0.2535%" height="15" fill="rgb(219,149,13)" fg:x="209881" fg:w="535"/><text x="99.7168%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (921 samples, 0.44%)</title><rect x="99.2844%" y="309" width="0.4365%" height="15" fill="rgb(250,156,29)" fg:x="209496" fg:w="921"/><text x="99.5344%" y="319.50"></text></g><g><title>main::update_node_potentials (9,940 samples, 4.71%)</title><rect x="95.0580%" y="357" width="4.7108%" height="15" fill="rgb(216,193,19)" fg:x="200578" fg:w="9940"/><text x="95.3080%" y="367.50">main:..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (3,068 samples, 1.45%)</title><rect x="98.3147%" y="341" width="1.4540%" height="15" fill="rgb(216,135,14)" fg:x="207450" fg:w="3068"/><text x="98.5647%" y="351.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (3,068 samples, 1.45%)</title><rect x="98.3147%" y="325" width="1.4540%" height="15" fill="rgb(241,47,5)" fg:x="207450" fg:w="3068"/><text x="98.5647%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_count (101 samples, 0.05%)</title><rect x="99.7209%" y="309" width="0.0479%" height="15" fill="rgb(233,42,35)" fg:x="210417" fg:w="101"/><text x="99.9709%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (101 samples, 0.05%)</title><rect x="99.7209%" y="293" width="0.0479%" height="15" fill="rgb(231,13,6)" fg:x="210417" fg:w="101"/><text x="99.9709%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.02%)</title><rect x="99.7754%" y="325" width="0.0223%" height="15" fill="rgb(207,181,40)" fg:x="210532" fg:w="47"/><text x="100.0254%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (28 samples, 0.01%)</title><rect x="99.7844%" y="309" width="0.0133%" height="15" fill="rgb(254,173,49)" fg:x="210551" fg:w="28"/><text x="100.0344%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (128 samples, 0.06%)</title><rect x="99.7687%" y="341" width="0.0607%" height="15" fill="rgb(221,1,38)" fg:x="210518" fg:w="128"/><text x="100.0187%" y="351.50"></text></g><g><title>main::update_sptree::_{{closure}} (67 samples, 0.03%)</title><rect x="99.7976%" y="325" width="0.0318%" height="15" fill="rgb(206,124,46)" fg:x="210579" fg:w="67"/><text x="100.0476%" y="335.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (67 samples, 0.03%)</title><rect x="99.7976%" y="309" width="0.0318%" height="15" fill="rgb(249,21,11)" fg:x="210579" fg:w="67"/><text x="100.0476%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (67 samples, 0.03%)</title><rect x="99.7976%" y="293" width="0.0318%" height="15" fill="rgb(222,201,40)" fg:x="210579" fg:w="67"/><text x="100.0476%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (40 samples, 0.02%)</title><rect x="99.8337%" y="341" width="0.0190%" height="15" fill="rgb(235,61,29)" fg:x="210655" fg:w="40"/><text x="100.0837%" y="351.50"></text></g><g><title>core::intrinsics::copy (40 samples, 0.02%)</title><rect x="99.8337%" y="325" width="0.0190%" height="15" fill="rgb(219,207,3)" fg:x="210655" fg:w="40"/><text x="100.0837%" y="335.50"></text></g><g><title>[libc.so.6] (40 samples, 0.02%)</title><rect x="99.8337%" y="309" width="0.0190%" height="15" fill="rgb(222,56,46)" fg:x="210655" fg:w="40"/><text x="100.0837%" y="319.50"></text></g><g><title>main::min_cost (210,297 samples, 99.66%)</title><rect x="0.1896%" y="373" width="99.6640%" height="15" fill="rgb(239,76,54)" fg:x="400" fg:w="210297"/><text x="0.4396%" y="383.50">main::min_cost</text></g><g><title>main::update_sptree (179 samples, 0.08%)</title><rect x="99.7687%" y="357" width="0.0848%" height="15" fill="rgb(231,124,27)" fg:x="210518" fg:w="179"/><text x="100.0187%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (123 samples, 0.06%)</title><rect x="99.8886%" y="357" width="0.0583%" height="15" fill="rgb(249,195,6)" fg:x="210771" fg:w="123"/><text x="100.1386%" y="367.50"></text></g><g><title>core::ptr::write (81 samples, 0.04%)</title><rect x="99.9085%" y="341" width="0.0384%" height="15" fill="rgb(237,174,47)" fg:x="210813" fg:w="81"/><text x="100.1585%" y="351.50"></text></g><g><title>core::cmp::PartialEq::ne (35 samples, 0.02%)</title><rect x="99.9469%" y="357" width="0.0166%" height="15" fill="rgb(206,201,31)" fg:x="210894" fg:w="35"/><text x="100.1969%" y="367.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (35 samples, 0.02%)</title><rect x="99.9469%" y="341" width="0.0166%" height="15" fill="rgb(231,57,52)" fg:x="210894" fg:w="35"/><text x="100.1969%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (35 samples, 0.02%)</title><rect x="99.9469%" y="325" width="0.0166%" height="15" fill="rgb(248,177,22)" fg:x="210894" fg:w="35"/><text x="100.1969%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (267 samples, 0.13%)</title><rect x="99.8536%" y="373" width="0.1265%" height="15" fill="rgb(215,211,37)" fg:x="210697" fg:w="267"/><text x="100.1036%" y="383.50"></text></g><g><title>petgraph::graph_impl::index_twice (35 samples, 0.02%)</title><rect x="99.9635%" y="357" width="0.0166%" height="15" fill="rgb(241,128,51)" fg:x="210929" fg:w="35"/><text x="100.2135%" y="367.50"></text></g><g><title>all (211,006 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="211006"/><text x="0.2500%" y="559.50"></text></g><g><title>main (211,006 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(228,167,24)" fg:x="0" fg:w="211006"/><text x="0.2500%" y="543.50">main</text></g><g><title>_start (210,962 samples, 99.98%)</title><rect x="0.0209%" y="517" width="99.9791%" height="15" fill="rgb(228,143,12)" fg:x="44" fg:w="210962"/><text x="0.2709%" y="527.50">_start</text></g><g><title>__libc_start_main (210,962 samples, 99.98%)</title><rect x="0.0209%" y="501" width="99.9791%" height="15" fill="rgb(249,149,8)" fg:x="44" fg:w="210962"/><text x="0.2709%" y="511.50">__libc_start_main</text></g><g><title>[libc.so.6] (210,962 samples, 99.98%)</title><rect x="0.0209%" y="485" width="99.9791%" height="15" fill="rgb(243,35,44)" fg:x="44" fg:w="210962"/><text x="0.2709%" y="495.50">[libc.so.6]</text></g><g><title>main (210,962 samples, 99.98%)</title><rect x="0.0209%" y="469" width="99.9791%" height="15" fill="rgb(246,89,9)" fg:x="44" fg:w="210962"/><text x="0.2709%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (210,962 samples, 99.98%)</title><rect x="0.0209%" y="453" width="99.9791%" height="15" fill="rgb(233,213,13)" fg:x="44" fg:w="210962"/><text x="0.2709%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (210,962 samples, 99.98%)</title><rect x="0.0209%" y="437" width="99.9791%" height="15" fill="rgb(233,141,41)" fg:x="44" fg:w="210962"/><text x="0.2709%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (210,962 samples, 99.98%)</title><rect x="0.0209%" y="421" width="99.9791%" height="15" fill="rgb(239,167,4)" fg:x="44" fg:w="210962"/><text x="0.2709%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (210,962 samples, 99.98%)</title><rect x="0.0209%" y="405" width="99.9791%" height="15" fill="rgb(209,217,16)" fg:x="44" fg:w="210962"/><text x="0.2709%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (210,962 samples, 99.98%)</title><rect x="0.0209%" y="389" width="99.9791%" height="15" fill="rgb(219,88,35)" fg:x="44" fg:w="210962"/><text x="0.2709%" y="399.50">main::main</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (41 samples, 0.02%)</title><rect x="99.9806%" y="373" width="0.0194%" height="15" fill="rgb(220,193,23)" fg:x="210965" fg:w="41"/><text x="100.2306%" y="383.50"></text></g></svg></svg>