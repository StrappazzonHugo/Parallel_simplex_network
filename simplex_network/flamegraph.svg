<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="14357"><g><title>[[heap]] (2 samples, 0.01%)</title><rect x="0.0000%" y="469" width="0.0139%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="479.50"></text></g><g><title>[[stack]] (2 samples, 0.01%)</title><rect x="0.0139%" y="469" width="0.0139%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.2639%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.0697%" y="453" width="0.0209%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="3"/><text x="0.3197%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.0697%" y="437" width="0.0209%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="3"/><text x="0.3197%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.0697%" y="421" width="0.0209%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="3"/><text x="0.3197%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="0.0766%" y="405" width="0.0139%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="2"/><text x="0.3266%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="0.0766%" y="389" width="0.0139%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="2"/><text x="0.3266%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 0.07%)</title><rect x="0.0279%" y="469" width="0.0697%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="10"/><text x="0.2779%" y="479.50"></text></g><g><title>[libc.so.6] (11 samples, 0.08%)</title><rect x="0.1045%" y="453" width="0.0766%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="11"/><text x="0.3545%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="0.1811%" y="453" width="0.0139%" height="15" fill="rgb(220,122,19)" fg:x="26" fg:w="2"/><text x="0.4311%" y="463.50"></text></g><g><title>malloc (2 samples, 0.01%)</title><rect x="0.1950%" y="453" width="0.0139%" height="15" fill="rgb(250,228,42)" fg:x="28" fg:w="2"/><text x="0.4450%" y="463.50"></text></g><g><title>[unknown] (17 samples, 0.12%)</title><rect x="0.1045%" y="469" width="0.1184%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="17"/><text x="0.3545%" y="479.50"></text></g><g><title>realloc (2 samples, 0.01%)</title><rect x="0.2090%" y="453" width="0.0139%" height="15" fill="rgb(216,20,37)" fg:x="30" fg:w="2"/><text x="0.4590%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (14 samples, 0.10%)</title><rect x="0.2577%" y="309" width="0.0975%" height="15" fill="rgb(206,188,39)" fg:x="37" fg:w="14"/><text x="0.5077%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (14 samples, 0.10%)</title><rect x="0.2577%" y="293" width="0.0975%" height="15" fill="rgb(217,207,13)" fg:x="37" fg:w="14"/><text x="0.5077%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.10%)</title><rect x="0.2577%" y="277" width="0.0975%" height="15" fill="rgb(231,73,38)" fg:x="37" fg:w="14"/><text x="0.5077%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.10%)</title><rect x="0.2577%" y="261" width="0.0975%" height="15" fill="rgb(225,20,46)" fg:x="37" fg:w="14"/><text x="0.5077%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.10%)</title><rect x="0.2577%" y="245" width="0.0975%" height="15" fill="rgb(210,31,41)" fg:x="37" fg:w="14"/><text x="0.5077%" y="255.50"></text></g><g><title>cfree (12 samples, 0.08%)</title><rect x="0.2716%" y="229" width="0.0836%" height="15" fill="rgb(221,200,47)" fg:x="39" fg:w="12"/><text x="0.5216%" y="239.50"></text></g><g><title>[libc.so.6] (11 samples, 0.08%)</title><rect x="0.2786%" y="213" width="0.0766%" height="15" fill="rgb(226,26,5)" fg:x="40" fg:w="11"/><text x="0.5286%" y="223.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="0.3134%" y="197" width="0.0418%" height="15" fill="rgb(249,33,26)" fg:x="45" fg:w="6"/><text x="0.5634%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (4 samples, 0.03%)</title><rect x="0.3970%" y="293" width="0.0279%" height="15" fill="rgb(235,183,28)" fg:x="57" fg:w="4"/><text x="0.6470%" y="303.50"></text></g><g><title>main::__update_node_potentials (13 samples, 0.09%)</title><rect x="0.3552%" y="309" width="0.0905%" height="15" fill="rgb(221,5,38)" fg:x="51" fg:w="13"/><text x="0.6052%" y="319.50"></text></g><g><title>main::get_reduced_cost_edgeindex (3 samples, 0.02%)</title><rect x="0.4249%" y="293" width="0.0209%" height="15" fill="rgb(247,18,42)" fg:x="61" fg:w="3"/><text x="0.6749%" y="303.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1,645 samples, 11.46%)</title><rect x="19.3703%" y="293" width="11.4578%" height="15" fill="rgb(241,131,45)" fg:x="2781" fg:w="1645"/><text x="19.6203%" y="303.50">&lt;i32 as core::ops..</text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (554 samples, 3.86%)</title><rect x="30.8282%" y="293" width="3.8587%" height="15" fill="rgb(249,31,29)" fg:x="4426" fg:w="554"/><text x="31.0782%" y="303.50">&lt;pet..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (554 samples, 3.86%)</title><rect x="30.8282%" y="277" width="3.8587%" height="15" fill="rgb(225,111,53)" fg:x="4426" fg:w="554"/><text x="31.0782%" y="287.50">&lt;all..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (554 samples, 3.86%)</title><rect x="30.8282%" y="261" width="3.8587%" height="15" fill="rgb(238,160,17)" fg:x="4426" fg:w="554"/><text x="31.0782%" y="271.50">core..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (554 samples, 3.86%)</title><rect x="30.8282%" y="245" width="3.8587%" height="15" fill="rgb(214,148,48)" fg:x="4426" fg:w="554"/><text x="31.0782%" y="255.50">&lt;usi..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (563 samples, 3.92%)</title><rect x="34.6939%" y="293" width="3.9214%" height="15" fill="rgb(232,36,49)" fg:x="4981" fg:w="563"/><text x="34.9439%" y="303.50">core..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (563 samples, 3.92%)</title><rect x="34.6939%" y="277" width="3.9214%" height="15" fill="rgb(209,103,24)" fg:x="4981" fg:w="563"/><text x="34.9439%" y="287.50">&lt;cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (562 samples, 3.91%)</title><rect x="34.7008%" y="261" width="3.9145%" height="15" fill="rgb(229,88,8)" fg:x="4982" fg:w="562"/><text x="34.9508%" y="271.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,682 samples, 11.72%)</title><rect x="38.6153%" y="277" width="11.7155%" height="15" fill="rgb(213,181,19)" fg:x="5544" fg:w="1682"/><text x="38.8653%" y="287.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,682 samples, 11.72%)</title><rect x="38.6153%" y="261" width="11.7155%" height="15" fill="rgb(254,191,54)" fg:x="5544" fg:w="1682"/><text x="38.8653%" y="271.50">core::slice::inde..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,682 samples, 11.72%)</title><rect x="38.6153%" y="245" width="11.7155%" height="15" fill="rgb(241,83,37)" fg:x="5544" fg:w="1682"/><text x="38.8653%" y="255.50">&lt;usize as core::s..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (1,835 samples, 12.78%)</title><rect x="50.3308%" y="277" width="12.7812%" height="15" fill="rgb(233,36,39)" fg:x="7226" fg:w="1835"/><text x="50.5808%" y="287.50">&lt;i32 as core::ops::..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1,185 samples, 8.25%)</title><rect x="63.1121%" y="277" width="8.2538%" height="15" fill="rgb(226,3,54)" fg:x="9061" fg:w="1185"/><text x="63.3621%" y="287.50">&lt;i32 as cor..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (3,057 samples, 21.29%)</title><rect x="71.3659%" y="277" width="21.2927%" height="15" fill="rgb(245,192,40)" fg:x="10246" fg:w="3057"/><text x="71.6159%" y="287.50">petgraph::graph_impl::Edge&lt;E,Ix&gt;::..</text></g><g><title>main::_find_best_arc (13,420 samples, 93.47%)</title><rect x="0.4458%" y="309" width="93.4736%" height="15" fill="rgb(238,167,29)" fg:x="64" fg:w="13420"/><text x="0.6958%" y="319.50">main::_find_best_arc</text></g><g><title>main::get_reduced_cost_edgeindex (7,940 samples, 55.30%)</title><rect x="38.6153%" y="293" width="55.3040%" height="15" fill="rgb(232,182,51)" fg:x="5544" fg:w="7940"/><text x="38.8653%" y="303.50">main::get_reduced_cost_edgeindex</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (181 samples, 1.26%)</title><rect x="92.6586%" y="277" width="1.2607%" height="15" fill="rgb(231,60,39)" fg:x="13303" fg:w="181"/><text x="92.9086%" y="287.50"></text></g><g><title>main::_find_first_arc (2 samples, 0.01%)</title><rect x="93.9193%" y="309" width="0.0139%" height="15" fill="rgb(208,69,12)" fg:x="13484" fg:w="2"/><text x="94.1693%" y="319.50"></text></g><g><title>main::get_reduced_cost_edgeindex (2 samples, 0.01%)</title><rect x="93.9193%" y="293" width="0.0139%" height="15" fill="rgb(235,93,37)" fg:x="13484" fg:w="2"/><text x="94.1693%" y="303.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (2 samples, 0.01%)</title><rect x="93.9193%" y="277" width="0.0139%" height="15" fill="rgb(213,116,39)" fg:x="13484" fg:w="2"/><text x="94.1693%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="93.9402%" y="181" width="0.0139%" height="15" fill="rgb(222,207,29)" fg:x="13487" fg:w="2"/><text x="94.1902%" y="191.50"></text></g><g><title>__libc_calloc (11 samples, 0.08%)</title><rect x="93.9542%" y="181" width="0.0766%" height="15" fill="rgb(206,96,30)" fg:x="13489" fg:w="11"/><text x="94.2042%" y="191.50"></text></g><g><title>[libc.so.6] (9 samples, 0.06%)</title><rect x="93.9681%" y="165" width="0.0627%" height="15" fill="rgb(218,138,4)" fg:x="13491" fg:w="9"/><text x="94.2181%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (16 samples, 0.11%)</title><rect x="93.9402%" y="261" width="0.1114%" height="15" fill="rgb(250,191,14)" fg:x="13487" fg:w="16"/><text x="94.1902%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.11%)</title><rect x="93.9402%" y="245" width="0.1114%" height="15" fill="rgb(239,60,40)" fg:x="13487" fg:w="16"/><text x="94.1902%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (16 samples, 0.11%)</title><rect x="93.9402%" y="229" width="0.1114%" height="15" fill="rgb(206,27,48)" fg:x="13487" fg:w="16"/><text x="94.1902%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.11%)</title><rect x="93.9402%" y="213" width="0.1114%" height="15" fill="rgb(225,35,8)" fg:x="13487" fg:w="16"/><text x="94.1902%" y="223.50"></text></g><g><title>alloc::alloc::alloc_zeroed (16 samples, 0.11%)</title><rect x="93.9402%" y="197" width="0.1114%" height="15" fill="rgb(250,213,24)" fg:x="13487" fg:w="16"/><text x="94.1902%" y="207.50"></text></g><g><title>__rdl_alloc_zeroed (3 samples, 0.02%)</title><rect x="94.0308%" y="181" width="0.0209%" height="15" fill="rgb(247,123,22)" fg:x="13500" fg:w="3"/><text x="94.2808%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (5 samples, 0.03%)</title><rect x="94.0517%" y="261" width="0.0348%" height="15" fill="rgb(231,138,38)" fg:x="13503" fg:w="5"/><text x="94.3017%" y="271.50"></text></g><g><title>core::ptr::write (5 samples, 0.03%)</title><rect x="94.0517%" y="245" width="0.0348%" height="15" fill="rgb(231,145,46)" fg:x="13503" fg:w="5"/><text x="94.3017%" y="255.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.01%)</title><rect x="94.0865%" y="165" width="0.0139%" height="15" fill="rgb(251,118,11)" fg:x="13508" fg:w="2"/><text x="94.3365%" y="175.50"></text></g><g><title>alloc::vec::from_elem (28 samples, 0.20%)</title><rect x="93.9402%" y="293" width="0.1950%" height="15" fill="rgb(217,147,25)" fg:x="13487" fg:w="28"/><text x="94.1902%" y="303.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (28 samples, 0.20%)</title><rect x="93.9402%" y="277" width="0.1950%" height="15" fill="rgb(247,81,37)" fg:x="13487" fg:w="28"/><text x="94.1902%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.05%)</title><rect x="94.0865%" y="261" width="0.0488%" height="15" fill="rgb(209,12,38)" fg:x="13508" fg:w="7"/><text x="94.3365%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.05%)</title><rect x="94.0865%" y="245" width="0.0488%" height="15" fill="rgb(227,1,9)" fg:x="13508" fg:w="7"/><text x="94.3365%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.05%)</title><rect x="94.0865%" y="229" width="0.0488%" height="15" fill="rgb(248,47,43)" fg:x="13508" fg:w="7"/><text x="94.3365%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.05%)</title><rect x="94.0865%" y="213" width="0.0488%" height="15" fill="rgb(221,10,30)" fg:x="13508" fg:w="7"/><text x="94.3365%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.05%)</title><rect x="94.0865%" y="197" width="0.0488%" height="15" fill="rgb(210,229,1)" fg:x="13508" fg:w="7"/><text x="94.3365%" y="207.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.05%)</title><rect x="94.0865%" y="181" width="0.0488%" height="15" fill="rgb(222,148,37)" fg:x="13508" fg:w="7"/><text x="94.3365%" y="191.50"></text></g><g><title>malloc (5 samples, 0.03%)</title><rect x="94.1004%" y="165" width="0.0348%" height="15" fill="rgb(234,67,33)" fg:x="13510" fg:w="5"/><text x="94.3504%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="94.1213%" y="149" width="0.0139%" height="15" fill="rgb(247,98,35)" fg:x="13513" fg:w="2"/><text x="94.3713%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="94.3721%" y="197" width="0.0139%" height="15" fill="rgb(247,138,52)" fg:x="13549" fg:w="2"/><text x="94.6221%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="94.3721%" y="181" width="0.0139%" height="15" fill="rgb(213,79,30)" fg:x="13549" fg:w="2"/><text x="94.6221%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="94.3721%" y="165" width="0.0139%" height="15" fill="rgb(246,177,23)" fg:x="13549" fg:w="2"/><text x="94.6221%" y="175.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (9 samples, 0.06%)</title><rect x="94.3930%" y="197" width="0.0627%" height="15" fill="rgb(230,62,27)" fg:x="13552" fg:w="9"/><text x="94.6430%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (2 samples, 0.01%)</title><rect x="94.4557%" y="197" width="0.0139%" height="15" fill="rgb(216,154,8)" fg:x="13561" fg:w="2"/><text x="94.7057%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="94.4557%" y="181" width="0.0139%" height="15" fill="rgb(244,35,45)" fg:x="13561" fg:w="2"/><text x="94.7057%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="94.4557%" y="165" width="0.0139%" height="15" fill="rgb(251,115,12)" fg:x="13561" fg:w="2"/><text x="94.7057%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="94.4557%" y="149" width="0.0139%" height="15" fill="rgb(240,54,50)" fg:x="13561" fg:w="2"/><text x="94.7057%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (51 samples, 0.36%)</title><rect x="94.1353%" y="261" width="0.3552%" height="15" fill="rgb(233,84,52)" fg:x="13515" fg:w="51"/><text x="94.3853%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (46 samples, 0.32%)</title><rect x="94.1701%" y="245" width="0.3204%" height="15" fill="rgb(207,117,47)" fg:x="13520" fg:w="46"/><text x="94.4201%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (45 samples, 0.31%)</title><rect x="94.1771%" y="229" width="0.3134%" height="15" fill="rgb(249,43,39)" fg:x="13521" fg:w="45"/><text x="94.4271%" y="239.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (45 samples, 0.31%)</title><rect x="94.1771%" y="213" width="0.3134%" height="15" fill="rgb(209,38,44)" fg:x="13521" fg:w="45"/><text x="94.4271%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (3 samples, 0.02%)</title><rect x="94.4696%" y="197" width="0.0209%" height="15" fill="rgb(236,212,23)" fg:x="13563" fg:w="3"/><text x="94.7196%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (15 samples, 0.10%)</title><rect x="94.5880%" y="197" width="0.1045%" height="15" fill="rgb(242,79,21)" fg:x="13580" fg:w="15"/><text x="94.8380%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (15 samples, 0.10%)</title><rect x="94.5880%" y="181" width="0.1045%" height="15" fill="rgb(211,96,35)" fg:x="13580" fg:w="15"/><text x="94.8380%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (15 samples, 0.10%)</title><rect x="94.5880%" y="165" width="0.1045%" height="15" fill="rgb(253,215,40)" fg:x="13580" fg:w="15"/><text x="94.8380%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.03%)</title><rect x="94.6925%" y="181" width="0.0279%" height="15" fill="rgb(211,81,21)" fg:x="13595" fg:w="4"/><text x="94.9425%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.03%)</title><rect x="94.6925%" y="165" width="0.0279%" height="15" fill="rgb(208,190,38)" fg:x="13595" fg:w="4"/><text x="94.9425%" y="175.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (69 samples, 0.48%)</title><rect x="95.7373%" y="165" width="0.4806%" height="15" fill="rgb(235,213,38)" fg:x="13745" fg:w="69"/><text x="95.9873%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (69 samples, 0.48%)</title><rect x="95.7373%" y="149" width="0.4806%" height="15" fill="rgb(237,122,38)" fg:x="13745" fg:w="69"/><text x="95.9873%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (252 samples, 1.76%)</title><rect x="94.5044%" y="245" width="1.7552%" height="15" fill="rgb(244,218,35)" fg:x="13568" fg:w="252"/><text x="94.7544%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (247 samples, 1.72%)</title><rect x="94.5392%" y="229" width="1.7204%" height="15" fill="rgb(240,68,47)" fg:x="13573" fg:w="247"/><text x="94.7892%" y="239.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (247 samples, 1.72%)</title><rect x="94.5392%" y="213" width="1.7204%" height="15" fill="rgb(210,16,53)" fg:x="13573" fg:w="247"/><text x="94.7892%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (225 samples, 1.57%)</title><rect x="94.6925%" y="197" width="1.5672%" height="15" fill="rgb(235,124,12)" fg:x="13595" fg:w="225"/><text x="94.9425%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (221 samples, 1.54%)</title><rect x="94.7203%" y="181" width="1.5393%" height="15" fill="rgb(224,169,11)" fg:x="13599" fg:w="221"/><text x="94.9703%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (6 samples, 0.04%)</title><rect x="96.2179%" y="165" width="0.0418%" height="15" fill="rgb(250,166,2)" fg:x="13814" fg:w="6"/><text x="96.4679%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (6 samples, 0.04%)</title><rect x="96.2179%" y="149" width="0.0418%" height="15" fill="rgb(242,216,29)" fg:x="13814" fg:w="6"/><text x="96.4679%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (312 samples, 2.17%)</title><rect x="94.1353%" y="293" width="2.1732%" height="15" fill="rgb(230,116,27)" fg:x="13515" fg:w="312"/><text x="94.3853%" y="303.50">c..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (312 samples, 2.17%)</title><rect x="94.1353%" y="277" width="2.1732%" height="15" fill="rgb(228,99,48)" fg:x="13515" fg:w="312"/><text x="94.3853%" y="287.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (261 samples, 1.82%)</title><rect x="94.4905%" y="261" width="1.8179%" height="15" fill="rgb(253,11,6)" fg:x="13566" fg:w="261"/><text x="94.7405%" y="271.50">c..</text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.05%)</title><rect x="96.2597%" y="245" width="0.0488%" height="15" fill="rgb(247,143,39)" fg:x="13820" fg:w="7"/><text x="96.5097%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.05%)</title><rect x="96.2597%" y="229" width="0.0488%" height="15" fill="rgb(236,97,10)" fg:x="13820" fg:w="7"/><text x="96.5097%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (6 samples, 0.04%)</title><rect x="96.2666%" y="213" width="0.0418%" height="15" fill="rgb(233,208,19)" fg:x="13821" fg:w="6"/><text x="96.5166%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (6 samples, 0.04%)</title><rect x="96.2666%" y="197" width="0.0418%" height="15" fill="rgb(216,164,2)" fg:x="13821" fg:w="6"/><text x="96.5166%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (18 samples, 0.13%)</title><rect x="96.3084%" y="293" width="0.1254%" height="15" fill="rgb(220,129,5)" fg:x="13827" fg:w="18"/><text x="96.5584%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (18 samples, 0.13%)</title><rect x="96.3084%" y="277" width="0.1254%" height="15" fill="rgb(242,17,10)" fg:x="13827" fg:w="18"/><text x="96.5584%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.13%)</title><rect x="96.3084%" y="261" width="0.1254%" height="15" fill="rgb(242,107,0)" fg:x="13827" fg:w="18"/><text x="96.5584%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.13%)</title><rect x="96.3084%" y="245" width="0.1254%" height="15" fill="rgb(251,28,31)" fg:x="13827" fg:w="18"/><text x="96.5584%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (14 samples, 0.10%)</title><rect x="96.3363%" y="229" width="0.0975%" height="15" fill="rgb(233,223,10)" fg:x="13831" fg:w="14"/><text x="96.5863%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (12 samples, 0.08%)</title><rect x="96.3502%" y="213" width="0.0836%" height="15" fill="rgb(215,21,27)" fg:x="13833" fg:w="12"/><text x="96.6002%" y="223.50"></text></g><g><title>core::cmp::min_by (12 samples, 0.08%)</title><rect x="96.3502%" y="197" width="0.0836%" height="15" fill="rgb(232,23,21)" fg:x="13833" fg:w="12"/><text x="96.6002%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (4 samples, 0.03%)</title><rect x="96.4408%" y="293" width="0.0279%" height="15" fill="rgb(244,5,23)" fg:x="13846" fg:w="4"/><text x="96.6908%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (4 samples, 0.03%)</title><rect x="96.4408%" y="277" width="0.0279%" height="15" fill="rgb(226,81,46)" fg:x="13846" fg:w="4"/><text x="96.6908%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="96.4408%" y="261" width="0.0279%" height="15" fill="rgb(247,70,30)" fg:x="13846" fg:w="4"/><text x="96.6908%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.03%)</title><rect x="96.4408%" y="245" width="0.0279%" height="15" fill="rgb(212,68,19)" fg:x="13846" fg:w="4"/><text x="96.6908%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.03%)</title><rect x="96.4408%" y="229" width="0.0279%" height="15" fill="rgb(240,187,13)" fg:x="13846" fg:w="4"/><text x="96.6908%" y="239.50"></text></g><g><title>cfree (4 samples, 0.03%)</title><rect x="96.4408%" y="213" width="0.0279%" height="15" fill="rgb(223,113,26)" fg:x="13846" fg:w="4"/><text x="96.6908%" y="223.50"></text></g><g><title>main::compute_flowchange (368 samples, 2.56%)</title><rect x="93.9333%" y="309" width="2.5632%" height="15" fill="rgb(206,192,2)" fg:x="13486" fg:w="368"/><text x="94.1833%" y="319.50">ma..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (4 samples, 0.03%)</title><rect x="96.4686%" y="293" width="0.0279%" height="15" fill="rgb(241,108,4)" fg:x="13850" fg:w="4"/><text x="96.7186%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (4 samples, 0.03%)</title><rect x="96.4686%" y="277" width="0.0279%" height="15" fill="rgb(247,173,49)" fg:x="13850" fg:w="4"/><text x="96.7186%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="96.4686%" y="261" width="0.0279%" height="15" fill="rgb(224,114,35)" fg:x="13850" fg:w="4"/><text x="96.7186%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.03%)</title><rect x="96.4686%" y="245" width="0.0279%" height="15" fill="rgb(245,159,27)" fg:x="13850" fg:w="4"/><text x="96.7186%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.03%)</title><rect x="96.4686%" y="229" width="0.0279%" height="15" fill="rgb(245,172,44)" fg:x="13850" fg:w="4"/><text x="96.7186%" y="239.50"></text></g><g><title>cfree (4 samples, 0.03%)</title><rect x="96.4686%" y="213" width="0.0279%" height="15" fill="rgb(236,23,11)" fg:x="13850" fg:w="4"/><text x="96.7186%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="96.4686%" y="197" width="0.0279%" height="15" fill="rgb(205,117,38)" fg:x="13850" fg:w="4"/><text x="96.7186%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="96.4756%" y="181" width="0.0209%" height="15" fill="rgb(237,72,25)" fg:x="13851" fg:w="3"/><text x="96.7256%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="96.4826%" y="165" width="0.0139%" height="15" fill="rgb(244,70,9)" fg:x="13852" fg:w="2"/><text x="96.7326%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="96.5034%" y="197" width="0.0348%" height="15" fill="rgb(217,125,39)" fg:x="13855" fg:w="5"/><text x="96.7534%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="96.5034%" y="181" width="0.0348%" height="15" fill="rgb(235,36,10)" fg:x="13855" fg:w="5"/><text x="96.7534%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (7 samples, 0.05%)</title><rect x="96.5034%" y="213" width="0.0488%" height="15" fill="rgb(251,123,47)" fg:x="13855" fg:w="7"/><text x="96.7534%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.01%)</title><rect x="96.5383%" y="197" width="0.0139%" height="15" fill="rgb(221,13,13)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.01%)</title><rect x="96.5383%" y="181" width="0.0139%" height="15" fill="rgb(238,131,9)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.01%)</title><rect x="96.5383%" y="165" width="0.0139%" height="15" fill="rgb(211,50,8)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.01%)</title><rect x="96.5383%" y="149" width="0.0139%" height="15" fill="rgb(245,182,24)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="96.5383%" y="133" width="0.0139%" height="15" fill="rgb(242,14,37)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.01%)</title><rect x="96.5383%" y="117" width="0.0139%" height="15" fill="rgb(246,228,12)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.01%)</title><rect x="96.5383%" y="101" width="0.0139%" height="15" fill="rgb(213,55,15)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="111.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.01%)</title><rect x="96.5383%" y="85" width="0.0139%" height="15" fill="rgb(209,9,3)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="95.50"></text></g><g><title>realloc (2 samples, 0.01%)</title><rect x="96.5383%" y="69" width="0.0139%" height="15" fill="rgb(230,59,30)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="79.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="96.5383%" y="53" width="0.0139%" height="15" fill="rgb(209,121,21)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="63.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="96.5383%" y="37" width="0.0139%" height="15" fill="rgb(220,109,13)" fg:x="13860" fg:w="2"/><text x="96.7883%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.06%)</title><rect x="96.5034%" y="293" width="0.0557%" height="15" fill="rgb(232,18,1)" fg:x="13855" fg:w="8"/><text x="96.7534%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="96.5034%" y="277" width="0.0557%" height="15" fill="rgb(215,41,42)" fg:x="13855" fg:w="8"/><text x="96.7534%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="96.5034%" y="261" width="0.0557%" height="15" fill="rgb(224,123,36)" fg:x="13855" fg:w="8"/><text x="96.7534%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.06%)</title><rect x="96.5034%" y="245" width="0.0557%" height="15" fill="rgb(240,125,3)" fg:x="13855" fg:w="8"/><text x="96.7534%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.06%)</title><rect x="96.5034%" y="229" width="0.0557%" height="15" fill="rgb(205,98,50)" fg:x="13855" fg:w="8"/><text x="96.7534%" y="239.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (3 samples, 0.02%)</title><rect x="96.5731%" y="293" width="0.0209%" height="15" fill="rgb(205,185,37)" fg:x="13865" fg:w="3"/><text x="96.8231%" y="303.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (2 samples, 0.01%)</title><rect x="96.5801%" y="277" width="0.0139%" height="15" fill="rgb(238,207,15)" fg:x="13866" fg:w="2"/><text x="96.8301%" y="287.50"></text></g><g><title>main::compute_node_potentials (16 samples, 0.11%)</title><rect x="96.4965%" y="309" width="0.1114%" height="15" fill="rgb(213,199,42)" fg:x="13854" fg:w="16"/><text x="96.7465%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (2 samples, 0.01%)</title><rect x="96.5940%" y="293" width="0.0139%" height="15" fill="rgb(235,201,11)" fg:x="13868" fg:w="2"/><text x="96.8440%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (2 samples, 0.01%)</title><rect x="96.5940%" y="277" width="0.0139%" height="15" fill="rgb(207,46,11)" fg:x="13868" fg:w="2"/><text x="96.8440%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.06%)</title><rect x="97.4995%" y="293" width="0.0627%" height="15" fill="rgb(241,35,35)" fg:x="13998" fg:w="9"/><text x="97.7495%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.06%)</title><rect x="97.4995%" y="277" width="0.0627%" height="15" fill="rgb(243,32,47)" fg:x="13998" fg:w="9"/><text x="97.7495%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.06%)</title><rect x="97.4995%" y="261" width="0.0627%" height="15" fill="rgb(247,202,23)" fg:x="13998" fg:w="9"/><text x="97.7495%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (62 samples, 0.43%)</title><rect x="97.6040%" y="229" width="0.4318%" height="15" fill="rgb(219,102,11)" fg:x="14013" fg:w="62"/><text x="97.8540%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (62 samples, 0.43%)</title><rect x="97.6040%" y="213" width="0.4318%" height="15" fill="rgb(243,110,44)" fg:x="14013" fg:w="62"/><text x="97.8540%" y="223.50"></text></g><g><title>alloc::alloc::realloc (61 samples, 0.42%)</title><rect x="97.6109%" y="197" width="0.4249%" height="15" fill="rgb(222,74,54)" fg:x="14014" fg:w="61"/><text x="97.8609%" y="207.50"></text></g><g><title>realloc (61 samples, 0.42%)</title><rect x="97.6109%" y="181" width="0.4249%" height="15" fill="rgb(216,99,12)" fg:x="14014" fg:w="61"/><text x="97.8609%" y="191.50"></text></g><g><title>[libc.so.6] (56 samples, 0.39%)</title><rect x="97.6457%" y="165" width="0.3901%" height="15" fill="rgb(226,22,26)" fg:x="14019" fg:w="56"/><text x="97.8957%" y="175.50"></text></g><g><title>[libc.so.6] (51 samples, 0.36%)</title><rect x="97.6806%" y="149" width="0.3552%" height="15" fill="rgb(217,163,10)" fg:x="14024" fg:w="51"/><text x="97.9306%" y="159.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="97.9940%" y="133" width="0.0418%" height="15" fill="rgb(213,25,53)" fg:x="14069" fg:w="6"/><text x="98.2440%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (64 samples, 0.45%)</title><rect x="97.5970%" y="245" width="0.4458%" height="15" fill="rgb(252,105,26)" fg:x="14012" fg:w="64"/><text x="97.8470%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (67 samples, 0.47%)</title><rect x="97.5831%" y="277" width="0.4667%" height="15" fill="rgb(220,39,43)" fg:x="14010" fg:w="67"/><text x="97.8331%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (67 samples, 0.47%)</title><rect x="97.5831%" y="261" width="0.4667%" height="15" fill="rgb(229,68,48)" fg:x="14010" fg:w="67"/><text x="97.8331%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.02%)</title><rect x="98.0497%" y="277" width="0.0209%" height="15" fill="rgb(252,8,32)" fg:x="14077" fg:w="3"/><text x="98.2997%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.02%)</title><rect x="98.0497%" y="261" width="0.0209%" height="15" fill="rgb(223,20,43)" fg:x="14077" fg:w="3"/><text x="98.2997%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (79 samples, 0.55%)</title><rect x="97.5622%" y="293" width="0.5503%" height="15" fill="rgb(229,81,49)" fg:x="14007" fg:w="79"/><text x="97.8122%" y="303.50"></text></g><g><title>core::ptr::write (6 samples, 0.04%)</title><rect x="98.0706%" y="277" width="0.0418%" height="15" fill="rgb(236,28,36)" fg:x="14080" fg:w="6"/><text x="98.3206%" y="287.50"></text></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.01%)</title><rect x="98.1124%" y="293" width="0.0139%" height="15" fill="rgb(249,185,26)" fg:x="14086" fg:w="2"/><text x="98.3624%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="98.1124%" y="277" width="0.0139%" height="15" fill="rgb(249,174,33)" fg:x="14086" fg:w="2"/><text x="98.3624%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (2 samples, 0.01%)</title><rect x="98.1124%" y="261" width="0.0139%" height="15" fill="rgb(233,201,37)" fg:x="14086" fg:w="2"/><text x="98.3624%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.07%)</title><rect x="98.1403%" y="181" width="0.0697%" height="15" fill="rgb(221,78,26)" fg:x="14090" fg:w="10"/><text x="98.3903%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.07%)</title><rect x="98.1403%" y="165" width="0.0697%" height="15" fill="rgb(250,127,30)" fg:x="14090" fg:w="10"/><text x="98.3903%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.07%)</title><rect x="98.1403%" y="149" width="0.0697%" height="15" fill="rgb(230,49,44)" fg:x="14090" fg:w="10"/><text x="98.3903%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.06%)</title><rect x="98.1472%" y="133" width="0.0627%" height="15" fill="rgb(229,67,23)" fg:x="14091" fg:w="9"/><text x="98.3972%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.06%)</title><rect x="98.1472%" y="117" width="0.0627%" height="15" fill="rgb(249,83,47)" fg:x="14091" fg:w="9"/><text x="98.3972%" y="127.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.06%)</title><rect x="98.1472%" y="101" width="0.0627%" height="15" fill="rgb(215,43,3)" fg:x="14091" fg:w="9"/><text x="98.3972%" y="111.50"></text></g><g><title>realloc (9 samples, 0.06%)</title><rect x="98.1472%" y="85" width="0.0627%" height="15" fill="rgb(238,154,13)" fg:x="14091" fg:w="9"/><text x="98.3972%" y="95.50"></text></g><g><title>[libc.so.6] (9 samples, 0.06%)</title><rect x="98.1472%" y="69" width="0.0627%" height="15" fill="rgb(219,56,2)" fg:x="14091" fg:w="9"/><text x="98.3972%" y="79.50"></text></g><g><title>[libc.so.6] (9 samples, 0.06%)</title><rect x="98.1472%" y="53" width="0.0627%" height="15" fill="rgb(233,0,4)" fg:x="14091" fg:w="9"/><text x="98.3972%" y="63.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="98.1960%" y="37" width="0.0139%" height="15" fill="rgb(235,30,7)" fg:x="14098" fg:w="2"/><text x="98.4460%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 0.10%)</title><rect x="98.1263%" y="293" width="0.1045%" height="15" fill="rgb(250,79,13)" fg:x="14088" fg:w="15"/><text x="98.3763%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.10%)</title><rect x="98.1263%" y="277" width="0.1045%" height="15" fill="rgb(211,146,34)" fg:x="14088" fg:w="15"/><text x="98.3763%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.10%)</title><rect x="98.1263%" y="261" width="0.1045%" height="15" fill="rgb(228,22,38)" fg:x="14088" fg:w="15"/><text x="98.3763%" y="271.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (15 samples, 0.10%)</title><rect x="98.1263%" y="245" width="0.1045%" height="15" fill="rgb(235,168,5)" fg:x="14088" fg:w="15"/><text x="98.3763%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (15 samples, 0.10%)</title><rect x="98.1263%" y="229" width="0.1045%" height="15" fill="rgb(221,155,16)" fg:x="14088" fg:w="15"/><text x="98.3763%" y="239.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (15 samples, 0.10%)</title><rect x="98.1263%" y="213" width="0.1045%" height="15" fill="rgb(215,215,53)" fg:x="14088" fg:w="15"/><text x="98.3763%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.10%)</title><rect x="98.1263%" y="197" width="0.1045%" height="15" fill="rgb(223,4,10)" fg:x="14088" fg:w="15"/><text x="98.3763%" y="207.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="98.2099%" y="181" width="0.0209%" height="15" fill="rgb(234,103,6)" fg:x="14100" fg:w="3"/><text x="98.4599%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (39 samples, 0.27%)</title><rect x="98.2308%" y="293" width="0.2716%" height="15" fill="rgb(227,97,0)" fg:x="14103" fg:w="39"/><text x="98.4808%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (3 samples, 0.02%)</title><rect x="98.5025%" y="293" width="0.0209%" height="15" fill="rgb(234,150,53)" fg:x="14142" fg:w="3"/><text x="98.7525%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (3 samples, 0.02%)</title><rect x="98.5025%" y="277" width="0.0209%" height="15" fill="rgb(228,201,54)" fg:x="14142" fg:w="3"/><text x="98.7525%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="98.5025%" y="261" width="0.0209%" height="15" fill="rgb(222,22,37)" fg:x="14142" fg:w="3"/><text x="98.7525%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="98.5025%" y="245" width="0.0209%" height="15" fill="rgb(237,53,32)" fg:x="14142" fg:w="3"/><text x="98.7525%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="98.5025%" y="229" width="0.0209%" height="15" fill="rgb(233,25,53)" fg:x="14142" fg:w="3"/><text x="98.7525%" y="239.50"></text></g><g><title>cfree (3 samples, 0.02%)</title><rect x="98.5025%" y="213" width="0.0209%" height="15" fill="rgb(210,40,34)" fg:x="14142" fg:w="3"/><text x="98.7525%" y="223.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="98.5025%" y="197" width="0.0209%" height="15" fill="rgb(241,220,44)" fg:x="14142" fg:w="3"/><text x="98.7525%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints (3 samples, 0.02%)</title><rect x="98.5234%" y="293" width="0.0209%" height="15" fill="rgb(235,28,35)" fg:x="14145" fg:w="3"/><text x="98.7734%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="98.5234%" y="277" width="0.0209%" height="15" fill="rgb(210,56,17)" fg:x="14145" fg:w="3"/><text x="98.7734%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints::_{{closure}} (3 samples, 0.02%)</title><rect x="98.5234%" y="261" width="0.0209%" height="15" fill="rgb(224,130,29)" fg:x="14145" fg:w="3"/><text x="98.7734%" y="271.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (3 samples, 0.02%)</title><rect x="98.5234%" y="245" width="0.0209%" height="15" fill="rgb(235,212,8)" fg:x="14145" fg:w="3"/><text x="98.7734%" y="255.50"></text></g><g><title>main::find_cycle_with_arc (281 samples, 1.96%)</title><rect x="96.6079%" y="309" width="1.9572%" height="15" fill="rgb(223,33,50)" fg:x="13870" fg:w="281"/><text x="96.8579%" y="319.50">m..</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (3 samples, 0.02%)</title><rect x="98.5443%" y="293" width="0.0209%" height="15" fill="rgb(219,149,13)" fg:x="14148" fg:w="3"/><text x="98.7943%" y="303.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (3 samples, 0.02%)</title><rect x="98.5443%" y="277" width="0.0209%" height="15" fill="rgb(250,156,29)" fg:x="14148" fg:w="3"/><text x="98.7943%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="98.5791%" y="293" width="0.0139%" height="15" fill="rgb(216,193,19)" fg:x="14153" fg:w="2"/><text x="98.8291%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.01%)</title><rect x="98.5791%" y="277" width="0.0139%" height="15" fill="rgb(216,135,14)" fg:x="14153" fg:w="2"/><text x="98.8291%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.01%)</title><rect x="98.5791%" y="261" width="0.0139%" height="15" fill="rgb(241,47,5)" fg:x="14153" fg:w="2"/><text x="98.8291%" y="271.50"></text></g><g><title>main::initialization::_{{closure}} (2 samples, 0.01%)</title><rect x="98.5791%" y="245" width="0.0139%" height="15" fill="rgb(233,42,35)" fg:x="14153" fg:w="2"/><text x="98.8291%" y="255.50"></text></g><g><title>main::initialization (6 samples, 0.04%)</title><rect x="98.5652%" y="309" width="0.0418%" height="15" fill="rgb(231,13,6)" fg:x="14151" fg:w="6"/><text x="98.8152%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.01%)</title><rect x="98.5930%" y="293" width="0.0139%" height="15" fill="rgb(207,181,40)" fg:x="14155" fg:w="2"/><text x="98.8430%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.03%)</title><rect x="99.1015%" y="293" width="0.0348%" height="15" fill="rgb(254,173,49)" fg:x="14228" fg:w="5"/><text x="99.3515%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.03%)</title><rect x="99.1015%" y="277" width="0.0348%" height="15" fill="rgb(221,1,38)" fg:x="14228" fg:w="5"/><text x="99.3515%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.03%)</title><rect x="99.1015%" y="261" width="0.0348%" height="15" fill="rgb(206,124,46)" fg:x="14228" fg:w="5"/><text x="99.3515%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.03%)</title><rect x="99.2617%" y="245" width="0.0348%" height="15" fill="rgb(249,21,11)" fg:x="14251" fg:w="5"/><text x="99.5117%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.03%)</title><rect x="99.2617%" y="229" width="0.0348%" height="15" fill="rgb(222,201,40)" fg:x="14251" fg:w="5"/><text x="99.5117%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.03%)</title><rect x="99.2617%" y="213" width="0.0348%" height="15" fill="rgb(235,61,29)" fg:x="14251" fg:w="5"/><text x="99.5117%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.02%)</title><rect x="99.2965%" y="181" width="0.0209%" height="15" fill="rgb(219,207,3)" fg:x="14256" fg:w="3"/><text x="99.5465%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.02%)</title><rect x="99.2965%" y="165" width="0.0209%" height="15" fill="rgb(222,56,46)" fg:x="14256" fg:w="3"/><text x="99.5465%" y="175.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.02%)</title><rect x="99.2965%" y="149" width="0.0209%" height="15" fill="rgb(239,76,54)" fg:x="14256" fg:w="3"/><text x="99.5465%" y="159.50"></text></g><g><title>realloc (3 samples, 0.02%)</title><rect x="99.2965%" y="133" width="0.0209%" height="15" fill="rgb(231,124,27)" fg:x="14256" fg:w="3"/><text x="99.5465%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="99.3035%" y="117" width="0.0139%" height="15" fill="rgb(249,195,6)" fg:x="14257" fg:w="2"/><text x="99.5535%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="99.3035%" y="101" width="0.0139%" height="15" fill="rgb(237,174,47)" fg:x="14257" fg:w="2"/><text x="99.5535%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.03%)</title><rect x="99.2965%" y="229" width="0.0279%" height="15" fill="rgb(206,201,31)" fg:x="14256" fg:w="4"/><text x="99.5465%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.03%)</title><rect x="99.2965%" y="213" width="0.0279%" height="15" fill="rgb(231,57,52)" fg:x="14256" fg:w="4"/><text x="99.5465%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="99.2965%" y="197" width="0.0279%" height="15" fill="rgb(248,177,22)" fg:x="14256" fg:w="4"/><text x="99.5465%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (28 samples, 0.20%)</title><rect x="99.1433%" y="293" width="0.1950%" height="15" fill="rgb(215,211,37)" fg:x="14234" fg:w="28"/><text x="99.3933%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (28 samples, 0.20%)</title><rect x="99.1433%" y="277" width="0.1950%" height="15" fill="rgb(241,128,51)" fg:x="14234" fg:w="28"/><text x="99.3933%" y="287.50"></text></g><g><title>main::update_sptree::_{{closure}} (28 samples, 0.20%)</title><rect x="99.1433%" y="261" width="0.1950%" height="15" fill="rgb(227,165,31)" fg:x="14234" fg:w="28"/><text x="99.3933%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.04%)</title><rect x="99.2965%" y="245" width="0.0418%" height="15" fill="rgb(228,167,24)" fg:x="14256" fg:w="6"/><text x="99.5465%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="99.3383%" y="293" width="0.0139%" height="15" fill="rgb(228,143,12)" fg:x="14262" fg:w="2"/><text x="99.5883%" y="303.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="99.3383%" y="277" width="0.0139%" height="15" fill="rgb(249,149,8)" fg:x="14262" fg:w="2"/><text x="99.5883%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="99.3522%" y="277" width="0.0139%" height="15" fill="rgb(243,35,44)" fg:x="14264" fg:w="2"/><text x="99.6022%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="99.3522%" y="261" width="0.0139%" height="15" fill="rgb(246,89,9)" fg:x="14264" fg:w="2"/><text x="99.6022%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (13 samples, 0.09%)</title><rect x="99.3522%" y="293" width="0.0905%" height="15" fill="rgb(233,213,13)" fg:x="14264" fg:w="13"/><text x="99.6022%" y="303.50"></text></g><g><title>main::update_sptree::_{{closure}} (11 samples, 0.08%)</title><rect x="99.3662%" y="277" width="0.0766%" height="15" fill="rgb(233,141,41)" fg:x="14266" fg:w="11"/><text x="99.6162%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.01%)</title><rect x="99.4289%" y="261" width="0.0139%" height="15" fill="rgb(239,167,4)" fg:x="14275" fg:w="2"/><text x="99.6789%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="99.5473%" y="245" width="0.0139%" height="15" fill="rgb(209,217,16)" fg:x="14292" fg:w="2"/><text x="99.7973%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (32 samples, 0.22%)</title><rect x="99.5612%" y="229" width="0.2229%" height="15" fill="rgb(219,88,35)" fg:x="14294" fg:w="32"/><text x="99.8112%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (32 samples, 0.22%)</title><rect x="99.5612%" y="213" width="0.2229%" height="15" fill="rgb(220,193,23)" fg:x="14294" fg:w="32"/><text x="99.8112%" y="223.50"></text></g><g><title>alloc::alloc::realloc (32 samples, 0.22%)</title><rect x="99.5612%" y="197" width="0.2229%" height="15" fill="rgb(230,90,52)" fg:x="14294" fg:w="32"/><text x="99.8112%" y="207.50"></text></g><g><title>realloc (32 samples, 0.22%)</title><rect x="99.5612%" y="181" width="0.2229%" height="15" fill="rgb(252,106,19)" fg:x="14294" fg:w="32"/><text x="99.8112%" y="191.50"></text></g><g><title>[libc.so.6] (28 samples, 0.20%)</title><rect x="99.5891%" y="165" width="0.1950%" height="15" fill="rgb(206,74,20)" fg:x="14298" fg:w="28"/><text x="99.8391%" y="175.50"></text></g><g><title>[libc.so.6] (21 samples, 0.15%)</title><rect x="99.6378%" y="149" width="0.1463%" height="15" fill="rgb(230,138,44)" fg:x="14305" fg:w="21"/><text x="99.8878%" y="159.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="99.7493%" y="133" width="0.0348%" height="15" fill="rgb(235,182,43)" fg:x="14321" fg:w="5"/><text x="99.9993%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (34 samples, 0.24%)</title><rect x="99.5612%" y="245" width="0.2368%" height="15" fill="rgb(242,16,51)" fg:x="14294" fg:w="34"/><text x="99.8112%" y="255.50"></text></g><g><title>malloc (2 samples, 0.01%)</title><rect x="99.7841%" y="229" width="0.0139%" height="15" fill="rgb(248,9,4)" fg:x="14326" fg:w="2"/><text x="100.0341%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (37 samples, 0.26%)</title><rect x="99.5473%" y="277" width="0.2577%" height="15" fill="rgb(210,31,22)" fg:x="14292" fg:w="37"/><text x="99.7973%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (37 samples, 0.26%)</title><rect x="99.5473%" y="261" width="0.2577%" height="15" fill="rgb(239,54,39)" fg:x="14292" fg:w="37"/><text x="99.7973%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.01%)</title><rect x="99.8050%" y="277" width="0.0139%" height="15" fill="rgb(230,99,41)" fg:x="14329" fg:w="2"/><text x="100.0550%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="99.8050%" y="261" width="0.0139%" height="15" fill="rgb(253,106,12)" fg:x="14329" fg:w="2"/><text x="100.0550%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (56 samples, 0.39%)</title><rect x="99.4497%" y="293" width="0.3901%" height="15" fill="rgb(213,46,41)" fg:x="14278" fg:w="56"/><text x="99.6997%" y="303.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="99.8189%" y="277" width="0.0209%" height="15" fill="rgb(215,133,35)" fg:x="14331" fg:w="3"/><text x="100.0689%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.02%)</title><rect x="99.8398%" y="293" width="0.0209%" height="15" fill="rgb(213,28,5)" fg:x="14334" fg:w="3"/><text x="100.0898%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.01%)</title><rect x="99.8468%" y="277" width="0.0139%" height="15" fill="rgb(215,77,49)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.01%)</title><rect x="99.8468%" y="261" width="0.0139%" height="15" fill="rgb(248,100,22)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.8468%" y="245" width="0.0139%" height="15" fill="rgb(208,67,9)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (2 samples, 0.01%)</title><rect x="99.8468%" y="229" width="0.0139%" height="15" fill="rgb(219,133,21)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.8468%" y="213" width="0.0139%" height="15" fill="rgb(246,46,29)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.01%)</title><rect x="99.8468%" y="197" width="0.0139%" height="15" fill="rgb(246,185,52)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.8468%" y="181" width="0.0139%" height="15" fill="rgb(252,136,11)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="99.8468%" y="165" width="0.0139%" height="15" fill="rgb(219,138,53)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="99.8468%" y="149" width="0.0139%" height="15" fill="rgb(211,51,23)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="159.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="99.8468%" y="133" width="0.0139%" height="15" fill="rgb(247,221,28)" fg:x="14335" fg:w="2"/><text x="100.0968%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (10 samples, 0.07%)</title><rect x="99.8607%" y="293" width="0.0697%" height="15" fill="rgb(251,222,45)" fg:x="14337" fg:w="10"/><text x="100.1107%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (10 samples, 0.07%)</title><rect x="99.8607%" y="277" width="0.0697%" height="15" fill="rgb(217,162,53)" fg:x="14337" fg:w="10"/><text x="100.1107%" y="287.50"></text></g><g><title>main::min_cost (14,318 samples, 99.73%)</title><rect x="0.2368%" y="325" width="99.7284%" height="15" fill="rgb(229,93,14)" fg:x="34" fg:w="14318"/><text x="0.4868%" y="335.50">main::min_cost</text></g><g><title>main::update_sptree (195 samples, 1.36%)</title><rect x="98.6070%" y="309" width="1.3582%" height="15" fill="rgb(209,67,49)" fg:x="14157" fg:w="195"/><text x="98.8570%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (4 samples, 0.03%)</title><rect x="99.9373%" y="293" width="0.0279%" height="15" fill="rgb(213,87,29)" fg:x="14348" fg:w="4"/><text x="100.1873%" y="303.50"></text></g><g><title>_start (14,323 samples, 99.76%)</title><rect x="0.2229%" y="469" width="99.7632%" height="15" fill="rgb(205,151,52)" fg:x="32" fg:w="14323"/><text x="0.4729%" y="479.50">_start</text></g><g><title>__libc_start_main (14,323 samples, 99.76%)</title><rect x="0.2229%" y="453" width="99.7632%" height="15" fill="rgb(253,215,39)" fg:x="32" fg:w="14323"/><text x="0.4729%" y="463.50">__libc_start_main</text></g><g><title>[libc.so.6] (14,323 samples, 99.76%)</title><rect x="0.2229%" y="437" width="99.7632%" height="15" fill="rgb(221,220,41)" fg:x="32" fg:w="14323"/><text x="0.4729%" y="447.50">[libc.so.6]</text></g><g><title>main (14,322 samples, 99.76%)</title><rect x="0.2299%" y="421" width="99.7562%" height="15" fill="rgb(218,133,21)" fg:x="33" fg:w="14322"/><text x="0.4799%" y="431.50">main</text></g><g><title>std::rt::lang_start_internal (14,322 samples, 99.76%)</title><rect x="0.2299%" y="405" width="99.7562%" height="15" fill="rgb(221,193,43)" fg:x="33" fg:w="14322"/><text x="0.4799%" y="415.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (14,322 samples, 99.76%)</title><rect x="0.2299%" y="389" width="99.7562%" height="15" fill="rgb(240,128,52)" fg:x="33" fg:w="14322"/><text x="0.4799%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14,322 samples, 99.76%)</title><rect x="0.2299%" y="373" width="99.7562%" height="15" fill="rgb(253,114,12)" fg:x="33" fg:w="14322"/><text x="0.4799%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (14,322 samples, 99.76%)</title><rect x="0.2299%" y="357" width="99.7562%" height="15" fill="rgb(215,223,47)" fg:x="33" fg:w="14322"/><text x="0.4799%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (14,322 samples, 99.76%)</title><rect x="0.2299%" y="341" width="99.7562%" height="15" fill="rgb(248,225,23)" fg:x="33" fg:w="14322"/><text x="0.4799%" y="351.50">main::main</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (3 samples, 0.02%)</title><rect x="99.9652%" y="325" width="0.0209%" height="15" fill="rgb(250,108,0)" fg:x="14352" fg:w="3"/><text x="100.2152%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.02%)</title><rect x="99.9652%" y="309" width="0.0209%" height="15" fill="rgb(228,208,7)" fg:x="14352" fg:w="3"/><text x="100.2152%" y="319.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="99.9652%" y="293" width="0.0209%" height="15" fill="rgb(244,45,10)" fg:x="14352" fg:w="3"/><text x="100.2152%" y="303.50"></text></g><g><title>all (14,357 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="14357"/><text x="0.2500%" y="511.50"></text></g><g><title>main (14,357 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="14357"/><text x="0.2500%" y="495.50">main</text></g><g><title>main::min_cost (2 samples, 0.01%)</title><rect x="99.9861%" y="469" width="0.0139%" height="15" fill="rgb(249,80,12)" fg:x="14355" fg:w="2"/><text x="100.2361%" y="479.50"></text></g></svg></svg>