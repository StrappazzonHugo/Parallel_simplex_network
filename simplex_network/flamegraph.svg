<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="6163"><g><title>[libc.so.6] (3 samples, 0.05%)</title><rect x="0.0000%" y="613" width="0.0487%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="623.50"></text></g><g><title>[[heap]] (78 samples, 1.27%)</title><rect x="0.0000%" y="629" width="1.2656%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="78"/><text x="0.2500%" y="639.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (75 samples, 1.22%)</title><rect x="0.0487%" y="613" width="1.2169%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="75"/><text x="0.2987%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.03%)</title><rect x="1.2656%" y="613" width="0.0325%" height="15" fill="rgb(248,212,6)" fg:x="78" fg:w="2"/><text x="1.5156%" y="623.50"></text></g><g><title>__rdl_realloc (2 samples, 0.03%)</title><rect x="1.2981%" y="613" width="0.0325%" height="15" fill="rgb(208,68,35)" fg:x="80" fg:w="2"/><text x="1.5481%" y="623.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (56 samples, 0.91%)</title><rect x="1.3305%" y="613" width="0.9086%" height="15" fill="rgb(232,128,0)" fg:x="82" fg:w="56"/><text x="1.5805%" y="623.50"></text></g><g><title>[[stack]] (62 samples, 1.01%)</title><rect x="1.2656%" y="629" width="1.0060%" height="15" fill="rgb(207,160,47)" fg:x="78" fg:w="62"/><text x="1.5156%" y="639.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="2.2392%" y="613" width="0.0325%" height="15" fill="rgb(228,23,34)" fg:x="138" fg:w="2"/><text x="2.4892%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.15%)</title><rect x="2.2716%" y="629" width="0.1460%" height="15" fill="rgb(218,30,26)" fg:x="140" fg:w="9"/><text x="2.5216%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.05%)</title><rect x="2.3690%" y="613" width="0.0487%" height="15" fill="rgb(220,122,19)" fg:x="146" fg:w="3"/><text x="2.6190%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.05%)</title><rect x="2.3690%" y="597" width="0.0487%" height="15" fill="rgb(250,228,42)" fg:x="146" fg:w="3"/><text x="2.6190%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.03%)</title><rect x="2.3852%" y="581" width="0.0325%" height="15" fill="rgb(240,193,28)" fg:x="147" fg:w="2"/><text x="2.6352%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.03%)</title><rect x="2.3852%" y="565" width="0.0325%" height="15" fill="rgb(216,20,37)" fg:x="147" fg:w="2"/><text x="2.6352%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="2.4014%" y="549" width="0.0162%" height="15" fill="rgb(206,188,39)" fg:x="148" fg:w="1"/><text x="2.6514%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="2.4014%" y="533" width="0.0162%" height="15" fill="rgb(217,207,13)" fg:x="148" fg:w="1"/><text x="2.6514%" y="543.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="2.4177%" y="629" width="0.0325%" height="15" fill="rgb(231,73,38)" fg:x="149" fg:w="2"/><text x="2.6677%" y="639.50"></text></g><g><title>[main] (1 samples, 0.02%)</title><rect x="2.4501%" y="629" width="0.0162%" height="15" fill="rgb(225,20,46)" fg:x="151" fg:w="1"/><text x="2.7001%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="2.4501%" y="613" width="0.0162%" height="15" fill="rgb(210,31,41)" fg:x="151" fg:w="1"/><text x="2.7001%" y="623.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.84%)</title><rect x="2.4663%" y="613" width="0.8437%" height="15" fill="rgb(221,200,47)" fg:x="152" fg:w="52"/><text x="2.7163%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (45 samples, 0.73%)</title><rect x="2.5799%" y="597" width="0.7302%" height="15" fill="rgb(226,26,5)" fg:x="159" fg:w="45"/><text x="2.8299%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (45 samples, 0.73%)</title><rect x="2.5799%" y="581" width="0.7302%" height="15" fill="rgb(249,33,26)" fg:x="159" fg:w="45"/><text x="2.8299%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (45 samples, 0.73%)</title><rect x="2.5799%" y="565" width="0.7302%" height="15" fill="rgb(235,183,28)" fg:x="159" fg:w="45"/><text x="2.8299%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (45 samples, 0.73%)</title><rect x="2.5799%" y="549" width="0.7302%" height="15" fill="rgb(221,5,38)" fg:x="159" fg:w="45"/><text x="2.8299%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (45 samples, 0.73%)</title><rect x="2.5799%" y="533" width="0.7302%" height="15" fill="rgb(247,18,42)" fg:x="159" fg:w="45"/><text x="2.8299%" y="543.50"></text></g><g><title>[libc.so.6] (9 samples, 0.15%)</title><rect x="3.3101%" y="613" width="0.1460%" height="15" fill="rgb(241,131,45)" fg:x="204" fg:w="9"/><text x="3.5601%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="3.4561%" y="613" width="0.0162%" height="15" fill="rgb(249,31,29)" fg:x="213" fg:w="1"/><text x="3.7061%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="3.4561%" y="597" width="0.0162%" height="15" fill="rgb(225,111,53)" fg:x="213" fg:w="1"/><text x="3.7061%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="3.4561%" y="581" width="0.0162%" height="15" fill="rgb(238,160,17)" fg:x="213" fg:w="1"/><text x="3.7061%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="3.4561%" y="565" width="0.0162%" height="15" fill="rgb(214,148,48)" fg:x="213" fg:w="1"/><text x="3.7061%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="3.4723%" y="613" width="0.0162%" height="15" fill="rgb(232,36,49)" fg:x="214" fg:w="1"/><text x="3.7223%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="3.4723%" y="597" width="0.0162%" height="15" fill="rgb(209,103,24)" fg:x="214" fg:w="1"/><text x="3.7223%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="3.4723%" y="581" width="0.0162%" height="15" fill="rgb(229,88,8)" fg:x="214" fg:w="1"/><text x="3.7223%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="3.4723%" y="565" width="0.0162%" height="15" fill="rgb(213,181,19)" fg:x="214" fg:w="1"/><text x="3.7223%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="3.4886%" y="613" width="0.0162%" height="15" fill="rgb(254,191,54)" fg:x="215" fg:w="1"/><text x="3.7386%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="3.4886%" y="597" width="0.0162%" height="15" fill="rgb(241,83,37)" fg:x="215" fg:w="1"/><text x="3.7386%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="3.4886%" y="581" width="0.0162%" height="15" fill="rgb(233,36,39)" fg:x="215" fg:w="1"/><text x="3.7386%" y="591.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="3.4886%" y="565" width="0.0162%" height="15" fill="rgb(226,3,54)" fg:x="215" fg:w="1"/><text x="3.7386%" y="575.50"></text></g><g><title>cfree (4 samples, 0.06%)</title><rect x="3.5048%" y="613" width="0.0649%" height="15" fill="rgb(245,192,40)" fg:x="216" fg:w="4"/><text x="3.7548%" y="623.50"></text></g><g><title>[unknown] (69 samples, 1.12%)</title><rect x="2.4663%" y="629" width="1.1196%" height="15" fill="rgb(238,167,29)" fg:x="152" fg:w="69"/><text x="2.7163%" y="639.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="3.5697%" y="613" width="0.0162%" height="15" fill="rgb(232,182,51)" fg:x="220" fg:w="1"/><text x="3.8197%" y="623.50"></text></g><g><title>exit (1 samples, 0.02%)</title><rect x="3.5859%" y="581" width="0.0162%" height="15" fill="rgb(231,60,39)" fg:x="221" fg:w="1"/><text x="3.8359%" y="591.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="3.5859%" y="565" width="0.0162%" height="15" fill="rgb(208,69,12)" fg:x="221" fg:w="1"/><text x="3.8359%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="3.5859%" y="549" width="0.0162%" height="15" fill="rgb(235,93,37)" fg:x="221" fg:w="1"/><text x="3.8359%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.03%)</title><rect x="3.6346%" y="469" width="0.0325%" height="15" fill="rgb(213,116,39)" fg:x="224" fg:w="2"/><text x="3.8846%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.03%)</title><rect x="3.6346%" y="453" width="0.0325%" height="15" fill="rgb(222,207,29)" fg:x="224" fg:w="2"/><text x="3.8846%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="3.6346%" y="437" width="0.0325%" height="15" fill="rgb(206,96,30)" fg:x="224" fg:w="2"/><text x="3.8846%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="3.6346%" y="421" width="0.0325%" height="15" fill="rgb(218,138,4)" fg:x="224" fg:w="2"/><text x="3.8846%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="3.6346%" y="405" width="0.0325%" height="15" fill="rgb(250,191,14)" fg:x="224" fg:w="2"/><text x="3.8846%" y="415.50"></text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="3.6346%" y="389" width="0.0325%" height="15" fill="rgb(239,60,40)" fg:x="224" fg:w="2"/><text x="3.8846%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="3.6346%" y="373" width="0.0325%" height="15" fill="rgb(206,27,48)" fg:x="224" fg:w="2"/><text x="3.8846%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="3.6508%" y="357" width="0.0162%" height="15" fill="rgb(225,35,8)" fg:x="225" fg:w="1"/><text x="3.9008%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="3.6508%" y="341" width="0.0162%" height="15" fill="rgb(250,213,24)" fg:x="225" fg:w="1"/><text x="3.9008%" y="351.50"></text></g><g><title>main::__update_node_potentials (9 samples, 0.15%)</title><rect x="3.6670%" y="469" width="0.1460%" height="15" fill="rgb(247,123,22)" fg:x="226" fg:w="9"/><text x="3.9170%" y="479.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (5 samples, 0.08%)</title><rect x="3.7319%" y="453" width="0.0811%" height="15" fill="rgb(231,138,38)" fg:x="230" fg:w="5"/><text x="3.9819%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (3 samples, 0.05%)</title><rect x="4.1538%" y="213" width="0.0487%" height="15" fill="rgb(231,145,46)" fg:x="256" fg:w="3"/><text x="4.4038%" y="223.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.05%)</title><rect x="4.1538%" y="197" width="0.0487%" height="15" fill="rgb(251,118,11)" fg:x="256" fg:w="3"/><text x="4.4038%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.02%)</title><rect x="4.2025%" y="197" width="0.0162%" height="15" fill="rgb(217,147,25)" fg:x="259" fg:w="1"/><text x="4.4525%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="4.2674%" y="165" width="0.0162%" height="15" fill="rgb(247,81,37)" fg:x="263" fg:w="1"/><text x="4.5174%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.05%)</title><rect x="4.2674%" y="181" width="0.0487%" height="15" fill="rgb(209,12,38)" fg:x="263" fg:w="3"/><text x="4.5174%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.03%)</title><rect x="4.2836%" y="165" width="0.0325%" height="15" fill="rgb(227,1,9)" fg:x="264" fg:w="2"/><text x="4.5336%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.03%)</title><rect x="4.2836%" y="149" width="0.0325%" height="15" fill="rgb(248,47,43)" fg:x="264" fg:w="2"/><text x="4.5336%" y="159.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect x="4.3161%" y="181" width="0.0162%" height="15" fill="rgb(221,10,30)" fg:x="266" fg:w="1"/><text x="4.5661%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (13 samples, 0.21%)</title><rect x="4.1376%" y="277" width="0.2109%" height="15" fill="rgb(210,229,1)" fg:x="255" fg:w="13"/><text x="4.3876%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (13 samples, 0.21%)</title><rect x="4.1376%" y="261" width="0.2109%" height="15" fill="rgb(222,148,37)" fg:x="255" fg:w="13"/><text x="4.3876%" y="271.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (12 samples, 0.19%)</title><rect x="4.1538%" y="245" width="0.1947%" height="15" fill="rgb(234,67,33)" fg:x="256" fg:w="12"/><text x="4.4038%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12 samples, 0.19%)</title><rect x="4.1538%" y="229" width="0.1947%" height="15" fill="rgb(247,98,35)" fg:x="256" fg:w="12"/><text x="4.4038%" y="239.50"></text></g><g><title>main::_find_block_search::_{{closure}} (9 samples, 0.15%)</title><rect x="4.2025%" y="213" width="0.1460%" height="15" fill="rgb(247,138,52)" fg:x="259" fg:w="9"/><text x="4.4525%" y="223.50"></text></g><g><title>main::get_reduced_cost_edgeindex (8 samples, 0.13%)</title><rect x="4.2187%" y="197" width="0.1298%" height="15" fill="rgb(213,79,30)" fg:x="260" fg:w="8"/><text x="4.4687%" y="207.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (1 samples, 0.02%)</title><rect x="4.3323%" y="181" width="0.0162%" height="15" fill="rgb(246,177,23)" fg:x="267" fg:w="1"/><text x="4.5823%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (84 samples, 1.36%)</title><rect x="4.7704%" y="213" width="1.3630%" height="15" fill="rgb(230,62,27)" fg:x="294" fg:w="84"/><text x="5.0204%" y="223.50"></text></g><g><title>core::cmp::min_by (84 samples, 1.36%)</title><rect x="4.7704%" y="197" width="1.3630%" height="15" fill="rgb(216,154,8)" fg:x="294" fg:w="84"/><text x="5.0204%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (56 samples, 0.91%)</title><rect x="6.3605%" y="197" width="0.9086%" height="15" fill="rgb(244,35,45)" fg:x="392" fg:w="56"/><text x="6.6105%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.26%)</title><rect x="7.2692%" y="165" width="0.2596%" height="15" fill="rgb(251,115,12)" fg:x="448" fg:w="16"/><text x="7.5192%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16 samples, 0.26%)</title><rect x="7.2692%" y="149" width="0.2596%" height="15" fill="rgb(240,54,50)" fg:x="448" fg:w="16"/><text x="7.5192%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16 samples, 0.26%)</title><rect x="7.2692%" y="133" width="0.2596%" height="15" fill="rgb(233,84,52)" fg:x="448" fg:w="16"/><text x="7.5192%" y="143.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (25 samples, 0.41%)</title><rect x="7.2692%" y="197" width="0.4056%" height="15" fill="rgb(207,117,47)" fg:x="448" fg:w="25"/><text x="7.5192%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (25 samples, 0.41%)</title><rect x="7.2692%" y="181" width="0.4056%" height="15" fill="rgb(249,43,39)" fg:x="448" fg:w="25"/><text x="7.5192%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.15%)</title><rect x="7.5288%" y="165" width="0.1460%" height="15" fill="rgb(209,38,44)" fg:x="464" fg:w="9"/><text x="7.7788%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.15%)</title><rect x="7.5288%" y="149" width="0.1460%" height="15" fill="rgb(236,212,23)" fg:x="464" fg:w="9"/><text x="7.7788%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.13%)</title><rect x="7.9020%" y="165" width="0.1298%" height="15" fill="rgb(242,79,21)" fg:x="487" fg:w="8"/><text x="8.1520%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (34 samples, 0.55%)</title><rect x="7.9020%" y="181" width="0.5517%" height="15" fill="rgb(211,96,35)" fg:x="487" fg:w="34"/><text x="8.1520%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (26 samples, 0.42%)</title><rect x="8.0318%" y="165" width="0.4219%" height="15" fill="rgb(253,215,40)" fg:x="495" fg:w="26"/><text x="8.2818%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (26 samples, 0.42%)</title><rect x="8.0318%" y="149" width="0.4219%" height="15" fill="rgb(211,81,21)" fg:x="495" fg:w="26"/><text x="8.2818%" y="159.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (24 samples, 0.39%)</title><rect x="8.4537%" y="181" width="0.3894%" height="15" fill="rgb(208,190,38)" fg:x="521" fg:w="24"/><text x="8.7037%" y="191.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (18 samples, 0.29%)</title><rect x="8.8431%" y="181" width="0.2921%" height="15" fill="rgb(235,213,38)" fg:x="545" fg:w="18"/><text x="9.0931%" y="191.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (38 samples, 0.62%)</title><rect x="9.1352%" y="181" width="0.6166%" height="15" fill="rgb(237,122,38)" fg:x="563" fg:w="38"/><text x="9.3852%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (362 samples, 5.87%)</title><rect x="3.9267%" y="293" width="5.8738%" height="15" fill="rgb(244,218,35)" fg:x="242" fg:w="362"/><text x="4.1767%" y="303.50">&lt;core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (336 samples, 5.45%)</title><rect x="4.3485%" y="277" width="5.4519%" height="15" fill="rgb(240,68,47)" fg:x="268" fg:w="336"/><text x="4.5985%" y="287.50">core::o..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (328 samples, 5.32%)</title><rect x="4.4783%" y="261" width="5.3221%" height="15" fill="rgb(210,16,53)" fg:x="276" fg:w="328"/><text x="4.7283%" y="271.50">&lt;core::..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (310 samples, 5.03%)</title><rect x="4.7704%" y="245" width="5.0300%" height="15" fill="rgb(235,124,12)" fg:x="294" fg:w="310"/><text x="5.0204%" y="255.50">core::..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (310 samples, 5.03%)</title><rect x="4.7704%" y="229" width="5.0300%" height="15" fill="rgb(224,169,11)" fg:x="294" fg:w="310"/><text x="5.0204%" y="239.50">core::..</text></g><g><title>main::_find_block_search::_{{closure}} (226 samples, 3.67%)</title><rect x="6.1334%" y="213" width="3.6670%" height="15" fill="rgb(250,166,2)" fg:x="378" fg:w="226"/><text x="6.3834%" y="223.50">main..</text></g><g><title>main::get_reduced_cost_edgeindex (131 samples, 2.13%)</title><rect x="7.6748%" y="197" width="2.1256%" height="15" fill="rgb(242,216,29)" fg:x="473" fg:w="131"/><text x="7.9248%" y="207.50">m..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (3 samples, 0.05%)</title><rect x="9.7517%" y="181" width="0.0487%" height="15" fill="rgb(230,116,27)" fg:x="601" fg:w="3"/><text x="10.0017%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (373 samples, 6.05%)</title><rect x="3.8293%" y="421" width="6.0522%" height="15" fill="rgb(228,99,48)" fg:x="236" fg:w="373"/><text x="4.0793%" y="431.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (372 samples, 6.04%)</title><rect x="3.8455%" y="405" width="6.0360%" height="15" fill="rgb(253,11,6)" fg:x="237" fg:w="372"/><text x="4.0955%" y="415.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (372 samples, 6.04%)</title><rect x="3.8455%" y="389" width="6.0360%" height="15" fill="rgb(247,143,39)" fg:x="237" fg:w="372"/><text x="4.0955%" y="399.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (372 samples, 6.04%)</title><rect x="3.8455%" y="373" width="6.0360%" height="15" fill="rgb(236,97,10)" fg:x="237" fg:w="372"/><text x="4.0955%" y="383.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (372 samples, 6.04%)</title><rect x="3.8455%" y="357" width="6.0360%" height="15" fill="rgb(233,208,19)" fg:x="237" fg:w="372"/><text x="4.0955%" y="367.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (372 samples, 6.04%)</title><rect x="3.8455%" y="341" width="6.0360%" height="15" fill="rgb(216,164,2)" fg:x="237" fg:w="372"/><text x="4.0955%" y="351.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (372 samples, 6.04%)</title><rect x="3.8455%" y="325" width="6.0360%" height="15" fill="rgb(220,129,5)" fg:x="237" fg:w="372"/><text x="4.0955%" y="335.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (372 samples, 6.04%)</title><rect x="3.8455%" y="309" width="6.0360%" height="15" fill="rgb(242,17,10)" fg:x="237" fg:w="372"/><text x="4.0955%" y="319.50">core::it..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.08%)</title><rect x="9.8004%" y="293" width="0.0811%" height="15" fill="rgb(242,107,0)" fg:x="604" fg:w="5"/><text x="10.0504%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.02%)</title><rect x="9.8653%" y="277" width="0.0162%" height="15" fill="rgb(251,28,31)" fg:x="608" fg:w="1"/><text x="10.1153%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.02%)</title><rect x="9.8653%" y="261" width="0.0162%" height="15" fill="rgb(233,223,10)" fg:x="608" fg:w="1"/><text x="10.1153%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.02%)</title><rect x="9.8816%" y="357" width="0.0162%" height="15" fill="rgb(215,21,27)" fg:x="609" fg:w="1"/><text x="10.1316%" y="367.50"></text></g><g><title>main::_find_block_search (376 samples, 6.10%)</title><rect x="3.8131%" y="469" width="6.1009%" height="15" fill="rgb(232,23,21)" fg:x="235" fg:w="376"/><text x="4.0631%" y="479.50">main::_f..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (375 samples, 6.08%)</title><rect x="3.8293%" y="453" width="6.0847%" height="15" fill="rgb(244,5,23)" fg:x="236" fg:w="375"/><text x="4.0793%" y="463.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (375 samples, 6.08%)</title><rect x="3.8293%" y="437" width="6.0847%" height="15" fill="rgb(226,81,46)" fg:x="236" fg:w="375"/><text x="4.0793%" y="447.50">core::it..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="9.8816%" y="421" width="0.0325%" height="15" fill="rgb(247,70,30)" fg:x="609" fg:w="2"/><text x="10.1316%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.03%)</title><rect x="9.8816%" y="405" width="0.0325%" height="15" fill="rgb(212,68,19)" fg:x="609" fg:w="2"/><text x="10.1316%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.03%)</title><rect x="9.8816%" y="389" width="0.0325%" height="15" fill="rgb(240,187,13)" fg:x="609" fg:w="2"/><text x="10.1316%" y="399.50"></text></g><g><title>main::_find_block_search::_{{closure}} (2 samples, 0.03%)</title><rect x="9.8816%" y="373" width="0.0325%" height="15" fill="rgb(223,113,26)" fg:x="609" fg:w="2"/><text x="10.1316%" y="383.50"></text></g><g><title>main::get_reduced_cost_edgeindex (1 samples, 0.02%)</title><rect x="9.8978%" y="357" width="0.0162%" height="15" fill="rgb(206,192,2)" fg:x="610" fg:w="1"/><text x="10.1478%" y="367.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (1 samples, 0.02%)</title><rect x="9.8978%" y="341" width="0.0162%" height="15" fill="rgb(241,108,4)" fg:x="610" fg:w="1"/><text x="10.1478%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="9.9302%" y="341" width="0.0162%" height="15" fill="rgb(247,173,49)" fg:x="612" fg:w="1"/><text x="10.1802%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (6 samples, 0.10%)</title><rect x="9.9140%" y="421" width="0.0974%" height="15" fill="rgb(224,114,35)" fg:x="611" fg:w="6"/><text x="10.1640%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.10%)</title><rect x="9.9140%" y="405" width="0.0974%" height="15" fill="rgb(245,159,27)" fg:x="611" fg:w="6"/><text x="10.1640%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (6 samples, 0.10%)</title><rect x="9.9140%" y="389" width="0.0974%" height="15" fill="rgb(245,172,44)" fg:x="611" fg:w="6"/><text x="10.1640%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.10%)</title><rect x="9.9140%" y="373" width="0.0974%" height="15" fill="rgb(236,23,11)" fg:x="611" fg:w="6"/><text x="10.1640%" y="383.50"></text></g><g><title>alloc::alloc::alloc_zeroed (6 samples, 0.10%)</title><rect x="9.9140%" y="357" width="0.0974%" height="15" fill="rgb(205,117,38)" fg:x="611" fg:w="6"/><text x="10.1640%" y="367.50"></text></g><g><title>__libc_calloc (4 samples, 0.06%)</title><rect x="9.9465%" y="341" width="0.0649%" height="15" fill="rgb(237,72,25)" fg:x="613" fg:w="4"/><text x="10.1965%" y="351.50"></text></g><g><title>[libc.so.6] (4 samples, 0.06%)</title><rect x="9.9465%" y="325" width="0.0649%" height="15" fill="rgb(244,70,9)" fg:x="613" fg:w="4"/><text x="10.1965%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="9.9951%" y="309" width="0.0162%" height="15" fill="rgb(217,125,39)" fg:x="616" fg:w="1"/><text x="10.2451%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="10.0114%" y="421" width="0.0162%" height="15" fill="rgb(235,36,10)" fg:x="617" fg:w="1"/><text x="10.2614%" y="431.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="10.0114%" y="405" width="0.0162%" height="15" fill="rgb(251,123,47)" fg:x="617" fg:w="1"/><text x="10.2614%" y="415.50"></text></g><g><title>alloc::vec::from_elem (9 samples, 0.15%)</title><rect x="9.9140%" y="453" width="0.1460%" height="15" fill="rgb(221,13,13)" fg:x="611" fg:w="9"/><text x="10.1640%" y="463.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9 samples, 0.15%)</title><rect x="9.9140%" y="437" width="0.1460%" height="15" fill="rgb(238,131,9)" fg:x="611" fg:w="9"/><text x="10.1640%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="10.0276%" y="421" width="0.0325%" height="15" fill="rgb(211,50,8)" fg:x="618" fg:w="2"/><text x="10.2776%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="10.0276%" y="405" width="0.0325%" height="15" fill="rgb(245,182,24)" fg:x="618" fg:w="2"/><text x="10.2776%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="10.0276%" y="389" width="0.0325%" height="15" fill="rgb(242,14,37)" fg:x="618" fg:w="2"/><text x="10.2776%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="10.0276%" y="373" width="0.0325%" height="15" fill="rgb(246,228,12)" fg:x="618" fg:w="2"/><text x="10.2776%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="10.0276%" y="357" width="0.0325%" height="15" fill="rgb(213,55,15)" fg:x="618" fg:w="2"/><text x="10.2776%" y="367.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="10.0276%" y="341" width="0.0325%" height="15" fill="rgb(209,9,3)" fg:x="618" fg:w="2"/><text x="10.2776%" y="351.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="10.0276%" y="325" width="0.0325%" height="15" fill="rgb(230,59,30)" fg:x="618" fg:w="2"/><text x="10.2776%" y="335.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (2 samples, 0.03%)</title><rect x="10.1898%" y="357" width="0.0325%" height="15" fill="rgb(209,121,21)" fg:x="628" fg:w="2"/><text x="10.4398%" y="367.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (1 samples, 0.02%)</title><rect x="10.2223%" y="357" width="0.0162%" height="15" fill="rgb(220,109,13)" fg:x="630" fg:w="1"/><text x="10.4723%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="10.2223%" y="341" width="0.0162%" height="15" fill="rgb(232,18,1)" fg:x="630" fg:w="1"/><text x="10.4723%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="10.2223%" y="325" width="0.0162%" height="15" fill="rgb(215,41,42)" fg:x="630" fg:w="1"/><text x="10.4723%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="10.2223%" y="309" width="0.0162%" height="15" fill="rgb(224,123,36)" fg:x="630" fg:w="1"/><text x="10.4723%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.19%)</title><rect x="10.0600%" y="421" width="0.1947%" height="15" fill="rgb(240,125,3)" fg:x="620" fg:w="12"/><text x="10.3100%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (10 samples, 0.16%)</title><rect x="10.0925%" y="405" width="0.1623%" height="15" fill="rgb(205,98,50)" fg:x="622" fg:w="10"/><text x="10.3425%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9 samples, 0.15%)</title><rect x="10.1087%" y="389" width="0.1460%" height="15" fill="rgb(205,185,37)" fg:x="623" fg:w="9"/><text x="10.3587%" y="399.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (9 samples, 0.15%)</title><rect x="10.1087%" y="373" width="0.1460%" height="15" fill="rgb(238,207,15)" fg:x="623" fg:w="9"/><text x="10.3587%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (1 samples, 0.02%)</title><rect x="10.2385%" y="357" width="0.0162%" height="15" fill="rgb(213,199,42)" fg:x="631" fg:w="1"/><text x="10.4885%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.08%)</title><rect x="10.2710%" y="357" width="0.0811%" height="15" fill="rgb(235,201,11)" fg:x="633" fg:w="5"/><text x="10.5210%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.08%)</title><rect x="10.2710%" y="341" width="0.0811%" height="15" fill="rgb(207,46,11)" fg:x="633" fg:w="5"/><text x="10.5210%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.08%)</title><rect x="10.2710%" y="325" width="0.0811%" height="15" fill="rgb(241,35,35)" fg:x="633" fg:w="5"/><text x="10.5210%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect x="10.3521%" y="341" width="0.0162%" height="15" fill="rgb(243,32,47)" fg:x="638" fg:w="1"/><text x="10.6021%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect x="10.3521%" y="325" width="0.0162%" height="15" fill="rgb(247,202,23)" fg:x="638" fg:w="1"/><text x="10.6021%" y="335.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (22 samples, 0.36%)</title><rect x="10.8551%" y="325" width="0.3570%" height="15" fill="rgb(219,102,11)" fg:x="669" fg:w="22"/><text x="11.1051%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (22 samples, 0.36%)</title><rect x="10.8551%" y="309" width="0.3570%" height="15" fill="rgb(243,110,44)" fg:x="669" fg:w="22"/><text x="11.1051%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (59 samples, 0.96%)</title><rect x="10.2710%" y="405" width="0.9573%" height="15" fill="rgb(222,74,54)" fg:x="633" fg:w="59"/><text x="10.5210%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (59 samples, 0.96%)</title><rect x="10.2710%" y="389" width="0.9573%" height="15" fill="rgb(216,99,12)" fg:x="633" fg:w="59"/><text x="10.5210%" y="399.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (59 samples, 0.96%)</title><rect x="10.2710%" y="373" width="0.9573%" height="15" fill="rgb(226,22,26)" fg:x="633" fg:w="59"/><text x="10.5210%" y="383.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (54 samples, 0.88%)</title><rect x="10.3521%" y="357" width="0.8762%" height="15" fill="rgb(217,163,10)" fg:x="638" fg:w="54"/><text x="10.6021%" y="367.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (53 samples, 0.86%)</title><rect x="10.3683%" y="341" width="0.8600%" height="15" fill="rgb(213,25,53)" fg:x="639" fg:w="53"/><text x="10.6183%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect x="11.2121%" y="325" width="0.0162%" height="15" fill="rgb(252,105,26)" fg:x="691" fg:w="1"/><text x="11.4621%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect x="11.2121%" y="309" width="0.0162%" height="15" fill="rgb(220,39,43)" fg:x="691" fg:w="1"/><text x="11.4621%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (73 samples, 1.18%)</title><rect x="10.0600%" y="453" width="1.1845%" height="15" fill="rgb(229,68,48)" fg:x="620" fg:w="73"/><text x="10.3100%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (73 samples, 1.18%)</title><rect x="10.0600%" y="437" width="1.1845%" height="15" fill="rgb(252,8,32)" fg:x="620" fg:w="73"/><text x="10.3100%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (61 samples, 0.99%)</title><rect x="10.2547%" y="421" width="0.9898%" height="15" fill="rgb(223,20,43)" fg:x="632" fg:w="61"/><text x="10.5047%" y="431.50"></text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="11.2283%" y="405" width="0.0162%" height="15" fill="rgb(229,81,49)" fg:x="692" fg:w="1"/><text x="11.4783%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="11.2283%" y="389" width="0.0162%" height="15" fill="rgb(236,28,36)" fg:x="692" fg:w="1"/><text x="11.4783%" y="399.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.02%)</title><rect x="11.2283%" y="373" width="0.0162%" height="15" fill="rgb(249,185,26)" fg:x="692" fg:w="1"/><text x="11.4783%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.02%)</title><rect x="11.2283%" y="357" width="0.0162%" height="15" fill="rgb(249,174,33)" fg:x="692" fg:w="1"/><text x="11.4783%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (3 samples, 0.05%)</title><rect x="11.2445%" y="453" width="0.0487%" height="15" fill="rgb(233,201,37)" fg:x="693" fg:w="3"/><text x="11.4945%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (3 samples, 0.05%)</title><rect x="11.2445%" y="437" width="0.0487%" height="15" fill="rgb(221,78,26)" fg:x="693" fg:w="3"/><text x="11.4945%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.05%)</title><rect x="11.2445%" y="421" width="0.0487%" height="15" fill="rgb(250,127,30)" fg:x="693" fg:w="3"/><text x="11.4945%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.05%)</title><rect x="11.2445%" y="405" width="0.0487%" height="15" fill="rgb(230,49,44)" fg:x="693" fg:w="3"/><text x="11.4945%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (3 samples, 0.05%)</title><rect x="11.2445%" y="389" width="0.0487%" height="15" fill="rgb(229,67,23)" fg:x="693" fg:w="3"/><text x="11.4945%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (3 samples, 0.05%)</title><rect x="11.2445%" y="373" width="0.0487%" height="15" fill="rgb(249,83,47)" fg:x="693" fg:w="3"/><text x="11.4945%" y="383.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.05%)</title><rect x="11.2445%" y="357" width="0.0487%" height="15" fill="rgb(215,43,3)" fg:x="693" fg:w="3"/><text x="11.4945%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (2 samples, 0.03%)</title><rect x="11.2932%" y="453" width="0.0325%" height="15" fill="rgb(238,154,13)" fg:x="696" fg:w="2"/><text x="11.5432%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (2 samples, 0.03%)</title><rect x="11.2932%" y="437" width="0.0325%" height="15" fill="rgb(219,56,2)" fg:x="696" fg:w="2"/><text x="11.5432%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="11.2932%" y="421" width="0.0325%" height="15" fill="rgb(233,0,4)" fg:x="696" fg:w="2"/><text x="11.5432%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="11.2932%" y="405" width="0.0325%" height="15" fill="rgb(235,30,7)" fg:x="696" fg:w="2"/><text x="11.5432%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="11.2932%" y="389" width="0.0325%" height="15" fill="rgb(250,79,13)" fg:x="696" fg:w="2"/><text x="11.5432%" y="399.50"></text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="11.2932%" y="373" width="0.0325%" height="15" fill="rgb(211,146,34)" fg:x="696" fg:w="2"/><text x="11.5432%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="11.3094%" y="357" width="0.0162%" height="15" fill="rgb(228,22,38)" fg:x="697" fg:w="1"/><text x="11.5594%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="11.3094%" y="341" width="0.0162%" height="15" fill="rgb(235,168,5)" fg:x="697" fg:w="1"/><text x="11.5594%" y="351.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="11.3257%" y="373" width="0.0162%" height="15" fill="rgb(221,155,16)" fg:x="698" fg:w="1"/><text x="11.5757%" y="383.50"></text></g><g><title>main::compute_flowchange (89 samples, 1.44%)</title><rect x="9.9140%" y="469" width="1.4441%" height="15" fill="rgb(215,215,53)" fg:x="611" fg:w="89"/><text x="10.1640%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (2 samples, 0.03%)</title><rect x="11.3257%" y="453" width="0.0325%" height="15" fill="rgb(223,4,10)" fg:x="698" fg:w="2"/><text x="11.5757%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (2 samples, 0.03%)</title><rect x="11.3257%" y="437" width="0.0325%" height="15" fill="rgb(234,103,6)" fg:x="698" fg:w="2"/><text x="11.5757%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="11.3257%" y="421" width="0.0325%" height="15" fill="rgb(227,97,0)" fg:x="698" fg:w="2"/><text x="11.5757%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="11.3257%" y="405" width="0.0325%" height="15" fill="rgb(234,150,53)" fg:x="698" fg:w="2"/><text x="11.5757%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="11.3257%" y="389" width="0.0325%" height="15" fill="rgb(228,201,54)" fg:x="698" fg:w="2"/><text x="11.5757%" y="399.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="11.3419%" y="373" width="0.0162%" height="15" fill="rgb(222,22,37)" fg:x="699" fg:w="1"/><text x="11.5919%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="11.3419%" y="357" width="0.0162%" height="15" fill="rgb(237,53,32)" fg:x="699" fg:w="1"/><text x="11.5919%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="11.3581%" y="453" width="0.0162%" height="15" fill="rgb(233,25,53)" fg:x="700" fg:w="1"/><text x="11.6081%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="11.3581%" y="437" width="0.0162%" height="15" fill="rgb(210,40,34)" fg:x="700" fg:w="1"/><text x="11.6081%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="11.3581%" y="421" width="0.0162%" height="15" fill="rgb(241,220,44)" fg:x="700" fg:w="1"/><text x="11.6081%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="11.3581%" y="405" width="0.0162%" height="15" fill="rgb(235,28,35)" fg:x="700" fg:w="1"/><text x="11.6081%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="11.3581%" y="389" width="0.0162%" height="15" fill="rgb(210,56,17)" fg:x="700" fg:w="1"/><text x="11.6081%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="11.3581%" y="373" width="0.0162%" height="15" fill="rgb(224,130,29)" fg:x="700" fg:w="1"/><text x="11.6081%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="11.3581%" y="357" width="0.0162%" height="15" fill="rgb(235,212,8)" fg:x="700" fg:w="1"/><text x="11.6081%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="11.3581%" y="341" width="0.0162%" height="15" fill="rgb(223,33,50)" fg:x="700" fg:w="1"/><text x="11.6081%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="11.3581%" y="325" width="0.0162%" height="15" fill="rgb(219,149,13)" fg:x="700" fg:w="1"/><text x="11.6081%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="11.3743%" y="453" width="0.0162%" height="15" fill="rgb(250,156,29)" fg:x="701" fg:w="1"/><text x="11.6243%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="11.3743%" y="437" width="0.0162%" height="15" fill="rgb(216,193,19)" fg:x="701" fg:w="1"/><text x="11.6243%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="11.3743%" y="421" width="0.0162%" height="15" fill="rgb(216,135,14)" fg:x="701" fg:w="1"/><text x="11.6243%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="11.3743%" y="405" width="0.0162%" height="15" fill="rgb(241,47,5)" fg:x="701" fg:w="1"/><text x="11.6243%" y="415.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (1 samples, 0.02%)</title><rect x="11.3743%" y="389" width="0.0162%" height="15" fill="rgb(233,42,35)" fg:x="701" fg:w="1"/><text x="11.6243%" y="399.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (1 samples, 0.02%)</title><rect x="11.3743%" y="373" width="0.0162%" height="15" fill="rgb(231,13,6)" fg:x="701" fg:w="1"/><text x="11.6243%" y="383.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (1 samples, 0.02%)</title><rect x="11.3743%" y="357" width="0.0162%" height="15" fill="rgb(207,181,40)" fg:x="701" fg:w="1"/><text x="11.6243%" y="367.50"></text></g><g><title>main::compute_node_potentials (3 samples, 0.05%)</title><rect x="11.3581%" y="469" width="0.0487%" height="15" fill="rgb(254,173,49)" fg:x="700" fg:w="3"/><text x="11.6081%" y="479.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (1 samples, 0.02%)</title><rect x="11.3906%" y="453" width="0.0162%" height="15" fill="rgb(221,1,38)" fg:x="702" fg:w="1"/><text x="11.6406%" y="463.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (1 samples, 0.02%)</title><rect x="11.3906%" y="437" width="0.0162%" height="15" fill="rgb(206,124,46)" fg:x="702" fg:w="1"/><text x="11.6406%" y="447.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="11.3906%" y="421" width="0.0162%" height="15" fill="rgb(249,21,11)" fg:x="702" fg:w="1"/><text x="11.6406%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.08%)</title><rect x="11.8287%" y="453" width="0.0811%" height="15" fill="rgb(222,201,40)" fg:x="729" fg:w="5"/><text x="12.0787%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="11.8773%" y="437" width="0.0325%" height="15" fill="rgb(235,61,29)" fg:x="732" fg:w="2"/><text x="12.1273%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (23 samples, 0.37%)</title><rect x="12.0558%" y="389" width="0.3732%" height="15" fill="rgb(219,207,3)" fg:x="743" fg:w="23"/><text x="12.3058%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (23 samples, 0.37%)</title><rect x="12.0558%" y="373" width="0.3732%" height="15" fill="rgb(222,56,46)" fg:x="743" fg:w="23"/><text x="12.3058%" y="383.50"></text></g><g><title>alloc::alloc::realloc (23 samples, 0.37%)</title><rect x="12.0558%" y="357" width="0.3732%" height="15" fill="rgb(239,76,54)" fg:x="743" fg:w="23"/><text x="12.3058%" y="367.50"></text></g><g><title>realloc (23 samples, 0.37%)</title><rect x="12.0558%" y="341" width="0.3732%" height="15" fill="rgb(231,124,27)" fg:x="743" fg:w="23"/><text x="12.3058%" y="351.50"></text></g><g><title>[libc.so.6] (22 samples, 0.36%)</title><rect x="12.0720%" y="325" width="0.3570%" height="15" fill="rgb(249,195,6)" fg:x="744" fg:w="22"/><text x="12.3220%" y="335.50"></text></g><g><title>[libc.so.6] (20 samples, 0.32%)</title><rect x="12.1045%" y="309" width="0.3245%" height="15" fill="rgb(237,174,47)" fg:x="746" fg:w="20"/><text x="12.3545%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="12.4290%" y="389" width="0.0162%" height="15" fill="rgb(206,201,31)" fg:x="766" fg:w="1"/><text x="12.6790%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.42%)</title><rect x="12.0396%" y="405" width="0.4219%" height="15" fill="rgb(231,57,52)" fg:x="742" fg:w="26"/><text x="12.2896%" y="415.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="12.4452%" y="389" width="0.0162%" height="15" fill="rgb(248,177,22)" fg:x="767" fg:w="1"/><text x="12.6952%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (27 samples, 0.44%)</title><rect x="12.0396%" y="437" width="0.4381%" height="15" fill="rgb(215,211,37)" fg:x="742" fg:w="27"/><text x="12.2896%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.44%)</title><rect x="12.0396%" y="421" width="0.4381%" height="15" fill="rgb(241,128,51)" fg:x="742" fg:w="27"/><text x="12.2896%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="12.4615%" y="405" width="0.0162%" height="15" fill="rgb(227,165,31)" fg:x="768" fg:w="1"/><text x="12.7115%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="12.4615%" y="389" width="0.0162%" height="15" fill="rgb(228,167,24)" fg:x="768" fg:w="1"/><text x="12.7115%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37 samples, 0.60%)</title><rect x="11.9098%" y="453" width="0.6004%" height="15" fill="rgb(228,143,12)" fg:x="734" fg:w="37"/><text x="12.1598%" y="463.50"></text></g><g><title>core::ptr::write (2 samples, 0.03%)</title><rect x="12.4777%" y="437" width="0.0325%" height="15" fill="rgb(249,149,8)" fg:x="769" fg:w="2"/><text x="12.7277%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (2 samples, 0.03%)</title><rect x="12.5101%" y="453" width="0.0325%" height="15" fill="rgb(243,35,44)" fg:x="771" fg:w="2"/><text x="12.7601%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.06%)</title><rect x="12.5426%" y="357" width="0.0649%" height="15" fill="rgb(246,89,9)" fg:x="773" fg:w="4"/><text x="12.7926%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.06%)</title><rect x="12.5426%" y="341" width="0.0649%" height="15" fill="rgb(233,213,13)" fg:x="773" fg:w="4"/><text x="12.7926%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.06%)</title><rect x="12.5426%" y="325" width="0.0649%" height="15" fill="rgb(233,141,41)" fg:x="773" fg:w="4"/><text x="12.7926%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.06%)</title><rect x="12.5426%" y="309" width="0.0649%" height="15" fill="rgb(239,167,4)" fg:x="773" fg:w="4"/><text x="12.7926%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.06%)</title><rect x="12.5426%" y="293" width="0.0649%" height="15" fill="rgb(209,217,16)" fg:x="773" fg:w="4"/><text x="12.7926%" y="303.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.06%)</title><rect x="12.5426%" y="277" width="0.0649%" height="15" fill="rgb(219,88,35)" fg:x="773" fg:w="4"/><text x="12.7926%" y="287.50"></text></g><g><title>realloc (4 samples, 0.06%)</title><rect x="12.5426%" y="261" width="0.0649%" height="15" fill="rgb(220,193,23)" fg:x="773" fg:w="4"/><text x="12.7926%" y="271.50"></text></g><g><title>[libc.so.6] (4 samples, 0.06%)</title><rect x="12.5426%" y="245" width="0.0649%" height="15" fill="rgb(230,90,52)" fg:x="773" fg:w="4"/><text x="12.7926%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.05%)</title><rect x="12.5588%" y="229" width="0.0487%" height="15" fill="rgb(252,106,19)" fg:x="774" fg:w="3"/><text x="12.8088%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.13%)</title><rect x="12.5426%" y="453" width="0.1298%" height="15" fill="rgb(206,74,20)" fg:x="773" fg:w="8"/><text x="12.7926%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.13%)</title><rect x="12.5426%" y="437" width="0.1298%" height="15" fill="rgb(230,138,44)" fg:x="773" fg:w="8"/><text x="12.7926%" y="447.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (8 samples, 0.13%)</title><rect x="12.5426%" y="421" width="0.1298%" height="15" fill="rgb(235,182,43)" fg:x="773" fg:w="8"/><text x="12.7926%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8 samples, 0.13%)</title><rect x="12.5426%" y="405" width="0.1298%" height="15" fill="rgb(242,16,51)" fg:x="773" fg:w="8"/><text x="12.7926%" y="415.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (8 samples, 0.13%)</title><rect x="12.5426%" y="389" width="0.1298%" height="15" fill="rgb(248,9,4)" fg:x="773" fg:w="8"/><text x="12.7926%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.13%)</title><rect x="12.5426%" y="373" width="0.1298%" height="15" fill="rgb(210,31,22)" fg:x="773" fg:w="8"/><text x="12.7926%" y="383.50"></text></g><g><title>core::ptr::write (4 samples, 0.06%)</title><rect x="12.6075%" y="357" width="0.0649%" height="15" fill="rgb(239,54,39)" fg:x="777" fg:w="4"/><text x="12.8575%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (5 samples, 0.08%)</title><rect x="12.6724%" y="453" width="0.0811%" height="15" fill="rgb(230,99,41)" fg:x="781" fg:w="5"/><text x="12.9224%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (5 samples, 0.08%)</title><rect x="12.6724%" y="437" width="0.0811%" height="15" fill="rgb(253,106,12)" fg:x="781" fg:w="5"/><text x="12.9224%" y="447.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (53 samples, 0.86%)</title><rect x="13.7433%" y="405" width="0.8600%" height="15" fill="rgb(213,46,41)" fg:x="847" fg:w="53"/><text x="13.9933%" y="415.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (53 samples, 0.86%)</title><rect x="13.7433%" y="389" width="0.8600%" height="15" fill="rgb(215,133,35)" fg:x="847" fg:w="53"/><text x="13.9933%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (53 samples, 0.86%)</title><rect x="13.7433%" y="373" width="0.8600%" height="15" fill="rgb(213,28,5)" fg:x="847" fg:w="53"/><text x="13.9933%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (119 samples, 1.93%)</title><rect x="12.7535%" y="453" width="1.9309%" height="15" fill="rgb(215,77,49)" fg:x="786" fg:w="119"/><text x="13.0035%" y="463.50">c..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (119 samples, 1.93%)</title><rect x="12.7535%" y="437" width="1.9309%" height="15" fill="rgb(248,100,22)" fg:x="786" fg:w="119"/><text x="13.0035%" y="447.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (119 samples, 1.93%)</title><rect x="12.7535%" y="421" width="1.9309%" height="15" fill="rgb(208,67,9)" fg:x="786" fg:w="119"/><text x="13.0035%" y="431.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.08%)</title><rect x="14.6033%" y="405" width="0.0811%" height="15" fill="rgb(219,133,21)" fg:x="900" fg:w="5"/><text x="14.8533%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.05%)</title><rect x="14.6357%" y="389" width="0.0487%" height="15" fill="rgb(246,46,29)" fg:x="902" fg:w="3"/><text x="14.8857%" y="399.50"></text></g><g><title>main::find_cycle_with_arc (205 samples, 3.33%)</title><rect x="11.4068%" y="469" width="3.3263%" height="15" fill="rgb(246,185,52)" fg:x="703" fg:w="205"/><text x="11.6568%" y="479.50">mai..</text></g><g><title>itertools::Itertools::find_position (3 samples, 0.05%)</title><rect x="14.6844%" y="453" width="0.0487%" height="15" fill="rgb(252,136,11)" fg:x="905" fg:w="3"/><text x="14.9344%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.05%)</title><rect x="14.6844%" y="437" width="0.0487%" height="15" fill="rgb(219,138,53)" fg:x="905" fg:w="3"/><text x="14.9344%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.05%)</title><rect x="14.6844%" y="421" width="0.0487%" height="15" fill="rgb(211,51,23)" fg:x="905" fg:w="3"/><text x="14.9344%" y="431.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.05%)</title><rect x="14.6844%" y="405" width="0.0487%" height="15" fill="rgb(247,221,28)" fg:x="905" fg:w="3"/><text x="14.9344%" y="415.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (3 samples, 0.05%)</title><rect x="14.6844%" y="389" width="0.0487%" height="15" fill="rgb(251,222,45)" fg:x="905" fg:w="3"/><text x="14.9344%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.05%)</title><rect x="14.6844%" y="373" width="0.0487%" height="15" fill="rgb(217,162,53)" fg:x="905" fg:w="3"/><text x="14.9344%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (2 samples, 0.03%)</title><rect x="14.7006%" y="357" width="0.0325%" height="15" fill="rgb(229,93,14)" fg:x="906" fg:w="2"/><text x="14.9506%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (1 samples, 0.02%)</title><rect x="14.7169%" y="341" width="0.0162%" height="15" fill="rgb(209,67,49)" fg:x="907" fg:w="1"/><text x="14.9669%" y="351.50"></text></g><g><title>itertools::Itertools::find_position::_{{closure}} (1 samples, 0.02%)</title><rect x="14.7169%" y="325" width="0.0162%" height="15" fill="rgb(213,87,29)" fg:x="907" fg:w="1"/><text x="14.9669%" y="335.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (1 samples, 0.02%)</title><rect x="14.7169%" y="309" width="0.0162%" height="15" fill="rgb(205,151,52)" fg:x="907" fg:w="1"/><text x="14.9669%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect x="14.7169%" y="293" width="0.0162%" height="15" fill="rgb(253,215,39)" fg:x="907" fg:w="1"/><text x="14.9669%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="14.7169%" y="277" width="0.0162%" height="15" fill="rgb(221,220,41)" fg:x="907" fg:w="1"/><text x="14.9669%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1 samples, 0.02%)</title><rect x="14.7169%" y="261" width="0.0162%" height="15" fill="rgb(218,133,21)" fg:x="907" fg:w="1"/><text x="14.9669%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="14.7331%" y="453" width="0.0162%" height="15" fill="rgb(221,193,43)" fg:x="908" fg:w="1"/><text x="14.9831%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="14.7331%" y="437" width="0.0162%" height="15" fill="rgb(240,128,52)" fg:x="908" fg:w="1"/><text x="14.9831%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="14.7331%" y="421" width="0.0162%" height="15" fill="rgb(253,114,12)" fg:x="908" fg:w="1"/><text x="14.9831%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="14.7331%" y="405" width="0.0162%" height="15" fill="rgb(215,223,47)" fg:x="908" fg:w="1"/><text x="14.9831%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="14.7331%" y="389" width="0.0162%" height="15" fill="rgb(248,225,23)" fg:x="908" fg:w="1"/><text x="14.9831%" y="399.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="14.7331%" y="373" width="0.0162%" height="15" fill="rgb(250,108,0)" fg:x="908" fg:w="1"/><text x="14.9831%" y="383.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="14.7331%" y="357" width="0.0162%" height="15" fill="rgb(228,208,7)" fg:x="908" fg:w="1"/><text x="14.9831%" y="367.50"></text></g><g><title>main::initialization (2 samples, 0.03%)</title><rect x="14.7331%" y="469" width="0.0325%" height="15" fill="rgb(244,45,10)" fg:x="908" fg:w="2"/><text x="14.9831%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="14.7493%" y="453" width="0.0162%" height="15" fill="rgb(207,125,25)" fg:x="909" fg:w="1"/><text x="14.9993%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="14.7493%" y="437" width="0.0162%" height="15" fill="rgb(210,195,18)" fg:x="909" fg:w="1"/><text x="14.9993%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="14.7493%" y="421" width="0.0162%" height="15" fill="rgb(249,80,12)" fg:x="909" fg:w="1"/><text x="14.9993%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="14.7493%" y="405" width="0.0162%" height="15" fill="rgb(221,65,9)" fg:x="909" fg:w="1"/><text x="14.9993%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="14.7493%" y="389" width="0.0162%" height="15" fill="rgb(235,49,36)" fg:x="909" fg:w="1"/><text x="14.9993%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="14.7493%" y="373" width="0.0162%" height="15" fill="rgb(225,32,20)" fg:x="909" fg:w="1"/><text x="14.9993%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="14.7493%" y="357" width="0.0162%" height="15" fill="rgb(215,141,46)" fg:x="909" fg:w="1"/><text x="14.9993%" y="367.50"></text></g><g><title>realloc (1 samples, 0.02%)</title><rect x="14.7493%" y="341" width="0.0162%" height="15" fill="rgb(250,160,47)" fg:x="909" fg:w="1"/><text x="14.9993%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="14.7493%" y="325" width="0.0162%" height="15" fill="rgb(216,222,40)" fg:x="909" fg:w="1"/><text x="14.9993%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="24.8742%" y="389" width="0.0487%" height="15" fill="rgb(234,217,39)" fg:x="1533" fg:w="3"/><text x="25.1242%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.05%)</title><rect x="24.8742%" y="373" width="0.0487%" height="15" fill="rgb(207,178,40)" fg:x="1533" fg:w="3"/><text x="25.1242%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.05%)</title><rect x="24.8742%" y="357" width="0.0487%" height="15" fill="rgb(221,136,13)" fg:x="1533" fg:w="3"/><text x="25.1242%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.05%)</title><rect x="24.8742%" y="341" width="0.0487%" height="15" fill="rgb(249,199,10)" fg:x="1533" fg:w="3"/><text x="25.1242%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.05%)</title><rect x="24.8742%" y="325" width="0.0487%" height="15" fill="rgb(249,222,13)" fg:x="1533" fg:w="3"/><text x="25.1242%" y="335.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.05%)</title><rect x="24.8742%" y="309" width="0.0487%" height="15" fill="rgb(244,185,38)" fg:x="1533" fg:w="3"/><text x="25.1242%" y="319.50"></text></g><g><title>malloc (3 samples, 0.05%)</title><rect x="24.8742%" y="293" width="0.0487%" height="15" fill="rgb(236,202,9)" fg:x="1533" fg:w="3"/><text x="25.1242%" y="303.50"></text></g><g><title>[libc.so.6] (3 samples, 0.05%)</title><rect x="24.8742%" y="277" width="0.0487%" height="15" fill="rgb(250,229,37)" fg:x="1533" fg:w="3"/><text x="25.1242%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (41 samples, 0.67%)</title><rect x="24.8742%" y="453" width="0.6653%" height="15" fill="rgb(206,174,23)" fg:x="1533" fg:w="41"/><text x="25.1242%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (41 samples, 0.67%)</title><rect x="24.8742%" y="437" width="0.6653%" height="15" fill="rgb(211,33,43)" fg:x="1533" fg:w="41"/><text x="25.1242%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (41 samples, 0.67%)</title><rect x="24.8742%" y="421" width="0.6653%" height="15" fill="rgb(245,58,50)" fg:x="1533" fg:w="41"/><text x="25.1242%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (41 samples, 0.67%)</title><rect x="24.8742%" y="405" width="0.6653%" height="15" fill="rgb(244,68,36)" fg:x="1533" fg:w="41"/><text x="25.1242%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (38 samples, 0.62%)</title><rect x="24.9229%" y="389" width="0.6166%" height="15" fill="rgb(232,229,15)" fg:x="1536" fg:w="38"/><text x="25.1729%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.62%)</title><rect x="24.9229%" y="373" width="0.6166%" height="15" fill="rgb(254,30,23)" fg:x="1536" fg:w="38"/><text x="25.1729%" y="383.50"></text></g><g><title>[libc.so.6] (38 samples, 0.62%)</title><rect x="24.9229%" y="357" width="0.6166%" height="15" fill="rgb(235,160,14)" fg:x="1536" fg:w="38"/><text x="25.1729%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="25.5395%" y="453" width="0.0325%" height="15" fill="rgb(212,155,44)" fg:x="1574" fg:w="2"/><text x="25.7895%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="25.5557%" y="437" width="0.0162%" height="15" fill="rgb(226,2,50)" fg:x="1575" fg:w="1"/><text x="25.8057%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="25.5557%" y="421" width="0.0162%" height="15" fill="rgb(234,177,6)" fg:x="1575" fg:w="1"/><text x="25.8057%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="25.5720%" y="437" width="0.0325%" height="15" fill="rgb(217,24,9)" fg:x="1576" fg:w="2"/><text x="25.8220%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.13%)</title><rect x="25.5720%" y="453" width="0.1298%" height="15" fill="rgb(220,13,46)" fg:x="1576" fg:w="8"/><text x="25.8220%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.10%)</title><rect x="25.6044%" y="437" width="0.0974%" height="15" fill="rgb(239,221,27)" fg:x="1578" fg:w="6"/><text x="25.8544%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.10%)</title><rect x="25.6044%" y="421" width="0.0974%" height="15" fill="rgb(222,198,25)" fg:x="1578" fg:w="6"/><text x="25.8544%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="25.7667%" y="437" width="0.0162%" height="15" fill="rgb(211,99,13)" fg:x="1588" fg:w="1"/><text x="26.0167%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="25.7667%" y="421" width="0.0162%" height="15" fill="rgb(232,111,31)" fg:x="1588" fg:w="1"/><text x="26.0167%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="29.8718%" y="421" width="0.0162%" height="15" fill="rgb(245,82,37)" fg:x="1841" fg:w="1"/><text x="30.1218%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="29.8718%" y="405" width="0.0162%" height="15" fill="rgb(227,149,46)" fg:x="1841" fg:w="1"/><text x="30.1218%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="29.8718%" y="389" width="0.0162%" height="15" fill="rgb(218,36,50)" fg:x="1841" fg:w="1"/><text x="30.1218%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.10%)</title><rect x="29.8880%" y="421" width="0.0974%" height="15" fill="rgb(226,80,48)" fg:x="1842" fg:w="6"/><text x="30.1380%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.10%)</title><rect x="29.8880%" y="405" width="0.0974%" height="15" fill="rgb(238,224,15)" fg:x="1842" fg:w="6"/><text x="30.1380%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.10%)</title><rect x="29.8880%" y="389" width="0.0974%" height="15" fill="rgb(241,136,10)" fg:x="1842" fg:w="6"/><text x="30.1380%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.03%)</title><rect x="30.7156%" y="373" width="0.0325%" height="15" fill="rgb(208,32,45)" fg:x="1893" fg:w="2"/><text x="30.9656%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.02%)</title><rect x="30.7480%" y="373" width="0.0162%" height="15" fill="rgb(207,135,9)" fg:x="1895" fg:w="1"/><text x="30.9980%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12 samples, 0.19%)</title><rect x="30.7642%" y="357" width="0.1947%" height="15" fill="rgb(206,86,44)" fg:x="1896" fg:w="12"/><text x="31.0142%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 0.19%)</title><rect x="30.7642%" y="341" width="0.1947%" height="15" fill="rgb(245,177,15)" fg:x="1896" fg:w="12"/><text x="31.0142%" y="351.50"></text></g><g><title>alloc::alloc::realloc (12 samples, 0.19%)</title><rect x="30.7642%" y="325" width="0.1947%" height="15" fill="rgb(206,64,50)" fg:x="1896" fg:w="12"/><text x="31.0142%" y="335.50"></text></g><g><title>realloc (12 samples, 0.19%)</title><rect x="30.7642%" y="309" width="0.1947%" height="15" fill="rgb(234,36,40)" fg:x="1896" fg:w="12"/><text x="31.0142%" y="319.50"></text></g><g><title>[libc.so.6] (12 samples, 0.19%)</title><rect x="30.7642%" y="293" width="0.1947%" height="15" fill="rgb(213,64,8)" fg:x="1896" fg:w="12"/><text x="31.0142%" y="303.50"></text></g><g><title>[libc.so.6] (12 samples, 0.19%)</title><rect x="30.7642%" y="277" width="0.1947%" height="15" fill="rgb(210,75,36)" fg:x="1896" fg:w="12"/><text x="31.0142%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.28%)</title><rect x="30.6993%" y="405" width="0.2758%" height="15" fill="rgb(229,88,21)" fg:x="1892" fg:w="17"/><text x="30.9493%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.28%)</title><rect x="30.6993%" y="389" width="0.2758%" height="15" fill="rgb(252,204,47)" fg:x="1892" fg:w="17"/><text x="30.9493%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.21%)</title><rect x="30.7642%" y="373" width="0.2109%" height="15" fill="rgb(208,77,27)" fg:x="1896" fg:w="13"/><text x="31.0142%" y="383.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="30.9589%" y="357" width="0.0162%" height="15" fill="rgb(221,76,26)" fg:x="1908" fg:w="1"/><text x="31.2089%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (63 samples, 1.02%)</title><rect x="29.9854%" y="421" width="1.0222%" height="15" fill="rgb(225,139,18)" fg:x="1848" fg:w="63"/><text x="30.2354%" y="431.50"></text></g><g><title>core::ptr::write (2 samples, 0.03%)</title><rect x="30.9752%" y="405" width="0.0325%" height="15" fill="rgb(230,137,11)" fg:x="1909" fg:w="2"/><text x="31.2252%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (8 samples, 0.13%)</title><rect x="31.0076%" y="421" width="0.1298%" height="15" fill="rgb(212,28,1)" fg:x="1911" fg:w="8"/><text x="31.2576%" y="431.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (47 samples, 0.76%)</title><rect x="32.0461%" y="373" width="0.7626%" height="15" fill="rgb(248,164,17)" fg:x="1975" fg:w="47"/><text x="32.2961%" y="383.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (47 samples, 0.76%)</title><rect x="32.0461%" y="357" width="0.7626%" height="15" fill="rgb(222,171,42)" fg:x="1975" fg:w="47"/><text x="32.2961%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (47 samples, 0.76%)</title><rect x="32.0461%" y="341" width="0.7626%" height="15" fill="rgb(243,84,45)" fg:x="1975" fg:w="47"/><text x="32.2961%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (457 samples, 7.42%)</title><rect x="25.7018%" y="453" width="7.4152%" height="15" fill="rgb(252,49,23)" fg:x="1584" fg:w="457"/><text x="25.9518%" y="463.50">&lt;core::sli..</text></g><g><title>main::update_sptree::_{{closure}} (452 samples, 7.33%)</title><rect x="25.7829%" y="437" width="7.3341%" height="15" fill="rgb(215,19,7)" fg:x="1589" fg:w="452"/><text x="26.0329%" y="447.50">main::upda..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (122 samples, 1.98%)</title><rect x="31.1374%" y="421" width="1.9796%" height="15" fill="rgb(238,81,41)" fg:x="1919" fg:w="122"/><text x="31.3874%" y="431.50">c..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (122 samples, 1.98%)</title><rect x="31.1374%" y="405" width="1.9796%" height="15" fill="rgb(210,199,37)" fg:x="1919" fg:w="122"/><text x="31.3874%" y="415.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (122 samples, 1.98%)</title><rect x="31.1374%" y="389" width="1.9796%" height="15" fill="rgb(244,192,49)" fg:x="1919" fg:w="122"/><text x="31.3874%" y="399.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.31%)</title><rect x="32.8087%" y="373" width="0.3083%" height="15" fill="rgb(226,211,11)" fg:x="2022" fg:w="19"/><text x="33.0587%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (19 samples, 0.31%)</title><rect x="32.8087%" y="357" width="0.3083%" height="15" fill="rgb(236,162,54)" fg:x="2022" fg:w="19"/><text x="33.0587%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.60%)</title><rect x="33.1657%" y="437" width="0.6004%" height="15" fill="rgb(220,229,9)" fg:x="2044" fg:w="37"/><text x="33.4157%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.03%)</title><rect x="33.7336%" y="421" width="0.0325%" height="15" fill="rgb(250,87,22)" fg:x="2079" fg:w="2"/><text x="33.9836%" y="431.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (156 samples, 2.53%)</title><rect x="33.7660%" y="421" width="2.5312%" height="15" fill="rgb(239,43,17)" fg:x="2081" fg:w="156"/><text x="34.0160%" y="431.50">&lt;p..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (156 samples, 2.53%)</title><rect x="33.7660%" y="405" width="2.5312%" height="15" fill="rgb(231,177,25)" fg:x="2081" fg:w="156"/><text x="34.0160%" y="415.50">co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (320 samples, 5.19%)</title><rect x="33.1170%" y="453" width="5.1923%" height="15" fill="rgb(219,179,1)" fg:x="2041" fg:w="320"/><text x="33.3670%" y="463.50">&lt;core:..</text></g><g><title>main::update_sptree::_{{closure}} (280 samples, 4.54%)</title><rect x="33.7660%" y="437" width="4.5432%" height="15" fill="rgb(238,219,53)" fg:x="2081" fg:w="280"/><text x="34.0160%" y="447.50">main:..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (124 samples, 2.01%)</title><rect x="36.2973%" y="421" width="2.0120%" height="15" fill="rgb(232,167,36)" fg:x="2237" fg:w="124"/><text x="36.5473%" y="431.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (124 samples, 2.01%)</title><rect x="36.2973%" y="405" width="2.0120%" height="15" fill="rgb(244,19,51)" fg:x="2237" fg:w="124"/><text x="36.5473%" y="415.50">c..</text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="38.3255%" y="293" width="0.0162%" height="15" fill="rgb(224,6,22)" fg:x="2362" fg:w="1"/><text x="38.5755%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.18%)</title><rect x="38.3093%" y="389" width="0.1785%" height="15" fill="rgb(224,145,5)" fg:x="2361" fg:w="11"/><text x="38.5593%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.18%)</title><rect x="38.3093%" y="373" width="0.1785%" height="15" fill="rgb(234,130,49)" fg:x="2361" fg:w="11"/><text x="38.5593%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.18%)</title><rect x="38.3093%" y="357" width="0.1785%" height="15" fill="rgb(254,6,2)" fg:x="2361" fg:w="11"/><text x="38.5593%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.16%)</title><rect x="38.3255%" y="341" width="0.1623%" height="15" fill="rgb(208,96,46)" fg:x="2362" fg:w="10"/><text x="38.5755%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.16%)</title><rect x="38.3255%" y="325" width="0.1623%" height="15" fill="rgb(239,3,39)" fg:x="2362" fg:w="10"/><text x="38.5755%" y="335.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.16%)</title><rect x="38.3255%" y="309" width="0.1623%" height="15" fill="rgb(233,210,1)" fg:x="2362" fg:w="10"/><text x="38.5755%" y="319.50"></text></g><g><title>malloc (9 samples, 0.15%)</title><rect x="38.3417%" y="293" width="0.1460%" height="15" fill="rgb(244,137,37)" fg:x="2363" fg:w="9"/><text x="38.5917%" y="303.50"></text></g><g><title>[libc.so.6] (9 samples, 0.15%)</title><rect x="38.3417%" y="277" width="0.1460%" height="15" fill="rgb(240,136,2)" fg:x="2363" fg:w="9"/><text x="38.5917%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="38.4553%" y="261" width="0.0325%" height="15" fill="rgb(239,18,37)" fg:x="2370" fg:w="2"/><text x="38.7053%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (49 samples, 0.80%)</title><rect x="38.3093%" y="453" width="0.7951%" height="15" fill="rgb(218,185,22)" fg:x="2361" fg:w="49"/><text x="38.5593%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49 samples, 0.80%)</title><rect x="38.3093%" y="437" width="0.7951%" height="15" fill="rgb(225,218,4)" fg:x="2361" fg:w="49"/><text x="38.5593%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (49 samples, 0.80%)</title><rect x="38.3093%" y="421" width="0.7951%" height="15" fill="rgb(230,182,32)" fg:x="2361" fg:w="49"/><text x="38.5593%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (49 samples, 0.80%)</title><rect x="38.3093%" y="405" width="0.7951%" height="15" fill="rgb(242,56,43)" fg:x="2361" fg:w="49"/><text x="38.5593%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (38 samples, 0.62%)</title><rect x="38.4877%" y="389" width="0.6166%" height="15" fill="rgb(233,99,24)" fg:x="2372" fg:w="38"/><text x="38.7377%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.62%)</title><rect x="38.4877%" y="373" width="0.6166%" height="15" fill="rgb(234,209,42)" fg:x="2372" fg:w="38"/><text x="38.7377%" y="383.50"></text></g><g><title>[libc.so.6] (38 samples, 0.62%)</title><rect x="38.4877%" y="357" width="0.6166%" height="15" fill="rgb(227,7,12)" fg:x="2372" fg:w="38"/><text x="38.7377%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.03%)</title><rect x="39.3153%" y="405" width="0.0325%" height="15" fill="rgb(245,203,43)" fg:x="2423" fg:w="2"/><text x="39.5653%" y="415.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="39.3639%" y="341" width="0.0162%" height="15" fill="rgb(238,205,33)" fg:x="2426" fg:w="1"/><text x="39.6139%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (51 samples, 0.83%)</title><rect x="39.3477%" y="389" width="0.8275%" height="15" fill="rgb(231,56,7)" fg:x="2425" fg:w="51"/><text x="39.5977%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (51 samples, 0.83%)</title><rect x="39.3477%" y="373" width="0.8275%" height="15" fill="rgb(244,186,29)" fg:x="2425" fg:w="51"/><text x="39.5977%" y="383.50"></text></g><g><title>alloc::alloc::realloc (51 samples, 0.83%)</title><rect x="39.3477%" y="357" width="0.8275%" height="15" fill="rgb(234,111,31)" fg:x="2425" fg:w="51"/><text x="39.5977%" y="367.50"></text></g><g><title>realloc (49 samples, 0.80%)</title><rect x="39.3802%" y="341" width="0.7951%" height="15" fill="rgb(241,149,10)" fg:x="2427" fg:w="49"/><text x="39.6302%" y="351.50"></text></g><g><title>[libc.so.6] (44 samples, 0.71%)</title><rect x="39.4613%" y="325" width="0.7139%" height="15" fill="rgb(249,206,44)" fg:x="2432" fg:w="44"/><text x="39.7113%" y="335.50"></text></g><g><title>[libc.so.6] (40 samples, 0.65%)</title><rect x="39.5262%" y="309" width="0.6490%" height="15" fill="rgb(251,153,30)" fg:x="2436" fg:w="40"/><text x="39.7762%" y="319.50"></text></g><g><title>[libc.so.6] (11 samples, 0.18%)</title><rect x="39.9968%" y="293" width="0.1785%" height="15" fill="rgb(239,152,38)" fg:x="2465" fg:w="11"/><text x="40.2468%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (52 samples, 0.84%)</title><rect x="39.3477%" y="405" width="0.8437%" height="15" fill="rgb(249,139,47)" fg:x="2425" fg:w="52"/><text x="39.5977%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="40.1752%" y="389" width="0.0162%" height="15" fill="rgb(244,64,35)" fg:x="2476" fg:w="1"/><text x="40.4252%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (59 samples, 0.96%)</title><rect x="39.2666%" y="437" width="0.9573%" height="15" fill="rgb(216,46,15)" fg:x="2420" fg:w="59"/><text x="39.5166%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (59 samples, 0.96%)</title><rect x="39.2666%" y="421" width="0.9573%" height="15" fill="rgb(250,74,19)" fg:x="2420" fg:w="59"/><text x="39.5166%" y="431.50"></text></g><g><title>core::cmp::max (2 samples, 0.03%)</title><rect x="40.1915%" y="405" width="0.0325%" height="15" fill="rgb(249,42,33)" fg:x="2477" fg:w="2"/><text x="40.4415%" y="415.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.03%)</title><rect x="40.1915%" y="389" width="0.0325%" height="15" fill="rgb(242,149,17)" fg:x="2477" fg:w="2"/><text x="40.4415%" y="399.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.03%)</title><rect x="40.1915%" y="373" width="0.0325%" height="15" fill="rgb(244,29,21)" fg:x="2477" fg:w="2"/><text x="40.4415%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (296 samples, 4.80%)</title><rect x="39.1043%" y="453" width="4.8029%" height="15" fill="rgb(220,130,37)" fg:x="2410" fg:w="296"/><text x="39.3543%" y="463.50">alloc:..</text></g><g><title>core::ptr::write (227 samples, 3.68%)</title><rect x="40.2239%" y="437" width="3.6833%" height="15" fill="rgb(211,67,2)" fg:x="2479" fg:w="227"/><text x="40.4739%" y="447.50">core..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.02%)</title><rect x="43.9072%" y="437" width="0.0162%" height="15" fill="rgb(235,68,52)" fg:x="2706" fg:w="1"/><text x="44.1572%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (10 samples, 0.16%)</title><rect x="43.9072%" y="453" width="0.1623%" height="15" fill="rgb(246,142,3)" fg:x="2706" fg:w="10"/><text x="44.1572%" y="463.50"></text></g><g><title>core::intrinsics::copy (9 samples, 0.15%)</title><rect x="43.9234%" y="437" width="0.1460%" height="15" fill="rgb(241,25,7)" fg:x="2707" fg:w="9"/><text x="44.1734%" y="447.50"></text></g><g><title>[libc.so.6] (9 samples, 0.15%)</title><rect x="43.9234%" y="421" width="0.1460%" height="15" fill="rgb(242,119,39)" fg:x="2707" fg:w="9"/><text x="44.1734%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (110 samples, 1.78%)</title><rect x="44.0694%" y="453" width="1.7848%" height="15" fill="rgb(241,98,45)" fg:x="2716" fg:w="110"/><text x="44.3194%" y="463.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (110 samples, 1.78%)</title><rect x="44.0694%" y="437" width="1.7848%" height="15" fill="rgb(254,28,30)" fg:x="2716" fg:w="110"/><text x="44.3194%" y="447.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (110 samples, 1.78%)</title><rect x="44.0694%" y="421" width="1.7848%" height="15" fill="rgb(241,142,54)" fg:x="2716" fg:w="110"/><text x="44.3194%" y="431.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::chain (1 samples, 0.02%)</title><rect x="45.8543%" y="453" width="0.0162%" height="15" fill="rgb(222,85,15)" fg:x="2826" fg:w="1"/><text x="46.1043%" y="463.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="45.8543%" y="437" width="0.0162%" height="15" fill="rgb(210,85,47)" fg:x="2826" fg:w="1"/><text x="46.1043%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.94%)</title><rect x="50.2353%" y="309" width="0.9411%" height="15" fill="rgb(224,206,25)" fg:x="3096" fg:w="58"/><text x="50.4853%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (58 samples, 0.94%)</title><rect x="50.2353%" y="293" width="0.9411%" height="15" fill="rgb(243,201,19)" fg:x="3096" fg:w="58"/><text x="50.4853%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (100 samples, 1.62%)</title><rect x="52.1499%" y="277" width="1.6226%" height="15" fill="rgb(236,59,4)" fg:x="3214" fg:w="100"/><text x="52.3999%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 1.62%)</title><rect x="52.1499%" y="261" width="1.6226%" height="15" fill="rgb(254,179,45)" fg:x="3214" fg:w="100"/><text x="52.3999%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="53.7401%" y="245" width="0.0325%" height="15" fill="rgb(226,14,10)" fg:x="3312" fg:w="2"/><text x="53.9901%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.03%)</title><rect x="53.7401%" y="229" width="0.0325%" height="15" fill="rgb(244,27,41)" fg:x="3312" fg:w="2"/><text x="53.9901%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (50 samples, 0.81%)</title><rect x="53.7725%" y="277" width="0.8113%" height="15" fill="rgb(235,35,32)" fg:x="3314" fg:w="50"/><text x="54.0225%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once (271 samples, 4.40%)</title><rect x="50.2353%" y="325" width="4.3972%" height="15" fill="rgb(218,68,31)" fg:x="3096" fg:w="271"/><text x="50.4853%" y="335.50">core:..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (213 samples, 3.46%)</title><rect x="51.1764%" y="309" width="3.4561%" height="15" fill="rgb(207,120,37)" fg:x="3154" fg:w="213"/><text x="51.4264%" y="319.50">&lt;co..</text></g><g><title>core::iter::adapters::chain::and_then_or_clear (208 samples, 3.37%)</title><rect x="51.2575%" y="293" width="3.3750%" height="15" fill="rgb(227,98,0)" fg:x="3159" fg:w="208"/><text x="51.5075%" y="303.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="54.5838%" y="277" width="0.0487%" height="15" fill="rgb(207,7,3)" fg:x="3364" fg:w="3"/><text x="54.8338%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="54.5838%" y="261" width="0.0487%" height="15" fill="rgb(206,98,19)" fg:x="3364" fg:w="3"/><text x="54.8338%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (3 samples, 0.05%)</title><rect x="54.5838%" y="245" width="0.0487%" height="15" fill="rgb(217,5,26)" fg:x="3364" fg:w="3"/><text x="54.8338%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="54.5838%" y="229" width="0.0487%" height="15" fill="rgb(235,190,38)" fg:x="3364" fg:w="3"/><text x="54.8338%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (3 samples, 0.05%)</title><rect x="54.5838%" y="213" width="0.0487%" height="15" fill="rgb(247,86,24)" fg:x="3364" fg:w="3"/><text x="54.8338%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="54.5838%" y="197" width="0.0487%" height="15" fill="rgb(205,101,16)" fg:x="3364" fg:w="3"/><text x="54.8338%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.03%)</title><rect x="54.6000%" y="181" width="0.0325%" height="15" fill="rgb(246,168,33)" fg:x="3365" fg:w="2"/><text x="54.8500%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="54.6000%" y="165" width="0.0325%" height="15" fill="rgb(231,114,1)" fg:x="3365" fg:w="2"/><text x="54.8500%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="54.6000%" y="149" width="0.0325%" height="15" fill="rgb(207,184,53)" fg:x="3365" fg:w="2"/><text x="54.8500%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="54.6000%" y="133" width="0.0325%" height="15" fill="rgb(224,95,51)" fg:x="3365" fg:w="2"/><text x="54.8500%" y="143.50"></text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="54.6000%" y="117" width="0.0325%" height="15" fill="rgb(212,188,45)" fg:x="3365" fg:w="2"/><text x="54.8500%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="54.6000%" y="101" width="0.0325%" height="15" fill="rgb(223,154,38)" fg:x="3365" fg:w="2"/><text x="54.8500%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="54.6163%" y="85" width="0.0162%" height="15" fill="rgb(251,22,52)" fg:x="3366" fg:w="1"/><text x="54.8663%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (2 samples, 0.03%)</title><rect x="54.6325%" y="325" width="0.0325%" height="15" fill="rgb(229,209,22)" fg:x="3367" fg:w="2"/><text x="54.8825%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6649%" y="325" width="0.0162%" height="15" fill="rgb(234,138,34)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6649%" y="309" width="0.0162%" height="15" fill="rgb(212,95,11)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="54.6649%" y="293" width="0.0162%" height="15" fill="rgb(240,179,47)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6649%" y="277" width="0.0162%" height="15" fill="rgb(240,163,11)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="54.6649%" y="261" width="0.0162%" height="15" fill="rgb(236,37,12)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6649%" y="245" width="0.0162%" height="15" fill="rgb(232,164,16)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="54.6649%" y="229" width="0.0162%" height="15" fill="rgb(244,205,15)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="54.6649%" y="213" width="0.0162%" height="15" fill="rgb(223,117,47)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="54.6649%" y="197" width="0.0162%" height="15" fill="rgb(244,107,35)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="207.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="54.6649%" y="181" width="0.0162%" height="15" fill="rgb(205,140,8)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="54.6649%" y="165" width="0.0162%" height="15" fill="rgb(228,84,46)" fg:x="3369" fg:w="1"/><text x="54.9149%" y="175.50"></text></g><g><title>core::iter::adapters::chain::and_then_or_clear (300 samples, 4.87%)</title><rect x="49.8296%" y="341" width="4.8678%" height="15" fill="rgb(254,188,9)" fg:x="3071" fg:w="300"/><text x="50.0796%" y="351.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6812%" y="325" width="0.0162%" height="15" fill="rgb(206,112,54)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6812%" y="309" width="0.0162%" height="15" fill="rgb(216,84,49)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6812%" y="293" width="0.0162%" height="15" fill="rgb(214,194,35)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6812%" y="277" width="0.0162%" height="15" fill="rgb(249,28,3)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="54.6812%" y="261" width="0.0162%" height="15" fill="rgb(222,56,52)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6812%" y="245" width="0.0162%" height="15" fill="rgb(245,217,50)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="54.6812%" y="229" width="0.0162%" height="15" fill="rgb(213,201,24)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.02%)</title><rect x="54.6812%" y="213" width="0.0162%" height="15" fill="rgb(248,116,28)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="54.6812%" y="197" width="0.0162%" height="15" fill="rgb(219,72,43)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="54.6812%" y="181" width="0.0162%" height="15" fill="rgb(209,138,14)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="54.6812%" y="165" width="0.0162%" height="15" fill="rgb(222,18,33)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="175.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="54.6812%" y="149" width="0.0162%" height="15" fill="rgb(213,199,7)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="54.6812%" y="133" width="0.0162%" height="15" fill="rgb(250,110,10)" fg:x="3370" fg:w="1"/><text x="54.9312%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (927 samples, 15.04%)</title><rect x="47.5256%" y="357" width="15.0414%" height="15" fill="rgb(248,123,6)" fg:x="2929" fg:w="927"/><text x="47.7756%" y="367.50">&lt;core::iter::adapters::..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (485 samples, 7.87%)</title><rect x="54.6974%" y="341" width="7.8695%" height="15" fill="rgb(206,91,31)" fg:x="3371" fg:w="485"/><text x="54.9474%" y="351.50">core::optio..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (274 samples, 4.45%)</title><rect x="58.1210%" y="325" width="4.4459%" height="15" fill="rgb(211,154,13)" fg:x="3582" fg:w="274"/><text x="58.3710%" y="335.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (247 samples, 4.01%)</title><rect x="58.5591%" y="309" width="4.0078%" height="15" fill="rgb(225,148,7)" fg:x="3609" fg:w="247"/><text x="58.8091%" y="319.50">&lt;cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.58%)</title><rect x="61.9828%" y="293" width="0.5841%" height="15" fill="rgb(220,160,43)" fg:x="3820" fg:w="36"/><text x="62.2328%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (36 samples, 0.58%)</title><rect x="61.9828%" y="277" width="0.5841%" height="15" fill="rgb(213,52,39)" fg:x="3820" fg:w="36"/><text x="62.2328%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (7 samples, 0.11%)</title><rect x="63.1673%" y="293" width="0.1136%" height="15" fill="rgb(243,137,7)" fg:x="3893" fg:w="7"/><text x="63.4173%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.71%)</title><rect x="62.6156%" y="309" width="0.7139%" height="15" fill="rgb(230,79,13)" fg:x="3859" fg:w="44"/><text x="62.8656%" y="319.50"></text></g><g><title>core::ptr::read (3 samples, 0.05%)</title><rect x="63.2809%" y="293" width="0.0487%" height="15" fill="rgb(247,105,23)" fg:x="3900" fg:w="3"/><text x="63.5309%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="65.2117%" y="133" width="0.0325%" height="15" fill="rgb(223,179,41)" fg:x="4019" fg:w="2"/><text x="65.4617%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.03%)</title><rect x="65.2117%" y="117" width="0.0325%" height="15" fill="rgb(218,9,34)" fg:x="4019" fg:w="2"/><text x="65.4617%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.06%)</title><rect x="65.1955%" y="165" width="0.0649%" height="15" fill="rgb(222,106,8)" fg:x="4018" fg:w="4"/><text x="65.4455%" y="175.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (4 samples, 0.06%)</title><rect x="65.1955%" y="149" width="0.0649%" height="15" fill="rgb(211,220,0)" fg:x="4018" fg:w="4"/><text x="65.4455%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (1 samples, 0.02%)</title><rect x="65.2442%" y="133" width="0.0162%" height="15" fill="rgb(229,52,16)" fg:x="4021" fg:w="1"/><text x="65.4942%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1 samples, 0.02%)</title><rect x="65.2442%" y="117" width="0.0162%" height="15" fill="rgb(212,155,18)" fg:x="4021" fg:w="1"/><text x="65.4942%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="65.2604%" y="165" width="0.0162%" height="15" fill="rgb(242,21,14)" fg:x="4022" fg:w="1"/><text x="65.5104%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.15%)</title><rect x="65.2929%" y="53" width="0.1460%" height="15" fill="rgb(222,19,48)" fg:x="4024" fg:w="9"/><text x="65.5429%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.11%)</title><rect x="65.3253%" y="37" width="0.1136%" height="15" fill="rgb(232,45,27)" fg:x="4026" fg:w="7"/><text x="65.5753%" y="47.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.03%)</title><rect x="65.4876%" y="37" width="0.0325%" height="15" fill="rgb(249,103,42)" fg:x="4036" fg:w="2"/><text x="65.7376%" y="47.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (18 samples, 0.29%)</title><rect x="65.2767%" y="101" width="0.2921%" height="15" fill="rgb(246,81,33)" fg:x="4023" fg:w="18"/><text x="65.5267%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (18 samples, 0.29%)</title><rect x="65.2767%" y="85" width="0.2921%" height="15" fill="rgb(252,33,42)" fg:x="4023" fg:w="18"/><text x="65.5267%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18 samples, 0.29%)</title><rect x="65.2767%" y="69" width="0.2921%" height="15" fill="rgb(209,212,41)" fg:x="4023" fg:w="18"/><text x="65.5267%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.13%)</title><rect x="65.4389%" y="53" width="0.1298%" height="15" fill="rgb(207,154,6)" fg:x="4033" fg:w="8"/><text x="65.6889%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.05%)</title><rect x="65.5200%" y="37" width="0.0487%" height="15" fill="rgb(223,64,47)" fg:x="4038" fg:w="3"/><text x="65.7700%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (21 samples, 0.34%)</title><rect x="65.2767%" y="165" width="0.3407%" height="15" fill="rgb(211,161,38)" fg:x="4023" fg:w="21"/><text x="65.5267%" y="175.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (21 samples, 0.34%)</title><rect x="65.2767%" y="149" width="0.3407%" height="15" fill="rgb(219,138,40)" fg:x="4023" fg:w="21"/><text x="65.5267%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 0.34%)</title><rect x="65.2767%" y="133" width="0.3407%" height="15" fill="rgb(241,228,46)" fg:x="4023" fg:w="21"/><text x="65.5267%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 0.34%)</title><rect x="65.2767%" y="117" width="0.3407%" height="15" fill="rgb(223,209,38)" fg:x="4023" fg:w="21"/><text x="65.5267%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.05%)</title><rect x="65.5687%" y="101" width="0.0487%" height="15" fill="rgb(236,164,45)" fg:x="4041" fg:w="3"/><text x="65.8187%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.03%)</title><rect x="65.6174%" y="117" width="0.0325%" height="15" fill="rgb(231,15,5)" fg:x="4044" fg:w="2"/><text x="65.8674%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (10 samples, 0.16%)</title><rect x="65.6174%" y="133" width="0.1623%" height="15" fill="rgb(252,35,15)" fg:x="4044" fg:w="10"/><text x="65.8674%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (8 samples, 0.13%)</title><rect x="65.6498%" y="117" width="0.1298%" height="15" fill="rgb(248,181,18)" fg:x="4046" fg:w="8"/><text x="65.8998%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.13%)</title><rect x="65.6498%" y="101" width="0.1298%" height="15" fill="rgb(233,39,42)" fg:x="4046" fg:w="8"/><text x="65.8998%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (12 samples, 0.19%)</title><rect x="65.7797%" y="133" width="0.1947%" height="15" fill="rgb(238,110,33)" fg:x="4054" fg:w="12"/><text x="66.0297%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (11 samples, 0.18%)</title><rect x="65.7959%" y="117" width="0.1785%" height="15" fill="rgb(233,195,10)" fg:x="4055" fg:w="11"/><text x="66.0459%" y="127.50"></text></g><g><title>hashbrown::raw::is_full (11 samples, 0.18%)</title><rect x="65.7959%" y="101" width="0.1785%" height="15" fill="rgb(254,105,3)" fg:x="4055" fg:w="11"/><text x="66.0459%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (28 samples, 0.45%)</title><rect x="65.6174%" y="149" width="0.4543%" height="15" fill="rgb(221,225,9)" fg:x="4044" fg:w="28"/><text x="65.8674%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6 samples, 0.10%)</title><rect x="65.9744%" y="133" width="0.0974%" height="15" fill="rgb(224,227,45)" fg:x="4066" fg:w="6"/><text x="66.2244%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6 samples, 0.10%)</title><rect x="65.9744%" y="117" width="0.0974%" height="15" fill="rgb(229,198,43)" fg:x="4066" fg:w="6"/><text x="66.2244%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.10%)</title><rect x="65.9744%" y="101" width="0.0974%" height="15" fill="rgb(206,209,35)" fg:x="4066" fg:w="6"/><text x="66.2244%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.02%)</title><rect x="66.0717%" y="133" width="0.0162%" height="15" fill="rgb(245,195,53)" fg:x="4072" fg:w="1"/><text x="66.3217%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (31 samples, 0.50%)</title><rect x="65.6174%" y="165" width="0.5030%" height="15" fill="rgb(240,92,26)" fg:x="4044" fg:w="31"/><text x="65.8674%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (3 samples, 0.05%)</title><rect x="66.0717%" y="149" width="0.0487%" height="15" fill="rgb(207,40,23)" fg:x="4072" fg:w="3"/><text x="66.3217%" y="159.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.03%)</title><rect x="66.0879%" y="133" width="0.0325%" height="15" fill="rgb(223,111,35)" fg:x="4073" fg:w="2"/><text x="66.3379%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.03%)</title><rect x="66.1204%" y="133" width="0.0325%" height="15" fill="rgb(229,147,28)" fg:x="4075" fg:w="2"/><text x="66.3704%" y="143.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.03%)</title><rect x="66.1204%" y="117" width="0.0325%" height="15" fill="rgb(211,29,28)" fg:x="4075" fg:w="2"/><text x="66.3704%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="66.1204%" y="101" width="0.0325%" height="15" fill="rgb(228,72,33)" fg:x="4075" fg:w="2"/><text x="66.3704%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (65 samples, 1.05%)</title><rect x="65.1468%" y="245" width="1.0547%" height="15" fill="rgb(205,214,31)" fg:x="4015" fg:w="65"/><text x="65.3968%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (65 samples, 1.05%)</title><rect x="65.1468%" y="229" width="1.0547%" height="15" fill="rgb(224,111,15)" fg:x="4015" fg:w="65"/><text x="65.3968%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (62 samples, 1.01%)</title><rect x="65.1955%" y="213" width="1.0060%" height="15" fill="rgb(253,21,26)" fg:x="4018" fg:w="62"/><text x="65.4455%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (62 samples, 1.01%)</title><rect x="65.1955%" y="197" width="1.0060%" height="15" fill="rgb(245,139,43)" fg:x="4018" fg:w="62"/><text x="65.4455%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (62 samples, 1.01%)</title><rect x="65.1955%" y="181" width="1.0060%" height="15" fill="rgb(252,170,7)" fg:x="4018" fg:w="62"/><text x="65.4455%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (5 samples, 0.08%)</title><rect x="66.1204%" y="165" width="0.0811%" height="15" fill="rgb(231,118,14)" fg:x="4075" fg:w="5"/><text x="66.3704%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (5 samples, 0.08%)</title><rect x="66.1204%" y="149" width="0.0811%" height="15" fill="rgb(238,83,0)" fg:x="4075" fg:w="5"/><text x="66.3704%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.05%)</title><rect x="66.1528%" y="133" width="0.0487%" height="15" fill="rgb(221,39,39)" fg:x="4077" fg:w="3"/><text x="66.4028%" y="143.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (3 samples, 0.05%)</title><rect x="66.1528%" y="117" width="0.0487%" height="15" fill="rgb(222,119,46)" fg:x="4077" fg:w="3"/><text x="66.4028%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.05%)</title><rect x="66.1528%" y="101" width="0.0487%" height="15" fill="rgb(222,165,49)" fg:x="4077" fg:w="3"/><text x="66.4028%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.05%)</title><rect x="66.1528%" y="85" width="0.0487%" height="15" fill="rgb(219,113,52)" fg:x="4077" fg:w="3"/><text x="66.4028%" y="95.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.05%)</title><rect x="66.1528%" y="69" width="0.0487%" height="15" fill="rgb(214,7,15)" fg:x="4077" fg:w="3"/><text x="66.4028%" y="79.50"></text></g><g><title>malloc (3 samples, 0.05%)</title><rect x="66.1528%" y="53" width="0.0487%" height="15" fill="rgb(235,32,4)" fg:x="4077" fg:w="3"/><text x="66.4028%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="66.1853%" y="37" width="0.0162%" height="15" fill="rgb(238,90,54)" fg:x="4079" fg:w="1"/><text x="66.4353%" y="47.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (76 samples, 1.23%)</title><rect x="67.8241%" y="149" width="1.2332%" height="15" fill="rgb(213,208,19)" fg:x="4180" fg:w="76"/><text x="68.0741%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (209 samples, 3.39%)</title><rect x="67.0615%" y="165" width="3.3912%" height="15" fill="rgb(233,156,4)" fg:x="4133" fg:w="209"/><text x="67.3115%" y="175.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (86 samples, 1.40%)</title><rect x="69.0573%" y="149" width="1.3954%" height="15" fill="rgb(207,194,5)" fg:x="4256" fg:w="86"/><text x="69.3073%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (180 samples, 2.92%)</title><rect x="73.0164%" y="149" width="2.9207%" height="15" fill="rgb(206,111,30)" fg:x="4500" fg:w="180"/><text x="73.2664%" y="159.50">co..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (690 samples, 11.20%)</title><rect x="66.2827%" y="213" width="11.1958%" height="15" fill="rgb(243,70,54)" fg:x="4085" fg:w="690"/><text x="66.5327%" y="223.50">&lt;std::hash::rand..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (690 samples, 11.20%)</title><rect x="66.2827%" y="197" width="11.1958%" height="15" fill="rgb(242,28,8)" fg:x="4085" fg:w="690"/><text x="66.5327%" y="207.50">&lt;core::hash::sip..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (690 samples, 11.20%)</title><rect x="66.2827%" y="181" width="11.1958%" height="15" fill="rgb(219,106,18)" fg:x="4085" fg:w="690"/><text x="66.5327%" y="191.50">&lt;core::hash::sip..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (433 samples, 7.03%)</title><rect x="70.4527%" y="165" width="7.0258%" height="15" fill="rgb(244,222,10)" fg:x="4342" fg:w="433"/><text x="70.7027%" y="175.50">&lt;core::ha..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (95 samples, 1.54%)</title><rect x="75.9370%" y="149" width="1.5415%" height="15" fill="rgb(236,179,52)" fg:x="4680" fg:w="95"/><text x="76.1870%" y="159.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (78 samples, 1.27%)</title><rect x="77.4785%" y="213" width="1.2656%" height="15" fill="rgb(213,23,39)" fg:x="4775" fg:w="78"/><text x="77.7285%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (78 samples, 1.27%)</title><rect x="77.4785%" y="197" width="1.2656%" height="15" fill="rgb(238,48,10)" fg:x="4775" fg:w="78"/><text x="77.7285%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (78 samples, 1.27%)</title><rect x="77.4785%" y="181" width="1.2656%" height="15" fill="rgb(251,196,23)" fg:x="4775" fg:w="78"/><text x="77.7285%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (78 samples, 1.27%)</title><rect x="77.4785%" y="165" width="1.2656%" height="15" fill="rgb(250,152,24)" fg:x="4775" fg:w="78"/><text x="77.7285%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (781 samples, 12.67%)</title><rect x="66.2015%" y="245" width="12.6724%" height="15" fill="rgb(209,150,17)" fg:x="4080" fg:w="781"/><text x="66.4515%" y="255.50">hashbrown::map::mak..</text></g><g><title>core::hash::BuildHasher::hash_one (781 samples, 12.67%)</title><rect x="66.2015%" y="229" width="12.6724%" height="15" fill="rgb(234,202,34)" fg:x="4080" fg:w="781"/><text x="66.4515%" y="239.50">core::hash::BuildHa..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.13%)</title><rect x="78.7441%" y="213" width="0.1298%" height="15" fill="rgb(253,148,53)" fg:x="4853" fg:w="8"/><text x="78.9941%" y="223.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (8 samples, 0.13%)</title><rect x="78.7441%" y="197" width="0.1298%" height="15" fill="rgb(218,129,16)" fg:x="4853" fg:w="8"/><text x="78.9941%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (8 samples, 0.13%)</title><rect x="78.7441%" y="181" width="0.1298%" height="15" fill="rgb(216,85,19)" fg:x="4853" fg:w="8"/><text x="78.9941%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u32 (8 samples, 0.13%)</title><rect x="78.7441%" y="165" width="0.1298%" height="15" fill="rgb(235,228,7)" fg:x="4853" fg:w="8"/><text x="78.9941%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.13%)</title><rect x="78.7441%" y="149" width="0.1298%" height="15" fill="rgb(245,175,0)" fg:x="4853" fg:w="8"/><text x="78.9941%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.13%)</title><rect x="78.7441%" y="133" width="0.1298%" height="15" fill="rgb(208,168,36)" fg:x="4853" fg:w="8"/><text x="78.9941%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.13%)</title><rect x="78.7441%" y="117" width="0.1298%" height="15" fill="rgb(246,171,24)" fg:x="4853" fg:w="8"/><text x="78.9941%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (8 samples, 0.13%)</title><rect x="78.7441%" y="101" width="0.1298%" height="15" fill="rgb(215,142,24)" fg:x="4853" fg:w="8"/><text x="78.9941%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5 samples, 0.08%)</title><rect x="79.0686%" y="229" width="0.0811%" height="15" fill="rgb(250,187,7)" fg:x="4873" fg:w="5"/><text x="79.3186%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5 samples, 0.08%)</title><rect x="79.0686%" y="213" width="0.0811%" height="15" fill="rgb(228,66,33)" fg:x="4873" fg:w="5"/><text x="79.3186%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5 samples, 0.08%)</title><rect x="79.0686%" y="197" width="0.0811%" height="15" fill="rgb(234,215,21)" fg:x="4873" fg:w="5"/><text x="79.3186%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.08%)</title><rect x="79.0686%" y="181" width="0.0811%" height="15" fill="rgb(222,191,20)" fg:x="4873" fg:w="5"/><text x="79.3186%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 1.10%)</title><rect x="80.4316%" y="213" width="1.1034%" height="15" fill="rgb(245,79,54)" fg:x="4957" fg:w="68"/><text x="80.6816%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (68 samples, 1.10%)</title><rect x="80.4316%" y="197" width="1.1034%" height="15" fill="rgb(240,10,37)" fg:x="4957" fg:w="68"/><text x="80.6816%" y="207.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (4 samples, 0.06%)</title><rect x="81.4701%" y="181" width="0.0649%" height="15" fill="rgb(214,192,32)" fg:x="5021" fg:w="4"/><text x="81.7201%" y="191.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (3 samples, 0.05%)</title><rect x="81.5350%" y="213" width="0.0487%" height="15" fill="rgb(209,36,54)" fg:x="5025" fg:w="3"/><text x="81.7850%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (227 samples, 3.68%)</title><rect x="81.5836%" y="213" width="3.6833%" height="15" fill="rgb(220,10,11)" fg:x="5028" fg:w="227"/><text x="81.8336%" y="223.50">hash..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (188 samples, 3.05%)</title><rect x="82.2165%" y="197" width="3.0505%" height="15" fill="rgb(221,106,17)" fg:x="5067" fg:w="188"/><text x="82.4665%" y="207.50">has..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (188 samples, 3.05%)</title><rect x="82.2165%" y="181" width="3.0505%" height="15" fill="rgb(251,142,44)" fg:x="5067" fg:w="188"/><text x="82.4665%" y="191.50">&lt;pe..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (188 samples, 3.05%)</title><rect x="82.2165%" y="165" width="3.0505%" height="15" fill="rgb(238,13,15)" fg:x="5067" fg:w="188"/><text x="82.4665%" y="175.50">cor..</text></g><g><title>hashbrown::raw::h2 (124 samples, 2.01%)</title><rect x="85.2669%" y="213" width="2.0120%" height="15" fill="rgb(208,107,27)" fg:x="5255" fg:w="124"/><text x="85.5169%" y="223.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::load (12 samples, 0.19%)</title><rect x="87.2789%" y="213" width="0.1947%" height="15" fill="rgb(205,136,37)" fg:x="5379" fg:w="12"/><text x="87.5289%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12 samples, 0.19%)</title><rect x="87.2789%" y="197" width="0.1947%" height="15" fill="rgb(250,205,27)" fg:x="5379" fg:w="12"/><text x="87.5289%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.19%)</title><rect x="87.2789%" y="181" width="0.1947%" height="15" fill="rgb(210,80,43)" fg:x="5379" fg:w="12"/><text x="87.5289%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (74 samples, 1.20%)</title><rect x="87.4736%" y="213" width="1.2007%" height="15" fill="rgb(247,160,36)" fg:x="5391" fg:w="74"/><text x="87.7236%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (74 samples, 1.20%)</title><rect x="87.4736%" y="197" width="1.2007%" height="15" fill="rgb(234,13,49)" fg:x="5391" fg:w="74"/><text x="87.7236%" y="207.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,564 samples, 25.38%)</title><rect x="63.4107%" y="261" width="25.3773%" height="15" fill="rgb(234,122,0)" fg:x="3908" fg:w="1564"/><text x="63.6607%" y="271.50">hashbrown::rustc_entry::&lt;impl hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (611 samples, 9.91%)</title><rect x="78.8739%" y="245" width="9.9140%" height="15" fill="rgb(207,146,38)" fg:x="4861" fg:w="611"/><text x="79.1239%" y="255.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (594 samples, 9.64%)</title><rect x="79.1498%" y="229" width="9.6382%" height="15" fill="rgb(207,177,25)" fg:x="4878" fg:w="594"/><text x="79.3998%" y="239.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (7 samples, 0.11%)</title><rect x="88.6743%" y="213" width="0.1136%" height="15" fill="rgb(211,178,42)" fg:x="5465" fg:w="7"/><text x="88.9243%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.11%)</title><rect x="88.6743%" y="197" width="0.1136%" height="15" fill="rgb(230,69,54)" fg:x="5465" fg:w="7"/><text x="88.9243%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.11%)</title><rect x="88.6743%" y="181" width="0.1136%" height="15" fill="rgb(214,135,41)" fg:x="5465" fg:w="7"/><text x="88.9243%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1,613 samples, 26.17%)</title><rect x="63.3295%" y="277" width="26.1723%" height="15" fill="rgb(237,67,25)" fg:x="3903" fg:w="1613"/><text x="63.5795%" y="287.50">std::collections::hash::map::HashMap&lt;K,V,S..</text></g><g><title>std::collections::hash::map::map_entry (44 samples, 0.71%)</title><rect x="88.7879%" y="261" width="0.7139%" height="15" fill="rgb(222,189,50)" fg:x="5472" fg:w="44"/><text x="89.0379%" y="271.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.02%)</title><rect x="89.5992%" y="197" width="0.0162%" height="15" fill="rgb(245,148,34)" fg:x="5522" fg:w="1"/><text x="89.8492%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.02%)</title><rect x="89.6154%" y="197" width="0.0162%" height="15" fill="rgb(222,29,6)" fg:x="5523" fg:w="1"/><text x="89.8654%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.02%)</title><rect x="89.6154%" y="181" width="0.0162%" height="15" fill="rgb(221,189,43)" fg:x="5523" fg:w="1"/><text x="89.8654%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="89.6154%" y="165" width="0.0162%" height="15" fill="rgb(207,36,27)" fg:x="5523" fg:w="1"/><text x="89.8654%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.06%)</title><rect x="89.6317%" y="197" width="0.0649%" height="15" fill="rgb(217,90,24)" fg:x="5524" fg:w="4"/><text x="89.8817%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4 samples, 0.06%)</title><rect x="89.6317%" y="181" width="0.0649%" height="15" fill="rgb(224,66,35)" fg:x="5524" fg:w="4"/><text x="89.8817%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (8 samples, 0.13%)</title><rect x="89.5830%" y="213" width="0.1298%" height="15" fill="rgb(221,13,50)" fg:x="5521" fg:w="8"/><text x="89.8330%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.02%)</title><rect x="89.6966%" y="197" width="0.0162%" height="15" fill="rgb(236,68,49)" fg:x="5528" fg:w="1"/><text x="89.9466%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.02%)</title><rect x="89.6966%" y="181" width="0.0162%" height="15" fill="rgb(229,146,28)" fg:x="5528" fg:w="1"/><text x="89.9466%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="89.6966%" y="165" width="0.0162%" height="15" fill="rgb(225,31,38)" fg:x="5528" fg:w="1"/><text x="89.9466%" y="175.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,676 samples, 27.19%)</title><rect x="62.5669%" y="357" width="27.1945%" height="15" fill="rgb(250,208,3)" fg:x="3856" fg:w="1676"/><text x="62.8169%" y="367.50">&lt;itertools::unique_impl::Unique&lt;I&gt; as core::..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1,673 samples, 27.15%)</title><rect x="62.6156%" y="341" width="27.1459%" height="15" fill="rgb(246,54,23)" fg:x="3859" fg:w="1673"/><text x="62.8656%" y="351.50">core::iter::traits::iterator::Iterator::find..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,673 samples, 27.15%)</title><rect x="62.6156%" y="325" width="27.1459%" height="15" fill="rgb(243,76,11)" fg:x="3859" fg:w="1673"/><text x="62.8656%" y="335.50">core::iter::traits::iterator::Iterator::try_..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (1,629 samples, 26.43%)</title><rect x="63.3295%" y="309" width="26.4319%" height="15" fill="rgb(245,21,50)" fg:x="3903" fg:w="1629"/><text x="63.5795%" y="319.50">core::iter::traits::iterator::Iterator::fi..</text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1,629 samples, 26.43%)</title><rect x="63.3295%" y="293" width="26.4319%" height="15" fill="rgb(228,9,43)" fg:x="3903" fg:w="1629"/><text x="63.5795%" y="303.50">&lt;itertools::unique_impl::Unique&lt;I&gt; as core..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (16 samples, 0.26%)</title><rect x="89.5019%" y="277" width="0.2596%" height="15" fill="rgb(208,100,47)" fg:x="5516" fg:w="16"/><text x="89.7519%" y="287.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (16 samples, 0.26%)</title><rect x="89.5019%" y="261" width="0.2596%" height="15" fill="rgb(232,26,8)" fg:x="5516" fg:w="16"/><text x="89.7519%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (16 samples, 0.26%)</title><rect x="89.5019%" y="245" width="0.2596%" height="15" fill="rgb(216,166,38)" fg:x="5516" fg:w="16"/><text x="89.7519%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (11 samples, 0.18%)</title><rect x="89.5830%" y="229" width="0.1785%" height="15" fill="rgb(251,202,51)" fg:x="5521" fg:w="11"/><text x="89.8330%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (3 samples, 0.05%)</title><rect x="89.7128%" y="213" width="0.0487%" height="15" fill="rgb(254,216,34)" fg:x="5529" fg:w="3"/><text x="89.9628%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (3 samples, 0.05%)</title><rect x="89.7128%" y="197" width="0.0487%" height="15" fill="rgb(251,32,27)" fg:x="5529" fg:w="3"/><text x="89.9628%" y="207.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="89.7615%" y="229" width="0.0162%" height="15" fill="rgb(208,127,28)" fg:x="5532" fg:w="1"/><text x="90.0115%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.15%)</title><rect x="89.7615%" y="293" width="0.1460%" height="15" fill="rgb(224,137,22)" fg:x="5532" fg:w="9"/><text x="90.0115%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.15%)</title><rect x="89.7615%" y="277" width="0.1460%" height="15" fill="rgb(254,70,32)" fg:x="5532" fg:w="9"/><text x="90.0115%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.15%)</title><rect x="89.7615%" y="261" width="0.1460%" height="15" fill="rgb(229,75,37)" fg:x="5532" fg:w="9"/><text x="90.0115%" y="271.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.15%)</title><rect x="89.7615%" y="245" width="0.1460%" height="15" fill="rgb(252,64,23)" fg:x="5532" fg:w="9"/><text x="90.0115%" y="255.50"></text></g><g><title>realloc (8 samples, 0.13%)</title><rect x="89.7777%" y="229" width="0.1298%" height="15" fill="rgb(232,162,48)" fg:x="5533" fg:w="8"/><text x="90.0277%" y="239.50"></text></g><g><title>[libc.so.6] (8 samples, 0.13%)</title><rect x="89.7777%" y="213" width="0.1298%" height="15" fill="rgb(246,160,12)" fg:x="5533" fg:w="8"/><text x="90.0277%" y="223.50"></text></g><g><title>[libc.so.6] (7 samples, 0.11%)</title><rect x="89.7939%" y="197" width="0.1136%" height="15" fill="rgb(247,166,0)" fg:x="5534" fg:w="7"/><text x="90.0439%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.16%)</title><rect x="89.7615%" y="357" width="0.1623%" height="15" fill="rgb(249,219,21)" fg:x="5532" fg:w="10"/><text x="90.0115%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.16%)</title><rect x="89.7615%" y="341" width="0.1623%" height="15" fill="rgb(205,209,3)" fg:x="5532" fg:w="10"/><text x="90.0115%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.16%)</title><rect x="89.7615%" y="325" width="0.1623%" height="15" fill="rgb(243,44,1)" fg:x="5532" fg:w="10"/><text x="90.0115%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.16%)</title><rect x="89.7615%" y="309" width="0.1623%" height="15" fill="rgb(206,159,16)" fg:x="5532" fg:w="10"/><text x="90.0115%" y="319.50"></text></g><g><title>core::cmp::max (1 samples, 0.02%)</title><rect x="89.9075%" y="293" width="0.0162%" height="15" fill="rgb(244,77,30)" fg:x="5541" fg:w="1"/><text x="90.1575%" y="303.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="89.9075%" y="277" width="0.0162%" height="15" fill="rgb(218,69,12)" fg:x="5541" fg:w="1"/><text x="90.1575%" y="287.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.02%)</title><rect x="89.9075%" y="261" width="0.0162%" height="15" fill="rgb(212,87,7)" fg:x="5541" fg:w="1"/><text x="90.1575%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (10 samples, 0.16%)</title><rect x="89.9237%" y="357" width="0.1623%" height="15" fill="rgb(245,114,25)" fg:x="5542" fg:w="10"/><text x="90.1737%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="90.0860%" y="341" width="0.0162%" height="15" fill="rgb(210,61,42)" fg:x="5552" fg:w="1"/><text x="90.3360%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::take::Take&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;,core::iter::adapters::skip::Skip&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="90.0860%" y="357" width="0.0487%" height="15" fill="rgb(211,52,33)" fg:x="5552" fg:w="3"/><text x="90.3360%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::skip::Skip&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="90.1022%" y="341" width="0.0325%" height="15" fill="rgb(234,58,33)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::skip::Skip&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="90.1022%" y="325" width="0.0325%" height="15" fill="rgb(220,115,36)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.03%)</title><rect x="90.1022%" y="309" width="0.0325%" height="15" fill="rgb(243,153,54)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="90.1022%" y="293" width="0.0325%" height="15" fill="rgb(251,47,18)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (2 samples, 0.03%)</title><rect x="90.1022%" y="277" width="0.0325%" height="15" fill="rgb(242,102,42)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="90.1022%" y="261" width="0.0325%" height="15" fill="rgb(234,31,38)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.03%)</title><rect x="90.1022%" y="245" width="0.0325%" height="15" fill="rgb(221,117,51)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="90.1022%" y="229" width="0.0325%" height="15" fill="rgb(212,20,18)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="90.1022%" y="213" width="0.0325%" height="15" fill="rgb(245,133,36)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="90.1022%" y="197" width="0.0325%" height="15" fill="rgb(212,6,19)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="207.50"></text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="90.1022%" y="181" width="0.0325%" height="15" fill="rgb(218,1,36)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="90.1022%" y="165" width="0.0325%" height="15" fill="rgb(246,84,54)" fg:x="5553" fg:w="2"/><text x="90.3522%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.03%)</title><rect x="90.1347%" y="325" width="0.0325%" height="15" fill="rgb(242,110,6)" fg:x="5555" fg:w="2"/><text x="90.3847%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="90.1347%" y="309" width="0.0325%" height="15" fill="rgb(214,47,5)" fg:x="5555" fg:w="2"/><text x="90.3847%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;petgraph::graph_impl::NodeIndex,alloc::alloc::Global&gt;&gt; (2 samples, 0.03%)</title><rect x="90.1347%" y="293" width="0.0325%" height="15" fill="rgb(218,159,25)" fg:x="5555" fg:w="2"/><text x="90.3847%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="90.1347%" y="277" width="0.0325%" height="15" fill="rgb(215,211,28)" fg:x="5555" fg:w="2"/><text x="90.3847%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (2 samples, 0.03%)</title><rect x="90.1347%" y="261" width="0.0325%" height="15" fill="rgb(238,59,32)" fg:x="5555" fg:w="2"/><text x="90.3847%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="90.1347%" y="245" width="0.0325%" height="15" fill="rgb(226,82,3)" fg:x="5555" fg:w="2"/><text x="90.3847%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="90.1347%" y="229" width="0.0325%" height="15" fill="rgb(240,164,32)" fg:x="5555" fg:w="2"/><text x="90.3847%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="90.1347%" y="213" width="0.0325%" height="15" fill="rgb(232,46,7)" fg:x="5555" fg:w="2"/><text x="90.3847%" y="223.50"></text></g><g><title>cfree (2 samples, 0.03%)</title><rect x="90.1347%" y="197" width="0.0325%" height="15" fill="rgb(229,129,53)" fg:x="5555" fg:w="2"/><text x="90.3847%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="90.1509%" y="181" width="0.0162%" height="15" fill="rgb(234,188,29)" fg:x="5556" fg:w="1"/><text x="90.4009%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::unique_impl::Unique&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;&gt;&gt; (3 samples, 0.05%)</title><rect x="90.1347%" y="357" width="0.0487%" height="15" fill="rgb(246,141,4)" fg:x="5555" fg:w="3"/><text x="90.3847%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;itertools::unique_impl::UniqueBy&lt;alloc::vec::into_iter::IntoIter&lt;petgraph::graph_impl::NodeIndex&gt;,petgraph::graph_impl::NodeIndex,()&gt;&gt; (3 samples, 0.05%)</title><rect x="90.1347%" y="341" width="0.0487%" height="15" fill="rgb(229,23,39)" fg:x="5555" fg:w="3"/><text x="90.3847%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;petgraph::graph_impl::NodeIndex,()&gt;&gt; (1 samples, 0.02%)</title><rect x="90.1671%" y="325" width="0.0162%" height="15" fill="rgb(206,12,3)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;petgraph::graph_impl::NodeIndex,(),std::hash::random::RandomState&gt;&gt; (1 samples, 0.02%)</title><rect x="90.1671%" y="309" width="0.0162%" height="15" fill="rgb(252,226,20)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(petgraph::graph_impl::NodeIndex,())&gt;&gt; (1 samples, 0.02%)</title><rect x="90.1671%" y="293" width="0.0162%" height="15" fill="rgb(216,123,35)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="90.1671%" y="277" width="0.0162%" height="15" fill="rgb(212,68,40)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.02%)</title><rect x="90.1671%" y="261" width="0.0162%" height="15" fill="rgb(254,125,32)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.02%)</title><rect x="90.1671%" y="245" width="0.0162%" height="15" fill="rgb(253,97,22)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="90.1671%" y="229" width="0.0162%" height="15" fill="rgb(241,101,14)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="90.1671%" y="213" width="0.0162%" height="15" fill="rgb(238,103,29)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="223.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="90.1671%" y="197" width="0.0162%" height="15" fill="rgb(233,195,47)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="90.1671%" y="181" width="0.0162%" height="15" fill="rgb(246,218,30)" fg:x="5557" fg:w="1"/><text x="90.4171%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,018 samples, 48.97%)</title><rect x="46.5845%" y="389" width="48.9697%" height="15" fill="rgb(219,145,47)" fg:x="2871" fg:w="3018"/><text x="46.8345%" y="399.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,018 samples, 48.97%)</title><rect x="46.5845%" y="373" width="48.9697%" height="15" fill="rgb(243,12,26)" fg:x="2871" fg:w="3018"/><text x="46.8345%" y="383.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (331 samples, 5.37%)</title><rect x="90.1834%" y="357" width="5.3708%" height="15" fill="rgb(214,87,16)" fg:x="5558" fg:w="331"/><text x="90.4334%" y="367.50">core::p..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.02%)</title><rect x="95.5541%" y="277" width="0.0162%" height="15" fill="rgb(208,99,42)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="95.5541%" y="261" width="0.0162%" height="15" fill="rgb(253,99,2)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="95.5541%" y="245" width="0.0162%" height="15" fill="rgb(220,168,23)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.02%)</title><rect x="95.5541%" y="229" width="0.0162%" height="15" fill="rgb(242,38,24)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.02%)</title><rect x="95.5541%" y="213" width="0.0162%" height="15" fill="rgb(225,182,9)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.02%)</title><rect x="95.5541%" y="197" width="0.0162%" height="15" fill="rgb(243,178,37)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.02%)</title><rect x="95.5541%" y="181" width="0.0162%" height="15" fill="rgb(232,139,19)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.02%)</title><rect x="95.5541%" y="165" width="0.0162%" height="15" fill="rgb(225,201,24)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="175.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.02%)</title><rect x="95.5541%" y="149" width="0.0162%" height="15" fill="rgb(221,47,46)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="95.5541%" y="133" width="0.0162%" height="15" fill="rgb(249,23,13)" fg:x="5889" fg:w="1"/><text x="95.8041%" y="143.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="95.5541%" y="389" width="0.0325%" height="15" fill="rgb(219,9,5)" fg:x="5889" fg:w="2"/><text x="95.8041%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (2 samples, 0.03%)</title><rect x="95.5541%" y="373" width="0.0325%" height="15" fill="rgb(254,171,16)" fg:x="5889" fg:w="2"/><text x="95.8041%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.03%)</title><rect x="95.5541%" y="357" width="0.0325%" height="15" fill="rgb(230,171,20)" fg:x="5889" fg:w="2"/><text x="95.8041%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (2 samples, 0.03%)</title><rect x="95.5541%" y="341" width="0.0325%" height="15" fill="rgb(210,71,41)" fg:x="5889" fg:w="2"/><text x="95.8041%" y="351.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2 samples, 0.03%)</title><rect x="95.5541%" y="325" width="0.0325%" height="15" fill="rgb(206,173,20)" fg:x="5889" fg:w="2"/><text x="95.8041%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.03%)</title><rect x="95.5541%" y="309" width="0.0325%" height="15" fill="rgb(233,88,34)" fg:x="5889" fg:w="2"/><text x="95.8041%" y="319.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.03%)</title><rect x="95.5541%" y="293" width="0.0325%" height="15" fill="rgb(223,209,46)" fg:x="5889" fg:w="2"/><text x="95.8041%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.02%)</title><rect x="95.5703%" y="277" width="0.0162%" height="15" fill="rgb(250,43,18)" fg:x="5890" fg:w="1"/><text x="95.8203%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.02%)</title><rect x="95.5703%" y="261" width="0.0162%" height="15" fill="rgb(208,13,10)" fg:x="5890" fg:w="1"/><text x="95.8203%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.02%)</title><rect x="95.5703%" y="245" width="0.0162%" height="15" fill="rgb(212,200,36)" fg:x="5890" fg:w="1"/><text x="95.8203%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.02%)</title><rect x="95.5703%" y="229" width="0.0162%" height="15" fill="rgb(225,90,30)" fg:x="5890" fg:w="1"/><text x="95.8203%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="95.5703%" y="213" width="0.0162%" height="15" fill="rgb(236,182,39)" fg:x="5890" fg:w="1"/><text x="95.8203%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,066 samples, 49.75%)</title><rect x="45.8705%" y="453" width="49.7485%" height="15" fill="rgb(212,144,35)" fg:x="2827" fg:w="3066"/><text x="46.1205%" y="463.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,066 samples, 49.75%)</title><rect x="45.8705%" y="437" width="49.7485%" height="15" fill="rgb(228,63,44)" fg:x="2827" fg:w="3066"/><text x="46.1205%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,066 samples, 49.75%)</title><rect x="45.8705%" y="421" width="49.7485%" height="15" fill="rgb(228,109,6)" fg:x="2827" fg:w="3066"/><text x="46.1205%" y="431.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,066 samples, 49.75%)</title><rect x="45.8705%" y="405" width="49.7485%" height="15" fill="rgb(238,117,24)" fg:x="2827" fg:w="3066"/><text x="46.1205%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.03%)</title><rect x="95.5866%" y="389" width="0.0325%" height="15" fill="rgb(242,26,26)" fg:x="5891" fg:w="2"/><text x="95.8366%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="95.5866%" y="373" width="0.0325%" height="15" fill="rgb(221,92,48)" fg:x="5891" fg:w="2"/><text x="95.8366%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="95.5866%" y="357" width="0.0325%" height="15" fill="rgb(209,209,32)" fg:x="5891" fg:w="2"/><text x="95.8366%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="95.5866%" y="341" width="0.0325%" height="15" fill="rgb(221,70,22)" fg:x="5891" fg:w="2"/><text x="95.8366%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="95.5866%" y="325" width="0.0325%" height="15" fill="rgb(248,145,5)" fg:x="5891" fg:w="2"/><text x="95.8366%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="95.5866%" y="309" width="0.0325%" height="15" fill="rgb(226,116,26)" fg:x="5891" fg:w="2"/><text x="95.8366%" y="319.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="95.5866%" y="293" width="0.0325%" height="15" fill="rgb(244,5,17)" fg:x="5891" fg:w="2"/><text x="95.8366%" y="303.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="95.5866%" y="277" width="0.0325%" height="15" fill="rgb(252,159,33)" fg:x="5891" fg:w="2"/><text x="95.8366%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="95.6028%" y="261" width="0.0162%" height="15" fill="rgb(206,71,0)" fg:x="5892" fg:w="1"/><text x="95.8528%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="95.6190%" y="437" width="0.0162%" height="15" fill="rgb(233,118,54)" fg:x="5893" fg:w="1"/><text x="95.8690%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="95.6190%" y="421" width="0.0162%" height="15" fill="rgb(234,83,48)" fg:x="5893" fg:w="1"/><text x="95.8690%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="95.6190%" y="405" width="0.0162%" height="15" fill="rgb(228,3,54)" fg:x="5893" fg:w="1"/><text x="95.8690%" y="415.50"></text></g><g><title>main::update_sptree::_{{closure}} (1 samples, 0.02%)</title><rect x="95.6190%" y="389" width="0.0162%" height="15" fill="rgb(226,155,13)" fg:x="5893" fg:w="1"/><text x="95.8690%" y="399.50"></text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (113 samples, 1.83%)</title><rect x="97.0144%" y="421" width="1.8335%" height="15" fill="rgb(241,28,37)" fg:x="5979" fg:w="113"/><text x="97.2644%" y="431.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (113 samples, 1.83%)</title><rect x="97.0144%" y="405" width="1.8335%" height="15" fill="rgb(233,93,10)" fg:x="5979" fg:w="113"/><text x="97.2644%" y="415.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (86 samples, 1.40%)</title><rect x="97.4525%" y="389" width="1.3954%" height="15" fill="rgb(225,113,19)" fg:x="6006" fg:w="86"/><text x="97.7025%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (253 samples, 4.11%)</title><rect x="95.6190%" y="453" width="4.1051%" height="15" fill="rgb(241,2,18)" fg:x="5893" fg:w="253"/><text x="95.8690%" y="463.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (252 samples, 4.09%)</title><rect x="95.6352%" y="437" width="4.0889%" height="15" fill="rgb(228,207,21)" fg:x="5894" fg:w="252"/><text x="95.8852%" y="447.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (54 samples, 0.88%)</title><rect x="98.8480%" y="421" width="0.8762%" height="15" fill="rgb(213,211,35)" fg:x="6092" fg:w="54"/><text x="99.0980%" y="431.50"></text></g><g><title>main::update_sptree::_{{closure}} (54 samples, 0.88%)</title><rect x="98.8480%" y="405" width="0.8762%" height="15" fill="rgb(209,83,10)" fg:x="6092" fg:w="54"/><text x="99.0980%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (27 samples, 0.44%)</title><rect x="99.2861%" y="389" width="0.4381%" height="15" fill="rgb(209,164,1)" fg:x="6119" fg:w="27"/><text x="99.5361%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (27 samples, 0.44%)</title><rect x="99.2861%" y="373" width="0.4381%" height="15" fill="rgb(213,184,43)" fg:x="6119" fg:w="27"/><text x="99.5361%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (27 samples, 0.44%)</title><rect x="99.2861%" y="357" width="0.4381%" height="15" fill="rgb(231,61,34)" fg:x="6119" fg:w="27"/><text x="99.5361%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (4 samples, 0.06%)</title><rect x="99.7242%" y="453" width="0.0649%" height="15" fill="rgb(235,75,3)" fg:x="6146" fg:w="4"/><text x="99.9742%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.06%)</title><rect x="99.7242%" y="437" width="0.0649%" height="15" fill="rgb(220,106,47)" fg:x="6146" fg:w="4"/><text x="99.9742%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (6 samples, 0.10%)</title><rect x="99.7891%" y="453" width="0.0974%" height="15" fill="rgb(210,196,33)" fg:x="6150" fg:w="6"/><text x="100.0391%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (6 samples, 0.10%)</title><rect x="99.7891%" y="437" width="0.0974%" height="15" fill="rgb(229,154,42)" fg:x="6150" fg:w="6"/><text x="100.0391%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.10%)</title><rect x="99.7891%" y="421" width="0.0974%" height="15" fill="rgb(228,114,26)" fg:x="6150" fg:w="6"/><text x="100.0391%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.10%)</title><rect x="99.7891%" y="405" width="0.0974%" height="15" fill="rgb(208,144,1)" fg:x="6150" fg:w="6"/><text x="100.0391%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.10%)</title><rect x="99.7891%" y="389" width="0.0974%" height="15" fill="rgb(239,112,37)" fg:x="6150" fg:w="6"/><text x="100.0391%" y="399.50"></text></g><g><title>cfree (6 samples, 0.10%)</title><rect x="99.7891%" y="373" width="0.0974%" height="15" fill="rgb(210,96,50)" fg:x="6150" fg:w="6"/><text x="100.0391%" y="383.50"></text></g><g><title>[libc.so.6] (4 samples, 0.06%)</title><rect x="99.8215%" y="357" width="0.0649%" height="15" fill="rgb(222,178,2)" fg:x="6152" fg:w="4"/><text x="100.0715%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.03%)</title><rect x="99.8540%" y="341" width="0.0325%" height="15" fill="rgb(226,74,18)" fg:x="6154" fg:w="2"/><text x="100.1040%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.8702%" y="325" width="0.0162%" height="15" fill="rgb(225,67,54)" fg:x="6155" fg:w="1"/><text x="100.1202%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints (1 samples, 0.02%)</title><rect x="99.8864%" y="453" width="0.0162%" height="15" fill="rgb(251,92,32)" fg:x="6156" fg:w="1"/><text x="100.1364%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="99.8864%" y="437" width="0.0162%" height="15" fill="rgb(228,149,22)" fg:x="6156" fg:w="1"/><text x="100.1364%" y="447.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints::_{{closure}} (1 samples, 0.02%)</title><rect x="99.8864%" y="421" width="0.0162%" height="15" fill="rgb(243,54,13)" fg:x="6156" fg:w="1"/><text x="100.1364%" y="431.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (1 samples, 0.02%)</title><rect x="99.8864%" y="405" width="0.0162%" height="15" fill="rgb(243,180,28)" fg:x="6156" fg:w="1"/><text x="100.1364%" y="415.50"></text></g><g><title>main::min_cost (5,937 samples, 96.33%)</title><rect x="3.6021%" y="485" width="96.3330%" height="15" fill="rgb(208,167,24)" fg:x="222" fg:w="5937"/><text x="3.8521%" y="495.50">main::min_cost</text></g><g><title>main::update_sptree (5,249 samples, 85.17%)</title><rect x="14.7655%" y="469" width="85.1696%" height="15" fill="rgb(245,73,45)" fg:x="910" fg:w="5249"/><text x="15.0155%" y="479.50">main::update_sptree</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_count (2 samples, 0.03%)</title><rect x="99.9026%" y="453" width="0.0325%" height="15" fill="rgb(237,203,48)" fg:x="6157" fg:w="2"/><text x="100.1526%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.03%)</title><rect x="99.9026%" y="437" width="0.0325%" height="15" fill="rgb(211,197,16)" fg:x="6157" fg:w="2"/><text x="100.1526%" y="447.50"></text></g><g><title>_start (5,939 samples, 96.37%)</title><rect x="3.5859%" y="629" width="96.3654%" height="15" fill="rgb(243,99,51)" fg:x="221" fg:w="5939"/><text x="3.8359%" y="639.50">_start</text></g><g><title>__libc_start_main (5,939 samples, 96.37%)</title><rect x="3.5859%" y="613" width="96.3654%" height="15" fill="rgb(215,123,29)" fg:x="221" fg:w="5939"/><text x="3.8359%" y="623.50">__libc_start_main</text></g><g><title>[libc.so.6] (5,939 samples, 96.37%)</title><rect x="3.5859%" y="597" width="96.3654%" height="15" fill="rgb(239,186,37)" fg:x="221" fg:w="5939"/><text x="3.8359%" y="607.50">[libc.so.6]</text></g><g><title>main (5,938 samples, 96.35%)</title><rect x="3.6021%" y="581" width="96.3492%" height="15" fill="rgb(252,136,39)" fg:x="222" fg:w="5938"/><text x="3.8521%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (5,938 samples, 96.35%)</title><rect x="3.6021%" y="565" width="96.3492%" height="15" fill="rgb(223,213,32)" fg:x="222" fg:w="5938"/><text x="3.8521%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (5,938 samples, 96.35%)</title><rect x="3.6021%" y="549" width="96.3492%" height="15" fill="rgb(233,115,5)" fg:x="222" fg:w="5938"/><text x="3.8521%" y="559.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,938 samples, 96.35%)</title><rect x="3.6021%" y="533" width="96.3492%" height="15" fill="rgb(207,226,44)" fg:x="222" fg:w="5938"/><text x="3.8521%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,938 samples, 96.35%)</title><rect x="3.6021%" y="517" width="96.3492%" height="15" fill="rgb(208,126,0)" fg:x="222" fg:w="5938"/><text x="3.8521%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (5,938 samples, 96.35%)</title><rect x="3.6021%" y="501" width="96.3492%" height="15" fill="rgb(244,66,21)" fg:x="222" fg:w="5938"/><text x="3.8521%" y="511.50">main::main</text></g><g><title>rand::rng::Rng::gen (1 samples, 0.02%)</title><rect x="99.9351%" y="485" width="0.0162%" height="15" fill="rgb(222,97,12)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="495.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.02%)</title><rect x="99.9351%" y="469" width="0.0162%" height="15" fill="rgb(219,213,19)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="479.50"></text></g><g><title>rand::rng::Rng::gen (1 samples, 0.02%)</title><rect x="99.9351%" y="453" width="0.0162%" height="15" fill="rgb(252,169,30)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="463.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.02%)</title><rect x="99.9351%" y="437" width="0.0162%" height="15" fill="rgb(206,32,51)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="447.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (1 samples, 0.02%)</title><rect x="99.9351%" y="421" width="0.0162%" height="15" fill="rgb(250,172,42)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="431.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.02%)</title><rect x="99.9351%" y="405" width="0.0162%" height="15" fill="rgb(209,34,43)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="415.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.02%)</title><rect x="99.9351%" y="389" width="0.0162%" height="15" fill="rgb(223,11,35)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="399.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.02%)</title><rect x="99.9351%" y="373" width="0.0162%" height="15" fill="rgb(251,219,26)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="383.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.02%)</title><rect x="99.9351%" y="357" width="0.0162%" height="15" fill="rgb(231,119,3)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="367.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.02%)</title><rect x="99.9351%" y="341" width="0.0162%" height="15" fill="rgb(216,97,11)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="351.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1 samples, 0.02%)</title><rect x="99.9351%" y="325" width="0.0162%" height="15" fill="rgb(223,59,9)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.02%)</title><rect x="99.9351%" y="309" width="0.0162%" height="15" fill="rgb(233,93,31)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="319.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1 samples, 0.02%)</title><rect x="99.9351%" y="293" width="0.0162%" height="15" fill="rgb(239,81,33)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (1 samples, 0.02%)</title><rect x="99.9351%" y="277" width="0.0162%" height="15" fill="rgb(213,120,34)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="287.50"></text></g><g><title>rand_chacha::guts::round (1 samples, 0.02%)</title><rect x="99.9351%" y="261" width="0.0162%" height="15" fill="rgb(243,49,53)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (1 samples, 0.02%)</title><rect x="99.9351%" y="245" width="0.0162%" height="15" fill="rgb(247,216,33)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (1 samples, 0.02%)</title><rect x="99.9351%" y="229" width="0.0162%" height="15" fill="rgb(226,26,14)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (1 samples, 0.02%)</title><rect x="99.9351%" y="213" width="0.0162%" height="15" fill="rgb(215,49,53)" fg:x="6159" fg:w="1"/><text x="100.1851%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.9513%" y="629" width="0.0162%" height="15" fill="rgb(245,162,40)" fg:x="6160" fg:w="1"/><text x="100.2013%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.02%)</title><rect x="99.9675%" y="597" width="0.0162%" height="15" fill="rgb(229,68,17)" fg:x="6161" fg:w="1"/><text x="100.2175%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="99.9675%" y="581" width="0.0162%" height="15" fill="rgb(213,182,10)" fg:x="6161" fg:w="1"/><text x="100.2175%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="99.9675%" y="565" width="0.0162%" height="15" fill="rgb(245,125,30)" fg:x="6161" fg:w="1"/><text x="100.2175%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="99.9675%" y="549" width="0.0162%" height="15" fill="rgb(232,202,2)" fg:x="6161" fg:w="1"/><text x="100.2175%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="99.9675%" y="533" width="0.0162%" height="15" fill="rgb(237,140,51)" fg:x="6161" fg:w="1"/><text x="100.2175%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="99.9675%" y="517" width="0.0162%" height="15" fill="rgb(236,157,25)" fg:x="6161" fg:w="1"/><text x="100.2175%" y="527.50"></text></g><g><title>all (6,163 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(219,209,0)" fg:x="0" fg:w="6163"/><text x="0.2500%" y="671.50"></text></g><g><title>main (6,163 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(240,116,54)" fg:x="0" fg:w="6163"/><text x="0.2500%" y="655.50">main</text></g><g><title>main::min_cost (2 samples, 0.03%)</title><rect x="99.9675%" y="629" width="0.0325%" height="15" fill="rgb(216,10,36)" fg:x="6161" fg:w="2"/><text x="100.2175%" y="639.50"></text></g><g><title>main::update_sptree (2 samples, 0.03%)</title><rect x="99.9675%" y="613" width="0.0325%" height="15" fill="rgb(222,72,44)" fg:x="6161" fg:w="2"/><text x="100.2175%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9838%" y="597" width="0.0162%" height="15" fill="rgb(232,159,9)" fg:x="6162" fg:w="1"/><text x="100.2338%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9838%" y="581" width="0.0162%" height="15" fill="rgb(210,39,32)" fg:x="6162" fg:w="1"/><text x="100.2338%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9838%" y="565" width="0.0162%" height="15" fill="rgb(216,194,45)" fg:x="6162" fg:w="1"/><text x="100.2338%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="99.9838%" y="549" width="0.0162%" height="15" fill="rgb(218,18,35)" fg:x="6162" fg:w="1"/><text x="100.2338%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="99.9838%" y="533" width="0.0162%" height="15" fill="rgb(207,83,51)" fg:x="6162" fg:w="1"/><text x="100.2338%" y="543.50"></text></g></svg></svg>