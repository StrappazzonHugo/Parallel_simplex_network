<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="34118"><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.02%)</title><rect x="0.0029%" y="437" width="0.0176%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="6"/><text x="0.2529%" y="447.50"></text></g><g><title>[[stack]] (10 samples, 0.03%)</title><rect x="0.0000%" y="453" width="0.0293%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="10"/><text x="0.2500%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 0.03%)</title><rect x="0.0381%" y="453" width="0.0293%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="10"/><text x="0.2881%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.01%)</title><rect x="0.0557%" y="437" width="0.0117%" height="15" fill="rgb(248,212,6)" fg:x="19" fg:w="4"/><text x="0.3057%" y="447.50"></text></g><g><title>malloc (6 samples, 0.02%)</title><rect x="0.0762%" y="341" width="0.0176%" height="15" fill="rgb(208,68,35)" fg:x="26" fg:w="6"/><text x="0.3262%" y="351.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="0.0762%" y="325" width="0.0176%" height="15" fill="rgb(232,128,0)" fg:x="26" fg:w="6"/><text x="0.3262%" y="335.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="0.0762%" y="309" width="0.0176%" height="15" fill="rgb(207,160,47)" fg:x="26" fg:w="6"/><text x="0.3262%" y="319.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="0.0762%" y="293" width="0.0176%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="6"/><text x="0.3262%" y="303.50"></text></g><g><title>__mprotect (5 samples, 0.01%)</title><rect x="0.0791%" y="277" width="0.0147%" height="15" fill="rgb(218,30,26)" fg:x="27" fg:w="5"/><text x="0.3291%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7 samples, 0.02%)</title><rect x="0.0762%" y="405" width="0.0205%" height="15" fill="rgb(220,122,19)" fg:x="26" fg:w="7"/><text x="0.3262%" y="415.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (7 samples, 0.02%)</title><rect x="0.0762%" y="389" width="0.0205%" height="15" fill="rgb(250,228,42)" fg:x="26" fg:w="7"/><text x="0.3262%" y="399.50"></text></g><g><title>std::sys::pal::unix::thread::guard::current (7 samples, 0.02%)</title><rect x="0.0762%" y="373" width="0.0205%" height="15" fill="rgb(240,193,28)" fg:x="26" fg:w="7"/><text x="0.3262%" y="383.50"></text></g><g><title>pthread_getattr_np (7 samples, 0.02%)</title><rect x="0.0762%" y="357" width="0.0205%" height="15" fill="rgb(216,20,37)" fg:x="26" fg:w="7"/><text x="0.3262%" y="367.50"></text></g><g><title>[libc.so.6] (14 samples, 0.04%)</title><rect x="0.0674%" y="453" width="0.0410%" height="15" fill="rgb(206,188,39)" fg:x="23" fg:w="14"/><text x="0.3174%" y="463.50"></text></g><g><title>[libc.so.6] (13 samples, 0.04%)</title><rect x="0.0703%" y="437" width="0.0381%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="13"/><text x="0.3203%" y="447.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (11 samples, 0.03%)</title><rect x="0.0762%" y="421" width="0.0322%" height="15" fill="rgb(231,73,38)" fg:x="26" fg:w="11"/><text x="0.3262%" y="431.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (4 samples, 0.01%)</title><rect x="0.0967%" y="405" width="0.0117%" height="15" fill="rgb(225,20,46)" fg:x="33" fg:w="4"/><text x="0.3467%" y="415.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="0.1378%" y="213" width="0.0117%" height="15" fill="rgb(210,31,41)" fg:x="47" fg:w="4"/><text x="0.3878%" y="223.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="0.1378%" y="197" width="0.0117%" height="15" fill="rgb(221,200,47)" fg:x="47" fg:w="4"/><text x="0.3878%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="0.1378%" y="293" width="0.0147%" height="15" fill="rgb(226,26,5)" fg:x="47" fg:w="5"/><text x="0.3878%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="0.1378%" y="277" width="0.0147%" height="15" fill="rgb(249,33,26)" fg:x="47" fg:w="5"/><text x="0.3878%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.01%)</title><rect x="0.1378%" y="261" width="0.0147%" height="15" fill="rgb(235,183,28)" fg:x="47" fg:w="5"/><text x="0.3878%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.01%)</title><rect x="0.1378%" y="245" width="0.0147%" height="15" fill="rgb(221,5,38)" fg:x="47" fg:w="5"/><text x="0.3878%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.01%)</title><rect x="0.1378%" y="229" width="0.0147%" height="15" fill="rgb(247,18,42)" fg:x="47" fg:w="5"/><text x="0.3878%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12 samples, 0.04%)</title><rect x="0.1524%" y="293" width="0.0352%" height="15" fill="rgb(241,131,45)" fg:x="52" fg:w="12"/><text x="0.4024%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 0.03%)</title><rect x="0.1553%" y="277" width="0.0322%" height="15" fill="rgb(249,31,29)" fg:x="53" fg:w="11"/><text x="0.4053%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (11 samples, 0.03%)</title><rect x="0.1553%" y="261" width="0.0322%" height="15" fill="rgb(225,111,53)" fg:x="53" fg:w="11"/><text x="0.4053%" y="271.50"></text></g><g><title>main::min_cost::_{{closure}} (11 samples, 0.03%)</title><rect x="0.1553%" y="245" width="0.0322%" height="15" fill="rgb(238,160,17)" fg:x="53" fg:w="11"/><text x="0.4053%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (282 samples, 0.83%)</title><rect x="11.1759%" y="277" width="0.8265%" height="15" fill="rgb(214,148,48)" fg:x="3813" fg:w="282"/><text x="11.4259%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (282 samples, 0.83%)</title><rect x="11.1759%" y="261" width="0.8265%" height="15" fill="rgb(232,36,49)" fg:x="3813" fg:w="282"/><text x="11.4259%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (282 samples, 0.83%)</title><rect x="11.1759%" y="245" width="0.8265%" height="15" fill="rgb(209,103,24)" fg:x="3813" fg:w="282"/><text x="11.4259%" y="255.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (212 samples, 0.62%)</title><rect x="12.0054%" y="277" width="0.6214%" height="15" fill="rgb(229,88,8)" fg:x="4096" fg:w="212"/><text x="12.2554%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (20 samples, 0.06%)</title><rect x="12.6356%" y="277" width="0.0586%" height="15" fill="rgb(213,181,19)" fg:x="4311" fg:w="20"/><text x="12.8856%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (11 samples, 0.03%)</title><rect x="12.6942%" y="277" width="0.0322%" height="15" fill="rgb(254,191,54)" fg:x="4331" fg:w="11"/><text x="12.9442%" y="287.50"></text></g><g><title>main::_compute_flowchange (4,505 samples, 13.20%)</title><rect x="0.1905%" y="293" width="13.2042%" height="15" fill="rgb(241,83,37)" fg:x="65" fg:w="4505"/><text x="0.4405%" y="303.50">main::_compute_flowc..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (228 samples, 0.67%)</title><rect x="12.7264%" y="277" width="0.6683%" height="15" fill="rgb(233,36,39)" fg:x="4342" fg:w="228"/><text x="12.9764%" y="287.50"></text></g><g><title>main::_find_best_arc (5 samples, 0.01%)</title><rect x="13.3947%" y="293" width="0.0147%" height="15" fill="rgb(226,3,54)" fg:x="4570" fg:w="5"/><text x="13.6447%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (45 samples, 0.13%)</title><rect x="34.5155%" y="69" width="0.1319%" height="15" fill="rgb(245,192,40)" fg:x="11776" fg:w="45"/><text x="34.7655%" y="79.50"></text></g><g><title>core::cmp::min_by (45 samples, 0.13%)</title><rect x="34.5155%" y="53" width="0.1319%" height="15" fill="rgb(238,167,29)" fg:x="11776" fg:w="45"/><text x="34.7655%" y="63.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (13 samples, 0.04%)</title><rect x="34.7998%" y="53" width="0.0381%" height="15" fill="rgb(232,182,51)" fg:x="11873" fg:w="13"/><text x="35.0498%" y="63.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (16 samples, 0.05%)</title><rect x="34.8379%" y="53" width="0.0469%" height="15" fill="rgb(231,60,39)" fg:x="11886" fg:w="16"/><text x="35.0879%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (242 samples, 0.71%)</title><rect x="34.2810%" y="133" width="0.7093%" height="15" fill="rgb(208,69,12)" fg:x="11696" fg:w="242"/><text x="34.5310%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (227 samples, 0.67%)</title><rect x="34.3250%" y="117" width="0.6653%" height="15" fill="rgb(235,93,37)" fg:x="11711" fg:w="227"/><text x="34.5750%" y="127.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (209 samples, 0.61%)</title><rect x="34.3777%" y="101" width="0.6126%" height="15" fill="rgb(213,116,39)" fg:x="11729" fg:w="209"/><text x="34.6277%" y="111.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (206 samples, 0.60%)</title><rect x="34.3865%" y="85" width="0.6038%" height="15" fill="rgb(222,207,29)" fg:x="11732" fg:w="206"/><text x="34.6365%" y="95.50"></text></g><g><title>main::_find_block_search_v2::_{{closure}} (117 samples, 0.34%)</title><rect x="34.6474%" y="69" width="0.3429%" height="15" fill="rgb(206,96,30)" fg:x="11821" fg:w="117"/><text x="34.8974%" y="79.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (36 samples, 0.11%)</title><rect x="34.8848%" y="53" width="0.1055%" height="15" fill="rgb(218,138,4)" fg:x="11902" fg:w="36"/><text x="35.1348%" y="63.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (1,081 samples, 3.17%)</title><rect x="34.9903%" y="133" width="3.1684%" height="15" fill="rgb(250,191,14)" fg:x="11938" fg:w="1081"/><text x="35.2403%" y="143.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (1,567 samples, 4.59%)</title><rect x="54.4082%" y="53" width="4.5929%" height="15" fill="rgb(239,60,40)" fg:x="18563" fg:w="1567"/><text x="54.6582%" y="63.50">core:..</text></g><g><title>core::cmp::min_by (1,567 samples, 4.59%)</title><rect x="54.4082%" y="37" width="4.5929%" height="15" fill="rgb(206,27,48)" fg:x="18563" fg:w="1567"/><text x="54.6582%" y="47.50">core:..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (1,741 samples, 5.10%)</title><rect x="71.4432%" y="37" width="5.1029%" height="15" fill="rgb(225,35,8)" fg:x="24375" fg:w="1741"/><text x="71.6932%" y="47.50">&lt;i32 a..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (2,742 samples, 8.04%)</title><rect x="76.5461%" y="37" width="8.0368%" height="15" fill="rgb(250,213,24)" fg:x="26116" fg:w="2742"/><text x="76.7961%" y="47.50">&lt;i32 as cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26,736 samples, 78.36%)</title><rect x="13.4123%" y="245" width="78.3633%" height="15" fill="rgb(247,123,22)" fg:x="4576" fg:w="26736"/><text x="13.6623%" y="255.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26,735 samples, 78.36%)</title><rect x="13.4152%" y="229" width="78.3604%" height="15" fill="rgb(231,138,38)" fg:x="4577" fg:w="26735"/><text x="13.6652%" y="239.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (26,735 samples, 78.36%)</title><rect x="13.4152%" y="213" width="78.3604%" height="15" fill="rgb(231,145,46)" fg:x="4577" fg:w="26735"/><text x="13.6652%" y="223.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26,735 samples, 78.36%)</title><rect x="13.4152%" y="197" width="78.3604%" height="15" fill="rgb(251,118,11)" fg:x="4577" fg:w="26735"/><text x="13.6652%" y="207.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26,735 samples, 78.36%)</title><rect x="13.4152%" y="181" width="78.3604%" height="15" fill="rgb(217,147,25)" fg:x="4577" fg:w="26735"/><text x="13.6652%" y="191.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26,734 samples, 78.36%)</title><rect x="13.4181%" y="165" width="78.3575%" height="15" fill="rgb(247,81,37)" fg:x="4578" fg:w="26734"/><text x="13.6681%" y="175.50">&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26,728 samples, 78.34%)</title><rect x="13.4357%" y="149" width="78.3399%" height="15" fill="rgb(209,12,38)" fg:x="4584" fg:w="26728"/><text x="13.6857%" y="159.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (18,290 samples, 53.61%)</title><rect x="38.1675%" y="133" width="53.6081%" height="15" fill="rgb(227,1,9)" fg:x="13022" fg:w="18290"/><text x="38.4175%" y="143.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (18,290 samples, 53.61%)</title><rect x="38.1675%" y="117" width="53.6081%" height="15" fill="rgb(248,47,43)" fg:x="13022" fg:w="18290"/><text x="38.4175%" y="127.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (16,735 samples, 49.05%)</title><rect x="42.7252%" y="101" width="49.0504%" height="15" fill="rgb(221,10,30)" fg:x="14577" fg:w="16735"/><text x="42.9752%" y="111.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (15,337 samples, 44.95%)</title><rect x="46.8228%" y="85" width="44.9528%" height="15" fill="rgb(210,229,1)" fg:x="15975" fg:w="15337"/><text x="47.0728%" y="95.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (15,044 samples, 44.09%)</title><rect x="47.6816%" y="69" width="44.0940%" height="15" fill="rgb(222,148,37)" fg:x="16268" fg:w="15044"/><text x="47.9316%" y="79.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>main::_find_block_search_v2::_{{closure}} (11,182 samples, 32.77%)</title><rect x="59.0011%" y="53" width="32.7745%" height="15" fill="rgb(234,67,33)" fg:x="20130" fg:w="11182"/><text x="59.2511%" y="63.50">main::_find_block_search_v2::_{{closure}}</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (2,454 samples, 7.19%)</title><rect x="84.5829%" y="37" width="7.1927%" height="15" fill="rgb(247,98,35)" fg:x="28858" fg:w="2454"/><text x="84.8329%" y="47.50">&lt;i32 as co..</text></g><g><title>main::_find_block_search_v2 (26,746 samples, 78.39%)</title><rect x="13.4093%" y="293" width="78.3926%" height="15" fill="rgb(247,138,52)" fg:x="4575" fg:w="26746"/><text x="13.6593%" y="303.50">main::_find_block_search_v2</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (26,745 samples, 78.39%)</title><rect x="13.4123%" y="277" width="78.3897%" height="15" fill="rgb(213,79,30)" fg:x="4576" fg:w="26745"/><text x="13.6623%" y="287.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (26,745 samples, 78.39%)</title><rect x="13.4123%" y="261" width="78.3897%" height="15" fill="rgb(246,177,23)" fg:x="4576" fg:w="26745"/><text x="13.6623%" y="271.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="91.7756%" y="245" width="0.0264%" height="15" fill="rgb(230,62,27)" fg:x="31312" fg:w="9"/><text x="92.0256%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.02%)</title><rect x="91.7815%" y="229" width="0.0205%" height="15" fill="rgb(216,154,8)" fg:x="31314" fg:w="7"/><text x="92.0315%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 0.01%)</title><rect x="91.7873%" y="213" width="0.0147%" height="15" fill="rgb(244,35,45)" fg:x="31316" fg:w="5"/><text x="92.0373%" y="223.50"></text></g><g><title>main::_find_block_search_v2::_{{closure}} (5 samples, 0.01%)</title><rect x="91.7873%" y="197" width="0.0147%" height="15" fill="rgb(251,115,12)" fg:x="31316" fg:w="5"/><text x="92.0373%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18 samples, 0.05%)</title><rect x="91.8196%" y="277" width="0.0528%" height="15" fill="rgb(240,54,50)" fg:x="31327" fg:w="18"/><text x="92.0696%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (18 samples, 0.05%)</title><rect x="91.8196%" y="261" width="0.0528%" height="15" fill="rgb(233,84,52)" fg:x="31327" fg:w="18"/><text x="92.0696%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (18 samples, 0.05%)</title><rect x="91.8196%" y="245" width="0.0528%" height="15" fill="rgb(207,117,47)" fg:x="31327" fg:w="18"/><text x="92.0696%" y="255.50"></text></g><g><title>main::initialization::_{{closure}} (18 samples, 0.05%)</title><rect x="91.8196%" y="229" width="0.0528%" height="15" fill="rgb(249,43,39)" fg:x="31327" fg:w="18"/><text x="92.0696%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="91.8723%" y="165" width="0.0176%" height="15" fill="rgb(209,38,44)" fg:x="31345" fg:w="6"/><text x="92.1223%" y="175.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="91.8723%" y="149" width="0.0176%" height="15" fill="rgb(236,212,23)" fg:x="31345" fg:w="6"/><text x="92.1223%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (7 samples, 0.02%)</title><rect x="91.8723%" y="181" width="0.0205%" height="15" fill="rgb(242,79,21)" fg:x="31345" fg:w="7"/><text x="92.1223%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (9 samples, 0.03%)</title><rect x="91.8723%" y="261" width="0.0264%" height="15" fill="rgb(211,96,35)" fg:x="31345" fg:w="9"/><text x="92.1223%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (9 samples, 0.03%)</title><rect x="91.8723%" y="245" width="0.0264%" height="15" fill="rgb(253,215,40)" fg:x="31345" fg:w="9"/><text x="92.1223%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.03%)</title><rect x="91.8723%" y="229" width="0.0264%" height="15" fill="rgb(211,81,21)" fg:x="31345" fg:w="9"/><text x="92.1223%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9 samples, 0.03%)</title><rect x="91.8723%" y="213" width="0.0264%" height="15" fill="rgb(208,190,38)" fg:x="31345" fg:w="9"/><text x="92.1223%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.03%)</title><rect x="91.8723%" y="197" width="0.0264%" height="15" fill="rgb(235,213,38)" fg:x="31345" fg:w="9"/><text x="92.1223%" y="207.50"></text></g><g><title>itertools::Itertools::sorted_by_key (4 samples, 0.01%)</title><rect x="91.9075%" y="261" width="0.0117%" height="15" fill="rgb(237,122,38)" fg:x="31357" fg:w="4"/><text x="92.1575%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (4 samples, 0.01%)</title><rect x="91.9075%" y="245" width="0.0117%" height="15" fill="rgb(244,218,35)" fg:x="31357" fg:w="4"/><text x="92.1575%" y="255.50"></text></g><g><title>alloc::slice::stable_sort (4 samples, 0.01%)</title><rect x="91.9075%" y="229" width="0.0117%" height="15" fill="rgb(240,68,47)" fg:x="31357" fg:w="4"/><text x="92.1575%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (4 samples, 0.01%)</title><rect x="91.9075%" y="213" width="0.0117%" height="15" fill="rgb(210,16,53)" fg:x="31357" fg:w="4"/><text x="92.1575%" y="223.50"></text></g><g><title>core::slice::sort::merge (4 samples, 0.01%)</title><rect x="91.9075%" y="197" width="0.0117%" height="15" fill="rgb(235,124,12)" fg:x="31357" fg:w="4"/><text x="92.1575%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.02%)</title><rect x="91.9427%" y="229" width="0.0234%" height="15" fill="rgb(224,169,11)" fg:x="31369" fg:w="8"/><text x="92.1927%" y="239.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (17 samples, 0.05%)</title><rect x="91.9192%" y="261" width="0.0498%" height="15" fill="rgb(250,166,2)" fg:x="31361" fg:w="17"/><text x="92.1692%" y="271.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (15 samples, 0.04%)</title><rect x="91.9251%" y="245" width="0.0440%" height="15" fill="rgb(242,216,29)" fg:x="31363" fg:w="15"/><text x="92.1751%" y="255.50"></text></g><g><title>main::compute_node_potentials (40 samples, 0.12%)</title><rect x="91.8723%" y="277" width="0.1172%" height="15" fill="rgb(230,116,27)" fg:x="31345" fg:w="40"/><text x="92.1223%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (7 samples, 0.02%)</title><rect x="91.9690%" y="261" width="0.0205%" height="15" fill="rgb(228,99,48)" fg:x="31378" fg:w="7"/><text x="92.2190%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (7 samples, 0.02%)</title><rect x="91.9690%" y="245" width="0.0205%" height="15" fill="rgb(253,11,6)" fg:x="31378" fg:w="7"/><text x="92.2190%" y="255.50"></text></g><g><title>main::initialization (67 samples, 0.20%)</title><rect x="91.8020%" y="293" width="0.1964%" height="15" fill="rgb(247,143,39)" fg:x="31321" fg:w="67"/><text x="92.0520%" y="303.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (50 samples, 0.15%)</title><rect x="92.1449%" y="277" width="0.1466%" height="15" fill="rgb(236,97,10)" fg:x="31438" fg:w="50"/><text x="92.3949%" y="287.50"></text></g><g><title>main::update_node_potentials (105 samples, 0.31%)</title><rect x="91.9984%" y="293" width="0.3078%" height="15" fill="rgb(233,208,19)" fg:x="31388" fg:w="105"/><text x="92.2484%" y="303.50"></text></g><g><title>main::get_reduced_cost_edgeindex (5 samples, 0.01%)</title><rect x="92.2915%" y="277" width="0.0147%" height="15" fill="rgb(216,164,2)" fg:x="31488" fg:w="5"/><text x="92.5415%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.06%)</title><rect x="98.3557%" y="277" width="0.0616%" height="15" fill="rgb(220,129,5)" fg:x="33557" fg:w="21"/><text x="98.6057%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 0.06%)</title><rect x="98.3557%" y="261" width="0.0616%" height="15" fill="rgb(242,17,10)" fg:x="33557" fg:w="21"/><text x="98.6057%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.06%)</title><rect x="98.3557%" y="245" width="0.0616%" height="15" fill="rgb(242,107,0)" fg:x="33557" fg:w="21"/><text x="98.6057%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.02%)</title><rect x="98.5960%" y="229" width="0.0176%" height="15" fill="rgb(251,28,31)" fg:x="33639" fg:w="6"/><text x="98.8460%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.02%)</title><rect x="98.5960%" y="213" width="0.0176%" height="15" fill="rgb(233,223,10)" fg:x="33639" fg:w="6"/><text x="98.8460%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.02%)</title><rect x="98.5960%" y="197" width="0.0176%" height="15" fill="rgb(215,21,27)" fg:x="33639" fg:w="6"/><text x="98.8460%" y="207.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (17 samples, 0.05%)</title><rect x="98.6136%" y="229" width="0.0498%" height="15" fill="rgb(232,23,21)" fg:x="33645" fg:w="17"/><text x="98.8636%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (85 samples, 0.25%)</title><rect x="98.4202%" y="277" width="0.2491%" height="15" fill="rgb(244,5,23)" fg:x="33579" fg:w="85"/><text x="98.6702%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (85 samples, 0.25%)</title><rect x="98.4202%" y="261" width="0.2491%" height="15" fill="rgb(226,81,46)" fg:x="33579" fg:w="85"/><text x="98.6702%" y="271.50"></text></g><g><title>main::update_sptree::_{{closure}} (85 samples, 0.25%)</title><rect x="98.4202%" y="245" width="0.2491%" height="15" fill="rgb(247,70,30)" fg:x="33579" fg:w="85"/><text x="98.6702%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.01%)</title><rect x="98.6693%" y="277" width="0.0147%" height="15" fill="rgb(212,68,19)" fg:x="33664" fg:w="5"/><text x="98.9193%" y="287.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (5 samples, 0.01%)</title><rect x="98.6693%" y="261" width="0.0147%" height="15" fill="rgb(240,187,13)" fg:x="33664" fg:w="5"/><text x="98.9193%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.04%)</title><rect x="98.7719%" y="245" width="0.0381%" height="15" fill="rgb(223,113,26)" fg:x="33699" fg:w="13"/><text x="99.0219%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.04%)</title><rect x="98.7719%" y="229" width="0.0381%" height="15" fill="rgb(206,192,2)" fg:x="33699" fg:w="13"/><text x="99.0219%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.04%)</title><rect x="98.7719%" y="213" width="0.0381%" height="15" fill="rgb(241,108,4)" fg:x="33699" fg:w="13"/><text x="99.0219%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (107 samples, 0.31%)</title><rect x="98.6840%" y="277" width="0.3136%" height="15" fill="rgb(247,173,49)" fg:x="33669" fg:w="107"/><text x="98.9340%" y="287.50"></text></g><g><title>main::update_sptree::_{{closure}} (97 samples, 0.28%)</title><rect x="98.7133%" y="261" width="0.2843%" height="15" fill="rgb(224,114,35)" fg:x="33679" fg:w="97"/><text x="98.9633%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (64 samples, 0.19%)</title><rect x="98.8100%" y="245" width="0.1876%" height="15" fill="rgb(245,159,27)" fg:x="33712" fg:w="64"/><text x="99.0600%" y="255.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (8 samples, 0.02%)</title><rect x="98.9976%" y="277" width="0.0234%" height="15" fill="rgb(245,172,44)" fg:x="33776" fg:w="8"/><text x="99.2476%" y="287.50"></text></g><g><title>__rdl_realloc (4 samples, 0.01%)</title><rect x="99.0591%" y="165" width="0.0117%" height="15" fill="rgb(236,23,11)" fg:x="33797" fg:w="4"/><text x="99.3091%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (43 samples, 0.13%)</title><rect x="99.0591%" y="213" width="0.1260%" height="15" fill="rgb(205,117,38)" fg:x="33797" fg:w="43"/><text x="99.3091%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (43 samples, 0.13%)</title><rect x="99.0591%" y="197" width="0.1260%" height="15" fill="rgb(237,72,25)" fg:x="33797" fg:w="43"/><text x="99.3091%" y="207.50"></text></g><g><title>alloc::alloc::realloc (43 samples, 0.13%)</title><rect x="99.0591%" y="181" width="0.1260%" height="15" fill="rgb(244,70,9)" fg:x="33797" fg:w="43"/><text x="99.3091%" y="191.50"></text></g><g><title>realloc (39 samples, 0.11%)</title><rect x="99.0709%" y="165" width="0.1143%" height="15" fill="rgb(217,125,39)" fg:x="33801" fg:w="39"/><text x="99.3209%" y="175.50"></text></g><g><title>[libc.so.6] (30 samples, 0.09%)</title><rect x="99.0973%" y="149" width="0.0879%" height="15" fill="rgb(235,36,10)" fg:x="33810" fg:w="30"/><text x="99.3473%" y="159.50"></text></g><g><title>[libc.so.6] (28 samples, 0.08%)</title><rect x="99.1031%" y="133" width="0.0821%" height="15" fill="rgb(251,123,47)" fg:x="33812" fg:w="28"/><text x="99.3531%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (51 samples, 0.15%)</title><rect x="99.0562%" y="229" width="0.1495%" height="15" fill="rgb(221,13,13)" fg:x="33796" fg:w="51"/><text x="99.3062%" y="239.50"></text></g><g><title>malloc (7 samples, 0.02%)</title><rect x="99.1852%" y="213" width="0.0205%" height="15" fill="rgb(238,131,9)" fg:x="33840" fg:w="7"/><text x="99.4352%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (52 samples, 0.15%)</title><rect x="99.0562%" y="261" width="0.1524%" height="15" fill="rgb(211,50,8)" fg:x="33796" fg:w="52"/><text x="99.3062%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (52 samples, 0.15%)</title><rect x="99.0562%" y="245" width="0.1524%" height="15" fill="rgb(245,182,24)" fg:x="33796" fg:w="52"/><text x="99.3062%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (64 samples, 0.19%)</title><rect x="99.0240%" y="277" width="0.1876%" height="15" fill="rgb(242,14,37)" fg:x="33785" fg:w="64"/><text x="99.2740%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.01%)</title><rect x="99.2145%" y="229" width="0.0117%" height="15" fill="rgb(246,228,12)" fg:x="33850" fg:w="4"/><text x="99.4645%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.01%)</title><rect x="99.2145%" y="213" width="0.0117%" height="15" fill="rgb(213,55,15)" fg:x="33850" fg:w="4"/><text x="99.4645%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 0.11%)</title><rect x="99.2145%" y="245" width="0.1055%" height="15" fill="rgb(209,9,3)" fg:x="33850" fg:w="36"/><text x="99.4645%" y="255.50"></text></g><g><title>core::ptr::write (32 samples, 0.09%)</title><rect x="99.2262%" y="229" width="0.0938%" height="15" fill="rgb(230,59,30)" fg:x="33854" fg:w="32"/><text x="99.4762%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (113 samples, 0.33%)</title><rect x="99.3200%" y="197" width="0.3312%" height="15" fill="rgb(209,121,21)" fg:x="33886" fg:w="113"/><text x="99.5700%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (113 samples, 0.33%)</title><rect x="99.3200%" y="181" width="0.3312%" height="15" fill="rgb(220,109,13)" fg:x="33886" fg:w="113"/><text x="99.5700%" y="191.50"></text></g><g><title>alloc::alloc::alloc (113 samples, 0.33%)</title><rect x="99.3200%" y="165" width="0.3312%" height="15" fill="rgb(232,18,1)" fg:x="33886" fg:w="113"/><text x="99.5700%" y="175.50"></text></g><g><title>malloc (110 samples, 0.32%)</title><rect x="99.3288%" y="149" width="0.3224%" height="15" fill="rgb(215,41,42)" fg:x="33889" fg:w="110"/><text x="99.5788%" y="159.50"></text></g><g><title>[libc.so.6] (40 samples, 0.12%)</title><rect x="99.5340%" y="133" width="0.1172%" height="15" fill="rgb(224,123,36)" fg:x="33959" fg:w="40"/><text x="99.7840%" y="143.50"></text></g><g><title>[libc.so.6] (21 samples, 0.06%)</title><rect x="99.5897%" y="117" width="0.0616%" height="15" fill="rgb(240,125,3)" fg:x="33978" fg:w="21"/><text x="99.8397%" y="127.50"></text></g><g><title>alloc::vec::from_elem (151 samples, 0.44%)</title><rect x="99.2116%" y="277" width="0.4426%" height="15" fill="rgb(205,98,50)" fg:x="33849" fg:w="151"/><text x="99.4616%" y="287.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (151 samples, 0.44%)</title><rect x="99.2116%" y="261" width="0.4426%" height="15" fill="rgb(205,185,37)" fg:x="33849" fg:w="151"/><text x="99.4616%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (114 samples, 0.33%)</title><rect x="99.3200%" y="245" width="0.3341%" height="15" fill="rgb(238,207,15)" fg:x="33886" fg:w="114"/><text x="99.5700%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (114 samples, 0.33%)</title><rect x="99.3200%" y="229" width="0.3341%" height="15" fill="rgb(213,199,42)" fg:x="33886" fg:w="114"/><text x="99.5700%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (114 samples, 0.33%)</title><rect x="99.3200%" y="213" width="0.3341%" height="15" fill="rgb(235,201,11)" fg:x="33886" fg:w="114"/><text x="99.5700%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.02%)</title><rect x="99.6541%" y="277" width="0.0234%" height="15" fill="rgb(207,46,11)" fg:x="34000" fg:w="8"/><text x="99.9041%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.02%)</title><rect x="99.6541%" y="261" width="0.0234%" height="15" fill="rgb(241,35,35)" fg:x="34000" fg:w="8"/><text x="99.9041%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.02%)</title><rect x="99.6541%" y="245" width="0.0234%" height="15" fill="rgb(243,32,47)" fg:x="34000" fg:w="8"/><text x="99.9041%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.02%)</title><rect x="99.6541%" y="229" width="0.0234%" height="15" fill="rgb(247,202,23)" fg:x="34000" fg:w="8"/><text x="99.9041%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.02%)</title><rect x="99.6600%" y="213" width="0.0176%" height="15" fill="rgb(219,102,11)" fg:x="34002" fg:w="6"/><text x="99.9100%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="99.6600%" y="197" width="0.0176%" height="15" fill="rgb(243,110,44)" fg:x="34002" fg:w="6"/><text x="99.9100%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.02%)</title><rect x="99.6600%" y="181" width="0.0176%" height="15" fill="rgb(222,74,54)" fg:x="34002" fg:w="6"/><text x="99.9100%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (6 samples, 0.02%)</title><rect x="99.6600%" y="165" width="0.0176%" height="15" fill="rgb(216,99,12)" fg:x="34002" fg:w="6"/><text x="99.9100%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.02%)</title><rect x="99.6600%" y="149" width="0.0176%" height="15" fill="rgb(226,22,26)" fg:x="34002" fg:w="6"/><text x="99.9100%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.02%)</title><rect x="99.6600%" y="133" width="0.0176%" height="15" fill="rgb(217,163,10)" fg:x="34002" fg:w="6"/><text x="99.9100%" y="143.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.02%)</title><rect x="99.6600%" y="117" width="0.0176%" height="15" fill="rgb(213,25,53)" fg:x="34002" fg:w="6"/><text x="99.9100%" y="127.50"></text></g><g><title>malloc (6 samples, 0.02%)</title><rect x="99.6600%" y="101" width="0.0176%" height="15" fill="rgb(252,105,26)" fg:x="34002" fg:w="6"/><text x="99.9100%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.02%)</title><rect x="99.6776%" y="261" width="0.0176%" height="15" fill="rgb(220,39,43)" fg:x="34008" fg:w="6"/><text x="99.9276%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.01%)</title><rect x="99.6835%" y="245" width="0.0117%" height="15" fill="rgb(229,68,48)" fg:x="34010" fg:w="4"/><text x="99.9335%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.01%)</title><rect x="99.6835%" y="229" width="0.0117%" height="15" fill="rgb(252,8,32)" fg:x="34010" fg:w="4"/><text x="99.9335%" y="239.50"></text></g><g><title>main::update_sptree::_{{closure}} (4 samples, 0.01%)</title><rect x="99.6835%" y="213" width="0.0117%" height="15" fill="rgb(223,20,43)" fg:x="34010" fg:w="4"/><text x="99.9335%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9 samples, 0.03%)</title><rect x="99.7040%" y="245" width="0.0264%" height="15" fill="rgb(229,81,49)" fg:x="34017" fg:w="9"/><text x="99.9540%" y="255.50"></text></g><g><title>main::update_sptree::_{{closure}} (9 samples, 0.03%)</title><rect x="99.7040%" y="229" width="0.0264%" height="15" fill="rgb(236,28,36)" fg:x="34017" fg:w="9"/><text x="99.9540%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (27 samples, 0.08%)</title><rect x="99.6776%" y="277" width="0.0791%" height="15" fill="rgb(249,185,26)" fg:x="34008" fg:w="27"/><text x="99.9276%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.06%)</title><rect x="99.6952%" y="261" width="0.0616%" height="15" fill="rgb(249,174,33)" fg:x="34014" fg:w="21"/><text x="99.9452%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (9 samples, 0.03%)</title><rect x="99.7303%" y="245" width="0.0264%" height="15" fill="rgb(233,201,37)" fg:x="34026" fg:w="9"/><text x="99.9803%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="99.7303%" y="229" width="0.0264%" height="15" fill="rgb(221,78,26)" fg:x="34026" fg:w="9"/><text x="99.9803%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (9 samples, 0.03%)</title><rect x="99.7303%" y="213" width="0.0264%" height="15" fill="rgb(250,127,30)" fg:x="34026" fg:w="9"/><text x="99.9803%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="99.7303%" y="197" width="0.0264%" height="15" fill="rgb(230,49,44)" fg:x="34026" fg:w="9"/><text x="99.9803%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (9 samples, 0.03%)</title><rect x="99.7303%" y="181" width="0.0264%" height="15" fill="rgb(229,67,23)" fg:x="34026" fg:w="9"/><text x="99.9803%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="99.7303%" y="165" width="0.0264%" height="15" fill="rgb(249,83,47)" fg:x="34026" fg:w="9"/><text x="99.9803%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.03%)</title><rect x="99.7303%" y="149" width="0.0264%" height="15" fill="rgb(215,43,3)" fg:x="34026" fg:w="9"/><text x="99.9803%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.03%)</title><rect x="99.7303%" y="133" width="0.0264%" height="15" fill="rgb(238,154,13)" fg:x="34026" fg:w="9"/><text x="99.9803%" y="143.50"></text></g><g><title>cfree (9 samples, 0.03%)</title><rect x="99.7303%" y="117" width="0.0264%" height="15" fill="rgb(219,56,2)" fg:x="34026" fg:w="9"/><text x="99.9803%" y="127.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="99.7450%" y="101" width="0.0117%" height="15" fill="rgb(233,0,4)" fg:x="34031" fg:w="4"/><text x="99.9950%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (19 samples, 0.06%)</title><rect x="99.7567%" y="277" width="0.0557%" height="15" fill="rgb(235,30,7)" fg:x="34035" fg:w="19"/><text x="100.0067%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (41 samples, 0.12%)</title><rect x="99.8124%" y="229" width="0.1202%" height="15" fill="rgb(250,79,13)" fg:x="34054" fg:w="41"/><text x="100.0624%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (41 samples, 0.12%)</title><rect x="99.8124%" y="213" width="0.1202%" height="15" fill="rgb(211,146,34)" fg:x="34054" fg:w="41"/><text x="100.0624%" y="223.50"></text></g><g><title>cfree (38 samples, 0.11%)</title><rect x="99.8212%" y="197" width="0.1114%" height="15" fill="rgb(228,22,38)" fg:x="34057" fg:w="38"/><text x="100.0712%" y="207.50"></text></g><g><title>[libc.so.6] (34 samples, 0.10%)</title><rect x="99.8329%" y="181" width="0.0997%" height="15" fill="rgb(235,168,5)" fg:x="34061" fg:w="34"/><text x="100.0829%" y="191.50"></text></g><g><title>[libc.so.6] (11 samples, 0.03%)</title><rect x="99.9003%" y="165" width="0.0322%" height="15" fill="rgb(221,155,16)" fg:x="34084" fg:w="11"/><text x="100.1503%" y="175.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="99.9121%" y="149" width="0.0205%" height="15" fill="rgb(215,215,53)" fg:x="34088" fg:w="7"/><text x="100.1621%" y="159.50"></text></g><g><title>main::min_cost (34,053 samples, 99.81%)</title><rect x="0.1260%" y="309" width="99.8095%" height="15" fill="rgb(223,4,10)" fg:x="43" fg:w="34053"/><text x="0.3760%" y="319.50">main::min_cost</text></g><g><title>main::update_sptree (2,603 samples, 7.63%)</title><rect x="92.3061%" y="293" width="7.6294%" height="15" fill="rgb(234,103,6)" fg:x="31493" fg:w="2603"/><text x="92.5561%" y="303.50">main::upda..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (42 samples, 0.12%)</title><rect x="99.8124%" y="277" width="0.1231%" height="15" fill="rgb(227,97,0)" fg:x="34054" fg:w="42"/><text x="100.0624%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (42 samples, 0.12%)</title><rect x="99.8124%" y="261" width="0.1231%" height="15" fill="rgb(234,150,53)" fg:x="34054" fg:w="42"/><text x="100.0624%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.12%)</title><rect x="99.8124%" y="245" width="0.1231%" height="15" fill="rgb(228,201,54)" fg:x="34054" fg:w="42"/><text x="100.0624%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.01%)</title><rect x="99.9414%" y="293" width="0.0147%" height="15" fill="rgb(222,22,37)" fg:x="34098" fg:w="5"/><text x="100.1914%" y="303.50"></text></g><g><title>core::ptr::write (4 samples, 0.01%)</title><rect x="99.9443%" y="277" width="0.0117%" height="15" fill="rgb(237,53,32)" fg:x="34099" fg:w="4"/><text x="100.1943%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (8 samples, 0.02%)</title><rect x="99.9355%" y="309" width="0.0234%" height="15" fill="rgb(233,25,53)" fg:x="34096" fg:w="8"/><text x="100.1855%" y="319.50"></text></g><g><title>_start (34,073 samples, 99.87%)</title><rect x="0.1143%" y="453" width="99.8681%" height="15" fill="rgb(210,40,34)" fg:x="39" fg:w="34073"/><text x="0.3643%" y="463.50">_start</text></g><g><title>__libc_start_main (34,073 samples, 99.87%)</title><rect x="0.1143%" y="437" width="99.8681%" height="15" fill="rgb(241,220,44)" fg:x="39" fg:w="34073"/><text x="0.3643%" y="447.50">__libc_start_main</text></g><g><title>[libc.so.6] (34,073 samples, 99.87%)</title><rect x="0.1143%" y="421" width="99.8681%" height="15" fill="rgb(235,28,35)" fg:x="39" fg:w="34073"/><text x="0.3643%" y="431.50">[libc.so.6]</text></g><g><title>main (34,073 samples, 99.87%)</title><rect x="0.1143%" y="405" width="99.8681%" height="15" fill="rgb(210,56,17)" fg:x="39" fg:w="34073"/><text x="0.3643%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (34,073 samples, 99.87%)</title><rect x="0.1143%" y="389" width="99.8681%" height="15" fill="rgb(224,130,29)" fg:x="39" fg:w="34073"/><text x="0.3643%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (34,073 samples, 99.87%)</title><rect x="0.1143%" y="373" width="99.8681%" height="15" fill="rgb(235,212,8)" fg:x="39" fg:w="34073"/><text x="0.3643%" y="383.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (34,073 samples, 99.87%)</title><rect x="0.1143%" y="357" width="99.8681%" height="15" fill="rgb(223,33,50)" fg:x="39" fg:w="34073"/><text x="0.3643%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (34,073 samples, 99.87%)</title><rect x="0.1143%" y="341" width="99.8681%" height="15" fill="rgb(219,149,13)" fg:x="39" fg:w="34073"/><text x="0.3643%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (34,073 samples, 99.87%)</title><rect x="0.1143%" y="325" width="99.8681%" height="15" fill="rgb(250,156,29)" fg:x="39" fg:w="34073"/><text x="0.3643%" y="335.50">main::main</text></g><g><title>rand::rng::Rng::gen (5 samples, 0.01%)</title><rect x="99.9678%" y="309" width="0.0147%" height="15" fill="rgb(216,193,19)" fg:x="34107" fg:w="5"/><text x="100.2178%" y="319.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (5 samples, 0.01%)</title><rect x="99.9678%" y="293" width="0.0147%" height="15" fill="rgb(216,135,14)" fg:x="34107" fg:w="5"/><text x="100.2178%" y="303.50"></text></g><g><title>rand::rng::Rng::gen (4 samples, 0.01%)</title><rect x="99.9707%" y="277" width="0.0117%" height="15" fill="rgb(241,47,5)" fg:x="34108" fg:w="4"/><text x="100.2207%" y="287.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (4 samples, 0.01%)</title><rect x="99.9707%" y="261" width="0.0117%" height="15" fill="rgb(233,42,35)" fg:x="34108" fg:w="4"/><text x="100.2207%" y="271.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (4 samples, 0.01%)</title><rect x="99.9707%" y="245" width="0.0117%" height="15" fill="rgb(231,13,6)" fg:x="34108" fg:w="4"/><text x="100.2207%" y="255.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (4 samples, 0.01%)</title><rect x="99.9707%" y="229" width="0.0117%" height="15" fill="rgb(207,181,40)" fg:x="34108" fg:w="4"/><text x="100.2207%" y="239.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (4 samples, 0.01%)</title><rect x="99.9707%" y="213" width="0.0117%" height="15" fill="rgb(254,173,49)" fg:x="34108" fg:w="4"/><text x="100.2207%" y="223.50"></text></g><g><title>main::min_cost (5 samples, 0.01%)</title><rect x="99.9824%" y="453" width="0.0147%" height="15" fill="rgb(221,1,38)" fg:x="34112" fg:w="5"/><text x="100.2324%" y="463.50"></text></g><g><title>main::update_sptree (4 samples, 0.01%)</title><rect x="99.9853%" y="437" width="0.0117%" height="15" fill="rgb(206,124,46)" fg:x="34113" fg:w="4"/><text x="100.2353%" y="447.50"></text></g><g><title>all (34,118 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="34118"/><text x="0.2500%" y="495.50"></text></g><g><title>main (34,118 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="34118"/><text x="0.2500%" y="479.50">main</text></g></svg></svg>