<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="23011"><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.05%)</title><rect x="0.0087%" y="421" width="0.0521%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="12"/><text x="0.2587%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.04%)</title><rect x="0.0217%" y="405" width="0.0391%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="9"/><text x="0.2717%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (8 samples, 0.03%)</title><rect x="0.0261%" y="389" width="0.0348%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="8"/><text x="0.2761%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (8 samples, 0.03%)</title><rect x="0.0261%" y="373" width="0.0348%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="8"/><text x="0.2761%" y="383.50"></text></g><g><title>[[heap]] (19 samples, 0.08%)</title><rect x="0.0043%" y="437" width="0.0826%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="19"/><text x="0.2543%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.03%)</title><rect x="0.0608%" y="421" width="0.0261%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="6"/><text x="0.3108%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.02%)</title><rect x="0.0652%" y="405" width="0.0217%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="5"/><text x="0.3152%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.02%)</title><rect x="0.0652%" y="389" width="0.0217%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="5"/><text x="0.3152%" y="399.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.02%)</title><rect x="0.0652%" y="373" width="0.0217%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="5"/><text x="0.3152%" y="383.50"></text></g><g><title>[libc.so.6] (12 samples, 0.05%)</title><rect x="0.0869%" y="421" width="0.0521%" height="15" fill="rgb(220,122,19)" fg:x="20" fg:w="12"/><text x="0.3369%" y="431.50"></text></g><g><title>[[stack]] (15 samples, 0.07%)</title><rect x="0.0869%" y="437" width="0.0652%" height="15" fill="rgb(250,228,42)" fg:x="20" fg:w="15"/><text x="0.3369%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="0.1391%" y="421" width="0.0130%" height="15" fill="rgb(240,193,28)" fg:x="32" fg:w="3"/><text x="0.3891%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 0.04%)</title><rect x="0.1521%" y="437" width="0.0435%" height="15" fill="rgb(216,20,37)" fg:x="35" fg:w="10"/><text x="0.4021%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.02%)</title><rect x="0.1782%" y="421" width="0.0174%" height="15" fill="rgb(206,188,39)" fg:x="41" fg:w="4"/><text x="0.4282%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.01%)</title><rect x="0.1825%" y="405" width="0.0130%" height="15" fill="rgb(217,207,13)" fg:x="42" fg:w="3"/><text x="0.4325%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.01%)</title><rect x="0.1825%" y="389" width="0.0130%" height="15" fill="rgb(231,73,38)" fg:x="42" fg:w="3"/><text x="0.4325%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.01%)</title><rect x="0.1825%" y="373" width="0.0130%" height="15" fill="rgb(225,20,46)" fg:x="42" fg:w="3"/><text x="0.4325%" y="383.50"></text></g><g><title>[libc.so.6] (4 samples, 0.02%)</title><rect x="0.1999%" y="421" width="0.0174%" height="15" fill="rgb(210,31,41)" fg:x="46" fg:w="4"/><text x="0.4499%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.03%)</title><rect x="0.2216%" y="421" width="0.0304%" height="15" fill="rgb(221,200,47)" fg:x="51" fg:w="7"/><text x="0.4716%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.02%)</title><rect x="0.2303%" y="405" width="0.0217%" height="15" fill="rgb(226,26,5)" fg:x="53" fg:w="5"/><text x="0.4803%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.02%)</title><rect x="0.2303%" y="389" width="0.0217%" height="15" fill="rgb(249,33,26)" fg:x="53" fg:w="5"/><text x="0.4803%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (5 samples, 0.02%)</title><rect x="0.2303%" y="373" width="0.0217%" height="15" fill="rgb(235,183,28)" fg:x="53" fg:w="5"/><text x="0.4803%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.03%)</title><rect x="0.2521%" y="421" width="0.0348%" height="15" fill="rgb(221,5,38)" fg:x="58" fg:w="8"/><text x="0.5021%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.02%)</title><rect x="0.2651%" y="405" width="0.0217%" height="15" fill="rgb(247,18,42)" fg:x="61" fg:w="5"/><text x="0.5151%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.02%)</title><rect x="0.2651%" y="389" width="0.0217%" height="15" fill="rgb(241,131,45)" fg:x="61" fg:w="5"/><text x="0.5151%" y="399.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.02%)</title><rect x="0.2651%" y="373" width="0.0217%" height="15" fill="rgb(249,31,29)" fg:x="61" fg:w="5"/><text x="0.5151%" y="383.50"></text></g><g><title>itertools::extrema_set::min_set_impl (3 samples, 0.01%)</title><rect x="0.2868%" y="421" width="0.0130%" height="15" fill="rgb(225,111,53)" fg:x="66" fg:w="3"/><text x="0.5368%" y="431.50"></text></g><g><title>[unknown] (24 samples, 0.10%)</title><rect x="0.1999%" y="437" width="0.1043%" height="15" fill="rgb(238,160,17)" fg:x="46" fg:w="24"/><text x="0.4499%" y="447.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (6 samples, 0.03%)</title><rect x="0.3433%" y="197" width="0.0261%" height="15" fill="rgb(214,148,48)" fg:x="79" fg:w="6"/><text x="0.5933%" y="207.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (6 samples, 0.03%)</title><rect x="0.3433%" y="181" width="0.0261%" height="15" fill="rgb(232,36,49)" fg:x="79" fg:w="6"/><text x="0.5933%" y="191.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="0.3433%" y="277" width="0.0304%" height="15" fill="rgb(209,103,24)" fg:x="79" fg:w="7"/><text x="0.5933%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.03%)</title><rect x="0.3433%" y="261" width="0.0304%" height="15" fill="rgb(229,88,8)" fg:x="79" fg:w="7"/><text x="0.5933%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.03%)</title><rect x="0.3433%" y="245" width="0.0304%" height="15" fill="rgb(213,181,19)" fg:x="79" fg:w="7"/><text x="0.5933%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.03%)</title><rect x="0.3433%" y="229" width="0.0304%" height="15" fill="rgb(254,191,54)" fg:x="79" fg:w="7"/><text x="0.5933%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.03%)</title><rect x="0.3433%" y="213" width="0.0304%" height="15" fill="rgb(241,83,37)" fg:x="79" fg:w="7"/><text x="0.5933%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12 samples, 0.05%)</title><rect x="0.3737%" y="277" width="0.0521%" height="15" fill="rgb(233,36,39)" fg:x="86" fg:w="12"/><text x="0.6237%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 0.05%)</title><rect x="0.3737%" y="261" width="0.0521%" height="15" fill="rgb(226,3,54)" fg:x="86" fg:w="12"/><text x="0.6237%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (12 samples, 0.05%)</title><rect x="0.3737%" y="245" width="0.0521%" height="15" fill="rgb(245,192,40)" fg:x="86" fg:w="12"/><text x="0.6237%" y="255.50"></text></g><g><title>main::min_cost::_{{closure}} (12 samples, 0.05%)</title><rect x="0.3737%" y="229" width="0.0521%" height="15" fill="rgb(238,167,29)" fg:x="86" fg:w="12"/><text x="0.6237%" y="239.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (918 samples, 3.99%)</title><rect x="33.8056%" y="261" width="3.9894%" height="15" fill="rgb(232,182,51)" fg:x="7779" fg:w="918"/><text x="34.0556%" y="271.50">&lt;i32..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (278 samples, 1.21%)</title><rect x="37.7950%" y="261" width="1.2081%" height="15" fill="rgb(231,60,39)" fg:x="8697" fg:w="278"/><text x="38.0450%" y="271.50"></text></g><g><title>&lt;i32 as num_traits::sign::Signed&gt;::is_negative (965 samples, 4.19%)</title><rect x="39.0031%" y="261" width="4.1936%" height="15" fill="rgb(208,69,12)" fg:x="8975" fg:w="965"/><text x="39.2531%" y="271.50">&lt;i32 ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1,297 samples, 5.64%)</title><rect x="43.1967%" y="261" width="5.6364%" height="15" fill="rgb(235,93,37)" fg:x="9940" fg:w="1297"/><text x="43.4467%" y="271.50">core::c..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (606 samples, 2.63%)</title><rect x="48.9288%" y="229" width="2.6335%" height="15" fill="rgb(213,116,39)" fg:x="11259" fg:w="606"/><text x="49.1788%" y="239.50">&lt;u..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (606 samples, 2.63%)</title><rect x="48.9288%" y="213" width="2.6335%" height="15" fill="rgb(222,207,29)" fg:x="11259" fg:w="606"/><text x="49.1788%" y="223.50">co..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,103 samples, 4.79%)</title><rect x="48.8332%" y="261" width="4.7934%" height="15" fill="rgb(206,96,30)" fg:x="11237" fg:w="1103"/><text x="49.0832%" y="271.50">core::..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,103 samples, 4.79%)</title><rect x="48.8332%" y="245" width="4.7934%" height="15" fill="rgb(218,138,4)" fg:x="11237" fg:w="1103"/><text x="49.0832%" y="255.50">&lt;core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (475 samples, 2.06%)</title><rect x="51.5623%" y="229" width="2.0642%" height="15" fill="rgb(250,191,14)" fg:x="11865" fg:w="475"/><text x="51.8123%" y="239.50">c..</text></g><g><title>main::__find_block_search (12,244 samples, 53.21%)</title><rect x="0.4302%" y="277" width="53.2093%" height="15" fill="rgb(239,60,40)" fg:x="99" fg:w="12244"/><text x="0.6802%" y="287.50">main::__find_block_search</text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.01%)</title><rect x="53.6265%" y="261" width="0.0130%" height="15" fill="rgb(206,27,48)" fg:x="12340" fg:w="3"/><text x="53.8765%" y="271.50"></text></g><g><title>main::_find_best_arc (4 samples, 0.02%)</title><rect x="53.6396%" y="277" width="0.0174%" height="15" fill="rgb(225,35,8)" fg:x="12343" fg:w="4"/><text x="53.8896%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (379 samples, 1.65%)</title><rect x="64.5344%" y="261" width="1.6470%" height="15" fill="rgb(250,213,24)" fg:x="14850" fg:w="379"/><text x="64.7844%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (379 samples, 1.65%)</title><rect x="64.5344%" y="245" width="1.6470%" height="15" fill="rgb(247,123,22)" fg:x="14850" fg:w="379"/><text x="64.7844%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (379 samples, 1.65%)</title><rect x="64.5344%" y="229" width="1.6470%" height="15" fill="rgb(231,138,38)" fg:x="14850" fg:w="379"/><text x="64.7844%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.02%)</title><rect x="66.7550%" y="213" width="0.0217%" height="15" fill="rgb(231,145,46)" fg:x="15361" fg:w="5"/><text x="67.0050%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.03%)</title><rect x="66.7768%" y="213" width="0.0261%" height="15" fill="rgb(251,118,11)" fg:x="15366" fg:w="6"/><text x="67.0268%" y="223.50"></text></g><g><title>__rdl_realloc (11 samples, 0.05%)</title><rect x="66.8333%" y="149" width="0.0478%" height="15" fill="rgb(217,147,25)" fg:x="15379" fg:w="11"/><text x="67.0833%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (423 samples, 1.84%)</title><rect x="66.8289%" y="197" width="1.8383%" height="15" fill="rgb(247,81,37)" fg:x="15378" fg:w="423"/><text x="67.0789%" y="207.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (423 samples, 1.84%)</title><rect x="66.8289%" y="181" width="1.8383%" height="15" fill="rgb(209,12,38)" fg:x="15378" fg:w="423"/><text x="67.0789%" y="191.50">a..</text></g><g><title>alloc::alloc::realloc (423 samples, 1.84%)</title><rect x="66.8289%" y="165" width="1.8383%" height="15" fill="rgb(227,1,9)" fg:x="15378" fg:w="423"/><text x="67.0789%" y="175.50">a..</text></g><g><title>realloc (409 samples, 1.78%)</title><rect x="66.8897%" y="149" width="1.7774%" height="15" fill="rgb(248,47,43)" fg:x="15392" fg:w="409"/><text x="67.1397%" y="159.50">r..</text></g><g><title>[libc.so.6] (364 samples, 1.58%)</title><rect x="67.0853%" y="133" width="1.5819%" height="15" fill="rgb(221,10,30)" fg:x="15437" fg:w="364"/><text x="67.3353%" y="143.50"></text></g><g><title>[libc.so.6] (325 samples, 1.41%)</title><rect x="67.2548%" y="117" width="1.4124%" height="15" fill="rgb(210,229,1)" fg:x="15476" fg:w="325"/><text x="67.5048%" y="127.50"></text></g><g><title>[libc.so.6] (79 samples, 0.34%)</title><rect x="68.3238%" y="101" width="0.3433%" height="15" fill="rgb(222,148,37)" fg:x="15722" fg:w="79"/><text x="68.5738%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5 samples, 0.02%)</title><rect x="68.6715%" y="197" width="0.0217%" height="15" fill="rgb(234,67,33)" fg:x="15802" fg:w="5"/><text x="68.9215%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (462 samples, 2.01%)</title><rect x="66.8072%" y="213" width="2.0077%" height="15" fill="rgb(247,98,35)" fg:x="15373" fg:w="462"/><text x="67.0572%" y="223.50">a..</text></g><g><title>malloc (28 samples, 0.12%)</title><rect x="68.6932%" y="197" width="0.1217%" height="15" fill="rgb(247,138,52)" fg:x="15807" fg:w="28"/><text x="68.9432%" y="207.50"></text></g><g><title>core::cmp::max (7 samples, 0.03%)</title><rect x="68.8193%" y="213" width="0.0304%" height="15" fill="rgb(213,79,30)" fg:x="15836" fg:w="7"/><text x="69.0693%" y="223.50"></text></g><g><title>core::cmp::Ord::max (7 samples, 0.03%)</title><rect x="68.8193%" y="197" width="0.0304%" height="15" fill="rgb(246,177,23)" fg:x="15836" fg:w="7"/><text x="69.0693%" y="207.50"></text></g><g><title>core::cmp::max_by (7 samples, 0.03%)</title><rect x="68.8193%" y="181" width="0.0304%" height="15" fill="rgb(230,62,27)" fg:x="15836" fg:w="7"/><text x="69.0693%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (485 samples, 2.11%)</title><rect x="66.7463%" y="245" width="2.1077%" height="15" fill="rgb(216,154,8)" fg:x="15359" fg:w="485"/><text x="66.9963%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (485 samples, 2.11%)</title><rect x="66.7463%" y="229" width="2.1077%" height="15" fill="rgb(244,35,45)" fg:x="15359" fg:w="485"/><text x="66.9963%" y="239.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 0.03%)</title><rect x="68.8540%" y="245" width="0.0348%" height="15" fill="rgb(251,115,12)" fg:x="15844" fg:w="8"/><text x="69.1040%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.03%)</title><rect x="68.8540%" y="229" width="0.0348%" height="15" fill="rgb(240,54,50)" fg:x="15844" fg:w="8"/><text x="69.1040%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (646 samples, 2.81%)</title><rect x="66.1857%" y="261" width="2.8074%" height="15" fill="rgb(233,84,52)" fg:x="15230" fg:w="646"/><text x="66.4357%" y="271.50">al..</text></g><g><title>core::ptr::write (24 samples, 0.10%)</title><rect x="68.8888%" y="245" width="0.1043%" height="15" fill="rgb(207,117,47)" fg:x="15852" fg:w="24"/><text x="69.1388%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.02%)</title><rect x="68.9931%" y="213" width="0.0174%" height="15" fill="rgb(249,43,39)" fg:x="15876" fg:w="4"/><text x="69.2431%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.02%)</title><rect x="68.9931%" y="197" width="0.0174%" height="15" fill="rgb(209,38,44)" fg:x="15876" fg:w="4"/><text x="69.2431%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (183 samples, 0.80%)</title><rect x="68.9931%" y="229" width="0.7953%" height="15" fill="rgb(236,212,23)" fg:x="15876" fg:w="183"/><text x="69.2431%" y="239.50"></text></g><g><title>core::ptr::write (177 samples, 0.77%)</title><rect x="69.0192%" y="213" width="0.7692%" height="15" fill="rgb(242,79,21)" fg:x="15882" fg:w="177"/><text x="69.2692%" y="223.50"></text></g><g><title>alloc::vec::from_elem (238 samples, 1.03%)</title><rect x="68.9931%" y="261" width="1.0343%" height="15" fill="rgb(211,96,35)" fg:x="15876" fg:w="238"/><text x="69.2431%" y="271.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (238 samples, 1.03%)</title><rect x="68.9931%" y="245" width="1.0343%" height="15" fill="rgb(253,215,40)" fg:x="15876" fg:w="238"/><text x="69.2431%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (55 samples, 0.24%)</title><rect x="69.7884%" y="229" width="0.2390%" height="15" fill="rgb(211,81,21)" fg:x="16059" fg:w="55"/><text x="70.0384%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (55 samples, 0.24%)</title><rect x="69.7884%" y="213" width="0.2390%" height="15" fill="rgb(208,190,38)" fg:x="16059" fg:w="55"/><text x="70.0384%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (55 samples, 0.24%)</title><rect x="69.7884%" y="197" width="0.2390%" height="15" fill="rgb(235,213,38)" fg:x="16059" fg:w="55"/><text x="70.0384%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55 samples, 0.24%)</title><rect x="69.7884%" y="181" width="0.2390%" height="15" fill="rgb(237,122,38)" fg:x="16059" fg:w="55"/><text x="70.0384%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.24%)</title><rect x="69.7884%" y="165" width="0.2390%" height="15" fill="rgb(244,218,35)" fg:x="16059" fg:w="55"/><text x="70.0384%" y="175.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.24%)</title><rect x="69.7884%" y="149" width="0.2390%" height="15" fill="rgb(240,68,47)" fg:x="16059" fg:w="55"/><text x="70.0384%" y="159.50"></text></g><g><title>malloc (52 samples, 0.23%)</title><rect x="69.8014%" y="133" width="0.2260%" height="15" fill="rgb(210,16,53)" fg:x="16062" fg:w="52"/><text x="70.0514%" y="143.50"></text></g><g><title>[libc.so.6] (31 samples, 0.13%)</title><rect x="69.8927%" y="117" width="0.1347%" height="15" fill="rgb(235,124,12)" fg:x="16083" fg:w="31"/><text x="70.1427%" y="127.50"></text></g><g><title>[libc.so.6] (10 samples, 0.04%)</title><rect x="69.9839%" y="101" width="0.0435%" height="15" fill="rgb(224,169,11)" fg:x="16104" fg:w="10"/><text x="70.2339%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (131 samples, 0.57%)</title><rect x="74.9207%" y="165" width="0.5693%" height="15" fill="rgb(250,166,2)" fg:x="17240" fg:w="131"/><text x="75.1707%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (131 samples, 0.57%)</title><rect x="74.9207%" y="149" width="0.5693%" height="15" fill="rgb(242,216,29)" fg:x="17240" fg:w="131"/><text x="75.1707%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (131 samples, 0.57%)</title><rect x="74.9207%" y="133" width="0.5693%" height="15" fill="rgb(230,116,27)" fg:x="17240" fg:w="131"/><text x="75.1707%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (18 samples, 0.08%)</title><rect x="75.4900%" y="165" width="0.0782%" height="15" fill="rgb(228,99,48)" fg:x="17371" fg:w="18"/><text x="75.7400%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (18 samples, 0.08%)</title><rect x="75.4900%" y="149" width="0.0782%" height="15" fill="rgb(253,11,6)" fg:x="17371" fg:w="18"/><text x="75.7400%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (18 samples, 0.08%)</title><rect x="75.4900%" y="133" width="0.0782%" height="15" fill="rgb(247,143,39)" fg:x="17371" fg:w="18"/><text x="75.7400%" y="143.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (181 samples, 0.79%)</title><rect x="75.5682%" y="165" width="0.7866%" height="15" fill="rgb(236,97,10)" fg:x="17389" fg:w="181"/><text x="75.8182%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,334 samples, 10.14%)</title><rect x="70.0361%" y="245" width="10.1430%" height="15" fill="rgb(233,208,19)" fg:x="16116" fg:w="2334"/><text x="70.2861%" y="255.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,334 samples, 10.14%)</title><rect x="70.0361%" y="229" width="10.1430%" height="15" fill="rgb(216,164,2)" fg:x="16116" fg:w="2334"/><text x="70.2861%" y="239.50">&lt;core::slice::i..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (2,256 samples, 9.80%)</title><rect x="70.3750%" y="213" width="9.8040%" height="15" fill="rgb(220,129,5)" fg:x="16194" fg:w="2256"/><text x="70.6250%" y="223.50">&lt;core::iter::a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2,242 samples, 9.74%)</title><rect x="70.4359%" y="197" width="9.7432%" height="15" fill="rgb(242,17,10)" fg:x="16208" fg:w="2242"/><text x="70.6859%" y="207.50">core::iter::tr..</text></g><g><title>main::compute_flowchange::_{{closure}} (2,242 samples, 9.74%)</title><rect x="70.4359%" y="181" width="9.7432%" height="15" fill="rgb(242,107,0)" fg:x="16208" fg:w="2242"/><text x="70.6859%" y="191.50">main::compute_..</text></g><g><title>core::option::Option&lt;T&gt;::is_some (880 samples, 3.82%)</title><rect x="76.3548%" y="165" width="3.8243%" height="15" fill="rgb(251,28,31)" fg:x="17570" fg:w="880"/><text x="76.6048%" y="175.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,336 samples, 10.15%)</title><rect x="70.0361%" y="261" width="10.1517%" height="15" fill="rgb(233,223,10)" fg:x="16116" fg:w="2336"/><text x="70.2861%" y="271.50">core::iter::tra..</text></g><g><title>cfree (18 samples, 0.08%)</title><rect x="80.1877%" y="229" width="0.0782%" height="15" fill="rgb(215,21,27)" fg:x="18452" fg:w="18"/><text x="80.4377%" y="239.50"></text></g><g><title>[libc.so.6] (10 samples, 0.04%)</title><rect x="80.2225%" y="213" width="0.0435%" height="15" fill="rgb(232,23,21)" fg:x="18460" fg:w="10"/><text x="80.4725%" y="223.50"></text></g><g><title>[libc.so.6] (3 samples, 0.01%)</title><rect x="80.2529%" y="197" width="0.0130%" height="15" fill="rgb(244,5,23)" fg:x="18467" fg:w="3"/><text x="80.5029%" y="207.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="80.3051%" y="197" width="0.0130%" height="15" fill="rgb(226,81,46)" fg:x="18479" fg:w="3"/><text x="80.5551%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.06%)</title><rect x="80.2660%" y="213" width="0.0565%" height="15" fill="rgb(247,70,30)" fg:x="18470" fg:w="13"/><text x="80.5160%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (159 samples, 0.69%)</title><rect x="80.1877%" y="261" width="0.6910%" height="15" fill="rgb(212,68,19)" fg:x="18452" fg:w="159"/><text x="80.4377%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (159 samples, 0.69%)</title><rect x="80.1877%" y="245" width="0.6910%" height="15" fill="rgb(240,187,13)" fg:x="18452" fg:w="159"/><text x="80.4377%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (141 samples, 0.61%)</title><rect x="80.2660%" y="229" width="0.6128%" height="15" fill="rgb(223,113,26)" fg:x="18470" fg:w="141"/><text x="80.5160%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (128 samples, 0.56%)</title><rect x="80.3225%" y="213" width="0.5563%" height="15" fill="rgb(206,192,2)" fg:x="18483" fg:w="128"/><text x="80.5725%" y="223.50"></text></g><g><title>core::cmp::max_by (128 samples, 0.56%)</title><rect x="80.3225%" y="197" width="0.5563%" height="15" fill="rgb(241,108,4)" fg:x="18483" fg:w="128"/><text x="80.5725%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (43 samples, 0.19%)</title><rect x="80.6918%" y="181" width="0.1869%" height="15" fill="rgb(247,173,49)" fg:x="18568" fg:w="43"/><text x="80.9418%" y="191.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (43 samples, 0.19%)</title><rect x="80.6918%" y="165" width="0.1869%" height="15" fill="rgb(224,114,35)" fg:x="18568" fg:w="43"/><text x="80.9418%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (43 samples, 0.19%)</title><rect x="80.6918%" y="149" width="0.1869%" height="15" fill="rgb(245,159,27)" fg:x="18568" fg:w="43"/><text x="80.9418%" y="159.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.14%)</title><rect x="80.8787%" y="213" width="0.1434%" height="15" fill="rgb(245,172,44)" fg:x="18611" fg:w="33"/><text x="81.1287%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (32 samples, 0.14%)</title><rect x="80.8831%" y="197" width="0.1391%" height="15" fill="rgb(236,23,11)" fg:x="18612" fg:w="32"/><text x="81.1331%" y="207.50"></text></g><g><title>core::ptr::read (32 samples, 0.14%)</title><rect x="80.8831%" y="181" width="0.1391%" height="15" fill="rgb(205,117,38)" fg:x="18612" fg:w="32"/><text x="81.1331%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (41 samples, 0.18%)</title><rect x="81.0221%" y="213" width="0.1782%" height="15" fill="rgb(237,72,25)" fg:x="18644" fg:w="41"/><text x="81.2721%" y="223.50"></text></g><g><title>core::cmp::min_by (41 samples, 0.18%)</title><rect x="81.0221%" y="197" width="0.1782%" height="15" fill="rgb(244,70,9)" fg:x="18644" fg:w="41"/><text x="81.2721%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.04%)</title><rect x="81.2003%" y="117" width="0.0435%" height="15" fill="rgb(217,125,39)" fg:x="18685" fg:w="10"/><text x="81.4503%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.04%)</title><rect x="81.2003%" y="101" width="0.0435%" height="15" fill="rgb(235,36,10)" fg:x="18685" fg:w="10"/><text x="81.4503%" y="111.50"></text></g><g><title>cfree (10 samples, 0.04%)</title><rect x="81.2003%" y="85" width="0.0435%" height="15" fill="rgb(251,123,47)" fg:x="18685" fg:w="10"/><text x="81.4503%" y="95.50"></text></g><g><title>[libc.so.6] (10 samples, 0.04%)</title><rect x="81.2003%" y="69" width="0.0435%" height="15" fill="rgb(221,13,13)" fg:x="18685" fg:w="10"/><text x="81.4503%" y="79.50"></text></g><g><title>[libc.so.6] (4 samples, 0.02%)</title><rect x="81.2264%" y="53" width="0.0174%" height="15" fill="rgb(238,131,9)" fg:x="18691" fg:w="4"/><text x="81.4764%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (85 samples, 0.37%)</title><rect x="80.8787%" y="261" width="0.3694%" height="15" fill="rgb(211,50,8)" fg:x="18611" fg:w="85"/><text x="81.1287%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (85 samples, 0.37%)</title><rect x="80.8787%" y="245" width="0.3694%" height="15" fill="rgb(245,182,24)" fg:x="18611" fg:w="85"/><text x="81.1287%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (85 samples, 0.37%)</title><rect x="80.8787%" y="229" width="0.3694%" height="15" fill="rgb(242,14,37)" fg:x="18611" fg:w="85"/><text x="81.1287%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;&amp;(usize,i32,i32)&gt;&gt; (11 samples, 0.05%)</title><rect x="81.2003%" y="213" width="0.0478%" height="15" fill="rgb(246,228,12)" fg:x="18685" fg:w="11"/><text x="81.4503%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.05%)</title><rect x="81.2003%" y="197" width="0.0478%" height="15" fill="rgb(213,55,15)" fg:x="18685" fg:w="11"/><text x="81.4503%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;&amp;(usize,i32,i32),alloc::alloc::Global&gt;&gt; (11 samples, 0.05%)</title><rect x="81.2003%" y="181" width="0.0478%" height="15" fill="rgb(209,9,3)" fg:x="18685" fg:w="11"/><text x="81.4503%" y="191.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.05%)</title><rect x="81.2003%" y="165" width="0.0478%" height="15" fill="rgb(230,59,30)" fg:x="18685" fg:w="11"/><text x="81.4503%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;(usize,i32,i32)&gt;&gt; (11 samples, 0.05%)</title><rect x="81.2003%" y="149" width="0.0478%" height="15" fill="rgb(209,121,21)" fg:x="18685" fg:w="11"/><text x="81.4503%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.05%)</title><rect x="81.2003%" y="133" width="0.0478%" height="15" fill="rgb(220,109,13)" fg:x="18685" fg:w="11"/><text x="81.4503%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (68 samples, 0.30%)</title><rect x="81.2481%" y="261" width="0.2955%" height="15" fill="rgb(232,18,1)" fg:x="18696" fg:w="68"/><text x="81.4981%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (738 samples, 3.21%)</title><rect x="81.5436%" y="261" width="3.2072%" height="15" fill="rgb(215,41,42)" fg:x="18764" fg:w="738"/><text x="81.7936%" y="271.50">cor..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (23 samples, 0.10%)</title><rect x="84.7508%" y="261" width="0.1000%" height="15" fill="rgb(224,123,36)" fg:x="19502" fg:w="23"/><text x="85.0008%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,i32,i32)&gt;&gt; (27 samples, 0.12%)</title><rect x="84.8507%" y="261" width="0.1173%" height="15" fill="rgb(240,125,3)" fg:x="19525" fg:w="27"/><text x="85.1007%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,i32,i32)&gt;&gt; (27 samples, 0.12%)</title><rect x="84.8507%" y="245" width="0.1173%" height="15" fill="rgb(205,98,50)" fg:x="19525" fg:w="27"/><text x="85.1007%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.12%)</title><rect x="84.8507%" y="229" width="0.1173%" height="15" fill="rgb(205,185,37)" fg:x="19525" fg:w="27"/><text x="85.1007%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.12%)</title><rect x="84.8507%" y="213" width="0.1173%" height="15" fill="rgb(238,207,15)" fg:x="19525" fg:w="27"/><text x="85.1007%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.12%)</title><rect x="84.8507%" y="197" width="0.1173%" height="15" fill="rgb(213,199,42)" fg:x="19525" fg:w="27"/><text x="85.1007%" y="207.50"></text></g><g><title>cfree (26 samples, 0.11%)</title><rect x="84.8551%" y="181" width="0.1130%" height="15" fill="rgb(235,201,11)" fg:x="19526" fg:w="26"/><text x="85.1051%" y="191.50"></text></g><g><title>[libc.so.6] (21 samples, 0.09%)</title><rect x="84.8768%" y="165" width="0.0913%" height="15" fill="rgb(207,46,11)" fg:x="19531" fg:w="21"/><text x="85.1268%" y="175.50"></text></g><g><title>[libc.so.6] (6 samples, 0.03%)</title><rect x="84.9420%" y="149" width="0.0261%" height="15" fill="rgb(241,35,35)" fg:x="19546" fg:w="6"/><text x="85.1920%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (46 samples, 0.20%)</title><rect x="84.9724%" y="213" width="0.1999%" height="15" fill="rgb(243,32,47)" fg:x="19553" fg:w="46"/><text x="85.2224%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (46 samples, 0.20%)</title><rect x="84.9724%" y="197" width="0.1999%" height="15" fill="rgb(247,202,23)" fg:x="19553" fg:w="46"/><text x="85.2224%" y="207.50"></text></g><g><title>cfree (46 samples, 0.20%)</title><rect x="84.9724%" y="181" width="0.1999%" height="15" fill="rgb(219,102,11)" fg:x="19553" fg:w="46"/><text x="85.2224%" y="191.50"></text></g><g><title>[libc.so.6] (37 samples, 0.16%)</title><rect x="85.0115%" y="165" width="0.1608%" height="15" fill="rgb(243,110,44)" fg:x="19562" fg:w="37"/><text x="85.2615%" y="175.50"></text></g><g><title>[libc.so.6] (24 samples, 0.10%)</title><rect x="85.0680%" y="149" width="0.1043%" height="15" fill="rgb(222,74,54)" fg:x="19575" fg:w="24"/><text x="85.3180%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (48 samples, 0.21%)</title><rect x="84.9681%" y="261" width="0.2086%" height="15" fill="rgb(216,99,12)" fg:x="19552" fg:w="48"/><text x="85.2181%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (48 samples, 0.21%)</title><rect x="84.9681%" y="245" width="0.2086%" height="15" fill="rgb(226,22,26)" fg:x="19552" fg:w="48"/><text x="85.2181%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.21%)</title><rect x="84.9681%" y="229" width="0.2086%" height="15" fill="rgb(217,163,10)" fg:x="19552" fg:w="48"/><text x="85.2181%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (64 samples, 0.28%)</title><rect x="85.6069%" y="197" width="0.2781%" height="15" fill="rgb(213,25,53)" fg:x="19699" fg:w="64"/><text x="85.8569%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (64 samples, 0.28%)</title><rect x="85.6069%" y="181" width="0.2781%" height="15" fill="rgb(252,105,26)" fg:x="19699" fg:w="64"/><text x="85.8569%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (64 samples, 0.28%)</title><rect x="85.6069%" y="165" width="0.2781%" height="15" fill="rgb(220,39,43)" fg:x="19699" fg:w="64"/><text x="85.8569%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.02%)</title><rect x="86.5629%" y="149" width="0.0217%" height="15" fill="rgb(229,68,48)" fg:x="19919" fg:w="5"/><text x="86.8129%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.03%)</title><rect x="86.5847%" y="149" width="0.0304%" height="15" fill="rgb(252,8,32)" fg:x="19924" fg:w="7"/><text x="86.8347%" y="159.50"></text></g><g><title>__rdl_realloc (16 samples, 0.07%)</title><rect x="86.6368%" y="85" width="0.0695%" height="15" fill="rgb(223,20,43)" fg:x="19936" fg:w="16"/><text x="86.8868%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (432 samples, 1.88%)</title><rect x="86.6368%" y="133" width="1.8774%" height="15" fill="rgb(229,81,49)" fg:x="19936" fg:w="432"/><text x="86.8868%" y="143.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (432 samples, 1.88%)</title><rect x="86.6368%" y="117" width="1.8774%" height="15" fill="rgb(236,28,36)" fg:x="19936" fg:w="432"/><text x="86.8868%" y="127.50">a..</text></g><g><title>alloc::alloc::realloc (432 samples, 1.88%)</title><rect x="86.6368%" y="101" width="1.8774%" height="15" fill="rgb(249,185,26)" fg:x="19936" fg:w="432"/><text x="86.8868%" y="111.50">a..</text></g><g><title>realloc (414 samples, 1.80%)</title><rect x="86.7150%" y="85" width="1.7991%" height="15" fill="rgb(249,174,33)" fg:x="19954" fg:w="414"/><text x="86.9650%" y="95.50">r..</text></g><g><title>[libc.so.6] (372 samples, 1.62%)</title><rect x="86.8976%" y="69" width="1.6166%" height="15" fill="rgb(233,201,37)" fg:x="19996" fg:w="372"/><text x="87.1476%" y="79.50"></text></g><g><title>[libc.so.6] (306 samples, 1.33%)</title><rect x="87.1844%" y="53" width="1.3298%" height="15" fill="rgb(221,78,26)" fg:x="20062" fg:w="306"/><text x="87.4344%" y="63.50"></text></g><g><title>[libc.so.6] (83 samples, 0.36%)</title><rect x="88.1535%" y="37" width="0.3607%" height="15" fill="rgb(250,127,30)" fg:x="20285" fg:w="83"/><text x="88.4035%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (441 samples, 1.92%)</title><rect x="86.6151%" y="149" width="1.9165%" height="15" fill="rgb(230,49,44)" fg:x="19931" fg:w="441"/><text x="86.8651%" y="159.50">a..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.02%)</title><rect x="88.5142%" y="133" width="0.0174%" height="15" fill="rgb(229,67,23)" fg:x="20368" fg:w="4"/><text x="88.7642%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (460 samples, 2.00%)</title><rect x="86.5543%" y="181" width="1.9990%" height="15" fill="rgb(249,83,47)" fg:x="19917" fg:w="460"/><text x="86.8043%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (460 samples, 2.00%)</title><rect x="86.5543%" y="165" width="1.9990%" height="15" fill="rgb(215,43,3)" fg:x="19917" fg:w="460"/><text x="86.8043%" y="175.50">a..</text></g><g><title>core::cmp::max (4 samples, 0.02%)</title><rect x="88.5359%" y="149" width="0.0174%" height="15" fill="rgb(238,154,13)" fg:x="20373" fg:w="4"/><text x="88.7859%" y="159.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.02%)</title><rect x="88.5359%" y="133" width="0.0174%" height="15" fill="rgb(219,56,2)" fg:x="20373" fg:w="4"/><text x="88.7859%" y="143.50"></text></g><g><title>core::cmp::max_by (4 samples, 0.02%)</title><rect x="88.5359%" y="117" width="0.0174%" height="15" fill="rgb(233,0,4)" fg:x="20373" fg:w="4"/><text x="88.7859%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.02%)</title><rect x="88.5533%" y="181" width="0.0217%" height="15" fill="rgb(235,30,7)" fg:x="20377" fg:w="5"/><text x="88.8033%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.02%)</title><rect x="88.5533%" y="165" width="0.0217%" height="15" fill="rgb(250,79,13)" fg:x="20377" fg:w="5"/><text x="88.8033%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.01%)</title><rect x="88.5750%" y="181" width="0.0130%" height="15" fill="rgb(211,146,34)" fg:x="20382" fg:w="3"/><text x="88.8250%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (630 samples, 2.74%)</title><rect x="85.8850%" y="197" width="2.7378%" height="15" fill="rgb(228,22,38)" fg:x="19763" fg:w="630"/><text x="86.1350%" y="207.50">al..</text></g><g><title>core::ptr::write (8 samples, 0.03%)</title><rect x="88.5881%" y="181" width="0.0348%" height="15" fill="rgb(235,168,5)" fg:x="20385" fg:w="8"/><text x="88.8381%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1,148 samples, 4.99%)</title><rect x="85.1984%" y="229" width="4.9889%" height="15" fill="rgb(221,155,16)" fg:x="19605" fg:w="1148"/><text x="85.4484%" y="239.50">&lt;core:..</text></g><g><title>itertools::extrema_set::min_set_impl::_{{closure}} (1,144 samples, 4.97%)</title><rect x="85.2158%" y="213" width="4.9715%" height="15" fill="rgb(215,215,53)" fg:x="19609" fg:w="1144"/><text x="85.4658%" y="223.50">iterto..</text></g><g><title>itertools::Itertools::min_set_by::_{{closure}} (360 samples, 1.56%)</title><rect x="88.6228%" y="197" width="1.5645%" height="15" fill="rgb(223,4,10)" fg:x="20393" fg:w="360"/><text x="88.8728%" y="207.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (360 samples, 1.56%)</title><rect x="88.6228%" y="181" width="1.5645%" height="15" fill="rgb(234,103,6)" fg:x="20393" fg:w="360"/><text x="88.8728%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::partial_cmp (350 samples, 1.52%)</title><rect x="88.6663%" y="165" width="1.5210%" height="15" fill="rgb(227,97,0)" fg:x="20403" fg:w="350"/><text x="88.9163%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i32&gt;::cmp (350 samples, 1.52%)</title><rect x="88.6663%" y="149" width="1.5210%" height="15" fill="rgb(234,150,53)" fg:x="20403" fg:w="350"/><text x="88.9163%" y="159.50"></text></g><g><title>main::compute_flowchange (8,430 samples, 36.63%)</title><rect x="53.6569%" y="277" width="36.6347%" height="15" fill="rgb(228,201,54)" fg:x="12347" fg:w="8430"/><text x="53.9069%" y="287.50">main::compute_flowchange</text></g><g><title>itertools::Itertools::min_set_by (1,176 samples, 5.11%)</title><rect x="85.1810%" y="261" width="5.1106%" height="15" fill="rgb(222,22,37)" fg:x="19601" fg:w="1176"/><text x="85.4310%" y="271.50">iterto..</text></g><g><title>itertools::extrema_set::min_set_impl (1,176 samples, 5.11%)</title><rect x="85.1810%" y="245" width="5.1106%" height="15" fill="rgb(237,53,32)" fg:x="19601" fg:w="1176"/><text x="85.4310%" y="255.50">iterto..</text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.10%)</title><rect x="90.1873%" y="229" width="0.1043%" height="15" fill="rgb(233,25,53)" fg:x="20753" fg:w="24"/><text x="90.4373%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.10%)</title><rect x="90.1873%" y="213" width="0.1043%" height="15" fill="rgb(210,40,34)" fg:x="20753" fg:w="24"/><text x="90.4373%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.10%)</title><rect x="90.1873%" y="197" width="0.1043%" height="15" fill="rgb(241,220,44)" fg:x="20753" fg:w="24"/><text x="90.4373%" y="207.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.10%)</title><rect x="90.1873%" y="181" width="0.1043%" height="15" fill="rgb(235,28,35)" fg:x="20753" fg:w="24"/><text x="90.4373%" y="191.50"></text></g><g><title>malloc (23 samples, 0.10%)</title><rect x="90.1916%" y="165" width="0.1000%" height="15" fill="rgb(210,56,17)" fg:x="20754" fg:w="23"/><text x="90.4416%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11 samples, 0.05%)</title><rect x="90.3133%" y="261" width="0.0478%" height="15" fill="rgb(224,130,29)" fg:x="20782" fg:w="11"/><text x="90.5633%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 0.05%)</title><rect x="90.3133%" y="245" width="0.0478%" height="15" fill="rgb(235,212,8)" fg:x="20782" fg:w="11"/><text x="90.5633%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9 samples, 0.04%)</title><rect x="90.3220%" y="229" width="0.0391%" height="15" fill="rgb(223,33,50)" fg:x="20784" fg:w="9"/><text x="90.5720%" y="239.50"></text></g><g><title>main::initialization::_{{closure}} (9 samples, 0.04%)</title><rect x="90.3220%" y="213" width="0.0391%" height="15" fill="rgb(219,149,13)" fg:x="20784" fg:w="9"/><text x="90.5720%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="90.3655%" y="149" width="0.0348%" height="15" fill="rgb(250,156,29)" fg:x="20794" fg:w="8"/><text x="90.6155%" y="159.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="90.3655%" y="133" width="0.0348%" height="15" fill="rgb(216,193,19)" fg:x="20794" fg:w="8"/><text x="90.6155%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (11 samples, 0.05%)</title><rect x="90.3611%" y="165" width="0.0478%" height="15" fill="rgb(216,135,14)" fg:x="20793" fg:w="11"/><text x="90.6111%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (13 samples, 0.06%)</title><rect x="90.3611%" y="245" width="0.0565%" height="15" fill="rgb(241,47,5)" fg:x="20793" fg:w="13"/><text x="90.6111%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (13 samples, 0.06%)</title><rect x="90.3611%" y="229" width="0.0565%" height="15" fill="rgb(233,42,35)" fg:x="20793" fg:w="13"/><text x="90.6111%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 0.06%)</title><rect x="90.3611%" y="213" width="0.0565%" height="15" fill="rgb(231,13,6)" fg:x="20793" fg:w="13"/><text x="90.6111%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (13 samples, 0.06%)</title><rect x="90.3611%" y="197" width="0.0565%" height="15" fill="rgb(207,181,40)" fg:x="20793" fg:w="13"/><text x="90.6111%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 0.06%)</title><rect x="90.3611%" y="181" width="0.0565%" height="15" fill="rgb(254,173,49)" fg:x="20793" fg:w="13"/><text x="90.6111%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.01%)</title><rect x="90.4176%" y="245" width="0.0130%" height="15" fill="rgb(221,1,38)" fg:x="20806" fg:w="3"/><text x="90.6676%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="90.4176%" y="229" width="0.0130%" height="15" fill="rgb(206,124,46)" fg:x="20806" fg:w="3"/><text x="90.6676%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="90.4176%" y="213" width="0.0130%" height="15" fill="rgb(249,21,11)" fg:x="20806" fg:w="3"/><text x="90.6676%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.01%)</title><rect x="90.4176%" y="197" width="0.0130%" height="15" fill="rgb(222,201,40)" fg:x="20806" fg:w="3"/><text x="90.6676%" y="207.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (3 samples, 0.01%)</title><rect x="90.4176%" y="181" width="0.0130%" height="15" fill="rgb(235,61,29)" fg:x="20806" fg:w="3"/><text x="90.6676%" y="191.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="90.4611%" y="213" width="0.0130%" height="15" fill="rgb(219,207,3)" fg:x="20816" fg:w="3"/><text x="90.7111%" y="223.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (11 samples, 0.05%)</title><rect x="90.4394%" y="245" width="0.0478%" height="15" fill="rgb(222,56,46)" fg:x="20811" fg:w="11"/><text x="90.6894%" y="255.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (8 samples, 0.03%)</title><rect x="90.4524%" y="229" width="0.0348%" height="15" fill="rgb(239,76,54)" fg:x="20814" fg:w="8"/><text x="90.7024%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="90.4872%" y="213" width="0.0130%" height="15" fill="rgb(231,124,27)" fg:x="20822" fg:w="3"/><text x="90.7372%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (3 samples, 0.01%)</title><rect x="90.4872%" y="197" width="0.0130%" height="15" fill="rgb(249,195,6)" fg:x="20822" fg:w="3"/><text x="90.7372%" y="207.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="90.4872%" y="181" width="0.0130%" height="15" fill="rgb(237,174,47)" fg:x="20822" fg:w="3"/><text x="90.7372%" y="191.50"></text></g><g><title>main::compute_node_potentials (35 samples, 0.15%)</title><rect x="90.3611%" y="261" width="0.1521%" height="15" fill="rgb(206,201,31)" fg:x="20793" fg:w="35"/><text x="90.6111%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (6 samples, 0.03%)</title><rect x="90.4872%" y="245" width="0.0261%" height="15" fill="rgb(231,57,52)" fg:x="20822" fg:w="6"/><text x="90.7372%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (6 samples, 0.03%)</title><rect x="90.4872%" y="229" width="0.0261%" height="15" fill="rgb(248,177,22)" fg:x="20822" fg:w="6"/><text x="90.7372%" y="239.50"></text></g><g><title>main::initialization (55 samples, 0.24%)</title><rect x="90.2916%" y="277" width="0.2390%" height="15" fill="rgb(215,211,37)" fg:x="20777" fg:w="55"/><text x="90.5416%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (4 samples, 0.02%)</title><rect x="90.5132%" y="261" width="0.0174%" height="15" fill="rgb(241,128,51)" fg:x="20828" fg:w="4"/><text x="90.7632%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (36 samples, 0.16%)</title><rect x="90.7044%" y="261" width="0.1564%" height="15" fill="rgb(227,165,31)" fg:x="20872" fg:w="36"/><text x="90.9544%" y="271.50"></text></g><g><title>main::update_node_potentials (94 samples, 0.41%)</title><rect x="90.5306%" y="277" width="0.4085%" height="15" fill="rgb(228,167,24)" fg:x="20832" fg:w="94"/><text x="90.7806%" y="287.50"></text></g><g><title>main::get_reduced_cost_edgeindex (18 samples, 0.08%)</title><rect x="90.8609%" y="261" width="0.0782%" height="15" fill="rgb(228,143,12)" fg:x="20908" fg:w="18"/><text x="91.1109%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (6 samples, 0.03%)</title><rect x="90.9130%" y="245" width="0.0261%" height="15" fill="rgb(249,149,8)" fg:x="20920" fg:w="6"/><text x="91.1630%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (16 samples, 0.07%)</title><rect x="98.3443%" y="261" width="0.0695%" height="15" fill="rgb(243,35,44)" fg:x="22630" fg:w="16"/><text x="98.5943%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16 samples, 0.07%)</title><rect x="98.3443%" y="245" width="0.0695%" height="15" fill="rgb(246,89,9)" fg:x="22630" fg:w="16"/><text x="98.5943%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (16 samples, 0.07%)</title><rect x="98.3443%" y="229" width="0.0695%" height="15" fill="rgb(233,213,13)" fg:x="22630" fg:w="16"/><text x="98.5943%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.03%)</title><rect x="98.5963%" y="213" width="0.0261%" height="15" fill="rgb(233,141,41)" fg:x="22688" fg:w="6"/><text x="98.8463%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.03%)</title><rect x="98.5963%" y="197" width="0.0261%" height="15" fill="rgb(239,167,4)" fg:x="22688" fg:w="6"/><text x="98.8463%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.03%)</title><rect x="98.5963%" y="181" width="0.0261%" height="15" fill="rgb(209,217,16)" fg:x="22688" fg:w="6"/><text x="98.8463%" y="191.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (12 samples, 0.05%)</title><rect x="98.6224%" y="213" width="0.0521%" height="15" fill="rgb(219,88,35)" fg:x="22694" fg:w="12"/><text x="98.8724%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (62 samples, 0.27%)</title><rect x="98.4138%" y="261" width="0.2694%" height="15" fill="rgb(220,193,23)" fg:x="22646" fg:w="62"/><text x="98.6638%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (62 samples, 0.27%)</title><rect x="98.4138%" y="245" width="0.2694%" height="15" fill="rgb(230,90,52)" fg:x="22646" fg:w="62"/><text x="98.6638%" y="255.50"></text></g><g><title>main::update_sptree::_{{closure}} (62 samples, 0.27%)</title><rect x="98.4138%" y="229" width="0.2694%" height="15" fill="rgb(252,106,19)" fg:x="22646" fg:w="62"/><text x="98.6638%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.04%)</title><rect x="98.7832%" y="229" width="0.0391%" height="15" fill="rgb(206,74,20)" fg:x="22731" fg:w="9"/><text x="99.0332%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.04%)</title><rect x="98.7832%" y="213" width="0.0391%" height="15" fill="rgb(230,138,44)" fg:x="22731" fg:w="9"/><text x="99.0332%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.04%)</title><rect x="98.7832%" y="197" width="0.0391%" height="15" fill="rgb(235,182,43)" fg:x="22731" fg:w="9"/><text x="99.0332%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (72 samples, 0.31%)</title><rect x="98.6919%" y="261" width="0.3129%" height="15" fill="rgb(242,16,51)" fg:x="22710" fg:w="72"/><text x="98.9419%" y="271.50"></text></g><g><title>main::update_sptree::_{{closure}} (67 samples, 0.29%)</title><rect x="98.7137%" y="245" width="0.2912%" height="15" fill="rgb(248,9,4)" fg:x="22715" fg:w="67"/><text x="98.9637%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (42 samples, 0.18%)</title><rect x="98.8223%" y="229" width="0.1825%" height="15" fill="rgb(210,31,22)" fg:x="22740" fg:w="42"/><text x="99.0723%" y="239.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (6 samples, 0.03%)</title><rect x="99.0048%" y="261" width="0.0261%" height="15" fill="rgb(239,54,39)" fg:x="22782" fg:w="6"/><text x="99.2548%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (27 samples, 0.12%)</title><rect x="99.0874%" y="197" width="0.1173%" height="15" fill="rgb(230,99,41)" fg:x="22801" fg:w="27"/><text x="99.3374%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (27 samples, 0.12%)</title><rect x="99.0874%" y="181" width="0.1173%" height="15" fill="rgb(253,106,12)" fg:x="22801" fg:w="27"/><text x="99.3374%" y="191.50"></text></g><g><title>alloc::alloc::realloc (26 samples, 0.11%)</title><rect x="99.0917%" y="165" width="0.1130%" height="15" fill="rgb(213,46,41)" fg:x="22802" fg:w="26"/><text x="99.3417%" y="175.50"></text></g><g><title>realloc (25 samples, 0.11%)</title><rect x="99.0961%" y="149" width="0.1086%" height="15" fill="rgb(215,133,35)" fg:x="22803" fg:w="25"/><text x="99.3461%" y="159.50"></text></g><g><title>[libc.so.6] (23 samples, 0.10%)</title><rect x="99.1048%" y="133" width="0.1000%" height="15" fill="rgb(213,28,5)" fg:x="22805" fg:w="23"/><text x="99.3548%" y="143.50"></text></g><g><title>[libc.so.6] (17 samples, 0.07%)</title><rect x="99.1309%" y="117" width="0.0739%" height="15" fill="rgb(215,77,49)" fg:x="22811" fg:w="17"/><text x="99.3809%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.13%)</title><rect x="99.0744%" y="245" width="0.1347%" height="15" fill="rgb(248,100,22)" fg:x="22798" fg:w="31"/><text x="99.3244%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (31 samples, 0.13%)</title><rect x="99.0744%" y="229" width="0.1347%" height="15" fill="rgb(208,67,9)" fg:x="22798" fg:w="31"/><text x="99.3244%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 0.12%)</title><rect x="99.0874%" y="213" width="0.1217%" height="15" fill="rgb(219,133,21)" fg:x="22801" fg:w="28"/><text x="99.3374%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (45 samples, 0.20%)</title><rect x="99.0352%" y="261" width="0.1956%" height="15" fill="rgb(246,46,29)" fg:x="22789" fg:w="45"/><text x="99.2852%" y="271.50"></text></g><g><title>core::ptr::write (4 samples, 0.02%)</title><rect x="99.2134%" y="245" width="0.0174%" height="15" fill="rgb(246,185,52)" fg:x="22830" fg:w="4"/><text x="99.4634%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 0.17%)</title><rect x="99.2351%" y="229" width="0.1651%" height="15" fill="rgb(252,136,11)" fg:x="22835" fg:w="38"/><text x="99.4851%" y="239.50"></text></g><g><title>core::ptr::write (36 samples, 0.16%)</title><rect x="99.2438%" y="213" width="0.1564%" height="15" fill="rgb(219,138,53)" fg:x="22837" fg:w="36"/><text x="99.4938%" y="223.50"></text></g><g><title>alloc::vec::from_elem (79 samples, 0.34%)</title><rect x="99.2308%" y="261" width="0.3433%" height="15" fill="rgb(211,51,23)" fg:x="22834" fg:w="79"/><text x="99.4808%" y="271.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (79 samples, 0.34%)</title><rect x="99.2308%" y="245" width="0.3433%" height="15" fill="rgb(247,221,28)" fg:x="22834" fg:w="79"/><text x="99.4808%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40 samples, 0.17%)</title><rect x="99.4003%" y="229" width="0.1738%" height="15" fill="rgb(251,222,45)" fg:x="22873" fg:w="40"/><text x="99.6503%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40 samples, 0.17%)</title><rect x="99.4003%" y="213" width="0.1738%" height="15" fill="rgb(217,162,53)" fg:x="22873" fg:w="40"/><text x="99.6503%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (40 samples, 0.17%)</title><rect x="99.4003%" y="197" width="0.1738%" height="15" fill="rgb(229,93,14)" fg:x="22873" fg:w="40"/><text x="99.6503%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.17%)</title><rect x="99.4046%" y="181" width="0.1695%" height="15" fill="rgb(209,67,49)" fg:x="22874" fg:w="39"/><text x="99.6546%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.17%)</title><rect x="99.4046%" y="165" width="0.1695%" height="15" fill="rgb(213,87,29)" fg:x="22874" fg:w="39"/><text x="99.6546%" y="175.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.17%)</title><rect x="99.4046%" y="149" width="0.1695%" height="15" fill="rgb(205,151,52)" fg:x="22874" fg:w="39"/><text x="99.6546%" y="159.50"></text></g><g><title>malloc (39 samples, 0.17%)</title><rect x="99.4046%" y="133" width="0.1695%" height="15" fill="rgb(253,215,39)" fg:x="22874" fg:w="39"/><text x="99.6546%" y="143.50"></text></g><g><title>[libc.so.6] (31 samples, 0.13%)</title><rect x="99.4394%" y="117" width="0.1347%" height="15" fill="rgb(221,220,41)" fg:x="22882" fg:w="31"/><text x="99.6894%" y="127.50"></text></g><g><title>[libc.so.6] (11 samples, 0.05%)</title><rect x="99.5263%" y="101" width="0.0478%" height="15" fill="rgb(218,133,21)" fg:x="22902" fg:w="11"/><text x="99.7763%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 0.03%)</title><rect x="99.5741%" y="261" width="0.0261%" height="15" fill="rgb(221,193,43)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.03%)</title><rect x="99.5741%" y="245" width="0.0261%" height="15" fill="rgb(240,128,52)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.03%)</title><rect x="99.5741%" y="229" width="0.0261%" height="15" fill="rgb(253,114,12)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 0.03%)</title><rect x="99.5741%" y="213" width="0.0261%" height="15" fill="rgb(215,223,47)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.03%)</title><rect x="99.5741%" y="197" width="0.0261%" height="15" fill="rgb(248,225,23)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6 samples, 0.03%)</title><rect x="99.5741%" y="181" width="0.0261%" height="15" fill="rgb(250,108,0)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.03%)</title><rect x="99.5741%" y="165" width="0.0261%" height="15" fill="rgb(228,208,7)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.03%)</title><rect x="99.5741%" y="149" width="0.0261%" height="15" fill="rgb(244,45,10)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.03%)</title><rect x="99.5741%" y="133" width="0.0261%" height="15" fill="rgb(207,125,25)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="143.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6 samples, 0.03%)</title><rect x="99.5741%" y="117" width="0.0261%" height="15" fill="rgb(210,195,18)" fg:x="22913" fg:w="6"/><text x="99.8241%" y="127.50"></text></g><g><title>main::update_sptree::_{{closure}} (5 samples, 0.02%)</title><rect x="99.5785%" y="101" width="0.0217%" height="15" fill="rgb(249,80,12)" fg:x="22914" fg:w="5"/><text x="99.8285%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="99.6002%" y="245" width="0.0130%" height="15" fill="rgb(221,65,9)" fg:x="22919" fg:w="3"/><text x="99.8502%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 0.02%)</title><rect x="99.6219%" y="229" width="0.0217%" height="15" fill="rgb(235,49,36)" fg:x="22924" fg:w="5"/><text x="99.8719%" y="239.50"></text></g><g><title>main::update_sptree::_{{closure}} (5 samples, 0.02%)</title><rect x="99.6219%" y="213" width="0.0217%" height="15" fill="rgb(225,32,20)" fg:x="22924" fg:w="5"/><text x="99.8719%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11 samples, 0.05%)</title><rect x="99.6002%" y="261" width="0.0478%" height="15" fill="rgb(215,141,46)" fg:x="22919" fg:w="11"/><text x="99.8502%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.03%)</title><rect x="99.6132%" y="245" width="0.0348%" height="15" fill="rgb(250,160,47)" fg:x="22922" fg:w="8"/><text x="99.8632%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (18 samples, 0.08%)</title><rect x="99.6480%" y="261" width="0.0782%" height="15" fill="rgb(216,222,40)" fg:x="22930" fg:w="18"/><text x="99.8980%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (32 samples, 0.14%)</title><rect x="99.7262%" y="213" width="0.1391%" height="15" fill="rgb(234,217,39)" fg:x="22948" fg:w="32"/><text x="99.9762%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (32 samples, 0.14%)</title><rect x="99.7262%" y="197" width="0.1391%" height="15" fill="rgb(207,178,40)" fg:x="22948" fg:w="32"/><text x="99.9762%" y="207.50"></text></g><g><title>cfree (31 samples, 0.13%)</title><rect x="99.7306%" y="181" width="0.1347%" height="15" fill="rgb(221,136,13)" fg:x="22949" fg:w="31"/><text x="99.9806%" y="191.50"></text></g><g><title>[libc.so.6] (24 samples, 0.10%)</title><rect x="99.7610%" y="165" width="0.1043%" height="15" fill="rgb(249,199,10)" fg:x="22956" fg:w="24"/><text x="100.0110%" y="175.50"></text></g><g><title>[libc.so.6] (8 samples, 0.03%)</title><rect x="99.8305%" y="149" width="0.0348%" height="15" fill="rgb(249,222,13)" fg:x="22972" fg:w="8"/><text x="100.0805%" y="159.50"></text></g><g><title>main::min_cost (22,904 samples, 99.54%)</title><rect x="0.3390%" y="293" width="99.5350%" height="15" fill="rgb(244,185,38)" fg:x="78" fg:w="22904"/><text x="0.5890%" y="303.50">main::min_cost</text></g><g><title>main::update_sptree (2,056 samples, 8.93%)</title><rect x="90.9391%" y="277" width="8.9349%" height="15" fill="rgb(236,202,9)" fg:x="20926" fg:w="2056"/><text x="91.1891%" y="287.50">main::update_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (34 samples, 0.15%)</title><rect x="99.7262%" y="261" width="0.1478%" height="15" fill="rgb(250,229,37)" fg:x="22948" fg:w="34"/><text x="99.9762%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (34 samples, 0.15%)</title><rect x="99.7262%" y="245" width="0.1478%" height="15" fill="rgb(206,174,23)" fg:x="22948" fg:w="34"/><text x="99.9762%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.15%)</title><rect x="99.7262%" y="229" width="0.1478%" height="15" fill="rgb(211,33,43)" fg:x="22948" fg:w="34"/><text x="99.9762%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.03%)</title><rect x="99.8827%" y="277" width="0.0261%" height="15" fill="rgb(245,58,50)" fg:x="22984" fg:w="6"/><text x="100.1327%" y="287.50"></text></g><g><title>core::ptr::write (5 samples, 0.02%)</title><rect x="99.8870%" y="261" width="0.0217%" height="15" fill="rgb(244,68,36)" fg:x="22985" fg:w="5"/><text x="100.1370%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (10 samples, 0.04%)</title><rect x="99.8740%" y="293" width="0.0435%" height="15" fill="rgb(232,229,15)" fg:x="22982" fg:w="10"/><text x="100.1240%" y="303.50"></text></g><g><title>_start (22,924 samples, 99.62%)</title><rect x="0.3172%" y="437" width="99.6219%" height="15" fill="rgb(254,30,23)" fg:x="73" fg:w="22924"/><text x="0.5672%" y="447.50">_start</text></g><g><title>__libc_start_main (22,924 samples, 99.62%)</title><rect x="0.3172%" y="421" width="99.6219%" height="15" fill="rgb(235,160,14)" fg:x="73" fg:w="22924"/><text x="0.5672%" y="431.50">__libc_start_main</text></g><g><title>[libc.so.6] (22,924 samples, 99.62%)</title><rect x="0.3172%" y="405" width="99.6219%" height="15" fill="rgb(212,155,44)" fg:x="73" fg:w="22924"/><text x="0.5672%" y="415.50">[libc.so.6]</text></g><g><title>main (22,924 samples, 99.62%)</title><rect x="0.3172%" y="389" width="99.6219%" height="15" fill="rgb(226,2,50)" fg:x="73" fg:w="22924"/><text x="0.5672%" y="399.50">main</text></g><g><title>std::rt::lang_start_internal (22,924 samples, 99.62%)</title><rect x="0.3172%" y="373" width="99.6219%" height="15" fill="rgb(234,177,6)" fg:x="73" fg:w="22924"/><text x="0.5672%" y="383.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (22,924 samples, 99.62%)</title><rect x="0.3172%" y="357" width="99.6219%" height="15" fill="rgb(217,24,9)" fg:x="73" fg:w="22924"/><text x="0.5672%" y="367.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22,924 samples, 99.62%)</title><rect x="0.3172%" y="341" width="99.6219%" height="15" fill="rgb(220,13,46)" fg:x="73" fg:w="22924"/><text x="0.5672%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (22,924 samples, 99.62%)</title><rect x="0.3172%" y="325" width="99.6219%" height="15" fill="rgb(239,221,27)" fg:x="73" fg:w="22924"/><text x="0.5672%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (22,924 samples, 99.62%)</title><rect x="0.3172%" y="309" width="99.6219%" height="15" fill="rgb(222,198,25)" fg:x="73" fg:w="22924"/><text x="0.5672%" y="319.50">main::main</text></g><g><title>rand::rng::Rng::gen (4 samples, 0.02%)</title><rect x="99.9218%" y="293" width="0.0174%" height="15" fill="rgb(211,99,13)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="303.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (4 samples, 0.02%)</title><rect x="99.9218%" y="277" width="0.0174%" height="15" fill="rgb(232,111,31)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="287.50"></text></g><g><title>rand::rng::Rng::gen (4 samples, 0.02%)</title><rect x="99.9218%" y="261" width="0.0174%" height="15" fill="rgb(245,82,37)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="271.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (4 samples, 0.02%)</title><rect x="99.9218%" y="245" width="0.0174%" height="15" fill="rgb(227,149,46)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="255.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (4 samples, 0.02%)</title><rect x="99.9218%" y="229" width="0.0174%" height="15" fill="rgb(218,36,50)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="239.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (4 samples, 0.02%)</title><rect x="99.9218%" y="213" width="0.0174%" height="15" fill="rgb(226,80,48)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="223.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (4 samples, 0.02%)</title><rect x="99.9218%" y="197" width="0.0174%" height="15" fill="rgb(238,224,15)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="207.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (4 samples, 0.02%)</title><rect x="99.9218%" y="181" width="0.0174%" height="15" fill="rgb(241,136,10)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="191.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (4 samples, 0.02%)</title><rect x="99.9218%" y="165" width="0.0174%" height="15" fill="rgb(208,32,45)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="175.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (4 samples, 0.02%)</title><rect x="99.9218%" y="149" width="0.0174%" height="15" fill="rgb(207,135,9)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="159.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (4 samples, 0.02%)</title><rect x="99.9218%" y="133" width="0.0174%" height="15" fill="rgb(206,86,44)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (4 samples, 0.02%)</title><rect x="99.9218%" y="117" width="0.0174%" height="15" fill="rgb(245,177,15)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (4 samples, 0.02%)</title><rect x="99.9218%" y="101" width="0.0174%" height="15" fill="rgb(206,64,50)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="111.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (4 samples, 0.02%)</title><rect x="99.9218%" y="85" width="0.0174%" height="15" fill="rgb(234,36,40)" fg:x="22993" fg:w="4"/><text x="100.1718%" y="95.50"></text></g><g><title>rand_chacha::guts::round (3 samples, 0.01%)</title><rect x="99.9261%" y="69" width="0.0130%" height="15" fill="rgb(213,64,8)" fg:x="22994" fg:w="3"/><text x="100.1761%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (5 samples, 0.02%)</title><rect x="99.9609%" y="405" width="0.0217%" height="15" fill="rgb(210,75,36)" fg:x="23002" fg:w="5"/><text x="100.2109%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (5 samples, 0.02%)</title><rect x="99.9609%" y="389" width="0.0217%" height="15" fill="rgb(229,88,21)" fg:x="23002" fg:w="5"/><text x="100.2109%" y="399.50"></text></g><g><title>main::min_cost (11 samples, 0.05%)</title><rect x="99.9435%" y="437" width="0.0478%" height="15" fill="rgb(252,204,47)" fg:x="22998" fg:w="11"/><text x="100.1935%" y="447.50"></text></g><g><title>main::compute_flowchange (11 samples, 0.05%)</title><rect x="99.9435%" y="421" width="0.0478%" height="15" fill="rgb(208,77,27)" fg:x="22998" fg:w="11"/><text x="100.1935%" y="431.50"></text></g><g><title>all (23,011 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="23011"/><text x="0.2500%" y="479.50"></text></g><g><title>main (23,011 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="23011"/><text x="0.2500%" y="463.50">main</text></g></svg></svg>