<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="243134"><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (41 samples, 0.02%)</title><rect x="0.1588%" y="373" width="0.0169%" height="15" fill="rgb(227,0,7)" fg:x="386" fg:w="41"/><text x="0.4088%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (41 samples, 0.02%)</title><rect x="0.1588%" y="357" width="0.0169%" height="15" fill="rgb(217,0,24)" fg:x="386" fg:w="41"/><text x="0.4088%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (41 samples, 0.02%)</title><rect x="0.1588%" y="341" width="0.0169%" height="15" fill="rgb(221,193,54)" fg:x="386" fg:w="41"/><text x="0.4088%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (227 samples, 0.09%)</title><rect x="0.1789%" y="357" width="0.0934%" height="15" fill="rgb(248,212,6)" fg:x="435" fg:w="227"/><text x="0.4289%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (227 samples, 0.09%)</title><rect x="0.1789%" y="341" width="0.0934%" height="15" fill="rgb(208,68,35)" fg:x="435" fg:w="227"/><text x="0.4289%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (225 samples, 0.09%)</title><rect x="0.1797%" y="325" width="0.0925%" height="15" fill="rgb(232,128,0)" fg:x="437" fg:w="225"/><text x="0.4297%" y="335.50"></text></g><g><title>main::min_cost::_{{closure}} (225 samples, 0.09%)</title><rect x="0.1797%" y="309" width="0.0925%" height="15" fill="rgb(207,160,47)" fg:x="437" fg:w="225"/><text x="0.4297%" y="319.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (59 samples, 0.02%)</title><rect x="0.2480%" y="293" width="0.0243%" height="15" fill="rgb(228,23,34)" fg:x="603" fg:w="59"/><text x="0.4980%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (411 samples, 0.17%)</title><rect x="3.3878%" y="101" width="0.1690%" height="15" fill="rgb(218,30,26)" fg:x="8237" fg:w="411"/><text x="3.6378%" y="111.50"></text></g><g><title>core::cmp::min_by (411 samples, 0.17%)</title><rect x="3.3878%" y="85" width="0.1690%" height="15" fill="rgb(220,122,19)" fg:x="8237" fg:w="411"/><text x="3.6378%" y="95.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (184 samples, 0.08%)</title><rect x="3.7037%" y="85" width="0.0757%" height="15" fill="rgb(250,228,42)" fg:x="9005" fg:w="184"/><text x="3.9537%" y="95.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (168 samples, 0.07%)</title><rect x="3.7794%" y="85" width="0.0691%" height="15" fill="rgb(240,193,28)" fg:x="9189" fg:w="168"/><text x="4.0294%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (44 samples, 0.02%)</title><rect x="3.8304%" y="69" width="0.0181%" height="15" fill="rgb(216,20,37)" fg:x="9313" fg:w="44"/><text x="4.0804%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (44 samples, 0.02%)</title><rect x="3.8304%" y="53" width="0.0181%" height="15" fill="rgb(206,188,39)" fg:x="9313" fg:w="44"/><text x="4.0804%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (44 samples, 0.02%)</title><rect x="3.8304%" y="37" width="0.0181%" height="15" fill="rgb(217,207,13)" fg:x="9313" fg:w="44"/><text x="4.0804%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (142 samples, 0.06%)</title><rect x="3.8728%" y="69" width="0.0584%" height="15" fill="rgb(231,73,38)" fg:x="9416" fg:w="142"/><text x="4.1228%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (142 samples, 0.06%)</title><rect x="3.8728%" y="53" width="0.0584%" height="15" fill="rgb(225,20,46)" fg:x="9416" fg:w="142"/><text x="4.1228%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (142 samples, 0.06%)</title><rect x="3.8728%" y="37" width="0.0584%" height="15" fill="rgb(210,31,41)" fg:x="9416" fg:w="142"/><text x="4.1228%" y="47.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (170 samples, 0.07%)</title><rect x="3.9312%" y="69" width="0.0699%" height="15" fill="rgb(221,200,47)" fg:x="9558" fg:w="170"/><text x="4.1812%" y="79.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (59 samples, 0.02%)</title><rect x="4.0011%" y="69" width="0.0243%" height="15" fill="rgb(226,26,5)" fg:x="9728" fg:w="59"/><text x="4.2511%" y="79.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (487 samples, 0.20%)</title><rect x="4.0254%" y="69" width="0.2003%" height="15" fill="rgb(249,33,26)" fg:x="9787" fg:w="487"/><text x="4.2754%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (2,200 samples, 0.90%)</title><rect x="3.3229%" y="165" width="0.9049%" height="15" fill="rgb(235,183,28)" fg:x="8079" fg:w="2200"/><text x="3.5729%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (2,200 samples, 0.90%)</title><rect x="3.3229%" y="149" width="0.9049%" height="15" fill="rgb(221,5,38)" fg:x="8079" fg:w="2200"/><text x="3.5729%" y="159.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (2,042 samples, 0.84%)</title><rect x="3.3878%" y="133" width="0.8399%" height="15" fill="rgb(247,18,42)" fg:x="8237" fg:w="2042"/><text x="3.6378%" y="143.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,042 samples, 0.84%)</title><rect x="3.3878%" y="117" width="0.8399%" height="15" fill="rgb(241,131,45)" fg:x="8237" fg:w="2042"/><text x="3.6378%" y="127.50"></text></g><g><title>main::_find_block_search::_{{closure}} (1,631 samples, 0.67%)</title><rect x="3.5569%" y="101" width="0.6708%" height="15" fill="rgb(249,31,29)" fg:x="8648" fg:w="1631"/><text x="3.8069%" y="111.50"></text></g><g><title>main::get_reduced_cost_edgeindex (922 samples, 0.38%)</title><rect x="3.8485%" y="85" width="0.3792%" height="15" fill="rgb(225,111,53)" fg:x="9357" fg:w="922"/><text x="4.0985%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (41,029 samples, 16.88%)</title><rect x="10.2696%" y="101" width="16.8751%" height="15" fill="rgb(238,160,17)" fg:x="24969" fg:w="41029"/><text x="10.5196%" y="111.50">core::iter::traits::iterat..</text></g><g><title>core::cmp::min_by (41,029 samples, 16.88%)</title><rect x="10.2696%" y="85" width="16.8751%" height="15" fill="rgb(214,148,48)" fg:x="24969" fg:w="41029"/><text x="10.5196%" y="95.50">core::cmp::min_by</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (38,969 samples, 16.03%)</title><rect x="30.9064%" y="85" width="16.0278%" height="15" fill="rgb(232,36,49)" fg:x="75144" fg:w="38969"/><text x="31.1564%" y="95.50">&lt;i32 as core::ops::arith:..</text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (17,470 samples, 7.19%)</title><rect x="46.9342%" y="85" width="7.1853%" height="15" fill="rgb(209,103,24)" fg:x="114113" fg:w="17470"/><text x="47.1842%" y="95.50">&lt;petgraph:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7,608 samples, 3.13%)</title><rect x="50.9904%" y="69" width="3.1291%" height="15" fill="rgb(229,88,8)" fg:x="123975" fg:w="7608"/><text x="51.2404%" y="79.50">&lt;al..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7,608 samples, 3.13%)</title><rect x="50.9904%" y="53" width="3.1291%" height="15" fill="rgb(213,181,19)" fg:x="123975" fg:w="7608"/><text x="51.2404%" y="63.50">cor..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7,608 samples, 3.13%)</title><rect x="50.9904%" y="37" width="3.1291%" height="15" fill="rgb(254,191,54)" fg:x="123975" fg:w="7608"/><text x="51.2404%" y="47.50">&lt;us..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11,076 samples, 4.56%)</title><rect x="57.4494%" y="69" width="4.5555%" height="15" fill="rgb(241,83,37)" fg:x="139679" fg:w="11076"/><text x="57.6994%" y="79.50">&lt;allo..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11,076 samples, 4.56%)</title><rect x="57.4494%" y="53" width="4.5555%" height="15" fill="rgb(233,36,39)" fg:x="139679" fg:w="11076"/><text x="57.6994%" y="63.50">core:..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11,076 samples, 4.56%)</title><rect x="57.4494%" y="37" width="4.5555%" height="15" fill="rgb(226,3,54)" fg:x="139679" fg:w="11076"/><text x="57.6994%" y="47.50">&lt;usiz..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (15,090 samples, 6.21%)</title><rect x="62.0049%" y="69" width="6.2065%" height="15" fill="rgb(245,192,40)" fg:x="150755" fg:w="15090"/><text x="62.2549%" y="79.50">&lt;i32 as ..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (14,127 samples, 5.81%)</title><rect x="68.2114%" y="69" width="5.8104%" height="15" fill="rgb(238,167,29)" fg:x="165845" fg:w="14127"/><text x="68.4614%" y="79.50">&lt;i32 as..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (44,183 samples, 18.17%)</title><rect x="74.0217%" y="69" width="18.1723%" height="15" fill="rgb(232,182,51)" fg:x="179972" fg:w="44183"/><text x="74.2717%" y="79.50">petgraph::graph_impl::Edge&lt;E..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (217,489 samples, 89.45%)</title><rect x="3.1789%" y="181" width="89.4523%" height="15" fill="rgb(231,60,39)" fg:x="7729" fg:w="217489"/><text x="3.4289%" y="191.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (214,939 samples, 88.40%)</title><rect x="4.2277%" y="165" width="88.4035%" height="15" fill="rgb(208,69,12)" fg:x="10279" fg:w="214939"/><text x="4.4777%" y="175.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (200,697 samples, 82.55%)</title><rect x="10.0854%" y="149" width="82.5458%" height="15" fill="rgb(235,93,37)" fg:x="24521" fg:w="200697"/><text x="10.3354%" y="159.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}}</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (200,249 samples, 82.36%)</title><rect x="10.2696%" y="133" width="82.3616%" height="15" fill="rgb(213,116,39)" fg:x="24969" fg:w="200249"/><text x="10.5196%" y="143.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (200,249 samples, 82.36%)</title><rect x="10.2696%" y="117" width="82.3616%" height="15" fill="rgb(222,207,29)" fg:x="24969" fg:w="200249"/><text x="10.5196%" y="127.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>main::_find_block_search::_{{closure}} (159,220 samples, 65.49%)</title><rect x="27.1447%" y="101" width="65.4865%" height="15" fill="rgb(206,96,30)" fg:x="65998" fg:w="159220"/><text x="27.3947%" y="111.50">main::_find_block_search::_{{closure}}</text></g><g><title>main::get_reduced_cost_edgeindex (93,635 samples, 38.51%)</title><rect x="54.1195%" y="85" width="38.5117%" height="15" fill="rgb(218,138,4)" fg:x="131583" fg:w="93635"/><text x="54.3695%" y="95.50">main::get_reduced_cost_edgeindex</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (1,063 samples, 0.44%)</title><rect x="92.1940%" y="69" width="0.4372%" height="15" fill="rgb(250,191,14)" fg:x="224155" fg:w="1063"/><text x="92.4440%" y="79.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6,885 samples, 2.83%)</title><rect x="92.6312%" y="165" width="2.8318%" height="15" fill="rgb(239,60,40)" fg:x="225218" fg:w="6885"/><text x="92.8812%" y="175.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (231,475 samples, 95.20%)</title><rect x="0.2801%" y="309" width="95.2047%" height="15" fill="rgb(206,27,48)" fg:x="681" fg:w="231475"/><text x="0.5301%" y="319.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (231,475 samples, 95.20%)</title><rect x="0.2801%" y="293" width="95.2047%" height="15" fill="rgb(225,35,8)" fg:x="681" fg:w="231475"/><text x="0.5301%" y="303.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (231,475 samples, 95.20%)</title><rect x="0.2801%" y="277" width="95.2047%" height="15" fill="rgb(250,213,24)" fg:x="681" fg:w="231475"/><text x="0.5301%" y="287.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (231,475 samples, 95.20%)</title><rect x="0.2801%" y="261" width="95.2047%" height="15" fill="rgb(247,123,22)" fg:x="681" fg:w="231475"/><text x="0.5301%" y="271.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (231,475 samples, 95.20%)</title><rect x="0.2801%" y="245" width="95.2047%" height="15" fill="rgb(231,138,38)" fg:x="681" fg:w="231475"/><text x="0.5301%" y="255.50">&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (231,475 samples, 95.20%)</title><rect x="0.2801%" y="229" width="95.2047%" height="15" fill="rgb(231,145,46)" fg:x="681" fg:w="231475"/><text x="0.5301%" y="239.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (231,475 samples, 95.20%)</title><rect x="0.2801%" y="213" width="95.2047%" height="15" fill="rgb(251,118,11)" fg:x="681" fg:w="231475"/><text x="0.5301%" y="223.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (231,475 samples, 95.20%)</title><rect x="0.2801%" y="197" width="95.2047%" height="15" fill="rgb(217,147,25)" fg:x="681" fg:w="231475"/><text x="0.5301%" y="207.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,938 samples, 2.85%)</title><rect x="92.6312%" y="181" width="2.8536%" height="15" fill="rgb(247,81,37)" fg:x="225218" fg:w="6938"/><text x="92.8812%" y="191.50">&lt;c..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (53 samples, 0.02%)</title><rect x="95.4630%" y="165" width="0.0218%" height="15" fill="rgb(209,12,38)" fg:x="232103" fg:w="53"/><text x="95.7130%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (53 samples, 0.02%)</title><rect x="95.4630%" y="149" width="0.0218%" height="15" fill="rgb(227,1,9)" fg:x="232103" fg:w="53"/><text x="95.7130%" y="159.50"></text></g><g><title>main::_find_block_search (231,488 samples, 95.21%)</title><rect x="0.2772%" y="357" width="95.2100%" height="15" fill="rgb(248,47,43)" fg:x="674" fg:w="231488"/><text x="0.5272%" y="367.50">main::_find_block_search</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (231,481 samples, 95.21%)</title><rect x="0.2801%" y="341" width="95.2072%" height="15" fill="rgb(221,10,30)" fg:x="681" fg:w="231481"/><text x="0.5301%" y="351.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (231,481 samples, 95.21%)</title><rect x="0.2801%" y="325" width="95.2072%" height="15" fill="rgb(210,229,1)" fg:x="681" fg:w="231481"/><text x="0.5301%" y="335.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (425 samples, 0.17%)</title><rect x="95.4889%" y="341" width="0.1748%" height="15" fill="rgb(222,148,37)" fg:x="232166" fg:w="425"/><text x="95.7389%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (425 samples, 0.17%)</title><rect x="95.4889%" y="325" width="0.1748%" height="15" fill="rgb(234,67,33)" fg:x="232166" fg:w="425"/><text x="95.7389%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (421 samples, 0.17%)</title><rect x="95.4906%" y="309" width="0.1732%" height="15" fill="rgb(247,98,35)" fg:x="232170" fg:w="421"/><text x="95.7406%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (420 samples, 0.17%)</title><rect x="95.4910%" y="293" width="0.1727%" height="15" fill="rgb(247,138,52)" fg:x="232171" fg:w="420"/><text x="95.7410%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (420 samples, 0.17%)</title><rect x="95.4910%" y="277" width="0.1727%" height="15" fill="rgb(213,79,30)" fg:x="232171" fg:w="420"/><text x="95.7410%" y="287.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (420 samples, 0.17%)</title><rect x="95.4910%" y="261" width="0.1727%" height="15" fill="rgb(246,177,23)" fg:x="232171" fg:w="420"/><text x="95.7410%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (419 samples, 0.17%)</title><rect x="95.4914%" y="245" width="0.1723%" height="15" fill="rgb(230,62,27)" fg:x="232172" fg:w="419"/><text x="95.7414%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (419 samples, 0.17%)</title><rect x="95.4914%" y="229" width="0.1723%" height="15" fill="rgb(216,154,8)" fg:x="232172" fg:w="419"/><text x="95.7414%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (355 samples, 0.15%)</title><rect x="95.5177%" y="213" width="0.1460%" height="15" fill="rgb(244,35,45)" fg:x="232236" fg:w="355"/><text x="95.7677%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (355 samples, 0.15%)</title><rect x="95.5177%" y="197" width="0.1460%" height="15" fill="rgb(251,115,12)" fg:x="232236" fg:w="355"/><text x="95.7677%" y="207.50"></text></g><g><title>main::compute_flowchange (432 samples, 0.18%)</title><rect x="95.4873%" y="357" width="0.1777%" height="15" fill="rgb(240,54,50)" fg:x="232162" fg:w="432"/><text x="95.7373%" y="367.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (48 samples, 0.02%)</title><rect x="95.6744%" y="245" width="0.0197%" height="15" fill="rgb(233,84,52)" fg:x="232617" fg:w="48"/><text x="95.9244%" y="255.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (451 samples, 0.19%)</title><rect x="95.6744%" y="261" width="0.1855%" height="15" fill="rgb(207,117,47)" fg:x="232617" fg:w="451"/><text x="95.9244%" y="271.50"></text></g><g><title>core::array::_&lt;impl core::clone::Clone for [T: N]&gt;::clone (403 samples, 0.17%)</title><rect x="95.6941%" y="245" width="0.1658%" height="15" fill="rgb(249,43,39)" fg:x="232665" fg:w="403"/><text x="95.9441%" y="255.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (403 samples, 0.17%)</title><rect x="95.6941%" y="229" width="0.1658%" height="15" fill="rgb(209,38,44)" fg:x="232665" fg:w="403"/><text x="95.9441%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (511 samples, 0.21%)</title><rect x="95.6744%" y="341" width="0.2102%" height="15" fill="rgb(236,212,23)" fg:x="232617" fg:w="511"/><text x="95.9244%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (511 samples, 0.21%)</title><rect x="95.6744%" y="325" width="0.2102%" height="15" fill="rgb(242,79,21)" fg:x="232617" fg:w="511"/><text x="95.9244%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (511 samples, 0.21%)</title><rect x="95.6744%" y="309" width="0.2102%" height="15" fill="rgb(211,96,35)" fg:x="232617" fg:w="511"/><text x="95.9244%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (511 samples, 0.21%)</title><rect x="95.6744%" y="293" width="0.2102%" height="15" fill="rgb(253,215,40)" fg:x="232617" fg:w="511"/><text x="95.9244%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (511 samples, 0.21%)</title><rect x="95.6744%" y="277" width="0.2102%" height="15" fill="rgb(211,81,21)" fg:x="232617" fg:w="511"/><text x="95.9244%" y="287.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (60 samples, 0.02%)</title><rect x="95.8599%" y="261" width="0.0247%" height="15" fill="rgb(208,190,38)" fg:x="233068" fg:w="60"/><text x="96.1099%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.01%)</title><rect x="95.8846%" y="309" width="0.0144%" height="15" fill="rgb(235,213,38)" fg:x="233128" fg:w="35"/><text x="96.1346%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.01%)</title><rect x="95.8846%" y="293" width="0.0144%" height="15" fill="rgb(237,122,38)" fg:x="233128" fg:w="35"/><text x="96.1346%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::IndexMut&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index_mut (111 samples, 0.05%)</title><rect x="95.9693%" y="277" width="0.0457%" height="15" fill="rgb(244,218,35)" fg:x="233334" fg:w="111"/><text x="96.2193%" y="287.50"></text></g><g><title>main::initialization (982 samples, 0.40%)</title><rect x="95.6744%" y="357" width="0.4039%" height="15" fill="rgb(240,68,47)" fg:x="232617" fg:w="982"/><text x="95.9244%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (471 samples, 0.19%)</title><rect x="95.8846%" y="341" width="0.1937%" height="15" fill="rgb(210,16,53)" fg:x="233128" fg:w="471"/><text x="96.1346%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (471 samples, 0.19%)</title><rect x="95.8846%" y="325" width="0.1937%" height="15" fill="rgb(235,124,12)" fg:x="233128" fg:w="471"/><text x="96.1346%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (436 samples, 0.18%)</title><rect x="95.8990%" y="309" width="0.1793%" height="15" fill="rgb(224,169,11)" fg:x="233163" fg:w="436"/><text x="96.1490%" y="319.50"></text></g><g><title>main::initialization::_{{closure}} (436 samples, 0.18%)</title><rect x="95.8990%" y="293" width="0.1793%" height="15" fill="rgb(250,166,2)" fg:x="233163" fg:w="436"/><text x="96.1490%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (154 samples, 0.06%)</title><rect x="96.0150%" y="277" width="0.0633%" height="15" fill="rgb(242,216,29)" fg:x="233445" fg:w="154"/><text x="96.2650%" y="287.50"></text></g><g><title>core::ptr::write (95 samples, 0.04%)</title><rect x="96.0392%" y="261" width="0.0391%" height="15" fill="rgb(230,116,27)" fg:x="233504" fg:w="95"/><text x="96.2892%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (151 samples, 0.06%)</title><rect x="96.1618%" y="197" width="0.0621%" height="15" fill="rgb(228,99,48)" fg:x="233802" fg:w="151"/><text x="96.4118%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (267 samples, 0.11%)</title><rect x="96.1149%" y="229" width="0.1098%" height="15" fill="rgb(253,11,6)" fg:x="233688" fg:w="267"/><text x="96.3649%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (267 samples, 0.11%)</title><rect x="96.1149%" y="213" width="0.1098%" height="15" fill="rgb(247,143,39)" fg:x="233688" fg:w="267"/><text x="96.3649%" y="223.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (613 samples, 0.25%)</title><rect x="96.2247%" y="181" width="0.2521%" height="15" fill="rgb(236,97,10)" fg:x="233955" fg:w="613"/><text x="96.4747%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (997 samples, 0.41%)</title><rect x="96.1145%" y="245" width="0.4101%" height="15" fill="rgb(233,208,19)" fg:x="233687" fg:w="997"/><text x="96.3645%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (729 samples, 0.30%)</title><rect x="96.2247%" y="229" width="0.2998%" height="15" fill="rgb(216,164,2)" fg:x="233955" fg:w="729"/><text x="96.4747%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (729 samples, 0.30%)</title><rect x="96.2247%" y="213" width="0.2998%" height="15" fill="rgb(220,129,5)" fg:x="233955" fg:w="729"/><text x="96.4747%" y="223.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (729 samples, 0.30%)</title><rect x="96.2247%" y="197" width="0.2998%" height="15" fill="rgb(242,17,10)" fg:x="233955" fg:w="729"/><text x="96.4747%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::raw_edges (116 samples, 0.05%)</title><rect x="96.4768%" y="181" width="0.0477%" height="15" fill="rgb(242,107,0)" fg:x="234568" fg:w="116"/><text x="96.7268%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (116 samples, 0.05%)</title><rect x="96.4768%" y="165" width="0.0477%" height="15" fill="rgb(251,28,31)" fg:x="234568" fg:w="116"/><text x="96.7268%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (116 samples, 0.05%)</title><rect x="96.4768%" y="149" width="0.0477%" height="15" fill="rgb(233,223,10)" fg:x="234568" fg:w="116"/><text x="96.7268%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (116 samples, 0.05%)</title><rect x="96.4768%" y="133" width="0.0477%" height="15" fill="rgb(215,21,27)" fg:x="234568" fg:w="116"/><text x="96.7268%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (43 samples, 0.02%)</title><rect x="96.5262%" y="165" width="0.0177%" height="15" fill="rgb(232,23,21)" fg:x="234688" fg:w="43"/><text x="96.7762%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (43 samples, 0.02%)</title><rect x="96.5262%" y="149" width="0.0177%" height="15" fill="rgb(244,5,23)" fg:x="234688" fg:w="43"/><text x="96.7762%" y="159.50"></text></g><g><title>alloc::alloc::realloc (43 samples, 0.02%)</title><rect x="96.5262%" y="133" width="0.0177%" height="15" fill="rgb(226,81,46)" fg:x="234688" fg:w="43"/><text x="96.7762%" y="143.50"></text></g><g><title>realloc (43 samples, 0.02%)</title><rect x="96.5262%" y="117" width="0.0177%" height="15" fill="rgb(247,70,30)" fg:x="234688" fg:w="43"/><text x="96.7762%" y="127.50"></text></g><g><title>[libc.so.6] (38 samples, 0.02%)</title><rect x="96.5283%" y="101" width="0.0156%" height="15" fill="rgb(212,68,19)" fg:x="234693" fg:w="38"/><text x="96.7783%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (49 samples, 0.02%)</title><rect x="96.5246%" y="245" width="0.0202%" height="15" fill="rgb(240,187,13)" fg:x="234684" fg:w="49"/><text x="96.7746%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (49 samples, 0.02%)</title><rect x="96.5246%" y="229" width="0.0202%" height="15" fill="rgb(223,113,26)" fg:x="234684" fg:w="49"/><text x="96.7746%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (49 samples, 0.02%)</title><rect x="96.5246%" y="213" width="0.0202%" height="15" fill="rgb(206,192,2)" fg:x="234684" fg:w="49"/><text x="96.7746%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (49 samples, 0.02%)</title><rect x="96.5246%" y="197" width="0.0202%" height="15" fill="rgb(241,108,4)" fg:x="234684" fg:w="49"/><text x="96.7746%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (47 samples, 0.02%)</title><rect x="96.5254%" y="181" width="0.0193%" height="15" fill="rgb(247,173,49)" fg:x="234686" fg:w="47"/><text x="96.7754%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (100 samples, 0.04%)</title><rect x="96.5447%" y="245" width="0.0411%" height="15" fill="rgb(224,114,35)" fg:x="234733" fg:w="100"/><text x="96.7947%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,402 samples, 0.58%)</title><rect x="96.0783%" y="277" width="0.5766%" height="15" fill="rgb(245,159,27)" fg:x="233599" fg:w="1402"/><text x="96.3283%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,402 samples, 0.58%)</title><rect x="96.0783%" y="261" width="0.5766%" height="15" fill="rgb(245,172,44)" fg:x="233599" fg:w="1402"/><text x="96.3283%" y="271.50"></text></g><g><title>core::ptr::write (168 samples, 0.07%)</title><rect x="96.5858%" y="245" width="0.0691%" height="15" fill="rgb(236,23,11)" fg:x="234833" fg:w="168"/><text x="96.8358%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,404 samples, 0.58%)</title><rect x="96.0783%" y="341" width="0.5775%" height="15" fill="rgb(205,117,38)" fg:x="233599" fg:w="1404"/><text x="96.3283%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,404 samples, 0.58%)</title><rect x="96.0783%" y="325" width="0.5775%" height="15" fill="rgb(237,72,25)" fg:x="233599" fg:w="1404"/><text x="96.3283%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,404 samples, 0.58%)</title><rect x="96.0783%" y="309" width="0.5775%" height="15" fill="rgb(244,70,9)" fg:x="233599" fg:w="1404"/><text x="96.3283%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,404 samples, 0.58%)</title><rect x="96.0783%" y="293" width="0.5775%" height="15" fill="rgb(217,125,39)" fg:x="233599" fg:w="1404"/><text x="96.3283%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (246 samples, 0.10%)</title><rect x="96.6558%" y="341" width="0.1012%" height="15" fill="rgb(235,36,10)" fg:x="235003" fg:w="246"/><text x="96.9058%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (246 samples, 0.10%)</title><rect x="96.6558%" y="325" width="0.1012%" height="15" fill="rgb(251,123,47)" fg:x="235003" fg:w="246"/><text x="96.9058%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (246 samples, 0.10%)</title><rect x="96.6558%" y="309" width="0.1012%" height="15" fill="rgb(221,13,13)" fg:x="235003" fg:w="246"/><text x="96.9058%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (240 samples, 0.10%)</title><rect x="96.6582%" y="293" width="0.0987%" height="15" fill="rgb(238,131,9)" fg:x="235009" fg:w="240"/><text x="96.9082%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (237 samples, 0.10%)</title><rect x="96.6595%" y="277" width="0.0975%" height="15" fill="rgb(211,50,8)" fg:x="235012" fg:w="237"/><text x="96.9095%" y="287.50"></text></g><g><title>main::update_node_potentials::_{{closure}} (237 samples, 0.10%)</title><rect x="96.6595%" y="261" width="0.0975%" height="15" fill="rgb(245,182,24)" fg:x="235012" fg:w="237"/><text x="96.9095%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (117 samples, 0.05%)</title><rect x="96.7088%" y="245" width="0.0481%" height="15" fill="rgb(242,14,37)" fg:x="235132" fg:w="117"/><text x="96.9588%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f32&gt;::eq (117 samples, 0.05%)</title><rect x="96.7088%" y="229" width="0.0481%" height="15" fill="rgb(246,228,12)" fg:x="235132" fg:w="117"/><text x="96.9588%" y="239.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (213 samples, 0.09%)</title><rect x="96.9539%" y="325" width="0.0876%" height="15" fill="rgb(213,55,15)" fg:x="235728" fg:w="213"/><text x="97.2039%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (213 samples, 0.09%)</title><rect x="96.9539%" y="309" width="0.0876%" height="15" fill="rgb(209,9,3)" fg:x="235728" fg:w="213"/><text x="97.2039%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (213 samples, 0.09%)</title><rect x="96.9539%" y="293" width="0.0876%" height="15" fill="rgb(230,59,30)" fg:x="235728" fg:w="213"/><text x="97.2039%" y="303.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (100 samples, 0.04%)</title><rect x="97.0004%" y="277" width="0.0411%" height="15" fill="rgb(209,121,21)" fg:x="235841" fg:w="100"/><text x="97.2504%" y="287.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (100 samples, 0.04%)</title><rect x="97.0004%" y="261" width="0.0411%" height="15" fill="rgb(220,109,13)" fg:x="235841" fg:w="100"/><text x="97.2504%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (26 samples, 0.01%)</title><rect x="97.0415%" y="325" width="0.0107%" height="15" fill="rgb(232,18,1)" fg:x="235941" fg:w="26"/><text x="97.2915%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (26 samples, 0.01%)</title><rect x="97.0415%" y="309" width="0.0107%" height="15" fill="rgb(215,41,42)" fg:x="235941" fg:w="26"/><text x="97.2915%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (26 samples, 0.01%)</title><rect x="97.0415%" y="293" width="0.0107%" height="15" fill="rgb(224,123,36)" fg:x="235941" fg:w="26"/><text x="97.2915%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (235 samples, 0.10%)</title><rect x="97.0522%" y="325" width="0.0967%" height="15" fill="rgb(240,125,3)" fg:x="235967" fg:w="235"/><text x="97.3022%" y="335.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (36 samples, 0.01%)</title><rect x="97.3792%" y="309" width="0.0148%" height="15" fill="rgb(205,98,50)" fg:x="236762" fg:w="36"/><text x="97.6292%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (36 samples, 0.01%)</title><rect x="97.3792%" y="293" width="0.0148%" height="15" fill="rgb(205,185,37)" fg:x="236762" fg:w="36"/><text x="97.6292%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (153 samples, 0.06%)</title><rect x="97.3940%" y="309" width="0.0629%" height="15" fill="rgb(238,207,15)" fg:x="236798" fg:w="153"/><text x="97.6440%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (153 samples, 0.06%)</title><rect x="97.3940%" y="293" width="0.0629%" height="15" fill="rgb(213,199,42)" fg:x="236798" fg:w="153"/><text x="97.6440%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (841 samples, 0.35%)</title><rect x="97.1489%" y="325" width="0.3459%" height="15" fill="rgb(235,201,11)" fg:x="236202" fg:w="841"/><text x="97.3989%" y="335.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (92 samples, 0.04%)</title><rect x="97.4570%" y="309" width="0.0378%" height="15" fill="rgb(207,46,11)" fg:x="236951" fg:w="92"/><text x="97.7070%" y="319.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (92 samples, 0.04%)</title><rect x="97.4570%" y="293" width="0.0378%" height="15" fill="rgb(241,35,35)" fg:x="236951" fg:w="92"/><text x="97.7070%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (254 samples, 0.10%)</title><rect x="97.4948%" y="325" width="0.1045%" height="15" fill="rgb(243,32,47)" fg:x="237043" fg:w="254"/><text x="97.7448%" y="335.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (208 samples, 0.09%)</title><rect x="97.7942%" y="309" width="0.0855%" height="15" fill="rgb(247,202,23)" fg:x="237771" fg:w="208"/><text x="98.0442%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (208 samples, 0.09%)</title><rect x="97.7942%" y="293" width="0.0855%" height="15" fill="rgb(219,102,11)" fg:x="237771" fg:w="208"/><text x="98.0442%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (208 samples, 0.09%)</title><rect x="97.7942%" y="277" width="0.0855%" height="15" fill="rgb(243,110,44)" fg:x="237771" fg:w="208"/><text x="98.0442%" y="287.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (96 samples, 0.04%)</title><rect x="97.8403%" y="261" width="0.0395%" height="15" fill="rgb(222,74,54)" fg:x="237883" fg:w="96"/><text x="98.0903%" y="271.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (96 samples, 0.04%)</title><rect x="97.8403%" y="245" width="0.0395%" height="15" fill="rgb(216,99,12)" fg:x="237883" fg:w="96"/><text x="98.0903%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (217 samples, 0.09%)</title><rect x="97.8798%" y="309" width="0.0893%" height="15" fill="rgb(226,22,26)" fg:x="237979" fg:w="217"/><text x="98.1298%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (217 samples, 0.09%)</title><rect x="97.8798%" y="293" width="0.0893%" height="15" fill="rgb(217,163,10)" fg:x="237979" fg:w="217"/><text x="98.1298%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (217 samples, 0.09%)</title><rect x="97.8798%" y="277" width="0.0893%" height="15" fill="rgb(213,25,53)" fg:x="237979" fg:w="217"/><text x="98.1298%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (62 samples, 0.03%)</title><rect x="97.9690%" y="309" width="0.0255%" height="15" fill="rgb(252,105,26)" fg:x="238196" fg:w="62"/><text x="98.2190%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (154 samples, 0.06%)</title><rect x="98.2923%" y="293" width="0.0633%" height="15" fill="rgb(220,39,43)" fg:x="238982" fg:w="154"/><text x="98.5423%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (154 samples, 0.06%)</title><rect x="98.2923%" y="277" width="0.0633%" height="15" fill="rgb(229,68,48)" fg:x="238982" fg:w="154"/><text x="98.5423%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (907 samples, 0.37%)</title><rect x="97.9945%" y="309" width="0.3730%" height="15" fill="rgb(252,8,32)" fg:x="238258" fg:w="907"/><text x="98.2445%" y="319.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (29 samples, 0.01%)</title><rect x="98.3556%" y="293" width="0.0119%" height="15" fill="rgb(223,20,43)" fg:x="239136" fg:w="29"/><text x="98.6056%" y="303.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (29 samples, 0.01%)</title><rect x="98.3556%" y="277" width="0.0119%" height="15" fill="rgb(229,81,49)" fg:x="239136" fg:w="29"/><text x="98.6056%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (178 samples, 0.07%)</title><rect x="98.3676%" y="277" width="0.0732%" height="15" fill="rgb(236,28,36)" fg:x="239165" fg:w="178"/><text x="98.6176%" y="287.50"></text></g><g><title>core::ptr::write (169 samples, 0.07%)</title><rect x="98.3713%" y="261" width="0.0695%" height="15" fill="rgb(249,185,26)" fg:x="239174" fg:w="169"/><text x="98.6213%" y="271.50"></text></g><g><title>alloc::vec::from_elem (185 samples, 0.08%)</title><rect x="98.3676%" y="309" width="0.0761%" height="15" fill="rgb(249,174,33)" fg:x="239165" fg:w="185"/><text x="98.6176%" y="319.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (185 samples, 0.08%)</title><rect x="98.3676%" y="293" width="0.0761%" height="15" fill="rgb(233,201,37)" fg:x="239165" fg:w="185"/><text x="98.6176%" y="303.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (4,390 samples, 1.81%)</title><rect x="96.7647%" y="341" width="1.8056%" height="15" fill="rgb(221,78,26)" fg:x="235268" fg:w="4390"/><text x="97.0147%" y="351.50">p..</text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (2,361 samples, 0.97%)</title><rect x="97.5993%" y="325" width="0.9711%" height="15" fill="rgb(250,127,30)" fg:x="237297" fg:w="2361"/><text x="97.8493%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (308 samples, 0.13%)</title><rect x="98.4437%" y="309" width="0.1267%" height="15" fill="rgb(230,49,44)" fg:x="239350" fg:w="308"/><text x="98.6937%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 0.06%)</title><rect x="98.6497%" y="309" width="0.0638%" height="15" fill="rgb(229,67,23)" fg:x="239851" fg:w="155"/><text x="98.8997%" y="319.50"></text></g><g><title>core::ptr::read (131 samples, 0.05%)</title><rect x="98.6596%" y="293" width="0.0539%" height="15" fill="rgb(249,83,47)" fg:x="239875" fg:w="131"/><text x="98.9096%" y="303.50"></text></g><g><title>core::cmp::max (130 samples, 0.05%)</title><rect x="98.7200%" y="309" width="0.0535%" height="15" fill="rgb(215,43,3)" fg:x="240022" fg:w="130"/><text x="98.9700%" y="319.50"></text></g><g><title>core::cmp::Ord::max (130 samples, 0.05%)</title><rect x="98.7200%" y="293" width="0.0535%" height="15" fill="rgb(238,154,13)" fg:x="240022" fg:w="130"/><text x="98.9700%" y="303.50"></text></g><g><title>core::cmp::max_by (130 samples, 0.05%)</title><rect x="98.7200%" y="277" width="0.0535%" height="15" fill="rgb(219,56,2)" fg:x="240022" fg:w="130"/><text x="98.9700%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (115 samples, 0.05%)</title><rect x="98.8500%" y="293" width="0.0473%" height="15" fill="rgb(233,0,4)" fg:x="240338" fg:w="115"/><text x="99.1000%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (115 samples, 0.05%)</title><rect x="98.8500%" y="277" width="0.0473%" height="15" fill="rgb(235,30,7)" fg:x="240338" fg:w="115"/><text x="99.1000%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (115 samples, 0.05%)</title><rect x="98.8500%" y="261" width="0.0473%" height="15" fill="rgb(250,79,13)" fg:x="240338" fg:w="115"/><text x="99.1000%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (116 samples, 0.05%)</title><rect x="98.9882%" y="277" width="0.0477%" height="15" fill="rgb(211,146,34)" fg:x="240674" fg:w="116"/><text x="99.2382%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (116 samples, 0.05%)</title><rect x="98.9882%" y="261" width="0.0477%" height="15" fill="rgb(228,22,38)" fg:x="240674" fg:w="116"/><text x="99.2382%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (997 samples, 0.41%)</title><rect x="98.8977%" y="293" width="0.4101%" height="15" fill="rgb(235,168,5)" fg:x="240454" fg:w="997"/><text x="99.1477%" y="303.50"></text></g><g><title>core::ptr::write (657 samples, 0.27%)</title><rect x="99.0376%" y="277" width="0.2702%" height="15" fill="rgb(221,155,16)" fg:x="240794" fg:w="657"/><text x="99.2876%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1,399 samples, 0.58%)</title><rect x="98.7756%" y="309" width="0.5754%" height="15" fill="rgb(215,215,53)" fg:x="240157" fg:w="1399"/><text x="99.0256%" y="319.50"></text></g><g><title>petgraph::graph_impl::index_twice (104 samples, 0.04%)</title><rect x="99.3082%" y="293" width="0.0428%" height="15" fill="rgb(223,4,10)" fg:x="241452" fg:w="104"/><text x="99.5582%" y="303.50"></text></g><g><title>core::cmp::max (104 samples, 0.04%)</title><rect x="99.3082%" y="277" width="0.0428%" height="15" fill="rgb(234,103,6)" fg:x="241452" fg:w="104"/><text x="99.5582%" y="287.50"></text></g><g><title>core::cmp::Ord::max (104 samples, 0.04%)</title><rect x="99.3082%" y="261" width="0.0428%" height="15" fill="rgb(227,97,0)" fg:x="241452" fg:w="104"/><text x="99.5582%" y="271.50"></text></g><g><title>core::cmp::max_by (104 samples, 0.04%)</title><rect x="99.3082%" y="245" width="0.0428%" height="15" fill="rgb(234,150,53)" fg:x="241452" fg:w="104"/><text x="99.5582%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (73 samples, 0.03%)</title><rect x="99.4958%" y="229" width="0.0300%" height="15" fill="rgb(228,201,54)" fg:x="241908" fg:w="73"/><text x="99.7458%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (73 samples, 0.03%)</title><rect x="99.4958%" y="213" width="0.0300%" height="15" fill="rgb(222,22,37)" fg:x="241908" fg:w="73"/><text x="99.7458%" y="223.50"></text></g><g><title>alloc::alloc::realloc (73 samples, 0.03%)</title><rect x="99.4958%" y="197" width="0.0300%" height="15" fill="rgb(237,53,32)" fg:x="241908" fg:w="73"/><text x="99.7458%" y="207.50"></text></g><g><title>realloc (72 samples, 0.03%)</title><rect x="99.4962%" y="181" width="0.0296%" height="15" fill="rgb(233,25,53)" fg:x="241909" fg:w="72"/><text x="99.7462%" y="191.50"></text></g><g><title>[libc.so.6] (68 samples, 0.03%)</title><rect x="99.4978%" y="165" width="0.0280%" height="15" fill="rgb(210,40,34)" fg:x="241913" fg:w="68"/><text x="99.7478%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (74 samples, 0.03%)</title><rect x="99.4958%" y="245" width="0.0304%" height="15" fill="rgb(241,220,44)" fg:x="241908" fg:w="74"/><text x="99.7458%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (79 samples, 0.03%)</title><rect x="99.4941%" y="277" width="0.0325%" height="15" fill="rgb(235,28,35)" fg:x="241904" fg:w="79"/><text x="99.7441%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (79 samples, 0.03%)</title><rect x="99.4941%" y="261" width="0.0325%" height="15" fill="rgb(210,56,17)" fg:x="241904" fg:w="79"/><text x="99.7441%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (967 samples, 0.40%)</title><rect x="99.3510%" y="309" width="0.3977%" height="15" fill="rgb(224,130,29)" fg:x="241556" fg:w="967"/><text x="99.6010%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (967 samples, 0.40%)</title><rect x="99.3510%" y="293" width="0.3977%" height="15" fill="rgb(235,212,8)" fg:x="241556" fg:w="967"/><text x="99.6010%" y="303.50"></text></g><g><title>core::ptr::write (530 samples, 0.22%)</title><rect x="99.5307%" y="277" width="0.2180%" height="15" fill="rgb(223,33,50)" fg:x="241993" fg:w="530"/><text x="99.7807%" y="287.50"></text></g><g><title>main::update_node_potentials (9,027 samples, 3.71%)</title><rect x="96.0783%" y="357" width="3.7128%" height="15" fill="rgb(219,149,13)" fg:x="233599" fg:w="9027"/><text x="96.3283%" y="367.50">main..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (2,968 samples, 1.22%)</title><rect x="98.5703%" y="341" width="1.2207%" height="15" fill="rgb(250,156,29)" fg:x="239658" fg:w="2968"/><text x="98.8203%" y="351.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (2,968 samples, 1.22%)</title><rect x="98.5703%" y="325" width="1.2207%" height="15" fill="rgb(216,193,19)" fg:x="239658" fg:w="2968"/><text x="98.8203%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::node_count (103 samples, 0.04%)</title><rect x="99.7487%" y="309" width="0.0424%" height="15" fill="rgb(216,135,14)" fg:x="242523" fg:w="103"/><text x="99.9987%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (103 samples, 0.04%)</title><rect x="99.7487%" y="293" width="0.0424%" height="15" fill="rgb(241,47,5)" fg:x="242523" fg:w="103"/><text x="99.9987%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (148 samples, 0.06%)</title><rect x="99.7915%" y="341" width="0.0609%" height="15" fill="rgb(233,42,35)" fg:x="242627" fg:w="148"/><text x="100.0415%" y="351.50"></text></g><g><title>main::update_sptree::_{{closure}} (140 samples, 0.06%)</title><rect x="99.7948%" y="325" width="0.0576%" height="15" fill="rgb(231,13,6)" fg:x="242635" fg:w="140"/><text x="100.0448%" y="335.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (140 samples, 0.06%)</title><rect x="99.7948%" y="309" width="0.0576%" height="15" fill="rgb(207,181,40)" fg:x="242635" fg:w="140"/><text x="100.0448%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (140 samples, 0.06%)</title><rect x="99.7948%" y="293" width="0.0576%" height="15" fill="rgb(254,173,49)" fg:x="242635" fg:w="140"/><text x="100.0448%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (25 samples, 0.01%)</title><rect x="99.8528%" y="341" width="0.0103%" height="15" fill="rgb(221,1,38)" fg:x="242776" fg:w="25"/><text x="100.1028%" y="351.50"></text></g><g><title>core::intrinsics::copy (25 samples, 0.01%)</title><rect x="99.8528%" y="325" width="0.0103%" height="15" fill="rgb(206,124,46)" fg:x="242776" fg:w="25"/><text x="100.1028%" y="335.50"></text></g><g><title>[libc.so.6] (25 samples, 0.01%)</title><rect x="99.8528%" y="309" width="0.0103%" height="15" fill="rgb(249,21,11)" fg:x="242776" fg:w="25"/><text x="100.1028%" y="319.50"></text></g><g><title>main::min_cost (242,375 samples, 99.69%)</title><rect x="0.1756%" y="373" width="99.6878%" height="15" fill="rgb(222,201,40)" fg:x="427" fg:w="242375"/><text x="0.4256%" y="383.50">main::min_cost</text></g><g><title>main::update_sptree (176 samples, 0.07%)</title><rect x="99.7911%" y="357" width="0.0724%" height="15" fill="rgb(235,61,29)" fg:x="242626" fg:w="176"/><text x="100.0411%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (116 samples, 0.05%)</title><rect x="99.8984%" y="357" width="0.0477%" height="15" fill="rgb(219,207,3)" fg:x="242887" fg:w="116"/><text x="100.1484%" y="367.50"></text></g><g><title>core::ptr::write (69 samples, 0.03%)</title><rect x="99.9177%" y="341" width="0.0284%" height="15" fill="rgb(222,56,46)" fg:x="242934" fg:w="69"/><text x="100.1677%" y="351.50"></text></g><g><title>core::cmp::PartialEq::ne (43 samples, 0.02%)</title><rect x="99.9461%" y="357" width="0.0177%" height="15" fill="rgb(239,76,54)" fg:x="243003" fg:w="43"/><text x="100.1961%" y="367.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (43 samples, 0.02%)</title><rect x="99.9461%" y="341" width="0.0177%" height="15" fill="rgb(231,124,27)" fg:x="243003" fg:w="43"/><text x="100.1961%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (43 samples, 0.02%)</title><rect x="99.9461%" y="325" width="0.0177%" height="15" fill="rgb(249,195,6)" fg:x="243003" fg:w="43"/><text x="100.1961%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (272 samples, 0.11%)</title><rect x="99.8634%" y="373" width="0.1119%" height="15" fill="rgb(237,174,47)" fg:x="242802" fg:w="272"/><text x="100.1134%" y="383.50"></text></g><g><title>petgraph::graph_impl::index_twice (28 samples, 0.01%)</title><rect x="99.9638%" y="357" width="0.0115%" height="15" fill="rgb(206,201,31)" fg:x="243046" fg:w="28"/><text x="100.2138%" y="367.50"></text></g><g><title>all (243,134 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="243134"/><text x="0.2500%" y="559.50"></text></g><g><title>main (243,134 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(248,177,22)" fg:x="0" fg:w="243134"/><text x="0.2500%" y="543.50">main</text></g><g><title>_start (243,099 samples, 99.99%)</title><rect x="0.0144%" y="517" width="99.9856%" height="15" fill="rgb(215,211,37)" fg:x="35" fg:w="243099"/><text x="0.2644%" y="527.50">_start</text></g><g><title>__libc_start_main (243,099 samples, 99.99%)</title><rect x="0.0144%" y="501" width="99.9856%" height="15" fill="rgb(241,128,51)" fg:x="35" fg:w="243099"/><text x="0.2644%" y="511.50">__libc_start_main</text></g><g><title>[libc.so.6] (243,099 samples, 99.99%)</title><rect x="0.0144%" y="485" width="99.9856%" height="15" fill="rgb(227,165,31)" fg:x="35" fg:w="243099"/><text x="0.2644%" y="495.50">[libc.so.6]</text></g><g><title>main (243,099 samples, 99.99%)</title><rect x="0.0144%" y="469" width="99.9856%" height="15" fill="rgb(228,167,24)" fg:x="35" fg:w="243099"/><text x="0.2644%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (243,099 samples, 99.99%)</title><rect x="0.0144%" y="453" width="99.9856%" height="15" fill="rgb(228,143,12)" fg:x="35" fg:w="243099"/><text x="0.2644%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (243,099 samples, 99.99%)</title><rect x="0.0144%" y="437" width="99.9856%" height="15" fill="rgb(249,149,8)" fg:x="35" fg:w="243099"/><text x="0.2644%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (243,099 samples, 99.99%)</title><rect x="0.0144%" y="421" width="99.9856%" height="15" fill="rgb(243,35,44)" fg:x="35" fg:w="243099"/><text x="0.2644%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (243,099 samples, 99.99%)</title><rect x="0.0144%" y="405" width="99.9856%" height="15" fill="rgb(246,89,9)" fg:x="35" fg:w="243099"/><text x="0.2644%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (243,099 samples, 99.99%)</title><rect x="0.0144%" y="389" width="99.9856%" height="15" fill="rgb(233,213,13)" fg:x="35" fg:w="243099"/><text x="0.2644%" y="399.50">main::main</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (59 samples, 0.02%)</title><rect x="99.9757%" y="373" width="0.0243%" height="15" fill="rgb(233,141,41)" fg:x="243075" fg:w="59"/><text x="100.2257%" y="383.50"></text></g></svg></svg>