<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="2774"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="0.0000%" y="517" width="0.0360%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="0.0000%" y="501" width="0.0360%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.04%)</title><rect x="0.0000%" y="485" width="0.0360%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="0.0000%" y="469" width="0.0360%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0360%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="0.0000%" y="437" width="0.0360%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0360%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="0.0000%" y="405" width="0.0360%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="0.0000%" y="389" width="0.0360%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="0.0360%" y="517" width="0.0721%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.2860%" y="527.50"></text></g><g><title>[[heap]] (1 samples, 0.04%)</title><rect x="0.1081%" y="517" width="0.0360%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="0.3581%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="0.1081%" y="501" width="0.0360%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.3581%" y="511.50"></text></g><g><title>[[stack]] (86 samples, 3.10%)</title><rect x="0.1442%" y="517" width="3.1002%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="86"/><text x="0.3942%" y="527.50">[[s..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (86 samples, 3.10%)</title><rect x="0.1442%" y="501" width="3.1002%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="86"/><text x="0.3942%" y="511.50">cor..</text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.07%)</title><rect x="3.4607%" y="469" width="0.0721%" height="15" fill="rgb(217,207,13)" fg:x="96" fg:w="2"/><text x="3.7107%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="3.4968%" y="453" width="0.0360%" height="15" fill="rgb(231,73,38)" fg:x="97" fg:w="1"/><text x="3.7468%" y="463.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.04%)</title><rect x="3.4968%" y="437" width="0.0360%" height="15" fill="rgb(225,20,46)" fg:x="97" fg:w="1"/><text x="3.7468%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="3.4968%" y="421" width="0.0360%" height="15" fill="rgb(210,31,41)" fg:x="97" fg:w="1"/><text x="3.7468%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="3.4968%" y="405" width="0.0360%" height="15" fill="rgb(221,200,47)" fg:x="97" fg:w="1"/><text x="3.7468%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="3.4968%" y="389" width="0.0360%" height="15" fill="rgb(226,26,5)" fg:x="97" fg:w="1"/><text x="3.7468%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.32%)</title><rect x="3.2444%" y="517" width="0.3244%" height="15" fill="rgb(249,33,26)" fg:x="90" fg:w="9"/><text x="3.4944%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.11%)</title><rect x="3.4607%" y="501" width="0.1081%" height="15" fill="rgb(235,183,28)" fg:x="96" fg:w="3"/><text x="3.7107%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.11%)</title><rect x="3.4607%" y="485" width="0.1081%" height="15" fill="rgb(221,5,38)" fg:x="96" fg:w="3"/><text x="3.7107%" y="495.50"></text></g><g><title>__cpu_indicator_init (1 samples, 0.04%)</title><rect x="3.5328%" y="469" width="0.0360%" height="15" fill="rgb(247,18,42)" fg:x="98" fg:w="1"/><text x="3.7828%" y="479.50"></text></g><g><title>cpu_indicator_init (1 samples, 0.04%)</title><rect x="3.5328%" y="453" width="0.0360%" height="15" fill="rgb(241,131,45)" fg:x="98" fg:w="1"/><text x="3.7828%" y="463.50"></text></g><g><title>get_available_features (1 samples, 0.04%)</title><rect x="3.5328%" y="437" width="0.0360%" height="15" fill="rgb(249,31,29)" fg:x="98" fg:w="1"/><text x="3.7828%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="3.5689%" y="517" width="0.0360%" height="15" fill="rgb(225,111,53)" fg:x="99" fg:w="1"/><text x="3.8189%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70 samples, 2.52%)</title><rect x="3.6049%" y="501" width="2.5234%" height="15" fill="rgb(238,160,17)" fg:x="100" fg:w="70"/><text x="3.8549%" y="511.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70 samples, 2.52%)</title><rect x="3.6049%" y="485" width="2.5234%" height="15" fill="rgb(214,148,48)" fg:x="100" fg:w="70"/><text x="3.8549%" y="495.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (70 samples, 2.52%)</title><rect x="3.6049%" y="469" width="2.5234%" height="15" fill="rgb(232,36,49)" fg:x="100" fg:w="70"/><text x="3.8549%" y="479.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (70 samples, 2.52%)</title><rect x="3.6049%" y="453" width="2.5234%" height="15" fill="rgb(209,103,24)" fg:x="100" fg:w="70"/><text x="3.8549%" y="463.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (70 samples, 2.52%)</title><rect x="3.6049%" y="437" width="2.5234%" height="15" fill="rgb(229,88,8)" fg:x="100" fg:w="70"/><text x="3.8549%" y="447.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (70 samples, 2.52%)</title><rect x="3.6049%" y="421" width="2.5234%" height="15" fill="rgb(213,181,19)" fg:x="100" fg:w="70"/><text x="3.8549%" y="431.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (70 samples, 2.52%)</title><rect x="3.6049%" y="405" width="2.5234%" height="15" fill="rgb(254,191,54)" fg:x="100" fg:w="70"/><text x="3.8549%" y="415.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (70 samples, 2.52%)</title><rect x="3.6049%" y="389" width="2.5234%" height="15" fill="rgb(241,83,37)" fg:x="100" fg:w="70"/><text x="3.8549%" y="399.50">co..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (70 samples, 2.52%)</title><rect x="3.6049%" y="373" width="2.5234%" height="15" fill="rgb(233,36,39)" fg:x="100" fg:w="70"/><text x="3.8549%" y="383.50">&lt;c..</text></g><g><title>[libc.so.6] (5 samples, 0.18%)</title><rect x="6.1283%" y="501" width="0.1802%" height="15" fill="rgb(226,3,54)" fg:x="170" fg:w="5"/><text x="6.3783%" y="511.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9 samples, 0.32%)</title><rect x="6.3086%" y="501" width="0.3244%" height="15" fill="rgb(245,192,40)" fg:x="175" fg:w="9"/><text x="6.5586%" y="511.50"></text></g><g><title>[unknown] (86 samples, 3.10%)</title><rect x="3.6049%" y="517" width="3.1002%" height="15" fill="rgb(238,167,29)" fg:x="100" fg:w="86"/><text x="3.8549%" y="527.50">[un..</text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="6.6330%" y="501" width="0.0721%" height="15" fill="rgb(232,182,51)" fg:x="184" fg:w="2"/><text x="6.8830%" y="511.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="6.7772%" y="277" width="0.0360%" height="15" fill="rgb(231,60,39)" fg:x="188" fg:w="1"/><text x="7.0272%" y="287.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="6.7772%" y="261" width="0.0360%" height="15" fill="rgb(208,69,12)" fg:x="188" fg:w="1"/><text x="7.0272%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="6.7772%" y="357" width="0.0721%" height="15" fill="rgb(235,93,37)" fg:x="188" fg:w="2"/><text x="7.0272%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="6.7772%" y="341" width="0.0721%" height="15" fill="rgb(213,116,39)" fg:x="188" fg:w="2"/><text x="7.0272%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="6.7772%" y="325" width="0.0721%" height="15" fill="rgb(222,207,29)" fg:x="188" fg:w="2"/><text x="7.0272%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="6.7772%" y="309" width="0.0721%" height="15" fill="rgb(206,96,30)" fg:x="188" fg:w="2"/><text x="7.0272%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="6.7772%" y="293" width="0.0721%" height="15" fill="rgb(218,138,4)" fg:x="188" fg:w="2"/><text x="7.0272%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::Node&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="6.8133%" y="277" width="0.0360%" height="15" fill="rgb(250,191,14)" fg:x="189" fg:w="1"/><text x="7.0633%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="6.8493%" y="357" width="0.0360%" height="15" fill="rgb(239,60,40)" fg:x="190" fg:w="1"/><text x="7.0993%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="6.8493%" y="341" width="0.0360%" height="15" fill="rgb(206,27,48)" fg:x="190" fg:w="1"/><text x="7.0993%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.04%)</title><rect x="6.8493%" y="325" width="0.0360%" height="15" fill="rgb(225,35,8)" fg:x="190" fg:w="1"/><text x="7.0993%" y="335.50"></text></g><g><title>main::min_cost::_{{closure}} (1 samples, 0.04%)</title><rect x="6.8493%" y="309" width="0.0360%" height="15" fill="rgb(250,213,24)" fg:x="190" fg:w="1"/><text x="7.0993%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (4 samples, 0.14%)</title><rect x="13.8789%" y="101" width="0.1442%" height="15" fill="rgb(247,123,22)" fg:x="385" fg:w="4"/><text x="14.1289%" y="111.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.14%)</title><rect x="13.8789%" y="85" width="0.1442%" height="15" fill="rgb(231,138,38)" fg:x="385" fg:w="4"/><text x="14.1289%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="14.0231%" y="69" width="0.0360%" height="15" fill="rgb(231,145,46)" fg:x="389" fg:w="1"/><text x="14.2731%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="14.0231%" y="85" width="0.0721%" height="15" fill="rgb(251,118,11)" fg:x="389" fg:w="2"/><text x="14.2731%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="14.0591%" y="69" width="0.0360%" height="15" fill="rgb(217,147,25)" fg:x="390" fg:w="1"/><text x="14.3091%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="14.0591%" y="53" width="0.0360%" height="15" fill="rgb(247,81,37)" fg:x="390" fg:w="1"/><text x="14.3091%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (8 samples, 0.29%)</title><rect x="13.8789%" y="165" width="0.2884%" height="15" fill="rgb(209,12,38)" fg:x="385" fg:w="8"/><text x="14.1289%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (8 samples, 0.29%)</title><rect x="13.8789%" y="149" width="0.2884%" height="15" fill="rgb(227,1,9)" fg:x="385" fg:w="8"/><text x="14.1289%" y="159.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (8 samples, 0.29%)</title><rect x="13.8789%" y="133" width="0.2884%" height="15" fill="rgb(248,47,43)" fg:x="385" fg:w="8"/><text x="14.1289%" y="143.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8 samples, 0.29%)</title><rect x="13.8789%" y="117" width="0.2884%" height="15" fill="rgb(221,10,30)" fg:x="385" fg:w="8"/><text x="14.1289%" y="127.50"></text></g><g><title>main::_find_block_search::_{{closure}} (4 samples, 0.14%)</title><rect x="14.0231%" y="101" width="0.1442%" height="15" fill="rgb(210,229,1)" fg:x="389" fg:w="4"/><text x="14.2731%" y="111.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (2 samples, 0.07%)</title><rect x="14.0952%" y="85" width="0.0721%" height="15" fill="rgb(222,148,37)" fg:x="391" fg:w="2"/><text x="14.3452%" y="95.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::from_try (115 samples, 4.15%)</title><rect x="17.7361%" y="133" width="4.1456%" height="15" fill="rgb(234,67,33)" fg:x="492" fg:w="115"/><text x="17.9861%" y="143.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (160 samples, 5.77%)</title><rect x="22.0620%" y="101" width="5.7678%" height="15" fill="rgb(247,98,35)" fg:x="612" fg:w="160"/><text x="22.3120%" y="111.50">core::i..</text></g><g><title>core::cmp::min_by (160 samples, 5.77%)</title><rect x="22.0620%" y="85" width="5.7678%" height="15" fill="rgb(247,138,52)" fg:x="612" fg:w="160"/><text x="22.3120%" y="95.50">core::c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (112 samples, 4.04%)</title><rect x="36.3735%" y="69" width="4.0375%" height="15" fill="rgb(213,79,30)" fg:x="1009" fg:w="112"/><text x="36.6235%" y="79.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.04%)</title><rect x="40.3749%" y="53" width="0.0360%" height="15" fill="rgb(246,177,23)" fg:x="1120" fg:w="1"/><text x="40.6249%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="40.3749%" y="37" width="0.0360%" height="15" fill="rgb(230,62,27)" fg:x="1120" fg:w="1"/><text x="40.6249%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (197 samples, 7.10%)</title><rect x="36.3735%" y="85" width="7.1017%" height="15" fill="rgb(216,154,8)" fg:x="1009" fg:w="197"/><text x="36.6235%" y="95.50">&lt;alloc::ve..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (85 samples, 3.06%)</title><rect x="40.4110%" y="69" width="3.0642%" height="15" fill="rgb(244,35,45)" fg:x="1121" fg:w="85"/><text x="40.6610%" y="79.50">cor..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (85 samples, 3.06%)</title><rect x="40.4110%" y="53" width="3.0642%" height="15" fill="rgb(251,115,12)" fg:x="1121" fg:w="85"/><text x="40.6610%" y="63.50">&lt;us..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (66 samples, 2.38%)</title><rect x="43.4751%" y="85" width="2.3792%" height="15" fill="rgb(240,54,50)" fg:x="1206" fg:w="66"/><text x="43.7251%" y="95.50">&lt;i..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (186 samples, 6.71%)</title><rect x="45.8544%" y="85" width="6.7051%" height="15" fill="rgb(233,84,52)" fg:x="1272" fg:w="186"/><text x="46.1044%" y="95.50">&lt;i32 as c..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1,332 samples, 48.02%)</title><rect x="7.2098%" y="181" width="48.0173%" height="15" fill="rgb(207,117,47)" fg:x="200" fg:w="1332"/><text x="7.4598%" y="191.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,139 samples, 41.06%)</title><rect x="14.1673%" y="165" width="41.0598%" height="15" fill="rgb(249,43,39)" fg:x="393" fg:w="1139"/><text x="14.4173%" y="175.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (1,125 samples, 40.56%)</title><rect x="14.6720%" y="149" width="40.5552%" height="15" fill="rgb(209,38,44)" fg:x="407" fg:w="1125"/><text x="14.9220%" y="159.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterat..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (925 samples, 33.35%)</title><rect x="21.8818%" y="133" width="33.3453%" height="15" fill="rgb(236,212,23)" fg:x="607" fg:w="925"/><text x="22.1318%" y="143.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (925 samples, 33.35%)</title><rect x="21.8818%" y="117" width="33.3453%" height="15" fill="rgb(242,79,21)" fg:x="607" fg:w="925"/><text x="22.1318%" y="127.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>main::_find_block_search::_{{closure}} (760 samples, 27.40%)</title><rect x="27.8298%" y="101" width="27.3973%" height="15" fill="rgb(211,96,35)" fg:x="772" fg:w="760"/><text x="28.0798%" y="111.50">main::_find_block_search::_{{closure}}</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (74 samples, 2.67%)</title><rect x="52.5595%" y="85" width="2.6676%" height="15" fill="rgb(253,215,40)" fg:x="1458" fg:w="74"/><text x="52.8095%" y="95.50">&lt;i..</text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (54 samples, 1.95%)</title><rect x="55.2271%" y="181" width="1.9466%" height="15" fill="rgb(211,81,21)" fg:x="1532" fg:w="54"/><text x="55.4771%" y="191.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,400 samples, 50.47%)</title><rect x="6.9935%" y="309" width="50.4686%" height="15" fill="rgb(208,190,38)" fg:x="194" fg:w="1400"/><text x="7.2435%" y="319.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fo..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,395 samples, 50.29%)</title><rect x="7.1738%" y="293" width="50.2884%" height="15" fill="rgb(235,213,38)" fg:x="199" fg:w="1395"/><text x="7.4238%" y="303.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fo..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (1,395 samples, 50.29%)</title><rect x="7.1738%" y="277" width="50.2884%" height="15" fill="rgb(237,122,38)" fg:x="199" fg:w="1395"/><text x="7.4238%" y="287.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,395 samples, 50.29%)</title><rect x="7.1738%" y="261" width="50.2884%" height="15" fill="rgb(244,218,35)" fg:x="199" fg:w="1395"/><text x="7.4238%" y="271.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::tr..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,394 samples, 50.25%)</title><rect x="7.2098%" y="245" width="50.2523%" height="15" fill="rgb(240,68,47)" fg:x="200" fg:w="1394"/><text x="7.4598%" y="255.50">&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::tr..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,394 samples, 50.25%)</title><rect x="7.2098%" y="229" width="50.2523%" height="15" fill="rgb(210,16,53)" fg:x="200" fg:w="1394"/><text x="7.4598%" y="239.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,394 samples, 50.25%)</title><rect x="7.2098%" y="213" width="50.2523%" height="15" fill="rgb(235,124,12)" fg:x="200" fg:w="1394"/><text x="7.4598%" y="223.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Ite..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,394 samples, 50.25%)</title><rect x="7.2098%" y="197" width="50.2523%" height="15" fill="rgb(224,169,11)" fg:x="200" fg:w="1394"/><text x="7.4598%" y="207.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.29%)</title><rect x="57.1738%" y="181" width="0.2884%" height="15" fill="rgb(250,166,2)" fg:x="1586" fg:w="8"/><text x="57.4238%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.22%)</title><rect x="57.2459%" y="165" width="0.2163%" height="15" fill="rgb(242,216,29)" fg:x="1588" fg:w="6"/><text x="57.4959%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="57.4621%" y="293" width="0.0721%" height="15" fill="rgb(230,116,27)" fg:x="1594" fg:w="2"/><text x="57.7121%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="57.4621%" y="277" width="0.0721%" height="15" fill="rgb(228,99,48)" fg:x="1594" fg:w="2"/><text x="57.7121%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (2 samples, 0.07%)</title><rect x="57.4621%" y="261" width="0.0721%" height="15" fill="rgb(253,11,6)" fg:x="1594" fg:w="2"/><text x="57.7121%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="57.4621%" y="245" width="0.0721%" height="15" fill="rgb(247,143,39)" fg:x="1594" fg:w="2"/><text x="57.7121%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="57.4621%" y="229" width="0.0721%" height="15" fill="rgb(236,97,10)" fg:x="1594" fg:w="2"/><text x="57.7121%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="57.4621%" y="213" width="0.0721%" height="15" fill="rgb(233,208,19)" fg:x="1594" fg:w="2"/><text x="57.7121%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="57.4982%" y="197" width="0.0360%" height="15" fill="rgb(216,164,2)" fg:x="1595" fg:w="1"/><text x="57.7482%" y="207.50"></text></g><g><title>main::_find_block_search (1,406 samples, 50.68%)</title><rect x="6.8854%" y="357" width="50.6849%" height="15" fill="rgb(220,129,5)" fg:x="191" fg:w="1406"/><text x="7.1354%" y="367.50">main::_find_block_search</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (1,404 samples, 50.61%)</title><rect x="6.9575%" y="341" width="50.6128%" height="15" fill="rgb(242,17,10)" fg:x="193" fg:w="1404"/><text x="7.2075%" y="351.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1,404 samples, 50.61%)</title><rect x="6.9575%" y="325" width="50.6128%" height="15" fill="rgb(242,107,0)" fg:x="193" fg:w="1404"/><text x="7.2075%" y="335.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="57.4621%" y="309" width="0.1081%" height="15" fill="rgb(251,28,31)" fg:x="1594" fg:w="3"/><text x="57.7121%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.04%)</title><rect x="57.5342%" y="293" width="0.0360%" height="15" fill="rgb(233,223,10)" fg:x="1596" fg:w="1"/><text x="57.7842%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.04%)</title><rect x="57.5342%" y="277" width="0.0360%" height="15" fill="rgb(215,21,27)" fg:x="1596" fg:w="1"/><text x="57.7842%" y="287.50"></text></g><g><title>main::_find_block_search::_{{closure}} (1 samples, 0.04%)</title><rect x="57.5342%" y="261" width="0.0360%" height="15" fill="rgb(232,23,21)" fg:x="1596" fg:w="1"/><text x="57.7842%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (1 samples, 0.04%)</title><rect x="57.5342%" y="245" width="0.0360%" height="15" fill="rgb(244,5,23)" fg:x="1596" fg:w="1"/><text x="57.7842%" y="255.50"></text></g><g><title>main::_find_first_arc (1 samples, 0.04%)</title><rect x="57.5703%" y="357" width="0.0360%" height="15" fill="rgb(226,81,46)" fg:x="1597" fg:w="1"/><text x="57.8203%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.04%)</title><rect x="57.5703%" y="341" width="0.0360%" height="15" fill="rgb(247,70,30)" fg:x="1597" fg:w="1"/><text x="57.8203%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (57 samples, 2.05%)</title><rect x="75.5948%" y="341" width="2.0548%" height="15" fill="rgb(212,68,19)" fg:x="2097" fg:w="57"/><text x="75.8448%" y="351.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (57 samples, 2.05%)</title><rect x="75.5948%" y="325" width="2.0548%" height="15" fill="rgb(240,187,13)" fg:x="2097" fg:w="57"/><text x="75.8448%" y="335.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (57 samples, 2.05%)</title><rect x="75.5948%" y="309" width="2.0548%" height="15" fill="rgb(223,113,26)" fg:x="2097" fg:w="57"/><text x="75.8448%" y="319.50">&lt;..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (20 samples, 0.72%)</title><rect x="77.6496%" y="341" width="0.7210%" height="15" fill="rgb(206,192,2)" fg:x="2154" fg:w="20"/><text x="77.8996%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (6 samples, 0.22%)</title><rect x="78.3706%" y="341" width="0.2163%" height="15" fill="rgb(241,108,4)" fg:x="2174" fg:w="6"/><text x="78.6206%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::gt (1 samples, 0.04%)</title><rect x="78.5869%" y="341" width="0.0360%" height="15" fill="rgb(247,173,49)" fg:x="2180" fg:w="1"/><text x="78.8369%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (5 samples, 0.18%)</title><rect x="78.6229%" y="341" width="0.1802%" height="15" fill="rgb(224,114,35)" fg:x="2181" fg:w="5"/><text x="78.8729%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (6 samples, 0.22%)</title><rect x="78.8032%" y="341" width="0.2163%" height="15" fill="rgb(245,159,27)" fg:x="2186" fg:w="6"/><text x="79.0532%" y="351.50"></text></g><g><title>main::compute_flowchange (631 samples, 22.75%)</title><rect x="57.6063%" y="357" width="22.7469%" height="15" fill="rgb(245,172,44)" fg:x="1598" fg:w="631"/><text x="57.8563%" y="367.50">main::compute_flowchange</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (37 samples, 1.33%)</title><rect x="79.0195%" y="341" width="1.3338%" height="15" fill="rgb(236,23,11)" fg:x="2192" fg:w="37"/><text x="79.2695%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="80.4254%" y="341" width="0.0360%" height="15" fill="rgb(205,117,38)" fg:x="2231" fg:w="1"/><text x="80.6754%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="80.4254%" y="325" width="0.0360%" height="15" fill="rgb(237,72,25)" fg:x="2231" fg:w="1"/><text x="80.6754%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="80.4254%" y="309" width="0.0360%" height="15" fill="rgb(244,70,9)" fg:x="2231" fg:w="1"/><text x="80.6754%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.11%)</title><rect x="80.4614%" y="341" width="0.1081%" height="15" fill="rgb(217,125,39)" fg:x="2232" fg:w="3"/><text x="80.7114%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.11%)</title><rect x="80.4614%" y="325" width="0.1081%" height="15" fill="rgb(235,36,10)" fg:x="2232" fg:w="3"/><text x="80.7114%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.11%)</title><rect x="80.4614%" y="309" width="0.1081%" height="15" fill="rgb(251,123,47)" fg:x="2232" fg:w="3"/><text x="80.7114%" y="319.50"></text></g><g><title>main::initialization::_{{closure}} (3 samples, 0.11%)</title><rect x="80.4614%" y="293" width="0.1081%" height="15" fill="rgb(221,13,13)" fg:x="2232" fg:w="3"/><text x="80.7114%" y="303.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (1 samples, 0.04%)</title><rect x="80.5335%" y="277" width="0.0360%" height="15" fill="rgb(238,131,9)" fg:x="2234" fg:w="1"/><text x="80.7835%" y="287.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (1 samples, 0.04%)</title><rect x="80.5335%" y="261" width="0.0360%" height="15" fill="rgb(211,50,8)" fg:x="2234" fg:w="1"/><text x="80.7835%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="80.5696%" y="197" width="0.0360%" height="15" fill="rgb(245,182,24)" fg:x="2235" fg:w="1"/><text x="80.8196%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="80.5696%" y="181" width="0.0360%" height="15" fill="rgb(242,14,37)" fg:x="2235" fg:w="1"/><text x="80.8196%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.07%)</title><rect x="80.5696%" y="325" width="0.0721%" height="15" fill="rgb(246,228,12)" fg:x="2235" fg:w="2"/><text x="80.8196%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="80.5696%" y="309" width="0.0721%" height="15" fill="rgb(213,55,15)" fg:x="2235" fg:w="2"/><text x="80.8196%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="80.5696%" y="293" width="0.0721%" height="15" fill="rgb(209,9,3)" fg:x="2235" fg:w="2"/><text x="80.8196%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="80.5696%" y="277" width="0.0721%" height="15" fill="rgb(230,59,30)" fg:x="2235" fg:w="2"/><text x="80.8196%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="80.5696%" y="261" width="0.0721%" height="15" fill="rgb(209,121,21)" fg:x="2235" fg:w="2"/><text x="80.8196%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.07%)</title><rect x="80.5696%" y="245" width="0.0721%" height="15" fill="rgb(220,109,13)" fg:x="2235" fg:w="2"/><text x="80.8196%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="80.5696%" y="229" width="0.0721%" height="15" fill="rgb(232,18,1)" fg:x="2235" fg:w="2"/><text x="80.8196%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="80.5696%" y="213" width="0.0721%" height="15" fill="rgb(215,41,42)" fg:x="2235" fg:w="2"/><text x="80.8196%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="80.6056%" y="197" width="0.0360%" height="15" fill="rgb(224,123,36)" fg:x="2236" fg:w="1"/><text x="80.8556%" y="207.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="80.6056%" y="181" width="0.0360%" height="15" fill="rgb(240,125,3)" fg:x="2236" fg:w="1"/><text x="80.8556%" y="191.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (1 samples, 0.04%)</title><rect x="80.6056%" y="165" width="0.0360%" height="15" fill="rgb(205,98,50)" fg:x="2236" fg:w="1"/><text x="80.8556%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.11%)</title><rect x="80.6417%" y="325" width="0.1081%" height="15" fill="rgb(205,185,37)" fg:x="2237" fg:w="3"/><text x="80.8917%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.11%)</title><rect x="80.6417%" y="309" width="0.1081%" height="15" fill="rgb(238,207,15)" fg:x="2237" fg:w="3"/><text x="80.8917%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.11%)</title><rect x="80.6417%" y="293" width="0.1081%" height="15" fill="rgb(213,199,42)" fg:x="2237" fg:w="3"/><text x="80.8917%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.11%)</title><rect x="80.6417%" y="277" width="0.1081%" height="15" fill="rgb(235,201,11)" fg:x="2237" fg:w="3"/><text x="80.8917%" y="287.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (3 samples, 0.11%)</title><rect x="80.6417%" y="261" width="0.1081%" height="15" fill="rgb(207,46,11)" fg:x="2237" fg:w="3"/><text x="80.8917%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (3 samples, 0.11%)</title><rect x="80.6417%" y="245" width="0.1081%" height="15" fill="rgb(241,35,35)" fg:x="2237" fg:w="3"/><text x="80.8917%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (3 samples, 0.11%)</title><rect x="80.6417%" y="229" width="0.1081%" height="15" fill="rgb(243,32,47)" fg:x="2237" fg:w="3"/><text x="80.8917%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="80.6777%" y="213" width="0.0721%" height="15" fill="rgb(247,202,23)" fg:x="2238" fg:w="2"/><text x="80.9277%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (2 samples, 0.07%)</title><rect x="80.6777%" y="197" width="0.0721%" height="15" fill="rgb(219,102,11)" fg:x="2238" fg:w="2"/><text x="80.9277%" y="207.50"></text></g><g><title>core::slice::sort::find_streak (2 samples, 0.07%)</title><rect x="80.7498%" y="261" width="0.0721%" height="15" fill="rgb(243,110,44)" fg:x="2240" fg:w="2"/><text x="80.9998%" y="271.50"></text></g><g><title>itertools::Itertools::sorted_by_key (3 samples, 0.11%)</title><rect x="80.7498%" y="325" width="0.1081%" height="15" fill="rgb(222,74,54)" fg:x="2240" fg:w="3"/><text x="80.9998%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (3 samples, 0.11%)</title><rect x="80.7498%" y="309" width="0.1081%" height="15" fill="rgb(216,99,12)" fg:x="2240" fg:w="3"/><text x="80.9998%" y="319.50"></text></g><g><title>alloc::slice::stable_sort (3 samples, 0.11%)</title><rect x="80.7498%" y="293" width="0.1081%" height="15" fill="rgb(226,22,26)" fg:x="2240" fg:w="3"/><text x="80.9998%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.11%)</title><rect x="80.7498%" y="277" width="0.1081%" height="15" fill="rgb(217,163,10)" fg:x="2240" fg:w="3"/><text x="80.9998%" y="287.50"></text></g><g><title>core::slice::sort::merge (1 samples, 0.04%)</title><rect x="80.8219%" y="261" width="0.0360%" height="15" fill="rgb(213,25,53)" fg:x="2242" fg:w="1"/><text x="81.0719%" y="271.50"></text></g><g><title>&lt;&amp;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as petgraph::visit::IntoEdges&gt;::edges (1 samples, 0.04%)</title><rect x="80.8580%" y="293" width="0.0360%" height="15" fill="rgb(252,105,26)" fg:x="2243" fg:w="1"/><text x="81.1080%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges (1 samples, 0.04%)</title><rect x="80.8580%" y="277" width="0.0360%" height="15" fill="rgb(220,39,43)" fg:x="2243" fg:w="1"/><text x="81.1080%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (1 samples, 0.04%)</title><rect x="80.8580%" y="261" width="0.0360%" height="15" fill="rgb(229,68,48)" fg:x="2243" fg:w="1"/><text x="81.1080%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="80.8940%" y="293" width="0.0721%" height="15" fill="rgb(252,8,32)" fg:x="2244" fg:w="2"/><text x="81.1440%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.04%)</title><rect x="80.9301%" y="277" width="0.0360%" height="15" fill="rgb(223,20,43)" fg:x="2245" fg:w="1"/><text x="81.1801%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.04%)</title><rect x="80.9301%" y="261" width="0.0360%" height="15" fill="rgb(229,81,49)" fg:x="2245" fg:w="1"/><text x="81.1801%" y="271.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (4 samples, 0.14%)</title><rect x="80.8580%" y="325" width="0.1442%" height="15" fill="rgb(236,28,36)" fg:x="2243" fg:w="4"/><text x="81.1080%" y="335.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (4 samples, 0.14%)</title><rect x="80.8580%" y="309" width="0.1442%" height="15" fill="rgb(249,185,26)" fg:x="2243" fg:w="4"/><text x="81.1080%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (1 samples, 0.04%)</title><rect x="80.9661%" y="293" width="0.0360%" height="15" fill="rgb(249,174,33)" fg:x="2246" fg:w="1"/><text x="81.2161%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="81.0022%" y="293" width="0.0360%" height="15" fill="rgb(233,201,37)" fg:x="2247" fg:w="1"/><text x="81.2522%" y="303.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="81.0022%" y="277" width="0.0360%" height="15" fill="rgb(221,78,26)" fg:x="2247" fg:w="1"/><text x="81.2522%" y="287.50"></text></g><g><title>main::initialization (20 samples, 0.72%)</title><rect x="80.3533%" y="357" width="0.7210%" height="15" fill="rgb(250,127,30)" fg:x="2229" fg:w="20"/><text x="80.6033%" y="367.50"></text></g><g><title>main::compute_node_potentials (14 samples, 0.50%)</title><rect x="80.5696%" y="341" width="0.5047%" height="15" fill="rgb(230,49,44)" fg:x="2235" fg:w="14"/><text x="80.8196%" y="351.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (2 samples, 0.07%)</title><rect x="81.0022%" y="325" width="0.0721%" height="15" fill="rgb(229,67,23)" fg:x="2247" fg:w="2"/><text x="81.2522%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (2 samples, 0.07%)</title><rect x="81.0022%" y="309" width="0.0721%" height="15" fill="rgb(249,83,47)" fg:x="2247" fg:w="2"/><text x="81.2522%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (1 samples, 0.04%)</title><rect x="81.0382%" y="293" width="0.0360%" height="15" fill="rgb(215,43,3)" fg:x="2248" fg:w="1"/><text x="81.2882%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="81.0382%" y="277" width="0.0360%" height="15" fill="rgb(238,154,13)" fg:x="2248" fg:w="1"/><text x="81.2882%" y="287.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (12 samples, 0.43%)</title><rect x="81.7592%" y="341" width="0.4326%" height="15" fill="rgb(219,56,2)" fg:x="2268" fg:w="12"/><text x="82.0092%" y="351.50"></text></g><g><title>main::update_node_potentials (32 samples, 1.15%)</title><rect x="81.0743%" y="357" width="1.1536%" height="15" fill="rgb(233,0,4)" fg:x="2249" fg:w="32"/><text x="81.3243%" y="367.50"></text></g><g><title>main::get_reduced_cost_edgeindex (1 samples, 0.04%)</title><rect x="82.1918%" y="341" width="0.0360%" height="15" fill="rgb(235,30,7)" fg:x="2280" fg:w="1"/><text x="82.4418%" y="351.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1 samples, 0.04%)</title><rect x="82.1918%" y="325" width="0.0360%" height="15" fill="rgb(250,79,13)" fg:x="2280" fg:w="1"/><text x="82.4418%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.18%)</title><rect x="93.4030%" y="325" width="0.1802%" height="15" fill="rgb(211,146,34)" fg:x="2591" fg:w="5"/><text x="93.6530%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.18%)</title><rect x="93.4030%" y="309" width="0.1802%" height="15" fill="rgb(228,22,38)" fg:x="2591" fg:w="5"/><text x="93.6530%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.18%)</title><rect x="93.4030%" y="293" width="0.1802%" height="15" fill="rgb(235,168,5)" fg:x="2591" fg:w="5"/><text x="93.6530%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12 samples, 0.43%)</title><rect x="93.4030%" y="341" width="0.4326%" height="15" fill="rgb(221,155,16)" fg:x="2591" fg:w="12"/><text x="93.6530%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.25%)</title><rect x="93.5833%" y="325" width="0.2523%" height="15" fill="rgb(215,215,53)" fg:x="2596" fg:w="7"/><text x="93.8333%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.25%)</title><rect x="93.5833%" y="309" width="0.2523%" height="15" fill="rgb(223,4,10)" fg:x="2596" fg:w="7"/><text x="93.8333%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="94.5926%" y="277" width="0.0721%" height="15" fill="rgb(234,103,6)" fg:x="2624" fg:w="2"/><text x="94.8426%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.14%)</title><rect x="94.5926%" y="293" width="0.1442%" height="15" fill="rgb(227,97,0)" fg:x="2624" fg:w="4"/><text x="94.8426%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="94.6647%" y="277" width="0.0721%" height="15" fill="rgb(234,150,53)" fg:x="2626" fg:w="2"/><text x="94.9147%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="94.6647%" y="261" width="0.0721%" height="15" fill="rgb(228,201,54)" fg:x="2626" fg:w="2"/><text x="94.9147%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (26 samples, 0.94%)</title><rect x="93.8356%" y="341" width="0.9373%" height="15" fill="rgb(222,22,37)" fg:x="2603" fg:w="26"/><text x="94.0856%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (26 samples, 0.94%)</title><rect x="93.8356%" y="325" width="0.9373%" height="15" fill="rgb(237,53,32)" fg:x="2603" fg:w="26"/><text x="94.0856%" y="335.50"></text></g><g><title>main::update_sptree::_{{closure}} (26 samples, 0.94%)</title><rect x="93.8356%" y="309" width="0.9373%" height="15" fill="rgb(233,25,53)" fg:x="2603" fg:w="26"/><text x="94.0856%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="94.7368%" y="293" width="0.0360%" height="15" fill="rgb(210,40,34)" fg:x="2628" fg:w="1"/><text x="94.9868%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="94.7368%" y="277" width="0.0360%" height="15" fill="rgb(241,220,44)" fg:x="2628" fg:w="1"/><text x="94.9868%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="94.7368%" y="261" width="0.0360%" height="15" fill="rgb(235,28,35)" fg:x="2628" fg:w="1"/><text x="94.9868%" y="271.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="94.7368%" y="245" width="0.0360%" height="15" fill="rgb(210,56,17)" fg:x="2628" fg:w="1"/><text x="94.9868%" y="255.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="94.7368%" y="229" width="0.0360%" height="15" fill="rgb(224,130,29)" fg:x="2628" fg:w="1"/><text x="94.9868%" y="239.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="94.7368%" y="213" width="0.0360%" height="15" fill="rgb(235,212,8)" fg:x="2628" fg:w="1"/><text x="94.9868%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="94.7729%" y="341" width="0.0721%" height="15" fill="rgb(223,33,50)" fg:x="2629" fg:w="2"/><text x="95.0229%" y="351.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="94.7729%" y="325" width="0.0721%" height="15" fill="rgb(219,149,13)" fg:x="2629" fg:w="2"/><text x="95.0229%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="94.8450%" y="325" width="0.0360%" height="15" fill="rgb(250,156,29)" fg:x="2631" fg:w="1"/><text x="95.0950%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (16 samples, 0.58%)</title><rect x="94.8450%" y="341" width="0.5768%" height="15" fill="rgb(216,193,19)" fg:x="2631" fg:w="16"/><text x="95.0950%" y="351.50"></text></g><g><title>main::update_sptree::_{{closure}} (15 samples, 0.54%)</title><rect x="94.8810%" y="325" width="0.5407%" height="15" fill="rgb(216,135,14)" fg:x="2632" fg:w="15"/><text x="95.1310%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (4 samples, 0.14%)</title><rect x="95.2776%" y="309" width="0.1442%" height="15" fill="rgb(241,47,5)" fg:x="2643" fg:w="4"/><text x="95.5276%" y="319.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (6 samples, 0.22%)</title><rect x="95.4218%" y="341" width="0.2163%" height="15" fill="rgb(233,42,35)" fg:x="2647" fg:w="6"/><text x="95.6718%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.04%)</title><rect x="95.6381%" y="341" width="0.0360%" height="15" fill="rgb(231,13,6)" fg:x="2653" fg:w="1"/><text x="95.8881%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="95.6381%" y="325" width="0.0360%" height="15" fill="rgb(207,181,40)" fg:x="2653" fg:w="1"/><text x="95.8881%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="95.6381%" y="309" width="0.0360%" height="15" fill="rgb(254,173,49)" fg:x="2653" fg:w="1"/><text x="95.8881%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="95.6381%" y="293" width="0.0360%" height="15" fill="rgb(221,1,38)" fg:x="2653" fg:w="1"/><text x="95.8881%" y="303.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="95.6381%" y="277" width="0.0360%" height="15" fill="rgb(206,124,46)" fg:x="2653" fg:w="1"/><text x="95.8881%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.07%)</title><rect x="95.9625%" y="293" width="0.0721%" height="15" fill="rgb(249,21,11)" fg:x="2662" fg:w="2"/><text x="96.2125%" y="303.50"></text></g><g><title>__rust_realloc (1 samples, 0.04%)</title><rect x="96.0346%" y="229" width="0.0360%" height="15" fill="rgb(222,201,40)" fg:x="2664" fg:w="1"/><text x="96.2846%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.29%)</title><rect x="96.0346%" y="293" width="0.2884%" height="15" fill="rgb(235,61,29)" fg:x="2664" fg:w="8"/><text x="96.2846%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 0.29%)</title><rect x="96.0346%" y="277" width="0.2884%" height="15" fill="rgb(219,207,3)" fg:x="2664" fg:w="8"/><text x="96.2846%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 0.29%)</title><rect x="96.0346%" y="261" width="0.2884%" height="15" fill="rgb(222,56,46)" fg:x="2664" fg:w="8"/><text x="96.2846%" y="271.50"></text></g><g><title>alloc::alloc::realloc (8 samples, 0.29%)</title><rect x="96.0346%" y="245" width="0.2884%" height="15" fill="rgb(239,76,54)" fg:x="2664" fg:w="8"/><text x="96.2846%" y="255.50"></text></g><g><title>realloc (7 samples, 0.25%)</title><rect x="96.0707%" y="229" width="0.2523%" height="15" fill="rgb(231,124,27)" fg:x="2665" fg:w="7"/><text x="96.3207%" y="239.50"></text></g><g><title>[libc.so.6] (7 samples, 0.25%)</title><rect x="96.0707%" y="213" width="0.2523%" height="15" fill="rgb(249,195,6)" fg:x="2665" fg:w="7"/><text x="96.3207%" y="223.50"></text></g><g><title>[libc.so.6] (7 samples, 0.25%)</title><rect x="96.0707%" y="197" width="0.2523%" height="15" fill="rgb(237,174,47)" fg:x="2665" fg:w="7"/><text x="96.3207%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="96.2870%" y="181" width="0.0360%" height="15" fill="rgb(206,201,31)" fg:x="2671" fg:w="1"/><text x="96.5370%" y="191.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="96.3230%" y="293" width="0.0360%" height="15" fill="rgb(231,57,52)" fg:x="2672" fg:w="1"/><text x="96.5730%" y="303.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="96.3230%" y="277" width="0.0360%" height="15" fill="rgb(248,177,22)" fg:x="2672" fg:w="1"/><text x="96.5730%" y="287.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="96.3230%" y="261" width="0.0360%" height="15" fill="rgb(215,211,37)" fg:x="2672" fg:w="1"/><text x="96.5730%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.43%)</title><rect x="95.9625%" y="325" width="0.4326%" height="15" fill="rgb(241,128,51)" fg:x="2662" fg:w="12"/><text x="96.2125%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.43%)</title><rect x="95.9625%" y="309" width="0.4326%" height="15" fill="rgb(227,165,31)" fg:x="2662" fg:w="12"/><text x="96.2125%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="96.3590%" y="293" width="0.0360%" height="15" fill="rgb(228,167,24)" fg:x="2673" fg:w="1"/><text x="96.6090%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.04%)</title><rect x="96.3590%" y="277" width="0.0360%" height="15" fill="rgb(228,143,12)" fg:x="2673" fg:w="1"/><text x="96.6090%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (21 samples, 0.76%)</title><rect x="95.6741%" y="341" width="0.7570%" height="15" fill="rgb(249,149,8)" fg:x="2654" fg:w="21"/><text x="95.9241%" y="351.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="96.3951%" y="325" width="0.0360%" height="15" fill="rgb(243,35,44)" fg:x="2674" fg:w="1"/><text x="96.6451%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.04%)</title><rect x="96.4672%" y="309" width="0.0360%" height="15" fill="rgb(246,89,9)" fg:x="2676" fg:w="1"/><text x="96.7172%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="96.4672%" y="293" width="0.0360%" height="15" fill="rgb(233,213,13)" fg:x="2676" fg:w="1"/><text x="96.7172%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.04%)</title><rect x="96.4672%" y="277" width="0.0360%" height="15" fill="rgb(233,141,41)" fg:x="2676" fg:w="1"/><text x="96.7172%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="96.4672%" y="261" width="0.0360%" height="15" fill="rgb(239,167,4)" fg:x="2676" fg:w="1"/><text x="96.7172%" y="271.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.04%)</title><rect x="96.4672%" y="245" width="0.0360%" height="15" fill="rgb(209,217,16)" fg:x="2676" fg:w="1"/><text x="96.7172%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.04%)</title><rect x="96.4672%" y="229" width="0.0360%" height="15" fill="rgb(219,88,35)" fg:x="2676" fg:w="1"/><text x="96.7172%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 0.47%)</title><rect x="96.5032%" y="309" width="0.4686%" height="15" fill="rgb(220,193,23)" fg:x="2677" fg:w="13"/><text x="96.7532%" y="319.50"></text></g><g><title>core::ptr::write (13 samples, 0.47%)</title><rect x="96.5032%" y="293" width="0.4686%" height="15" fill="rgb(230,90,52)" fg:x="2677" fg:w="13"/><text x="96.7532%" y="303.50"></text></g><g><title>alloc::vec::from_elem (25 samples, 0.90%)</title><rect x="96.4311%" y="341" width="0.9012%" height="15" fill="rgb(252,106,19)" fg:x="2675" fg:w="25"/><text x="96.6811%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (25 samples, 0.90%)</title><rect x="96.4311%" y="325" width="0.9012%" height="15" fill="rgb(206,74,20)" fg:x="2675" fg:w="25"/><text x="96.6811%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.36%)</title><rect x="96.9719%" y="309" width="0.3605%" height="15" fill="rgb(230,138,44)" fg:x="2690" fg:w="10"/><text x="97.2219%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.36%)</title><rect x="96.9719%" y="293" width="0.3605%" height="15" fill="rgb(235,182,43)" fg:x="2690" fg:w="10"/><text x="97.2219%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.36%)</title><rect x="96.9719%" y="277" width="0.3605%" height="15" fill="rgb(242,16,51)" fg:x="2690" fg:w="10"/><text x="97.2219%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.36%)</title><rect x="96.9719%" y="261" width="0.3605%" height="15" fill="rgb(248,9,4)" fg:x="2690" fg:w="10"/><text x="97.2219%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.36%)</title><rect x="96.9719%" y="245" width="0.3605%" height="15" fill="rgb(210,31,22)" fg:x="2690" fg:w="10"/><text x="97.2219%" y="255.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.36%)</title><rect x="96.9719%" y="229" width="0.3605%" height="15" fill="rgb(239,54,39)" fg:x="2690" fg:w="10"/><text x="97.2219%" y="239.50"></text></g><g><title>malloc (10 samples, 0.36%)</title><rect x="96.9719%" y="213" width="0.3605%" height="15" fill="rgb(230,99,41)" fg:x="2690" fg:w="10"/><text x="97.2219%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="97.1882%" y="197" width="0.1442%" height="15" fill="rgb(253,106,12)" fg:x="2696" fg:w="4"/><text x="97.4382%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="97.2242%" y="181" width="0.1081%" height="15" fill="rgb(213,46,41)" fg:x="2697" fg:w="3"/><text x="97.4742%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.07%)</title><rect x="97.3324%" y="341" width="0.0721%" height="15" fill="rgb(215,133,35)" fg:x="2700" fg:w="2"/><text x="97.5824%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="97.3324%" y="325" width="0.0721%" height="15" fill="rgb(213,28,5)" fg:x="2700" fg:w="2"/><text x="97.5824%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="97.3324%" y="309" width="0.0721%" height="15" fill="rgb(215,77,49)" fg:x="2700" fg:w="2"/><text x="97.5824%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="97.3324%" y="293" width="0.0721%" height="15" fill="rgb(248,100,22)" fg:x="2700" fg:w="2"/><text x="97.5824%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.07%)</title><rect x="97.3324%" y="277" width="0.0721%" height="15" fill="rgb(208,67,9)" fg:x="2700" fg:w="2"/><text x="97.5824%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="97.3324%" y="261" width="0.0721%" height="15" fill="rgb(219,133,21)" fg:x="2700" fg:w="2"/><text x="97.5824%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="97.3324%" y="245" width="0.0721%" height="15" fill="rgb(246,46,29)" fg:x="2700" fg:w="2"/><text x="97.5824%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.07%)</title><rect x="97.3324%" y="229" width="0.0721%" height="15" fill="rgb(246,185,52)" fg:x="2700" fg:w="2"/><text x="97.5824%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="97.3684%" y="213" width="0.0360%" height="15" fill="rgb(252,136,11)" fg:x="2701" fg:w="1"/><text x="97.6184%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="97.3684%" y="197" width="0.0360%" height="15" fill="rgb(219,138,53)" fg:x="2701" fg:w="1"/><text x="97.6184%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="97.3684%" y="181" width="0.0360%" height="15" fill="rgb(211,51,23)" fg:x="2701" fg:w="1"/><text x="97.6184%" y="191.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="97.3684%" y="165" width="0.0360%" height="15" fill="rgb(247,221,28)" fg:x="2701" fg:w="1"/><text x="97.6184%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="97.4045%" y="325" width="0.0360%" height="15" fill="rgb(251,222,45)" fg:x="2702" fg:w="1"/><text x="97.6545%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="97.4045%" y="309" width="0.0360%" height="15" fill="rgb(217,162,53)" fg:x="2702" fg:w="1"/><text x="97.6545%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.04%)</title><rect x="97.4045%" y="293" width="0.0360%" height="15" fill="rgb(229,93,14)" fg:x="2702" fg:w="1"/><text x="97.6545%" y="303.50"></text></g><g><title>main::update_sptree::_{{closure}} (1 samples, 0.04%)</title><rect x="97.4045%" y="277" width="0.0360%" height="15" fill="rgb(209,67,49)" fg:x="2702" fg:w="1"/><text x="97.6545%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.04%)</title><rect x="97.4045%" y="261" width="0.0360%" height="15" fill="rgb(213,87,29)" fg:x="2702" fg:w="1"/><text x="97.6545%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.11%)</title><rect x="97.4045%" y="341" width="0.1081%" height="15" fill="rgb(205,151,52)" fg:x="2702" fg:w="3"/><text x="97.6545%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.07%)</title><rect x="97.4405%" y="325" width="0.0721%" height="15" fill="rgb(253,215,39)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="97.4405%" y="309" width="0.0721%" height="15" fill="rgb(221,220,41)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="97.4405%" y="293" width="0.0721%" height="15" fill="rgb(218,133,21)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (2 samples, 0.07%)</title><rect x="97.4405%" y="277" width="0.0721%" height="15" fill="rgb(221,193,43)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="97.4405%" y="261" width="0.0721%" height="15" fill="rgb(240,128,52)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="97.4405%" y="245" width="0.0721%" height="15" fill="rgb(253,114,12)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="97.4405%" y="229" width="0.0721%" height="15" fill="rgb(215,223,47)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="97.4405%" y="213" width="0.0721%" height="15" fill="rgb(248,225,23)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="97.4405%" y="197" width="0.0721%" height="15" fill="rgb(250,108,0)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="207.50"></text></g><g><title>cfree (2 samples, 0.07%)</title><rect x="97.4405%" y="181" width="0.0721%" height="15" fill="rgb(228,208,7)" fg:x="2703" fg:w="2"/><text x="97.6905%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="97.4766%" y="165" width="0.0360%" height="15" fill="rgb(244,45,10)" fg:x="2704" fg:w="1"/><text x="97.7266%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (4 samples, 0.14%)</title><rect x="97.5126%" y="341" width="0.1442%" height="15" fill="rgb(207,125,25)" fg:x="2705" fg:w="4"/><text x="97.7626%" y="351.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="97.6929%" y="261" width="0.0360%" height="15" fill="rgb(210,195,18)" fg:x="2710" fg:w="1"/><text x="97.9429%" y="271.50"></text></g><g><title>main::min_cost (2,538 samples, 91.49%)</title><rect x="6.7772%" y="373" width="91.4924%" height="15" fill="rgb(249,80,12)" fg:x="188" fg:w="2538"/><text x="7.0272%" y="383.50">main::min_cost</text></g><g><title>main::update_sptree (445 samples, 16.04%)</title><rect x="82.2278%" y="357" width="16.0418%" height="15" fill="rgb(221,65,9)" fg:x="2281" fg:w="445"/><text x="82.4778%" y="367.50">main::update_sptree</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (17 samples, 0.61%)</title><rect x="97.6568%" y="341" width="0.6128%" height="15" fill="rgb(235,49,36)" fg:x="2709" fg:w="17"/><text x="97.9068%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (17 samples, 0.61%)</title><rect x="97.6568%" y="325" width="0.6128%" height="15" fill="rgb(225,32,20)" fg:x="2709" fg:w="17"/><text x="97.9068%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.61%)</title><rect x="97.6568%" y="309" width="0.6128%" height="15" fill="rgb(215,141,46)" fg:x="2709" fg:w="17"/><text x="97.9068%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.58%)</title><rect x="97.6929%" y="293" width="0.5768%" height="15" fill="rgb(250,160,47)" fg:x="2710" fg:w="16"/><text x="97.9429%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.58%)</title><rect x="97.6929%" y="277" width="0.5768%" height="15" fill="rgb(216,222,40)" fg:x="2710" fg:w="16"/><text x="97.9429%" y="287.50"></text></g><g><title>cfree (15 samples, 0.54%)</title><rect x="97.7289%" y="261" width="0.5407%" height="15" fill="rgb(234,217,39)" fg:x="2711" fg:w="15"/><text x="97.9789%" y="271.50"></text></g><g><title>[libc.so.6] (10 samples, 0.36%)</title><rect x="97.9092%" y="245" width="0.3605%" height="15" fill="rgb(207,178,40)" fg:x="2716" fg:w="10"/><text x="98.1592%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="98.1615%" y="229" width="0.1081%" height="15" fill="rgb(221,136,13)" fg:x="2723" fg:w="3"/><text x="98.4115%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="98.2336%" y="213" width="0.0360%" height="15" fill="rgb(249,199,10)" fg:x="2725" fg:w="1"/><text x="98.4836%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1 samples, 0.04%)</title><rect x="98.2696%" y="373" width="0.0360%" height="15" fill="rgb(249,222,13)" fg:x="2726" fg:w="1"/><text x="98.5196%" y="383.50"></text></g><g><title>_start (2,542 samples, 91.64%)</title><rect x="6.7051%" y="517" width="91.6366%" height="15" fill="rgb(244,185,38)" fg:x="186" fg:w="2542"/><text x="6.9551%" y="527.50">_start</text></g><g><title>__libc_start_main (2,542 samples, 91.64%)</title><rect x="6.7051%" y="501" width="91.6366%" height="15" fill="rgb(236,202,9)" fg:x="186" fg:w="2542"/><text x="6.9551%" y="511.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,542 samples, 91.64%)</title><rect x="6.7051%" y="485" width="91.6366%" height="15" fill="rgb(250,229,37)" fg:x="186" fg:w="2542"/><text x="6.9551%" y="495.50">[libc.so.6]</text></g><g><title>main (2,542 samples, 91.64%)</title><rect x="6.7051%" y="469" width="91.6366%" height="15" fill="rgb(206,174,23)" fg:x="186" fg:w="2542"/><text x="6.9551%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (2,542 samples, 91.64%)</title><rect x="6.7051%" y="453" width="91.6366%" height="15" fill="rgb(211,33,43)" fg:x="186" fg:w="2542"/><text x="6.9551%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (2,542 samples, 91.64%)</title><rect x="6.7051%" y="437" width="91.6366%" height="15" fill="rgb(245,58,50)" fg:x="186" fg:w="2542"/><text x="6.9551%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,542 samples, 91.64%)</title><rect x="6.7051%" y="421" width="91.6366%" height="15" fill="rgb(244,68,36)" fg:x="186" fg:w="2542"/><text x="6.9551%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,542 samples, 91.64%)</title><rect x="6.7051%" y="405" width="91.6366%" height="15" fill="rgb(232,229,15)" fg:x="186" fg:w="2542"/><text x="6.9551%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (2,542 samples, 91.64%)</title><rect x="6.7051%" y="389" width="91.6366%" height="15" fill="rgb(254,30,23)" fg:x="186" fg:w="2542"/><text x="6.9551%" y="399.50">main::main</text></g><g><title>rand::rng::Rng::gen (1 samples, 0.04%)</title><rect x="98.3057%" y="373" width="0.0360%" height="15" fill="rgb(235,160,14)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="383.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.04%)</title><rect x="98.3057%" y="357" width="0.0360%" height="15" fill="rgb(212,155,44)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="367.50"></text></g><g><title>rand::rng::Rng::gen (1 samples, 0.04%)</title><rect x="98.3057%" y="341" width="0.0360%" height="15" fill="rgb(226,2,50)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="351.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.04%)</title><rect x="98.3057%" y="325" width="0.0360%" height="15" fill="rgb(234,177,6)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="335.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (1 samples, 0.04%)</title><rect x="98.3057%" y="309" width="0.0360%" height="15" fill="rgb(217,24,9)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="319.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.04%)</title><rect x="98.3057%" y="293" width="0.0360%" height="15" fill="rgb(220,13,46)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="303.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.04%)</title><rect x="98.3057%" y="277" width="0.0360%" height="15" fill="rgb(239,221,27)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="287.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.04%)</title><rect x="98.3057%" y="261" width="0.0360%" height="15" fill="rgb(222,198,25)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="271.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.04%)</title><rect x="98.3057%" y="245" width="0.0360%" height="15" fill="rgb(211,99,13)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="255.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.04%)</title><rect x="98.3057%" y="229" width="0.0360%" height="15" fill="rgb(232,111,31)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="239.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1 samples, 0.04%)</title><rect x="98.3057%" y="213" width="0.0360%" height="15" fill="rgb(245,82,37)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.04%)</title><rect x="98.3057%" y="197" width="0.0360%" height="15" fill="rgb(227,149,46)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1 samples, 0.04%)</title><rect x="98.3057%" y="181" width="0.0360%" height="15" fill="rgb(218,36,50)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (1 samples, 0.04%)</title><rect x="98.3057%" y="165" width="0.0360%" height="15" fill="rgb(226,80,48)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="175.50"></text></g><g><title>rand_chacha::guts::round (1 samples, 0.04%)</title><rect x="98.3057%" y="149" width="0.0360%" height="15" fill="rgb(238,224,15)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="159.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.04%)</title><rect x="98.3057%" y="133" width="0.0360%" height="15" fill="rgb(241,136,10)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.04%)</title><rect x="98.3057%" y="117" width="0.0360%" height="15" fill="rgb(208,32,45)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (1 samples, 0.04%)</title><rect x="98.3057%" y="101" width="0.0360%" height="15" fill="rgb(207,135,9)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (1 samples, 0.04%)</title><rect x="98.3057%" y="85" width="0.0360%" height="15" fill="rgb(206,86,44)" fg:x="2727" fg:w="1"/><text x="98.5557%" y="95.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (43 samples, 1.55%)</title><rect x="98.3417%" y="517" width="1.5501%" height="15" fill="rgb(245,177,15)" fg:x="2728" fg:w="43"/><text x="98.5917%" y="527.50"></text></g><g><title>main::_find_block_search (1 samples, 0.04%)</title><rect x="99.8919%" y="501" width="0.0360%" height="15" fill="rgb(206,64,50)" fg:x="2771" fg:w="1"/><text x="100.1419%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (1 samples, 0.04%)</title><rect x="99.8919%" y="485" width="0.0360%" height="15" fill="rgb(234,36,40)" fg:x="2771" fg:w="1"/><text x="100.1419%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1 samples, 0.04%)</title><rect x="99.8919%" y="469" width="0.0360%" height="15" fill="rgb(213,64,8)" fg:x="2771" fg:w="1"/><text x="100.1419%" y="479.50"></text></g><g><title>main::min_cost (2 samples, 0.07%)</title><rect x="99.8919%" y="517" width="0.0721%" height="15" fill="rgb(210,75,36)" fg:x="2771" fg:w="2"/><text x="100.1419%" y="527.50"></text></g><g><title>main::update_sptree (1 samples, 0.04%)</title><rect x="99.9279%" y="501" width="0.0360%" height="15" fill="rgb(229,88,21)" fg:x="2772" fg:w="1"/><text x="100.1779%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.04%)</title><rect x="99.9279%" y="485" width="0.0360%" height="15" fill="rgb(252,204,47)" fg:x="2772" fg:w="1"/><text x="100.1779%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="99.9279%" y="469" width="0.0360%" height="15" fill="rgb(208,77,27)" fg:x="2772" fg:w="1"/><text x="100.1779%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="99.9279%" y="453" width="0.0360%" height="15" fill="rgb(221,76,26)" fg:x="2772" fg:w="1"/><text x="100.1779%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="99.9279%" y="437" width="0.0360%" height="15" fill="rgb(225,139,18)" fg:x="2772" fg:w="1"/><text x="100.1779%" y="447.50"></text></g><g><title>all (2,774 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="2774"/><text x="0.2500%" y="559.50"></text></g><g><title>main (2,774 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="2774"/><text x="0.2500%" y="543.50">main</text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="99.9640%" y="517" width="0.0360%" height="15" fill="rgb(248,164,17)" fg:x="2773" fg:w="1"/><text x="100.2140%" y="527.50"></text></g></svg></svg>