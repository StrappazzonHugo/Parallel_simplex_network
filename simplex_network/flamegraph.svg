<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="1453"><g><title>[[heap]] (1 samples, 0.07%)</title><rect x="0.0000%" y="485" width="0.0688%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>realloc (1 samples, 0.07%)</title><rect x="0.0000%" y="469" width="0.0688%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>[[stack]] (1 samples, 0.07%)</title><rect x="0.0688%" y="485" width="0.0688%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3188%" y="495.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.07%)</title><rect x="0.0688%" y="469" width="0.0688%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3188%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.62%)</title><rect x="0.1376%" y="485" width="0.6194%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="9"/><text x="0.3876%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.21%)</title><rect x="0.5506%" y="469" width="0.2065%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="3"/><text x="0.8006%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.21%)</title><rect x="0.5506%" y="453" width="0.2065%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="3"/><text x="0.8006%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.21%)</title><rect x="0.5506%" y="437" width="0.2065%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="3"/><text x="0.8006%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.07%)</title><rect x="0.6882%" y="421" width="0.0688%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="0.9382%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.07%)</title><rect x="0.6882%" y="405" width="0.0688%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="0.9382%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.07%)</title><rect x="0.6882%" y="389" width="0.0688%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="1"/><text x="0.9382%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="0.7571%" y="485" width="0.0688%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="1"/><text x="1.0071%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.07%)</title><rect x="0.7571%" y="469" width="0.0688%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="1"/><text x="1.0071%" y="479.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="0.8947%" y="245" width="0.0688%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="1"/><text x="1.1447%" y="255.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="0.8947%" y="229" width="0.0688%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="1"/><text x="1.1447%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="0.8947%" y="325" width="0.1376%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="2"/><text x="1.1447%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="0.8947%" y="309" width="0.1376%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="2"/><text x="1.1447%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.14%)</title><rect x="0.8947%" y="293" width="0.1376%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="2"/><text x="1.1447%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.14%)</title><rect x="0.8947%" y="277" width="0.1376%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="2"/><text x="1.1447%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.14%)</title><rect x="0.8947%" y="261" width="0.1376%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="2"/><text x="1.1447%" y="271.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.07%)</title><rect x="0.9635%" y="245" width="0.0688%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="1"/><text x="1.2135%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.21%)</title><rect x="1.0323%" y="325" width="0.2065%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="3"/><text x="1.2823%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.21%)</title><rect x="1.0323%" y="309" width="0.2065%" height="15" fill="rgb(221,5,38)" fg:x="15" fg:w="3"/><text x="1.2823%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.21%)</title><rect x="1.0323%" y="293" width="0.2065%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="3"/><text x="1.2823%" y="303.50"></text></g><g><title>main::min_cost::_{{closure}} (3 samples, 0.21%)</title><rect x="1.0323%" y="277" width="0.2065%" height="15" fill="rgb(241,131,45)" fg:x="15" fg:w="3"/><text x="1.2823%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight_mut (1 samples, 0.07%)</title><rect x="1.1700%" y="261" width="0.0688%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="1"/><text x="1.4200%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (34 samples, 2.34%)</title><rect x="29.7316%" y="309" width="2.3400%" height="15" fill="rgb(225,111,53)" fg:x="432" fg:w="34"/><text x="29.9816%" y="319.50">&lt;..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (34 samples, 2.34%)</title><rect x="32.0716%" y="309" width="2.3400%" height="15" fill="rgb(238,160,17)" fg:x="466" fg:w="34"/><text x="32.3216%" y="319.50">&lt;..</text></g><g><title>&lt;i32 as num_traits::sign::Signed&gt;::is_negative (74 samples, 5.09%)</title><rect x="34.4116%" y="309" width="5.0929%" height="15" fill="rgb(214,148,48)" fg:x="500" fg:w="74"/><text x="34.6616%" y="319.50">&lt;i32 a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (103 samples, 7.09%)</title><rect x="39.5045%" y="309" width="7.0888%" height="15" fill="rgb(232,36,49)" fg:x="574" fg:w="103"/><text x="39.7545%" y="319.50">core::cmp:..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (47 samples, 3.23%)</title><rect x="46.7309%" y="277" width="3.2347%" height="15" fill="rgb(209,103,24)" fg:x="679" fg:w="47"/><text x="46.9809%" y="287.50">&lt;us..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (47 samples, 3.23%)</title><rect x="46.7309%" y="261" width="3.2347%" height="15" fill="rgb(229,88,8)" fg:x="679" fg:w="47"/><text x="46.9809%" y="271.50">cor..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (89 samples, 6.13%)</title><rect x="46.5933%" y="309" width="6.1253%" height="15" fill="rgb(213,181,19)" fg:x="677" fg:w="89"/><text x="46.8433%" y="319.50">core::it..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (89 samples, 6.13%)</title><rect x="46.5933%" y="293" width="6.1253%" height="15" fill="rgb(254,191,54)" fg:x="677" fg:w="89"/><text x="46.8433%" y="303.50">&lt;core::o..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (40 samples, 2.75%)</title><rect x="49.9656%" y="277" width="2.7529%" height="15" fill="rgb(241,83,37)" fg:x="726" fg:w="40"/><text x="50.2156%" y="287.50">co..</text></g><g><title>main::__find_block_search (749 samples, 51.55%)</title><rect x="1.2388%" y="325" width="51.5485%" height="15" fill="rgb(233,36,39)" fg:x="18" fg:w="749"/><text x="1.4888%" y="335.50">main::__find_block_search</text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.07%)</title><rect x="52.7185%" y="309" width="0.0688%" height="15" fill="rgb(226,3,54)" fg:x="766" fg:w="1"/><text x="52.9685%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (33 samples, 2.27%)</title><rect x="75.5678%" y="309" width="2.2712%" height="15" fill="rgb(245,192,40)" fg:x="1098" fg:w="33"/><text x="75.8178%" y="319.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (33 samples, 2.27%)</title><rect x="75.5678%" y="293" width="2.2712%" height="15" fill="rgb(238,167,29)" fg:x="1098" fg:w="33"/><text x="75.8178%" y="303.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (33 samples, 2.27%)</title><rect x="75.5678%" y="277" width="2.2712%" height="15" fill="rgb(232,182,51)" fg:x="1098" fg:w="33"/><text x="75.8178%" y="287.50">&lt;..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (18 samples, 1.24%)</title><rect x="77.8390%" y="309" width="1.2388%" height="15" fill="rgb(231,60,39)" fg:x="1131" fg:w="18"/><text x="78.0890%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (5 samples, 0.34%)</title><rect x="79.0778%" y="309" width="0.3441%" height="15" fill="rgb(208,69,12)" fg:x="1149" fg:w="5"/><text x="79.3278%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (2 samples, 0.14%)</title><rect x="79.4219%" y="309" width="0.1376%" height="15" fill="rgb(235,93,37)" fg:x="1154" fg:w="2"/><text x="79.6719%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.07%)</title><rect x="79.5595%" y="309" width="0.0688%" height="15" fill="rgb(213,116,39)" fg:x="1156" fg:w="1"/><text x="79.8095%" y="319.50"></text></g><g><title>main::compute_flowchange (404 samples, 27.80%)</title><rect x="52.7873%" y="325" width="27.8045%" height="15" fill="rgb(222,207,29)" fg:x="767" fg:w="404"/><text x="53.0373%" y="335.50">main::compute_flowchange</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (14 samples, 0.96%)</title><rect x="79.6284%" y="309" width="0.9635%" height="15" fill="rgb(206,96,30)" fg:x="1157" fg:w="14"/><text x="79.8784%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.28%)</title><rect x="80.6607%" y="309" width="0.2753%" height="15" fill="rgb(218,138,4)" fg:x="1172" fg:w="4"/><text x="80.9107%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.28%)</title><rect x="80.6607%" y="293" width="0.2753%" height="15" fill="rgb(250,191,14)" fg:x="1172" fg:w="4"/><text x="80.9107%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.28%)</title><rect x="80.6607%" y="277" width="0.2753%" height="15" fill="rgb(239,60,40)" fg:x="1172" fg:w="4"/><text x="80.9107%" y="287.50"></text></g><g><title>main::initialization::_{{closure}} (4 samples, 0.28%)</title><rect x="80.6607%" y="261" width="0.2753%" height="15" fill="rgb(206,27,48)" fg:x="1172" fg:w="4"/><text x="80.9107%" y="271.50"></text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (1 samples, 0.07%)</title><rect x="80.8672%" y="245" width="0.0688%" height="15" fill="rgb(225,35,8)" fg:x="1175" fg:w="1"/><text x="81.1172%" y="255.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (1 samples, 0.07%)</title><rect x="80.8672%" y="229" width="0.0688%" height="15" fill="rgb(250,213,24)" fg:x="1175" fg:w="1"/><text x="81.1172%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.07%)</title><rect x="80.9360%" y="213" width="0.0688%" height="15" fill="rgb(247,123,22)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.07%)</title><rect x="80.9360%" y="197" width="0.0688%" height="15" fill="rgb(231,138,38)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.07%)</title><rect x="80.9360%" y="181" width="0.0688%" height="15" fill="rgb(231,145,46)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="80.9360%" y="165" width="0.0688%" height="15" fill="rgb(251,118,11)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.07%)</title><rect x="80.9360%" y="149" width="0.0688%" height="15" fill="rgb(217,147,25)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="80.9360%" y="133" width="0.0688%" height="15" fill="rgb(247,81,37)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.07%)</title><rect x="80.9360%" y="117" width="0.0688%" height="15" fill="rgb(209,12,38)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.07%)</title><rect x="80.9360%" y="101" width="0.0688%" height="15" fill="rgb(227,1,9)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.07%)</title><rect x="80.9360%" y="85" width="0.0688%" height="15" fill="rgb(248,47,43)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="95.50"></text></g><g><title>realloc (1 samples, 0.07%)</title><rect x="80.9360%" y="69" width="0.0688%" height="15" fill="rgb(221,10,30)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="79.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="80.9360%" y="53" width="0.0688%" height="15" fill="rgb(210,229,1)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="80.9360%" y="37" width="0.0688%" height="15" fill="rgb(222,148,37)" fg:x="1176" fg:w="1"/><text x="81.1860%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.14%)</title><rect x="80.9360%" y="293" width="0.1376%" height="15" fill="rgb(234,67,33)" fg:x="1176" fg:w="2"/><text x="81.1860%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="80.9360%" y="277" width="0.1376%" height="15" fill="rgb(247,98,35)" fg:x="1176" fg:w="2"/><text x="81.1860%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="80.9360%" y="261" width="0.1376%" height="15" fill="rgb(247,138,52)" fg:x="1176" fg:w="2"/><text x="81.1860%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="80.9360%" y="245" width="0.1376%" height="15" fill="rgb(213,79,30)" fg:x="1176" fg:w="2"/><text x="81.1860%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.14%)</title><rect x="80.9360%" y="229" width="0.1376%" height="15" fill="rgb(246,177,23)" fg:x="1176" fg:w="2"/><text x="81.1860%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.07%)</title><rect x="81.0048%" y="213" width="0.0688%" height="15" fill="rgb(230,62,27)" fg:x="1177" fg:w="1"/><text x="81.2548%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.07%)</title><rect x="81.0048%" y="197" width="0.0688%" height="15" fill="rgb(216,154,8)" fg:x="1177" fg:w="1"/><text x="81.2548%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="81.0048%" y="181" width="0.0688%" height="15" fill="rgb(244,35,45)" fg:x="1177" fg:w="1"/><text x="81.2548%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (1 samples, 0.07%)</title><rect x="81.0048%" y="165" width="0.0688%" height="15" fill="rgb(251,115,12)" fg:x="1177" fg:w="1"/><text x="81.2548%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.07%)</title><rect x="81.0048%" y="149" width="0.0688%" height="15" fill="rgb(240,54,50)" fg:x="1177" fg:w="1"/><text x="81.2548%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1 samples, 0.07%)</title><rect x="81.0048%" y="133" width="0.0688%" height="15" fill="rgb(233,84,52)" fg:x="1177" fg:w="1"/><text x="81.2548%" y="143.50"></text></g><g><title>core::ptr::write (1 samples, 0.07%)</title><rect x="81.0048%" y="117" width="0.0688%" height="15" fill="rgb(207,117,47)" fg:x="1177" fg:w="1"/><text x="81.2548%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.14%)</title><rect x="81.0736%" y="293" width="0.1376%" height="15" fill="rgb(249,43,39)" fg:x="1178" fg:w="2"/><text x="81.3236%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.14%)</title><rect x="81.0736%" y="277" width="0.1376%" height="15" fill="rgb(209,38,44)" fg:x="1178" fg:w="2"/><text x="81.3236%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.14%)</title><rect x="81.0736%" y="261" width="0.1376%" height="15" fill="rgb(236,212,23)" fg:x="1178" fg:w="2"/><text x="81.3236%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.07%)</title><rect x="81.1425%" y="245" width="0.0688%" height="15" fill="rgb(242,79,21)" fg:x="1179" fg:w="1"/><text x="81.3925%" y="255.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (1 samples, 0.07%)</title><rect x="81.1425%" y="229" width="0.0688%" height="15" fill="rgb(211,96,35)" fg:x="1179" fg:w="1"/><text x="81.3925%" y="239.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (1 samples, 0.07%)</title><rect x="81.1425%" y="213" width="0.0688%" height="15" fill="rgb(253,215,40)" fg:x="1179" fg:w="1"/><text x="81.3925%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (1 samples, 0.07%)</title><rect x="81.1425%" y="197" width="0.0688%" height="15" fill="rgb(211,81,21)" fg:x="1179" fg:w="1"/><text x="81.3925%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.07%)</title><rect x="81.1425%" y="181" width="0.0688%" height="15" fill="rgb(208,190,38)" fg:x="1179" fg:w="1"/><text x="81.3925%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1 samples, 0.07%)</title><rect x="81.1425%" y="165" width="0.0688%" height="15" fill="rgb(235,213,38)" fg:x="1179" fg:w="1"/><text x="81.3925%" y="175.50"></text></g><g><title>core::slice::sort::find_streak (1 samples, 0.07%)</title><rect x="81.2113%" y="229" width="0.0688%" height="15" fill="rgb(237,122,38)" fg:x="1180" fg:w="1"/><text x="81.4613%" y="239.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::sort_by_key::_{{closure}} (1 samples, 0.07%)</title><rect x="81.2113%" y="213" width="0.0688%" height="15" fill="rgb(244,218,35)" fg:x="1180" fg:w="1"/><text x="81.4613%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (1 samples, 0.07%)</title><rect x="81.2113%" y="197" width="0.0688%" height="15" fill="rgb(240,68,47)" fg:x="1180" fg:w="1"/><text x="81.4613%" y="207.50"></text></g><g><title>itertools::Itertools::sorted_by_key (2 samples, 0.14%)</title><rect x="81.2113%" y="293" width="0.1376%" height="15" fill="rgb(210,16,53)" fg:x="1180" fg:w="2"/><text x="81.4613%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (2 samples, 0.14%)</title><rect x="81.2113%" y="277" width="0.1376%" height="15" fill="rgb(235,124,12)" fg:x="1180" fg:w="2"/><text x="81.4613%" y="287.50"></text></g><g><title>alloc::slice::stable_sort (2 samples, 0.14%)</title><rect x="81.2113%" y="261" width="0.1376%" height="15" fill="rgb(224,169,11)" fg:x="1180" fg:w="2"/><text x="81.4613%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.14%)</title><rect x="81.2113%" y="245" width="0.1376%" height="15" fill="rgb(250,166,2)" fg:x="1180" fg:w="2"/><text x="81.4613%" y="255.50"></text></g><g><title>core::slice::sort::merge (1 samples, 0.07%)</title><rect x="81.2801%" y="229" width="0.0688%" height="15" fill="rgb(242,216,29)" fg:x="1181" fg:w="1"/><text x="81.5301%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (1 samples, 0.07%)</title><rect x="81.3489%" y="277" width="0.0688%" height="15" fill="rgb(230,116,27)" fg:x="1182" fg:w="1"/><text x="81.5989%" y="287.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (3 samples, 0.21%)</title><rect x="81.3489%" y="293" width="0.2065%" height="15" fill="rgb(228,99,48)" fg:x="1182" fg:w="3"/><text x="81.5989%" y="303.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (2 samples, 0.14%)</title><rect x="81.4178%" y="277" width="0.1376%" height="15" fill="rgb(253,11,6)" fg:x="1183" fg:w="2"/><text x="81.6678%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (1 samples, 0.07%)</title><rect x="81.4866%" y="261" width="0.0688%" height="15" fill="rgb(247,143,39)" fg:x="1184" fg:w="1"/><text x="81.7366%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1 samples, 0.07%)</title><rect x="81.5554%" y="261" width="0.0688%" height="15" fill="rgb(236,97,10)" fg:x="1185" fg:w="1"/><text x="81.8054%" y="271.50"></text></g><g><title>main::compute_node_potentials (11 samples, 0.76%)</title><rect x="80.9360%" y="309" width="0.7571%" height="15" fill="rgb(233,208,19)" fg:x="1176" fg:w="11"/><text x="81.1860%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (2 samples, 0.14%)</title><rect x="81.5554%" y="293" width="0.1376%" height="15" fill="rgb(216,164,2)" fg:x="1185" fg:w="2"/><text x="81.8054%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (2 samples, 0.14%)</title><rect x="81.5554%" y="277" width="0.1376%" height="15" fill="rgb(220,129,5)" fg:x="1185" fg:w="2"/><text x="81.8054%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (1 samples, 0.07%)</title><rect x="81.6242%" y="261" width="0.0688%" height="15" fill="rgb(242,17,10)" fg:x="1186" fg:w="1"/><text x="81.8742%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.07%)</title><rect x="81.6242%" y="245" width="0.0688%" height="15" fill="rgb(242,107,0)" fg:x="1186" fg:w="1"/><text x="81.8742%" y="255.50"></text></g><g><title>main::initialization (17 samples, 1.17%)</title><rect x="80.5919%" y="325" width="1.1700%" height="15" fill="rgb(251,28,31)" fg:x="1171" fg:w="17"/><text x="80.8419%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1 samples, 0.07%)</title><rect x="81.6930%" y="309" width="0.0688%" height="15" fill="rgb(233,223,10)" fg:x="1187" fg:w="1"/><text x="81.9430%" y="319.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (5 samples, 0.34%)</title><rect x="81.8995%" y="309" width="0.3441%" height="15" fill="rgb(215,21,27)" fg:x="1190" fg:w="5"/><text x="82.1495%" y="319.50"></text></g><g><title>main::update_node_potentials (8 samples, 0.55%)</title><rect x="81.7619%" y="325" width="0.5506%" height="15" fill="rgb(232,23,21)" fg:x="1188" fg:w="8"/><text x="82.0119%" y="335.50"></text></g><g><title>main::get_reduced_cost_edgeindex (1 samples, 0.07%)</title><rect x="82.2436%" y="309" width="0.0688%" height="15" fill="rgb(244,5,23)" fg:x="1195" fg:w="1"/><text x="82.4936%" y="319.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (1 samples, 0.07%)</title><rect x="82.2436%" y="293" width="0.0688%" height="15" fill="rgb(226,81,46)" fg:x="1195" fg:w="1"/><text x="82.4936%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.07%)</title><rect x="94.0812%" y="309" width="0.0688%" height="15" fill="rgb(247,70,30)" fg:x="1367" fg:w="1"/><text x="94.3312%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.07%)</title><rect x="94.0812%" y="293" width="0.0688%" height="15" fill="rgb(212,68,19)" fg:x="1367" fg:w="1"/><text x="94.3312%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.07%)</title><rect x="94.0812%" y="277" width="0.0688%" height="15" fill="rgb(240,187,13)" fg:x="1367" fg:w="1"/><text x="94.3312%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (11 samples, 0.76%)</title><rect x="94.1500%" y="309" width="0.7571%" height="15" fill="rgb(223,113,26)" fg:x="1368" fg:w="11"/><text x="94.4000%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (11 samples, 0.76%)</title><rect x="94.1500%" y="293" width="0.7571%" height="15" fill="rgb(206,192,2)" fg:x="1368" fg:w="11"/><text x="94.4000%" y="303.50"></text></g><g><title>main::update_sptree::_{{closure}} (11 samples, 0.76%)</title><rect x="94.1500%" y="277" width="0.7571%" height="15" fill="rgb(241,108,4)" fg:x="1368" fg:w="11"/><text x="94.4000%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.07%)</title><rect x="94.8383%" y="261" width="0.0688%" height="15" fill="rgb(247,173,49)" fg:x="1378" fg:w="1"/><text x="95.0883%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.07%)</title><rect x="94.8383%" y="245" width="0.0688%" height="15" fill="rgb(224,114,35)" fg:x="1378" fg:w="1"/><text x="95.0883%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.07%)</title><rect x="94.8383%" y="229" width="0.0688%" height="15" fill="rgb(245,159,27)" fg:x="1378" fg:w="1"/><text x="95.0883%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="94.8383%" y="213" width="0.0688%" height="15" fill="rgb(245,172,44)" fg:x="1378" fg:w="1"/><text x="95.0883%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.07%)</title><rect x="94.8383%" y="197" width="0.0688%" height="15" fill="rgb(236,23,11)" fg:x="1378" fg:w="1"/><text x="95.0883%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.07%)</title><rect x="94.8383%" y="181" width="0.0688%" height="15" fill="rgb(205,117,38)" fg:x="1378" fg:w="1"/><text x="95.0883%" y="191.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.07%)</title><rect x="94.8383%" y="165" width="0.0688%" height="15" fill="rgb(237,72,25)" fg:x="1378" fg:w="1"/><text x="95.0883%" y="175.50"></text></g><g><title>realloc (1 samples, 0.07%)</title><rect x="94.8383%" y="149" width="0.0688%" height="15" fill="rgb(244,70,9)" fg:x="1378" fg:w="1"/><text x="95.0883%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="94.8383%" y="133" width="0.0688%" height="15" fill="rgb(217,125,39)" fg:x="1378" fg:w="1"/><text x="95.0883%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.07%)</title><rect x="95.1824%" y="277" width="0.0688%" height="15" fill="rgb(235,36,10)" fg:x="1383" fg:w="1"/><text x="95.4324%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.07%)</title><rect x="95.1824%" y="261" width="0.0688%" height="15" fill="rgb(251,123,47)" fg:x="1383" fg:w="1"/><text x="95.4324%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.07%)</title><rect x="95.1824%" y="245" width="0.0688%" height="15" fill="rgb(221,13,13)" fg:x="1383" fg:w="1"/><text x="95.4324%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (10 samples, 0.69%)</title><rect x="94.9071%" y="309" width="0.6882%" height="15" fill="rgb(238,131,9)" fg:x="1379" fg:w="10"/><text x="95.1571%" y="319.50"></text></g><g><title>main::update_sptree::_{{closure}} (10 samples, 0.69%)</title><rect x="94.9071%" y="293" width="0.6882%" height="15" fill="rgb(211,50,8)" fg:x="1379" fg:w="10"/><text x="95.1571%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5 samples, 0.34%)</title><rect x="95.2512%" y="277" width="0.3441%" height="15" fill="rgb(245,182,24)" fg:x="1384" fg:w="5"/><text x="95.5012%" y="287.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.14%)</title><rect x="95.5953%" y="309" width="0.1376%" height="15" fill="rgb(242,14,37)" fg:x="1389" fg:w="2"/><text x="95.8453%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.21%)</title><rect x="95.7330%" y="309" width="0.2065%" height="15" fill="rgb(246,228,12)" fg:x="1391" fg:w="3"/><text x="95.9830%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.21%)</title><rect x="95.7330%" y="293" width="0.2065%" height="15" fill="rgb(213,55,15)" fg:x="1391" fg:w="3"/><text x="95.9830%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.21%)</title><rect x="95.7330%" y="277" width="0.2065%" height="15" fill="rgb(209,9,3)" fg:x="1391" fg:w="3"/><text x="95.9830%" y="287.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.21%)</title><rect x="95.7330%" y="261" width="0.2065%" height="15" fill="rgb(230,59,30)" fg:x="1391" fg:w="3"/><text x="95.9830%" y="271.50"></text></g><g><title>malloc (2 samples, 0.14%)</title><rect x="95.8018%" y="245" width="0.1376%" height="15" fill="rgb(209,121,21)" fg:x="1392" fg:w="2"/><text x="96.0518%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.07%)</title><rect x="96.0083%" y="261" width="0.0688%" height="15" fill="rgb(220,109,13)" fg:x="1395" fg:w="1"/><text x="96.2583%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.62%)</title><rect x="96.0771%" y="245" width="0.6194%" height="15" fill="rgb(232,18,1)" fg:x="1396" fg:w="9"/><text x="96.3271%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.62%)</title><rect x="96.0771%" y="229" width="0.6194%" height="15" fill="rgb(215,41,42)" fg:x="1396" fg:w="9"/><text x="96.3271%" y="239.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.62%)</title><rect x="96.0771%" y="213" width="0.6194%" height="15" fill="rgb(224,123,36)" fg:x="1396" fg:w="9"/><text x="96.3271%" y="223.50"></text></g><g><title>realloc (9 samples, 0.62%)</title><rect x="96.0771%" y="197" width="0.6194%" height="15" fill="rgb(240,125,3)" fg:x="1396" fg:w="9"/><text x="96.3271%" y="207.50"></text></g><g><title>[libc.so.6] (9 samples, 0.62%)</title><rect x="96.0771%" y="181" width="0.6194%" height="15" fill="rgb(205,98,50)" fg:x="1396" fg:w="9"/><text x="96.3271%" y="191.50"></text></g><g><title>[libc.so.6] (6 samples, 0.41%)</title><rect x="96.2836%" y="165" width="0.4129%" height="15" fill="rgb(205,185,37)" fg:x="1399" fg:w="6"/><text x="96.5336%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="96.6277%" y="149" width="0.0688%" height="15" fill="rgb(238,207,15)" fg:x="1404" fg:w="1"/><text x="96.8777%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.83%)</title><rect x="95.9394%" y="309" width="0.8259%" height="15" fill="rgb(213,199,42)" fg:x="1394" fg:w="12"/><text x="96.1894%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.76%)</title><rect x="96.0083%" y="293" width="0.7571%" height="15" fill="rgb(235,201,11)" fg:x="1395" fg:w="11"/><text x="96.2583%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.76%)</title><rect x="96.0083%" y="277" width="0.7571%" height="15" fill="rgb(207,46,11)" fg:x="1395" fg:w="11"/><text x="96.2583%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.69%)</title><rect x="96.0771%" y="261" width="0.6882%" height="15" fill="rgb(241,35,35)" fg:x="1396" fg:w="10"/><text x="96.3271%" y="271.50"></text></g><g><title>malloc (1 samples, 0.07%)</title><rect x="96.6965%" y="245" width="0.0688%" height="15" fill="rgb(243,32,47)" fg:x="1405" fg:w="1"/><text x="96.9465%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.07%)</title><rect x="96.7653%" y="309" width="0.0688%" height="15" fill="rgb(247,202,23)" fg:x="1406" fg:w="1"/><text x="97.0153%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.07%)</title><rect x="96.8341%" y="261" width="0.0688%" height="15" fill="rgb(219,102,11)" fg:x="1407" fg:w="1"/><text x="97.0841%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.07%)</title><rect x="96.8341%" y="245" width="0.0688%" height="15" fill="rgb(243,110,44)" fg:x="1407" fg:w="1"/><text x="97.0841%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.14%)</title><rect x="96.8341%" y="277" width="0.1376%" height="15" fill="rgb(222,74,54)" fg:x="1407" fg:w="2"/><text x="97.0841%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.07%)</title><rect x="96.9030%" y="261" width="0.0688%" height="15" fill="rgb(216,99,12)" fg:x="1408" fg:w="1"/><text x="97.1530%" y="271.50"></text></g><g><title>alloc::vec::from_elem (20 samples, 1.38%)</title><rect x="96.8341%" y="309" width="1.3765%" height="15" fill="rgb(226,22,26)" fg:x="1407" fg:w="20"/><text x="97.0841%" y="319.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (20 samples, 1.38%)</title><rect x="96.8341%" y="293" width="1.3765%" height="15" fill="rgb(217,163,10)" fg:x="1407" fg:w="20"/><text x="97.0841%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 1.24%)</title><rect x="96.9718%" y="277" width="1.2388%" height="15" fill="rgb(213,25,53)" fg:x="1409" fg:w="18"/><text x="97.2218%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 1.24%)</title><rect x="96.9718%" y="261" width="1.2388%" height="15" fill="rgb(252,105,26)" fg:x="1409" fg:w="18"/><text x="97.2218%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (18 samples, 1.24%)</title><rect x="96.9718%" y="245" width="1.2388%" height="15" fill="rgb(220,39,43)" fg:x="1409" fg:w="18"/><text x="97.2218%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 1.24%)</title><rect x="96.9718%" y="229" width="1.2388%" height="15" fill="rgb(229,68,48)" fg:x="1409" fg:w="18"/><text x="97.2218%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 1.24%)</title><rect x="96.9718%" y="213" width="1.2388%" height="15" fill="rgb(252,8,32)" fg:x="1409" fg:w="18"/><text x="97.2218%" y="223.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 1.24%)</title><rect x="96.9718%" y="197" width="1.2388%" height="15" fill="rgb(223,20,43)" fg:x="1409" fg:w="18"/><text x="97.2218%" y="207.50"></text></g><g><title>malloc (18 samples, 1.24%)</title><rect x="96.9718%" y="181" width="1.2388%" height="15" fill="rgb(229,81,49)" fg:x="1409" fg:w="18"/><text x="97.2218%" y="191.50"></text></g><g><title>[libc.so.6] (9 samples, 0.62%)</title><rect x="97.5912%" y="165" width="0.6194%" height="15" fill="rgb(236,28,36)" fg:x="1418" fg:w="9"/><text x="97.8412%" y="175.50"></text></g><g><title>[libc.so.6] (5 samples, 0.34%)</title><rect x="97.8665%" y="149" width="0.3441%" height="15" fill="rgb(249,185,26)" fg:x="1422" fg:w="5"/><text x="98.1165%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.07%)</title><rect x="98.2106%" y="245" width="0.0688%" height="15" fill="rgb(249,174,33)" fg:x="1427" fg:w="1"/><text x="98.4606%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.07%)</title><rect x="98.2106%" y="229" width="0.0688%" height="15" fill="rgb(233,201,37)" fg:x="1427" fg:w="1"/><text x="98.4606%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.07%)</title><rect x="98.2106%" y="213" width="0.0688%" height="15" fill="rgb(221,78,26)" fg:x="1427" fg:w="1"/><text x="98.4606%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="98.2106%" y="197" width="0.0688%" height="15" fill="rgb(250,127,30)" fg:x="1427" fg:w="1"/><text x="98.4606%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="98.2106%" y="181" width="0.0688%" height="15" fill="rgb(230,49,44)" fg:x="1427" fg:w="1"/><text x="98.4606%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.14%)</title><rect x="98.2106%" y="309" width="0.1376%" height="15" fill="rgb(229,67,23)" fg:x="1427" fg:w="2"/><text x="98.4606%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="98.2106%" y="293" width="0.1376%" height="15" fill="rgb(249,83,47)" fg:x="1427" fg:w="2"/><text x="98.4606%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="98.2106%" y="277" width="0.1376%" height="15" fill="rgb(215,43,3)" fg:x="1427" fg:w="2"/><text x="98.4606%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="98.2106%" y="261" width="0.1376%" height="15" fill="rgb(238,154,13)" fg:x="1427" fg:w="2"/><text x="98.4606%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.07%)</title><rect x="98.2794%" y="245" width="0.0688%" height="15" fill="rgb(219,56,2)" fg:x="1428" fg:w="1"/><text x="98.5294%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.07%)</title><rect x="98.2794%" y="229" width="0.0688%" height="15" fill="rgb(233,0,4)" fg:x="1428" fg:w="1"/><text x="98.5294%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.07%)</title><rect x="98.2794%" y="213" width="0.0688%" height="15" fill="rgb(235,30,7)" fg:x="1428" fg:w="1"/><text x="98.5294%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.07%)</title><rect x="98.2794%" y="197" width="0.0688%" height="15" fill="rgb(250,79,13)" fg:x="1428" fg:w="1"/><text x="98.5294%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.07%)</title><rect x="98.2794%" y="181" width="0.0688%" height="15" fill="rgb(211,146,34)" fg:x="1428" fg:w="1"/><text x="98.5294%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.07%)</title><rect x="98.2794%" y="165" width="0.0688%" height="15" fill="rgb(228,22,38)" fg:x="1428" fg:w="1"/><text x="98.5294%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.07%)</title><rect x="98.2794%" y="149" width="0.0688%" height="15" fill="rgb(235,168,5)" fg:x="1428" fg:w="1"/><text x="98.5294%" y="159.50"></text></g><g><title>malloc (1 samples, 0.07%)</title><rect x="98.2794%" y="133" width="0.0688%" height="15" fill="rgb(221,155,16)" fg:x="1428" fg:w="1"/><text x="98.5294%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.21%)</title><rect x="98.3482%" y="309" width="0.2065%" height="15" fill="rgb(215,215,53)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.21%)</title><rect x="98.3482%" y="293" width="0.2065%" height="15" fill="rgb(223,4,10)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (3 samples, 0.21%)</title><rect x="98.3482%" y="277" width="0.2065%" height="15" fill="rgb(234,103,6)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.21%)</title><rect x="98.3482%" y="261" width="0.2065%" height="15" fill="rgb(227,97,0)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (3 samples, 0.21%)</title><rect x="98.3482%" y="245" width="0.2065%" height="15" fill="rgb(234,150,53)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.21%)</title><rect x="98.3482%" y="229" width="0.2065%" height="15" fill="rgb(228,201,54)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (3 samples, 0.21%)</title><rect x="98.3482%" y="213" width="0.2065%" height="15" fill="rgb(222,22,37)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.21%)</title><rect x="98.3482%" y="197" width="0.2065%" height="15" fill="rgb(237,53,32)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.21%)</title><rect x="98.3482%" y="181" width="0.2065%" height="15" fill="rgb(233,25,53)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.21%)</title><rect x="98.3482%" y="165" width="0.2065%" height="15" fill="rgb(210,40,34)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="175.50"></text></g><g><title>cfree (3 samples, 0.21%)</title><rect x="98.3482%" y="149" width="0.2065%" height="15" fill="rgb(241,220,44)" fg:x="1429" fg:w="3"/><text x="98.5982%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="98.4859%" y="133" width="0.0688%" height="15" fill="rgb(235,28,35)" fg:x="1431" fg:w="1"/><text x="98.7359%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (4 samples, 0.28%)</title><rect x="98.5547%" y="309" width="0.2753%" height="15" fill="rgb(210,56,17)" fg:x="1432" fg:w="4"/><text x="98.8047%" y="319.50"></text></g><g><title>__rust_dealloc (1 samples, 0.07%)</title><rect x="98.8300%" y="229" width="0.0688%" height="15" fill="rgb(224,130,29)" fg:x="1436" fg:w="1"/><text x="99.0800%" y="239.50"></text></g><g><title>main::min_cost (1,433 samples, 98.62%)</title><rect x="0.8947%" y="341" width="98.6235%" height="15" fill="rgb(235,212,8)" fg:x="13" fg:w="1433"/><text x="1.1447%" y="351.50">main::min_cost</text></g><g><title>main::update_sptree (250 samples, 17.21%)</title><rect x="82.3125%" y="325" width="17.2058%" height="15" fill="rgb(223,33,50)" fg:x="1196" fg:w="250"/><text x="82.5625%" y="335.50">main::update_sptree</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (10 samples, 0.69%)</title><rect x="98.8300%" y="309" width="0.6882%" height="15" fill="rgb(219,149,13)" fg:x="1436" fg:w="10"/><text x="99.0800%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (10 samples, 0.69%)</title><rect x="98.8300%" y="293" width="0.6882%" height="15" fill="rgb(250,156,29)" fg:x="1436" fg:w="10"/><text x="99.0800%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.69%)</title><rect x="98.8300%" y="277" width="0.6882%" height="15" fill="rgb(216,193,19)" fg:x="1436" fg:w="10"/><text x="99.0800%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.69%)</title><rect x="98.8300%" y="261" width="0.6882%" height="15" fill="rgb(216,135,14)" fg:x="1436" fg:w="10"/><text x="99.0800%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.69%)</title><rect x="98.8300%" y="245" width="0.6882%" height="15" fill="rgb(241,47,5)" fg:x="1436" fg:w="10"/><text x="99.0800%" y="255.50"></text></g><g><title>cfree (9 samples, 0.62%)</title><rect x="98.8988%" y="229" width="0.6194%" height="15" fill="rgb(233,42,35)" fg:x="1437" fg:w="9"/><text x="99.1488%" y="239.50"></text></g><g><title>[libc.so.6] (7 samples, 0.48%)</title><rect x="99.0365%" y="213" width="0.4818%" height="15" fill="rgb(231,13,6)" fg:x="1439" fg:w="7"/><text x="99.2865%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.14%)</title><rect x="99.3806%" y="197" width="0.1376%" height="15" fill="rgb(207,181,40)" fg:x="1444" fg:w="2"/><text x="99.6306%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.07%)</title><rect x="99.5182%" y="325" width="0.0688%" height="15" fill="rgb(254,173,49)" fg:x="1446" fg:w="1"/><text x="99.7682%" y="335.50"></text></g><g><title>core::ptr::write (1 samples, 0.07%)</title><rect x="99.5182%" y="309" width="0.0688%" height="15" fill="rgb(221,1,38)" fg:x="1446" fg:w="1"/><text x="99.7682%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.14%)</title><rect x="99.5182%" y="341" width="0.1376%" height="15" fill="rgb(206,124,46)" fg:x="1446" fg:w="2"/><text x="99.7682%" y="351.50"></text></g><g><title>petgraph::graph_impl::index_twice (1 samples, 0.07%)</title><rect x="99.5871%" y="325" width="0.0688%" height="15" fill="rgb(249,21,11)" fg:x="1447" fg:w="1"/><text x="99.8371%" y="335.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (1,437 samples, 98.90%)</title><rect x="0.8259%" y="405" width="98.8988%" height="15" fill="rgb(222,201,40)" fg:x="12" fg:w="1437"/><text x="1.0759%" y="415.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,437 samples, 98.90%)</title><rect x="0.8259%" y="389" width="98.8988%" height="15" fill="rgb(235,61,29)" fg:x="12" fg:w="1437"/><text x="1.0759%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,437 samples, 98.90%)</title><rect x="0.8259%" y="373" width="98.8988%" height="15" fill="rgb(219,207,3)" fg:x="12" fg:w="1437"/><text x="1.0759%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (1,437 samples, 98.90%)</title><rect x="0.8259%" y="357" width="98.8988%" height="15" fill="rgb(222,56,46)" fg:x="12" fg:w="1437"/><text x="1.0759%" y="367.50">main::main</text></g><g><title>rand::rng::Rng::gen (1 samples, 0.07%)</title><rect x="99.6559%" y="341" width="0.0688%" height="15" fill="rgb(239,76,54)" fg:x="1448" fg:w="1"/><text x="99.9059%" y="351.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.07%)</title><rect x="99.6559%" y="325" width="0.0688%" height="15" fill="rgb(231,124,27)" fg:x="1448" fg:w="1"/><text x="99.9059%" y="335.50"></text></g><g><title>rand::rng::Rng::gen (1 samples, 0.07%)</title><rect x="99.6559%" y="309" width="0.0688%" height="15" fill="rgb(249,195,6)" fg:x="1448" fg:w="1"/><text x="99.9059%" y="319.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.07%)</title><rect x="99.6559%" y="293" width="0.0688%" height="15" fill="rgb(237,174,47)" fg:x="1448" fg:w="1"/><text x="99.9059%" y="303.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (1 samples, 0.07%)</title><rect x="99.6559%" y="277" width="0.0688%" height="15" fill="rgb(206,201,31)" fg:x="1448" fg:w="1"/><text x="99.9059%" y="287.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.07%)</title><rect x="99.6559%" y="261" width="0.0688%" height="15" fill="rgb(231,57,52)" fg:x="1448" fg:w="1"/><text x="99.9059%" y="271.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 0.07%)</title><rect x="99.6559%" y="245" width="0.0688%" height="15" fill="rgb(248,177,22)" fg:x="1448" fg:w="1"/><text x="99.9059%" y="255.50"></text></g><g><title>_start (1,438 samples, 98.97%)</title><rect x="0.8259%" y="485" width="98.9677%" height="15" fill="rgb(215,211,37)" fg:x="12" fg:w="1438"/><text x="1.0759%" y="495.50">_start</text></g><g><title>__libc_start_main (1,438 samples, 98.97%)</title><rect x="0.8259%" y="469" width="98.9677%" height="15" fill="rgb(241,128,51)" fg:x="12" fg:w="1438"/><text x="1.0759%" y="479.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,438 samples, 98.97%)</title><rect x="0.8259%" y="453" width="98.9677%" height="15" fill="rgb(227,165,31)" fg:x="12" fg:w="1438"/><text x="1.0759%" y="463.50">[libc.so.6]</text></g><g><title>main (1,438 samples, 98.97%)</title><rect x="0.8259%" y="437" width="98.9677%" height="15" fill="rgb(228,167,24)" fg:x="12" fg:w="1438"/><text x="1.0759%" y="447.50">main</text></g><g><title>std::rt::lang_start_internal (1,438 samples, 98.97%)</title><rect x="0.8259%" y="421" width="98.9677%" height="15" fill="rgb(228,143,12)" fg:x="12" fg:w="1438"/><text x="1.0759%" y="431.50">std::rt::lang_start_internal</text></g><g><title>std::sys::sync::once::futex::Once::call (1 samples, 0.07%)</title><rect x="99.7247%" y="405" width="0.0688%" height="15" fill="rgb(249,149,8)" fg:x="1449" fg:w="1"/><text x="99.9747%" y="415.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="99.7247%" y="389" width="0.0688%" height="15" fill="rgb(243,35,44)" fg:x="1449" fg:w="1"/><text x="99.9747%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="99.7247%" y="373" width="0.0688%" height="15" fill="rgb(246,89,9)" fg:x="1449" fg:w="1"/><text x="99.9747%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="99.7247%" y="357" width="0.0688%" height="15" fill="rgb(233,213,13)" fg:x="1449" fg:w="1"/><text x="99.9747%" y="367.50"></text></g><g><title>main::min_cost (1 samples, 0.07%)</title><rect x="99.7935%" y="485" width="0.0688%" height="15" fill="rgb(233,141,41)" fg:x="1450" fg:w="1"/><text x="100.0435%" y="495.50"></text></g><g><title>main::update_sptree (1 samples, 0.07%)</title><rect x="99.7935%" y="469" width="0.0688%" height="15" fill="rgb(239,167,4)" fg:x="1450" fg:w="1"/><text x="100.0435%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.07%)</title><rect x="99.7935%" y="453" width="0.0688%" height="15" fill="rgb(209,217,16)" fg:x="1450" fg:w="1"/><text x="100.0435%" y="463.50"></text></g><g><title>all (1,453 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="1453"/><text x="0.2500%" y="527.50"></text></g><g><title>main (1,453 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="1453"/><text x="0.2500%" y="511.50">main</text></g><g><title>malloc (2 samples, 0.14%)</title><rect x="99.8624%" y="485" width="0.1376%" height="15" fill="rgb(230,90,52)" fg:x="1451" fg:w="2"/><text x="100.1124%" y="495.50"></text></g></svg></svg>