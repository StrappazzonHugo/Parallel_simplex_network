<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="5630"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.1243%" y="309" width="0.0178%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="1"/><text x="0.3743%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.16%)</title><rect x="0.0000%" y="373" width="0.1599%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="9"/><text x="0.2500%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.05%)</title><rect x="0.1066%" y="357" width="0.0533%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="3"/><text x="0.3566%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.05%)</title><rect x="0.1066%" y="341" width="0.0533%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="3"/><text x="0.3566%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.05%)</title><rect x="0.1066%" y="325" width="0.0533%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="3"/><text x="0.3566%" y="335.50"></text></g><g><title>__tunable_get_val (1 samples, 0.02%)</title><rect x="0.1421%" y="309" width="0.0178%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="1"/><text x="0.3921%" y="319.50"></text></g><g><title>exit (1 samples, 0.02%)</title><rect x="0.1599%" y="325" width="0.0178%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="1"/><text x="0.4099%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.1599%" y="309" width="0.0178%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="1"/><text x="0.4099%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.1599%" y="293" width="0.0178%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="0.4099%" y="303.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.02%)</title><rect x="0.1776%" y="293" width="0.0178%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="0.4276%" y="303.50"></text></g><g><title>__isoc23_sscanf (1 samples, 0.02%)</title><rect x="0.1776%" y="277" width="0.0178%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="1"/><text x="0.4276%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.1776%" y="261" width="0.0178%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="1"/><text x="0.4276%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.1776%" y="245" width="0.0178%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="1"/><text x="0.4276%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.04%)</title><rect x="0.5329%" y="229" width="0.0355%" height="15" fill="rgb(206,188,39)" fg:x="30" fg:w="2"/><text x="0.7829%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.04%)</title><rect x="0.5329%" y="213" width="0.0355%" height="15" fill="rgb(217,207,13)" fg:x="30" fg:w="2"/><text x="0.7829%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (2 samples, 0.04%)</title><rect x="0.5329%" y="197" width="0.0355%" height="15" fill="rgb(231,73,38)" fg:x="30" fg:w="2"/><text x="0.7829%" y="207.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="0.5861%" y="85" width="0.0178%" height="15" fill="rgb(225,20,46)" fg:x="33" fg:w="1"/><text x="0.8361%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="0.5861%" y="133" width="0.0355%" height="15" fill="rgb(210,31,41)" fg:x="33" fg:w="2"/><text x="0.8361%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="0.5861%" y="117" width="0.0355%" height="15" fill="rgb(221,200,47)" fg:x="33" fg:w="2"/><text x="0.8361%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="0.5861%" y="101" width="0.0355%" height="15" fill="rgb(226,26,5)" fg:x="33" fg:w="2"/><text x="0.8361%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.02%)</title><rect x="0.6039%" y="85" width="0.0178%" height="15" fill="rgb(249,33,26)" fg:x="34" fg:w="1"/><text x="0.8539%" y="95.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.02%)</title><rect x="0.6039%" y="69" width="0.0178%" height="15" fill="rgb(235,183,28)" fg:x="34" fg:w="1"/><text x="0.8539%" y="79.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (18 samples, 0.32%)</title><rect x="0.6217%" y="133" width="0.3197%" height="15" fill="rgb(221,5,38)" fg:x="35" fg:w="18"/><text x="0.8717%" y="143.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (18 samples, 0.32%)</title><rect x="0.6217%" y="117" width="0.3197%" height="15" fill="rgb(247,18,42)" fg:x="35" fg:w="18"/><text x="0.8717%" y="127.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (21 samples, 0.37%)</title><rect x="0.5861%" y="213" width="0.3730%" height="15" fill="rgb(241,131,45)" fg:x="33" fg:w="21"/><text x="0.8361%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.37%)</title><rect x="0.5861%" y="197" width="0.3730%" height="15" fill="rgb(249,31,29)" fg:x="33" fg:w="21"/><text x="0.8361%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.37%)</title><rect x="0.5861%" y="181" width="0.3730%" height="15" fill="rgb(225,111,53)" fg:x="33" fg:w="21"/><text x="0.8361%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.37%)</title><rect x="0.5861%" y="165" width="0.3730%" height="15" fill="rgb(238,160,17)" fg:x="33" fg:w="21"/><text x="0.8361%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.37%)</title><rect x="0.5861%" y="149" width="0.3730%" height="15" fill="rgb(214,148,48)" fg:x="33" fg:w="21"/><text x="0.8361%" y="159.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.02%)</title><rect x="0.9414%" y="133" width="0.0178%" height="15" fill="rgb(232,36,49)" fg:x="53" fg:w="1"/><text x="1.1914%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.05%)</title><rect x="0.9591%" y="197" width="0.0533%" height="15" fill="rgb(209,103,24)" fg:x="54" fg:w="3"/><text x="1.2091%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.05%)</title><rect x="0.9591%" y="181" width="0.0533%" height="15" fill="rgb(229,88,8)" fg:x="54" fg:w="3"/><text x="1.2091%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (2 samples, 0.04%)</title><rect x="0.9769%" y="165" width="0.0355%" height="15" fill="rgb(213,181,19)" fg:x="55" fg:w="2"/><text x="1.2269%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.04%)</title><rect x="0.9769%" y="149" width="0.0355%" height="15" fill="rgb(254,191,54)" fg:x="55" fg:w="2"/><text x="1.2269%" y="159.50"></text></g><g><title>main::min_cost::_{{closure}} (2 samples, 0.04%)</title><rect x="0.9769%" y="133" width="0.0355%" height="15" fill="rgb(241,83,37)" fg:x="55" fg:w="2"/><text x="1.2269%" y="143.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (2 samples, 0.04%)</title><rect x="0.9769%" y="117" width="0.0355%" height="15" fill="rgb(233,36,39)" fg:x="55" fg:w="2"/><text x="1.2269%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="1.3144%" y="149" width="0.0178%" height="15" fill="rgb(226,3,54)" fg:x="74" fg:w="1"/><text x="1.5644%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="1.3144%" y="133" width="0.0178%" height="15" fill="rgb(245,192,40)" fg:x="74" fg:w="1"/><text x="1.5644%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="1.3144%" y="117" width="0.0178%" height="15" fill="rgb(238,167,29)" fg:x="74" fg:w="1"/><text x="1.5644%" y="127.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (1 samples, 0.02%)</title><rect x="1.3321%" y="149" width="0.0178%" height="15" fill="rgb(232,182,51)" fg:x="75" fg:w="1"/><text x="1.5821%" y="159.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (1 samples, 0.02%)</title><rect x="1.3321%" y="133" width="0.0178%" height="15" fill="rgb(231,60,39)" fg:x="75" fg:w="1"/><text x="1.5821%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (23 samples, 0.41%)</title><rect x="0.9591%" y="213" width="0.4085%" height="15" fill="rgb(208,69,12)" fg:x="54" fg:w="23"/><text x="1.2091%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (20 samples, 0.36%)</title><rect x="1.0124%" y="197" width="0.3552%" height="15" fill="rgb(235,93,37)" fg:x="57" fg:w="20"/><text x="1.2624%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (20 samples, 0.36%)</title><rect x="1.0124%" y="181" width="0.3552%" height="15" fill="rgb(213,116,39)" fg:x="57" fg:w="20"/><text x="1.2624%" y="191.50"></text></g><g><title>main::min_cost::_{{closure}} (20 samples, 0.36%)</title><rect x="1.0124%" y="165" width="0.3552%" height="15" fill="rgb(222,207,29)" fg:x="57" fg:w="20"/><text x="1.2624%" y="175.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight_mut (1 samples, 0.02%)</title><rect x="1.3499%" y="149" width="0.0178%" height="15" fill="rgb(206,96,30)" fg:x="76" fg:w="1"/><text x="1.5999%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (1 samples, 0.02%)</title><rect x="1.3499%" y="133" width="0.0178%" height="15" fill="rgb(218,138,4)" fg:x="76" fg:w="1"/><text x="1.5999%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (1 samples, 0.02%)</title><rect x="1.3499%" y="117" width="0.0178%" height="15" fill="rgb(250,191,14)" fg:x="76" fg:w="1"/><text x="1.5999%" y="127.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (595 samples, 10.57%)</title><rect x="64.3694%" y="197" width="10.5684%" height="15" fill="rgb(239,60,40)" fg:x="3624" fg:w="595"/><text x="64.6194%" y="207.50">&lt;i32 as core::o..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (31 samples, 0.55%)</title><rect x="74.9378%" y="197" width="0.5506%" height="15" fill="rgb(206,27,48)" fg:x="4219" fg:w="31"/><text x="75.1878%" y="207.50"></text></g><g><title>&lt;i32 as num_traits::sign::Signed&gt;::is_negative (316 samples, 5.61%)</title><rect x="75.4885%" y="197" width="5.6128%" height="15" fill="rgb(225,35,8)" fg:x="4250" fg:w="316"/><text x="75.7385%" y="207.50">&lt;i32 as..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (474 samples, 8.42%)</title><rect x="81.1012%" y="197" width="8.4192%" height="15" fill="rgb(250,213,24)" fg:x="4566" fg:w="474"/><text x="81.3512%" y="207.50">core::cmp::i..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (191 samples, 3.39%)</title><rect x="89.5204%" y="165" width="3.3925%" height="15" fill="rgb(247,123,22)" fg:x="5040" fg:w="191"/><text x="89.7704%" y="175.50">&lt;us..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (191 samples, 3.39%)</title><rect x="89.5204%" y="149" width="3.3925%" height="15" fill="rgb(231,138,38)" fg:x="5040" fg:w="191"/><text x="89.7704%" y="159.50">cor..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (361 samples, 6.41%)</title><rect x="89.5204%" y="197" width="6.4121%" height="15" fill="rgb(231,145,46)" fg:x="5040" fg:w="361"/><text x="89.7704%" y="207.50">core::it..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (361 samples, 6.41%)</title><rect x="89.5204%" y="181" width="6.4121%" height="15" fill="rgb(251,118,11)" fg:x="5040" fg:w="361"/><text x="89.7704%" y="191.50">&lt;core::o..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (170 samples, 3.02%)</title><rect x="92.9130%" y="165" width="3.0195%" height="15" fill="rgb(217,147,25)" fg:x="5231" fg:w="170"/><text x="93.1630%" y="175.50">cor..</text></g><g><title>main::__find_block_search (5,326 samples, 94.60%)</title><rect x="1.3677%" y="213" width="94.6004%" height="15" fill="rgb(247,81,37)" fg:x="77" fg:w="5326"/><text x="1.6177%" y="223.50">main::__find_block_search</text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.04%)</title><rect x="95.9325%" y="197" width="0.0355%" height="15" fill="rgb(209,12,38)" fg:x="5401" fg:w="2"/><text x="96.1825%" y="207.50"></text></g><g><title>main::_compute_flowchange (15 samples, 0.27%)</title><rect x="95.9680%" y="213" width="0.2664%" height="15" fill="rgb(227,1,9)" fg:x="5403" fg:w="15"/><text x="96.2180%" y="223.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect x="96.2167%" y="197" width="0.0178%" height="15" fill="rgb(248,47,43)" fg:x="5417" fg:w="1"/><text x="96.4667%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.02%)</title><rect x="96.4654%" y="197" width="0.0178%" height="15" fill="rgb(221,10,30)" fg:x="5431" fg:w="1"/><text x="96.7154%" y="207.50"></text></g><g><title>main::_find_best_arc (16 samples, 0.28%)</title><rect x="96.2345%" y="213" width="0.2842%" height="15" fill="rgb(210,229,1)" fg:x="5418" fg:w="16"/><text x="96.4845%" y="223.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (2 samples, 0.04%)</title><rect x="96.4831%" y="197" width="0.0355%" height="15" fill="rgb(222,148,37)" fg:x="5432" fg:w="2"/><text x="96.7331%" y="207.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.02%)</title><rect x="96.5187%" y="197" width="0.0178%" height="15" fill="rgb(234,67,33)" fg:x="5434" fg:w="1"/><text x="96.7687%" y="207.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="96.5187%" y="181" width="0.0178%" height="15" fill="rgb(247,98,35)" fg:x="5434" fg:w="1"/><text x="96.7687%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.02%)</title><rect x="96.5187%" y="165" width="0.0178%" height="15" fill="rgb(247,138,52)" fg:x="5434" fg:w="1"/><text x="96.7687%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.02%)</title><rect x="96.5187%" y="149" width="0.0178%" height="15" fill="rgb(213,79,30)" fg:x="5434" fg:w="1"/><text x="96.7687%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.02%)</title><rect x="96.5187%" y="133" width="0.0178%" height="15" fill="rgb(246,177,23)" fg:x="5434" fg:w="1"/><text x="96.7687%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="96.5187%" y="117" width="0.0178%" height="15" fill="rgb(230,62,27)" fg:x="5434" fg:w="1"/><text x="96.7687%" y="127.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.02%)</title><rect x="96.5187%" y="101" width="0.0178%" height="15" fill="rgb(216,154,8)" fg:x="5434" fg:w="1"/><text x="96.7687%" y="111.50"></text></g><g><title>__libc_calloc (1 samples, 0.02%)</title><rect x="96.5187%" y="85" width="0.0178%" height="15" fill="rgb(244,35,45)" fg:x="5434" fg:w="1"/><text x="96.7687%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="96.5719%" y="149" width="0.0178%" height="15" fill="rgb(251,115,12)" fg:x="5437" fg:w="1"/><text x="96.8219%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="96.5719%" y="133" width="0.0178%" height="15" fill="rgb(240,54,50)" fg:x="5437" fg:w="1"/><text x="96.8219%" y="143.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="96.5719%" y="117" width="0.0178%" height="15" fill="rgb(233,84,52)" fg:x="5437" fg:w="1"/><text x="96.8219%" y="127.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.09%)</title><rect x="96.5719%" y="165" width="0.0888%" height="15" fill="rgb(207,117,47)" fg:x="5437" fg:w="5"/><text x="96.8219%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.07%)</title><rect x="96.5897%" y="149" width="0.0710%" height="15" fill="rgb(249,43,39)" fg:x="5438" fg:w="4"/><text x="96.8397%" y="159.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (4 samples, 0.07%)</title><rect x="96.5897%" y="133" width="0.0710%" height="15" fill="rgb(209,38,44)" fg:x="5438" fg:w="4"/><text x="96.8397%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.07%)</title><rect x="97.6377%" y="133" width="0.0710%" height="15" fill="rgb(236,212,23)" fg:x="5497" fg:w="4"/><text x="97.8877%" y="143.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.07%)</title><rect x="97.6377%" y="117" width="0.0710%" height="15" fill="rgb(242,79,21)" fg:x="5497" fg:w="4"/><text x="97.8877%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.07%)</title><rect x="97.6377%" y="101" width="0.0710%" height="15" fill="rgb(211,96,35)" fg:x="5497" fg:w="4"/><text x="97.8877%" y="111.50"></text></g><g><title>main::initialization (72 samples, 1.28%)</title><rect x="96.5187%" y="213" width="1.2789%" height="15" fill="rgb(253,215,40)" fg:x="5434" fg:w="72"/><text x="96.7687%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (71 samples, 1.26%)</title><rect x="96.5364%" y="197" width="1.2611%" height="15" fill="rgb(211,81,21)" fg:x="5435" fg:w="71"/><text x="96.7864%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (71 samples, 1.26%)</title><rect x="96.5364%" y="181" width="1.2611%" height="15" fill="rgb(208,190,38)" fg:x="5435" fg:w="71"/><text x="96.7864%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (64 samples, 1.14%)</title><rect x="96.6607%" y="165" width="1.1368%" height="15" fill="rgb(235,213,38)" fg:x="5442" fg:w="64"/><text x="96.9107%" y="175.50"></text></g><g><title>main::initialization::_{{closure}} (64 samples, 1.14%)</title><rect x="96.6607%" y="149" width="1.1368%" height="15" fill="rgb(237,122,38)" fg:x="5442" fg:w="64"/><text x="96.9107%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.09%)</title><rect x="97.7087%" y="133" width="0.0888%" height="15" fill="rgb(244,218,35)" fg:x="5501" fg:w="5"/><text x="97.9587%" y="143.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="97.7798%" y="117" width="0.0178%" height="15" fill="rgb(240,68,47)" fg:x="5505" fg:w="1"/><text x="98.0298%" y="127.50"></text></g><g><title>main::update_node_potentials (13 samples, 0.23%)</title><rect x="97.7975%" y="213" width="0.2309%" height="15" fill="rgb(210,16,53)" fg:x="5506" fg:w="13"/><text x="98.0475%" y="223.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (7 samples, 0.12%)</title><rect x="97.9041%" y="197" width="0.1243%" height="15" fill="rgb(235,124,12)" fg:x="5512" fg:w="7"/><text x="98.1541%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.07%)</title><rect x="98.5080%" y="197" width="0.0710%" height="15" fill="rgb(224,169,11)" fg:x="5546" fg:w="4"/><text x="98.7580%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.07%)</title><rect x="98.5080%" y="181" width="0.0710%" height="15" fill="rgb(250,166,2)" fg:x="5546" fg:w="4"/><text x="98.7580%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.07%)</title><rect x="98.5080%" y="165" width="0.0710%" height="15" fill="rgb(242,216,29)" fg:x="5546" fg:w="4"/><text x="98.7580%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (8 samples, 0.14%)</title><rect x="98.5790%" y="197" width="0.1421%" height="15" fill="rgb(230,116,27)" fg:x="5550" fg:w="8"/><text x="98.8290%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (8 samples, 0.14%)</title><rect x="98.5790%" y="181" width="0.1421%" height="15" fill="rgb(228,99,48)" fg:x="5550" fg:w="8"/><text x="98.8290%" y="191.50"></text></g><g><title>main::update_sptree::_{{closure}} (8 samples, 0.14%)</title><rect x="98.5790%" y="165" width="0.1421%" height="15" fill="rgb(253,11,6)" fg:x="5550" fg:w="8"/><text x="98.8290%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.04%)</title><rect x="98.6856%" y="149" width="0.0355%" height="15" fill="rgb(247,143,39)" fg:x="5556" fg:w="2"/><text x="98.9356%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.04%)</title><rect x="98.6856%" y="133" width="0.0355%" height="15" fill="rgb(236,97,10)" fg:x="5556" fg:w="2"/><text x="98.9356%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.04%)</title><rect x="98.6856%" y="117" width="0.0355%" height="15" fill="rgb(233,208,19)" fg:x="5556" fg:w="2"/><text x="98.9356%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.07%)</title><rect x="98.8810%" y="165" width="0.0710%" height="15" fill="rgb(216,164,2)" fg:x="5567" fg:w="4"/><text x="99.1310%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.07%)</title><rect x="98.8810%" y="149" width="0.0710%" height="15" fill="rgb(220,129,5)" fg:x="5567" fg:w="4"/><text x="99.1310%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.07%)</title><rect x="98.8810%" y="133" width="0.0710%" height="15" fill="rgb(242,17,10)" fg:x="5567" fg:w="4"/><text x="99.1310%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (18 samples, 0.32%)</title><rect x="98.7211%" y="197" width="0.3197%" height="15" fill="rgb(242,107,0)" fg:x="5558" fg:w="18"/><text x="98.9711%" y="207.50"></text></g><g><title>main::update_sptree::_{{closure}} (18 samples, 0.32%)</title><rect x="98.7211%" y="181" width="0.3197%" height="15" fill="rgb(251,28,31)" fg:x="5558" fg:w="18"/><text x="98.9711%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5 samples, 0.09%)</title><rect x="98.9520%" y="165" width="0.0888%" height="15" fill="rgb(233,223,10)" fg:x="5571" fg:w="5"/><text x="99.2020%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="99.0941%" y="149" width="0.0178%" height="15" fill="rgb(215,21,27)" fg:x="5579" fg:w="1"/><text x="99.3441%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.27%)</title><rect x="99.1119%" y="133" width="0.2664%" height="15" fill="rgb(232,23,21)" fg:x="5580" fg:w="15"/><text x="99.3619%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.27%)</title><rect x="99.1119%" y="117" width="0.2664%" height="15" fill="rgb(244,5,23)" fg:x="5580" fg:w="15"/><text x="99.3619%" y="127.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.27%)</title><rect x="99.1119%" y="101" width="0.2664%" height="15" fill="rgb(226,81,46)" fg:x="5580" fg:w="15"/><text x="99.3619%" y="111.50"></text></g><g><title>realloc (15 samples, 0.27%)</title><rect x="99.1119%" y="85" width="0.2664%" height="15" fill="rgb(247,70,30)" fg:x="5580" fg:w="15"/><text x="99.3619%" y="95.50"></text></g><g><title>[libc.so.6] (14 samples, 0.25%)</title><rect x="99.1297%" y="69" width="0.2487%" height="15" fill="rgb(212,68,19)" fg:x="5581" fg:w="14"/><text x="99.3797%" y="79.50"></text></g><g><title>[libc.so.6] (9 samples, 0.16%)</title><rect x="99.2185%" y="53" width="0.1599%" height="15" fill="rgb(240,187,13)" fg:x="5586" fg:w="9"/><text x="99.4685%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.3606%" y="37" width="0.0178%" height="15" fill="rgb(223,113,26)" fg:x="5594" fg:w="1"/><text x="99.6106%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.30%)</title><rect x="99.1119%" y="149" width="0.3020%" height="15" fill="rgb(206,192,2)" fg:x="5580" fg:w="17"/><text x="99.3619%" y="159.50"></text></g><g><title>malloc (2 samples, 0.04%)</title><rect x="99.3783%" y="133" width="0.0355%" height="15" fill="rgb(241,108,4)" fg:x="5595" fg:w="2"/><text x="99.6283%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.39%)</title><rect x="99.0409%" y="197" width="0.3908%" height="15" fill="rgb(247,173,49)" fg:x="5576" fg:w="22"/><text x="99.2909%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.34%)</title><rect x="99.0941%" y="181" width="0.3375%" height="15" fill="rgb(224,114,35)" fg:x="5579" fg:w="19"/><text x="99.3441%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 0.34%)</title><rect x="99.0941%" y="165" width="0.3375%" height="15" fill="rgb(245,159,27)" fg:x="5579" fg:w="19"/><text x="99.3441%" y="175.50"></text></g><g><title>core::cmp::max (1 samples, 0.02%)</title><rect x="99.4139%" y="149" width="0.0178%" height="15" fill="rgb(245,172,44)" fg:x="5597" fg:w="1"/><text x="99.6639%" y="159.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="99.4139%" y="133" width="0.0178%" height="15" fill="rgb(236,23,11)" fg:x="5597" fg:w="1"/><text x="99.6639%" y="143.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.02%)</title><rect x="99.4139%" y="117" width="0.0178%" height="15" fill="rgb(205,117,38)" fg:x="5597" fg:w="1"/><text x="99.6639%" y="127.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.04%)</title><rect x="99.4316%" y="197" width="0.0355%" height="15" fill="rgb(237,72,25)" fg:x="5598" fg:w="2"/><text x="99.6816%" y="207.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.04%)</title><rect x="99.4316%" y="181" width="0.0355%" height="15" fill="rgb(244,70,9)" fg:x="5598" fg:w="2"/><text x="99.6816%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2 samples, 0.04%)</title><rect x="99.4316%" y="165" width="0.0355%" height="15" fill="rgb(217,125,39)" fg:x="5598" fg:w="2"/><text x="99.6816%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.04%)</title><rect x="99.4316%" y="149" width="0.0355%" height="15" fill="rgb(235,36,10)" fg:x="5598" fg:w="2"/><text x="99.6816%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2 samples, 0.04%)</title><rect x="99.4316%" y="133" width="0.0355%" height="15" fill="rgb(251,123,47)" fg:x="5598" fg:w="2"/><text x="99.6816%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.04%)</title><rect x="99.4316%" y="117" width="0.0355%" height="15" fill="rgb(221,13,13)" fg:x="5598" fg:w="2"/><text x="99.6816%" y="127.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2 samples, 0.04%)</title><rect x="99.4316%" y="101" width="0.0355%" height="15" fill="rgb(238,131,9)" fg:x="5598" fg:w="2"/><text x="99.6816%" y="111.50"></text></g><g><title>__libc_calloc (2 samples, 0.04%)</title><rect x="99.4316%" y="85" width="0.0355%" height="15" fill="rgb(211,50,8)" fg:x="5598" fg:w="2"/><text x="99.6816%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.4494%" y="69" width="0.0178%" height="15" fill="rgb(245,182,24)" fg:x="5599" fg:w="1"/><text x="99.6994%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.02%)</title><rect x="99.4671%" y="197" width="0.0178%" height="15" fill="rgb(242,14,37)" fg:x="5600" fg:w="1"/><text x="99.7171%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.4671%" y="181" width="0.0178%" height="15" fill="rgb(246,228,12)" fg:x="5600" fg:w="1"/><text x="99.7171%" y="191.50"></text></g><g><title>main::min_cost (5,574 samples, 99.01%)</title><rect x="0.5684%" y="229" width="99.0053%" height="15" fill="rgb(213,55,15)" fg:x="32" fg:w="5574"/><text x="0.8184%" y="239.50">main::min_cost</text></g><g><title>main::update_sptree (87 samples, 1.55%)</title><rect x="98.0284%" y="213" width="1.5453%" height="15" fill="rgb(209,9,3)" fg:x="5519" fg:w="87"/><text x="98.2784%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (5 samples, 0.09%)</title><rect x="99.4849%" y="197" width="0.0888%" height="15" fill="rgb(230,59,30)" fg:x="5601" fg:w="5"/><text x="99.7349%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (5 samples, 0.09%)</title><rect x="99.4849%" y="181" width="0.0888%" height="15" fill="rgb(209,121,21)" fg:x="5601" fg:w="5"/><text x="99.7349%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.09%)</title><rect x="99.4849%" y="165" width="0.0888%" height="15" fill="rgb(220,109,13)" fg:x="5601" fg:w="5"/><text x="99.7349%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.09%)</title><rect x="99.4849%" y="149" width="0.0888%" height="15" fill="rgb(232,18,1)" fg:x="5601" fg:w="5"/><text x="99.7349%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.09%)</title><rect x="99.4849%" y="133" width="0.0888%" height="15" fill="rgb(215,41,42)" fg:x="5601" fg:w="5"/><text x="99.7349%" y="143.50"></text></g><g><title>cfree (5 samples, 0.09%)</title><rect x="99.4849%" y="117" width="0.0888%" height="15" fill="rgb(224,123,36)" fg:x="5601" fg:w="5"/><text x="99.7349%" y="127.50"></text></g><g><title>[libc.so.6] (3 samples, 0.05%)</title><rect x="99.5204%" y="101" width="0.0533%" height="15" fill="rgb(240,125,3)" fg:x="5603" fg:w="3"/><text x="99.7704%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.5560%" y="85" width="0.0178%" height="15" fill="rgb(205,98,50)" fg:x="5605" fg:w="1"/><text x="99.8060%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.05%)</title><rect x="99.6803%" y="197" width="0.0533%" height="15" fill="rgb(205,185,37)" fg:x="5612" fg:w="3"/><text x="99.9303%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.21%)</title><rect x="99.6625%" y="213" width="0.2131%" height="15" fill="rgb(238,207,15)" fg:x="5611" fg:w="12"/><text x="99.9125%" y="223.50"></text></g><g><title>core::ptr::write (8 samples, 0.14%)</title><rect x="99.7336%" y="197" width="0.1421%" height="15" fill="rgb(213,199,42)" fg:x="5615" fg:w="8"/><text x="99.9836%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.02%)</title><rect x="99.8757%" y="213" width="0.0178%" height="15" fill="rgb(235,201,11)" fg:x="5623" fg:w="1"/><text x="100.1257%" y="223.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="99.8757%" y="197" width="0.0178%" height="15" fill="rgb(207,46,11)" fg:x="5623" fg:w="1"/><text x="100.1257%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1 samples, 0.02%)</title><rect x="99.8757%" y="181" width="0.0178%" height="15" fill="rgb(241,35,35)" fg:x="5623" fg:w="1"/><text x="100.1257%" y="191.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (19 samples, 0.34%)</title><rect x="99.5737%" y="229" width="0.3375%" height="15" fill="rgb(243,32,47)" fg:x="5606" fg:w="19"/><text x="99.8237%" y="239.50"></text></g><g><title>petgraph::graph_impl::index_twice (1 samples, 0.02%)</title><rect x="99.8934%" y="213" width="0.0178%" height="15" fill="rgb(247,202,23)" fg:x="5624" fg:w="1"/><text x="100.1434%" y="223.50"></text></g><g><title>all (5,630 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="5630"/><text x="0.2500%" y="415.50"></text></g><g><title>main (5,630 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="5630"/><text x="0.2500%" y="399.50">main</text></g><g><title>_start (5,621 samples, 99.84%)</title><rect x="0.1599%" y="373" width="99.8401%" height="15" fill="rgb(222,74,54)" fg:x="9" fg:w="5621"/><text x="0.4099%" y="383.50">_start</text></g><g><title>__libc_start_main (5,621 samples, 99.84%)</title><rect x="0.1599%" y="357" width="99.8401%" height="15" fill="rgb(216,99,12)" fg:x="9" fg:w="5621"/><text x="0.4099%" y="367.50">__libc_start_main</text></g><g><title>[libc.so.6] (5,621 samples, 99.84%)</title><rect x="0.1599%" y="341" width="99.8401%" height="15" fill="rgb(226,22,26)" fg:x="9" fg:w="5621"/><text x="0.4099%" y="351.50">[libc.so.6]</text></g><g><title>main (5,620 samples, 99.82%)</title><rect x="0.1776%" y="325" width="99.8224%" height="15" fill="rgb(217,163,10)" fg:x="10" fg:w="5620"/><text x="0.4276%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (5,620 samples, 99.82%)</title><rect x="0.1776%" y="309" width="99.8224%" height="15" fill="rgb(213,25,53)" fg:x="10" fg:w="5620"/><text x="0.4276%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (5,619 samples, 99.80%)</title><rect x="0.1954%" y="293" width="99.8046%" height="15" fill="rgb(252,105,26)" fg:x="11" fg:w="5619"/><text x="0.4454%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,619 samples, 99.80%)</title><rect x="0.1954%" y="277" width="99.8046%" height="15" fill="rgb(220,39,43)" fg:x="11" fg:w="5619"/><text x="0.4454%" y="287.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,619 samples, 99.80%)</title><rect x="0.1954%" y="261" width="99.8046%" height="15" fill="rgb(229,68,48)" fg:x="11" fg:w="5619"/><text x="0.4454%" y="271.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (5,619 samples, 99.80%)</title><rect x="0.1954%" y="245" width="99.8046%" height="15" fill="rgb(252,8,32)" fg:x="11" fg:w="5619"/><text x="0.4454%" y="255.50">main::main</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (5 samples, 0.09%)</title><rect x="99.9112%" y="229" width="0.0888%" height="15" fill="rgb(223,20,43)" fg:x="5625" fg:w="5"/><text x="100.1612%" y="239.50"></text></g></svg></svg>