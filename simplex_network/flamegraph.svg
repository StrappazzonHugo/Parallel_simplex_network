<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="12104"><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="0.0000%" y="517" width="0.0165%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="527.50"></text></g><g><title>[[heap]] (4 samples, 0.03%)</title><rect x="0.0000%" y="533" width="0.0330%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="0.0165%" y="517" width="0.0165%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.2665%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="0.0165%" y="501" width="0.0165%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="0.2665%" y="511.50"></text></g><g><title>[[stack]] (7 samples, 0.06%)</title><rect x="0.0330%" y="533" width="0.0578%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="7"/><text x="0.2830%" y="543.50"></text></g><g><title>realloc (4 samples, 0.03%)</title><rect x="0.0578%" y="517" width="0.0330%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="4"/><text x="0.3078%" y="527.50"></text></g><g><title>[anon] (4 samples, 0.03%)</title><rect x="0.0909%" y="533" width="0.0330%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="4"/><text x="0.3409%" y="543.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="0.0909%" y="517" width="0.0330%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="4"/><text x="0.3409%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.07%)</title><rect x="0.1239%" y="533" width="0.0744%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="9"/><text x="0.3739%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.1735%" y="517" width="0.0248%" height="15" fill="rgb(220,122,19)" fg:x="21" fg:w="3"/><text x="0.4235%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.1735%" y="501" width="0.0248%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="3"/><text x="0.4235%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.1735%" y="485" width="0.0248%" height="15" fill="rgb(240,193,28)" fg:x="21" fg:w="3"/><text x="0.4235%" y="495.50"></text></g><g><title>[libc.so.6] (13 samples, 0.11%)</title><rect x="0.2148%" y="517" width="0.1074%" height="15" fill="rgb(216,20,37)" fg:x="26" fg:w="13"/><text x="0.4648%" y="527.50"></text></g><g><title>__rdl_realloc (3 samples, 0.02%)</title><rect x="0.3222%" y="517" width="0.0248%" height="15" fill="rgb(206,188,39)" fg:x="39" fg:w="3"/><text x="0.5722%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="0.3470%" y="517" width="0.0248%" height="15" fill="rgb(217,207,13)" fg:x="42" fg:w="3"/><text x="0.5970%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.02%)</title><rect x="0.3470%" y="501" width="0.0248%" height="15" fill="rgb(231,73,38)" fg:x="42" fg:w="3"/><text x="0.5970%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.02%)</title><rect x="0.3470%" y="485" width="0.0248%" height="15" fill="rgb(225,20,46)" fg:x="42" fg:w="3"/><text x="0.5970%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.02%)</title><rect x="0.3470%" y="469" width="0.0248%" height="15" fill="rgb(210,31,41)" fg:x="42" fg:w="3"/><text x="0.5970%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="0.3718%" y="517" width="0.0248%" height="15" fill="rgb(221,200,47)" fg:x="45" fg:w="3"/><text x="0.6218%" y="527.50"></text></g><g><title>[unknown] (31 samples, 0.26%)</title><rect x="0.2148%" y="533" width="0.2561%" height="15" fill="rgb(226,26,5)" fg:x="26" fg:w="31"/><text x="0.4648%" y="543.50"></text></g><g><title>realloc (7 samples, 0.06%)</title><rect x="0.4131%" y="517" width="0.0578%" height="15" fill="rgb(249,33,26)" fg:x="50" fg:w="7"/><text x="0.6631%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (22 samples, 0.18%)</title><rect x="0.4874%" y="373" width="0.1818%" height="15" fill="rgb(235,183,28)" fg:x="59" fg:w="22"/><text x="0.7374%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (22 samples, 0.18%)</title><rect x="0.4874%" y="357" width="0.1818%" height="15" fill="rgb(221,5,38)" fg:x="59" fg:w="22"/><text x="0.7374%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.18%)</title><rect x="0.4874%" y="341" width="0.1818%" height="15" fill="rgb(247,18,42)" fg:x="59" fg:w="22"/><text x="0.7374%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.18%)</title><rect x="0.4874%" y="325" width="0.1818%" height="15" fill="rgb(241,131,45)" fg:x="59" fg:w="22"/><text x="0.7374%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.18%)</title><rect x="0.4874%" y="309" width="0.1818%" height="15" fill="rgb(249,31,29)" fg:x="59" fg:w="22"/><text x="0.7374%" y="319.50"></text></g><g><title>cfree (21 samples, 0.17%)</title><rect x="0.4957%" y="293" width="0.1735%" height="15" fill="rgb(225,111,53)" fg:x="60" fg:w="21"/><text x="0.7457%" y="303.50"></text></g><g><title>[libc.so.6] (12 samples, 0.10%)</title><rect x="0.5701%" y="277" width="0.0991%" height="15" fill="rgb(238,160,17)" fg:x="69" fg:w="12"/><text x="0.8201%" y="287.50"></text></g><g><title>[libc.so.6] (10 samples, 0.08%)</title><rect x="0.5866%" y="261" width="0.0826%" height="15" fill="rgb(214,148,48)" fg:x="71" fg:w="10"/><text x="0.8366%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="1.0162%" y="357" width="0.0165%" height="15" fill="rgb(232,36,49)" fg:x="123" fg:w="2"/><text x="1.2662%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="1.0162%" y="341" width="0.0165%" height="15" fill="rgb(209,103,24)" fg:x="123" fg:w="2"/><text x="1.2662%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="1.0162%" y="325" width="0.0165%" height="15" fill="rgb(229,88,8)" fg:x="123" fg:w="2"/><text x="1.2662%" y="335.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (43 samples, 0.36%)</title><rect x="1.0492%" y="357" width="0.3553%" height="15" fill="rgb(213,181,19)" fg:x="127" fg:w="43"/><text x="1.2992%" y="367.50"></text></g><g><title>main::get_reduced_cost_edgeindex (5 samples, 0.04%)</title><rect x="1.4045%" y="357" width="0.0413%" height="15" fill="rgb(254,191,54)" fg:x="170" fg:w="5"/><text x="1.6545%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="1.4293%" y="341" width="0.0165%" height="15" fill="rgb(241,83,37)" fg:x="173" fg:w="2"/><text x="1.6793%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="1.4293%" y="325" width="0.0165%" height="15" fill="rgb(233,36,39)" fg:x="173" fg:w="2"/><text x="1.6793%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="1.4293%" y="309" width="0.0165%" height="15" fill="rgb(226,3,54)" fg:x="173" fg:w="2"/><text x="1.6793%" y="319.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (2 samples, 0.02%)</title><rect x="1.4458%" y="357" width="0.0165%" height="15" fill="rgb(245,192,40)" fg:x="175" fg:w="2"/><text x="1.6958%" y="367.50"></text></g><g><title>main::__update_node_potentials (97 samples, 0.80%)</title><rect x="0.6692%" y="373" width="0.8014%" height="15" fill="rgb(238,167,29)" fg:x="81" fg:w="97"/><text x="0.9192%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (44 samples, 0.36%)</title><rect x="2.8586%" y="117" width="0.3635%" height="15" fill="rgb(232,182,51)" fg:x="346" fg:w="44"/><text x="3.1086%" y="127.50"></text></g><g><title>core::cmp::min_by (44 samples, 0.36%)</title><rect x="2.8586%" y="101" width="0.3635%" height="15" fill="rgb(231,60,39)" fg:x="346" fg:w="44"/><text x="3.1086%" y="111.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (42 samples, 0.35%)</title><rect x="3.2551%" y="101" width="0.3470%" height="15" fill="rgb(208,69,12)" fg:x="394" fg:w="42"/><text x="3.5051%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.14%)</title><rect x="3.6021%" y="69" width="0.1404%" height="15" fill="rgb(235,93,37)" fg:x="436" fg:w="17"/><text x="3.8521%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (17 samples, 0.14%)</title><rect x="3.6021%" y="53" width="0.1404%" height="15" fill="rgb(213,116,39)" fg:x="436" fg:w="17"/><text x="3.8521%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (17 samples, 0.14%)</title><rect x="3.6021%" y="37" width="0.1404%" height="15" fill="rgb(222,207,29)" fg:x="436" fg:w="17"/><text x="3.8521%" y="47.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (25 samples, 0.21%)</title><rect x="3.6021%" y="101" width="0.2065%" height="15" fill="rgb(206,96,30)" fg:x="436" fg:w="25"/><text x="3.8521%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (25 samples, 0.21%)</title><rect x="3.6021%" y="85" width="0.2065%" height="15" fill="rgb(218,138,4)" fg:x="436" fg:w="25"/><text x="3.8521%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.07%)</title><rect x="3.7426%" y="69" width="0.0661%" height="15" fill="rgb(250,191,14)" fg:x="453" fg:w="8"/><text x="3.9926%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.07%)</title><rect x="3.7426%" y="53" width="0.0661%" height="15" fill="rgb(239,60,40)" fg:x="453" fg:w="8"/><text x="3.9926%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="3.8665%" y="69" width="0.0165%" height="15" fill="rgb(206,27,48)" fg:x="468" fg:w="2"/><text x="4.1165%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.17%)</title><rect x="3.8665%" y="85" width="0.1735%" height="15" fill="rgb(225,35,8)" fg:x="468" fg:w="21"/><text x="4.1165%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (19 samples, 0.16%)</title><rect x="3.8830%" y="69" width="0.1570%" height="15" fill="rgb(250,213,24)" fg:x="470" fg:w="19"/><text x="4.1330%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.16%)</title><rect x="3.8830%" y="53" width="0.1570%" height="15" fill="rgb(247,123,22)" fg:x="470" fg:w="19"/><text x="4.1330%" y="63.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (12 samples, 0.10%)</title><rect x="4.0400%" y="85" width="0.0991%" height="15" fill="rgb(231,138,38)" fg:x="489" fg:w="12"/><text x="4.2900%" y="95.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (9 samples, 0.07%)</title><rect x="4.1391%" y="85" width="0.0744%" height="15" fill="rgb(231,145,46)" fg:x="501" fg:w="9"/><text x="4.3891%" y="95.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (18 samples, 0.15%)</title><rect x="4.2135%" y="85" width="0.1487%" height="15" fill="rgb(251,118,11)" fg:x="510" fg:w="18"/><text x="4.4635%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (194 samples, 1.60%)</title><rect x="2.7677%" y="181" width="1.6028%" height="15" fill="rgb(217,147,25)" fg:x="335" fg:w="194"/><text x="3.0177%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (194 samples, 1.60%)</title><rect x="2.7677%" y="165" width="1.6028%" height="15" fill="rgb(247,81,37)" fg:x="335" fg:w="194"/><text x="3.0177%" y="175.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (183 samples, 1.51%)</title><rect x="2.8586%" y="149" width="1.5119%" height="15" fill="rgb(209,12,38)" fg:x="346" fg:w="183"/><text x="3.1086%" y="159.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (183 samples, 1.51%)</title><rect x="2.8586%" y="133" width="1.5119%" height="15" fill="rgb(227,1,9)" fg:x="346" fg:w="183"/><text x="3.1086%" y="143.50"></text></g><g><title>main::_find_block_search::_{{closure}} (139 samples, 1.15%)</title><rect x="3.2221%" y="117" width="1.1484%" height="15" fill="rgb(248,47,43)" fg:x="390" fg:w="139"/><text x="3.4721%" y="127.50"></text></g><g><title>main::get_reduced_cost_edgeindex (68 samples, 0.56%)</title><rect x="3.8087%" y="101" width="0.5618%" height="15" fill="rgb(221,10,30)" fg:x="461" fg:w="68"/><text x="4.0587%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (758 samples, 6.26%)</title><rect x="6.4276%" y="117" width="6.2624%" height="15" fill="rgb(210,229,1)" fg:x="778" fg:w="758"/><text x="6.6776%" y="127.50">core::it..</text></g><g><title>core::cmp::min_by (758 samples, 6.26%)</title><rect x="6.4276%" y="101" width="6.2624%" height="15" fill="rgb(222,148,37)" fg:x="778" fg:w="758"/><text x="6.6776%" y="111.50">core::cm..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (574 samples, 4.74%)</title><rect x="14.0036%" y="101" width="4.7422%" height="15" fill="rgb(234,67,33)" fg:x="1695" fg:w="574"/><text x="14.2536%" y="111.50">&lt;i32 a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (192 samples, 1.59%)</title><rect x="18.7459%" y="69" width="1.5863%" height="15" fill="rgb(247,98,35)" fg:x="2269" fg:w="192"/><text x="18.9959%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (192 samples, 1.59%)</title><rect x="18.7459%" y="53" width="1.5863%" height="15" fill="rgb(247,138,52)" fg:x="2269" fg:w="192"/><text x="18.9959%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (192 samples, 1.59%)</title><rect x="18.7459%" y="37" width="1.5863%" height="15" fill="rgb(213,79,30)" fg:x="2269" fg:w="192"/><text x="18.9959%" y="47.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (332 samples, 2.74%)</title><rect x="18.7459%" y="101" width="2.7429%" height="15" fill="rgb(246,177,23)" fg:x="2269" fg:w="332"/><text x="18.9959%" y="111.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (332 samples, 2.74%)</title><rect x="18.7459%" y="85" width="2.7429%" height="15" fill="rgb(230,62,27)" fg:x="2269" fg:w="332"/><text x="18.9959%" y="95.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (140 samples, 1.16%)</title><rect x="20.3321%" y="69" width="1.1566%" height="15" fill="rgb(216,154,8)" fg:x="2461" fg:w="140"/><text x="20.5821%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (140 samples, 1.16%)</title><rect x="20.3321%" y="53" width="1.1566%" height="15" fill="rgb(244,35,45)" fg:x="2461" fg:w="140"/><text x="20.5821%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (110 samples, 0.91%)</title><rect x="22.9263%" y="69" width="0.9088%" height="15" fill="rgb(251,115,12)" fg:x="2775" fg:w="110"/><text x="23.1763%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (369 samples, 3.05%)</title><rect x="22.9263%" y="85" width="3.0486%" height="15" fill="rgb(240,54,50)" fg:x="2775" fg:w="369"/><text x="23.1763%" y="95.50">&lt;al..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (259 samples, 2.14%)</title><rect x="23.8351%" y="69" width="2.1398%" height="15" fill="rgb(233,84,52)" fg:x="2885" fg:w="259"/><text x="24.0851%" y="79.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (259 samples, 2.14%)</title><rect x="23.8351%" y="53" width="2.1398%" height="15" fill="rgb(207,117,47)" fg:x="2885" fg:w="259"/><text x="24.0851%" y="63.50">&lt;..</text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (234 samples, 1.93%)</title><rect x="25.9749%" y="85" width="1.9332%" height="15" fill="rgb(249,43,39)" fg:x="3144" fg:w="234"/><text x="26.2249%" y="95.50">&lt;..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (368 samples, 3.04%)</title><rect x="27.9081%" y="85" width="3.0403%" height="15" fill="rgb(209,38,44)" fg:x="3378" fg:w="368"/><text x="28.1581%" y="95.50">&lt;i3..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (283 samples, 2.34%)</title><rect x="30.9484%" y="85" width="2.3381%" height="15" fill="rgb(236,212,23)" fg:x="3746" fg:w="283"/><text x="31.1984%" y="95.50">p..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (3,846 samples, 31.77%)</title><rect x="1.9085%" y="197" width="31.7746%" height="15" fill="rgb(242,79,21)" fg:x="231" fg:w="3846"/><text x="2.1585%" y="207.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,548 samples, 29.31%)</title><rect x="4.3705%" y="181" width="29.3126%" height="15" fill="rgb(211,96,35)" fg:x="529" fg:w="3548"/><text x="4.6205%" y="191.50">core::ops::function::impls::&lt;impl core::ops::fu..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (3,492 samples, 28.85%)</title><rect x="4.8331%" y="165" width="28.8500%" height="15" fill="rgb(253,215,40)" fg:x="585" fg:w="3492"/><text x="5.0831%" y="175.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (3,299 samples, 27.26%)</title><rect x="6.4276%" y="149" width="27.2555%" height="15" fill="rgb(211,81,21)" fg:x="778" fg:w="3299"/><text x="6.6776%" y="159.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3,299 samples, 27.26%)</title><rect x="6.4276%" y="133" width="27.2555%" height="15" fill="rgb(208,190,38)" fg:x="778" fg:w="3299"/><text x="6.6776%" y="143.50">core::iter::adapters::map::map_fold::_{{clos..</text></g><g><title>main::_find_block_search::_{{closure}} (2,541 samples, 20.99%)</title><rect x="12.6900%" y="117" width="20.9931%" height="15" fill="rgb(235,213,38)" fg:x="1536" fg:w="2541"/><text x="12.9400%" y="127.50">main::_find_block_search::_{{clos..</text></g><g><title>main::get_reduced_cost_edgeindex (1,476 samples, 12.19%)</title><rect x="21.4888%" y="101" width="12.1943%" height="15" fill="rgb(237,122,38)" fg:x="2601" fg:w="1476"/><text x="21.7388%" y="111.50">main::get_reduced_..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (48 samples, 0.40%)</title><rect x="33.2865%" y="85" width="0.3966%" height="15" fill="rgb(244,218,35)" fg:x="4029" fg:w="48"/><text x="33.5365%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,925 samples, 32.43%)</title><rect x="1.5036%" y="325" width="32.4273%" height="15" fill="rgb(240,68,47)" fg:x="182" fg:w="3925"/><text x="1.7536%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,925 samples, 32.43%)</title><rect x="1.5036%" y="309" width="32.4273%" height="15" fill="rgb(210,16,53)" fg:x="182" fg:w="3925"/><text x="1.7536%" y="319.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (3,925 samples, 32.43%)</title><rect x="1.5036%" y="293" width="32.4273%" height="15" fill="rgb(235,124,12)" fg:x="182" fg:w="3925"/><text x="1.7536%" y="303.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,925 samples, 32.43%)</title><rect x="1.5036%" y="277" width="32.4273%" height="15" fill="rgb(224,169,11)" fg:x="182" fg:w="3925"/><text x="1.7536%" y="287.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,925 samples, 32.43%)</title><rect x="1.5036%" y="261" width="32.4273%" height="15" fill="rgb(250,166,2)" fg:x="182" fg:w="3925"/><text x="1.7536%" y="271.50">&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,925 samples, 32.43%)</title><rect x="1.5036%" y="245" width="32.4273%" height="15" fill="rgb(242,216,29)" fg:x="182" fg:w="3925"/><text x="1.7536%" y="255.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,925 samples, 32.43%)</title><rect x="1.5036%" y="229" width="32.4273%" height="15" fill="rgb(230,116,27)" fg:x="182" fg:w="3925"/><text x="1.7536%" y="239.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,925 samples, 32.43%)</title><rect x="1.5036%" y="213" width="32.4273%" height="15" fill="rgb(228,99,48)" fg:x="182" fg:w="3925"/><text x="1.7536%" y="223.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.25%)</title><rect x="33.6831%" y="197" width="0.2479%" height="15" fill="rgb(253,11,6)" fg:x="4077" fg:w="30"/><text x="33.9331%" y="207.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (7 samples, 0.06%)</title><rect x="33.8731%" y="181" width="0.0578%" height="15" fill="rgb(247,143,39)" fg:x="4100" fg:w="7"/><text x="34.1231%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (7 samples, 0.06%)</title><rect x="33.8731%" y="165" width="0.0578%" height="15" fill="rgb(236,97,10)" fg:x="4100" fg:w="7"/><text x="34.1231%" y="175.50"></text></g><g><title>main::_find_block_search (3,931 samples, 32.48%)</title><rect x="1.4706%" y="373" width="32.4769%" height="15" fill="rgb(233,208,19)" fg:x="178" fg:w="3931"/><text x="1.7206%" y="383.50">main::_find_block_search</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (3,927 samples, 32.44%)</title><rect x="1.5036%" y="357" width="32.4438%" height="15" fill="rgb(216,164,2)" fg:x="182" fg:w="3927"/><text x="1.7536%" y="367.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (3,927 samples, 32.44%)</title><rect x="1.5036%" y="341" width="32.4438%" height="15" fill="rgb(220,129,5)" fg:x="182" fg:w="3927"/><text x="1.7536%" y="351.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="33.9309%" y="325" width="0.0165%" height="15" fill="rgb(242,17,10)" fg:x="4107" fg:w="2"/><text x="34.1809%" y="335.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="33.9557%" y="245" width="0.0248%" height="15" fill="rgb(242,107,0)" fg:x="4110" fg:w="3"/><text x="34.2057%" y="255.50"></text></g><g><title>__libc_calloc (20 samples, 0.17%)</title><rect x="33.9805%" y="245" width="0.1652%" height="15" fill="rgb(251,28,31)" fg:x="4113" fg:w="20"/><text x="34.2305%" y="255.50"></text></g><g><title>[libc.so.6] (17 samples, 0.14%)</title><rect x="34.0053%" y="229" width="0.1404%" height="15" fill="rgb(233,223,10)" fg:x="4116" fg:w="17"/><text x="34.2553%" y="239.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="34.1210%" y="213" width="0.0248%" height="15" fill="rgb(215,21,27)" fg:x="4130" fg:w="3"/><text x="34.3710%" y="223.50"></text></g><g><title>__rdl_alloc_zeroed (4 samples, 0.03%)</title><rect x="34.1457%" y="245" width="0.0330%" height="15" fill="rgb(232,23,21)" fg:x="4133" fg:w="4"/><text x="34.3957%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (29 samples, 0.24%)</title><rect x="33.9557%" y="325" width="0.2396%" height="15" fill="rgb(244,5,23)" fg:x="4110" fg:w="29"/><text x="34.2057%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (29 samples, 0.24%)</title><rect x="33.9557%" y="309" width="0.2396%" height="15" fill="rgb(226,81,46)" fg:x="4110" fg:w="29"/><text x="34.2057%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (29 samples, 0.24%)</title><rect x="33.9557%" y="293" width="0.2396%" height="15" fill="rgb(247,70,30)" fg:x="4110" fg:w="29"/><text x="34.2057%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.24%)</title><rect x="33.9557%" y="277" width="0.2396%" height="15" fill="rgb(212,68,19)" fg:x="4110" fg:w="29"/><text x="34.2057%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (29 samples, 0.24%)</title><rect x="33.9557%" y="261" width="0.2396%" height="15" fill="rgb(240,187,13)" fg:x="4110" fg:w="29"/><text x="34.2057%" y="271.50"></text></g><g><title>__rust_alloc_zeroed (2 samples, 0.02%)</title><rect x="34.1788%" y="245" width="0.0165%" height="15" fill="rgb(223,113,26)" fg:x="4137" fg:w="2"/><text x="34.4288%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.03%)</title><rect x="34.1953%" y="309" width="0.0330%" height="15" fill="rgb(206,192,2)" fg:x="4139" fg:w="4"/><text x="34.4453%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.03%)</title><rect x="34.1953%" y="293" width="0.0330%" height="15" fill="rgb(241,108,4)" fg:x="4139" fg:w="4"/><text x="34.4453%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (9 samples, 0.07%)</title><rect x="34.1953%" y="325" width="0.0744%" height="15" fill="rgb(247,173,49)" fg:x="4139" fg:w="9"/><text x="34.4453%" y="335.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="34.2284%" y="309" width="0.0413%" height="15" fill="rgb(224,114,35)" fg:x="4143" fg:w="5"/><text x="34.4784%" y="319.50"></text></g><g><title>alloc::vec::from_elem (51 samples, 0.42%)</title><rect x="33.9557%" y="357" width="0.4213%" height="15" fill="rgb(245,159,27)" fg:x="4110" fg:w="51"/><text x="34.2057%" y="367.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (51 samples, 0.42%)</title><rect x="33.9557%" y="341" width="0.4213%" height="15" fill="rgb(245,172,44)" fg:x="4110" fg:w="51"/><text x="34.2057%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.11%)</title><rect x="34.2697%" y="325" width="0.1074%" height="15" fill="rgb(236,23,11)" fg:x="4148" fg:w="13"/><text x="34.5197%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.11%)</title><rect x="34.2697%" y="309" width="0.1074%" height="15" fill="rgb(205,117,38)" fg:x="4148" fg:w="13"/><text x="34.5197%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.11%)</title><rect x="34.2697%" y="293" width="0.1074%" height="15" fill="rgb(237,72,25)" fg:x="4148" fg:w="13"/><text x="34.5197%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.10%)</title><rect x="34.2779%" y="277" width="0.0991%" height="15" fill="rgb(244,70,9)" fg:x="4149" fg:w="12"/><text x="34.5279%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.10%)</title><rect x="34.2779%" y="261" width="0.0991%" height="15" fill="rgb(217,125,39)" fg:x="4149" fg:w="12"/><text x="34.5279%" y="271.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.10%)</title><rect x="34.2779%" y="245" width="0.0991%" height="15" fill="rgb(235,36,10)" fg:x="4149" fg:w="12"/><text x="34.5279%" y="255.50"></text></g><g><title>malloc (10 samples, 0.08%)</title><rect x="34.2944%" y="229" width="0.0826%" height="15" fill="rgb(251,123,47)" fg:x="4151" fg:w="10"/><text x="34.5444%" y="239.50"></text></g><g><title>[libc.so.6] (6 samples, 0.05%)</title><rect x="34.3275%" y="213" width="0.0496%" height="15" fill="rgb(221,13,13)" fg:x="4155" fg:w="6"/><text x="34.5775%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="34.9967%" y="261" width="0.0248%" height="15" fill="rgb(238,131,9)" fg:x="4236" fg:w="3"/><text x="35.2467%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="34.9967%" y="245" width="0.0248%" height="15" fill="rgb(211,50,8)" fg:x="4236" fg:w="3"/><text x="35.2467%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="34.9967%" y="229" width="0.0248%" height="15" fill="rgb(245,182,24)" fg:x="4236" fg:w="3"/><text x="35.2467%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.02%)</title><rect x="35.0215%" y="261" width="0.0248%" height="15" fill="rgb(242,14,37)" fg:x="4239" fg:w="3"/><text x="35.2715%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.02%)</title><rect x="35.0215%" y="245" width="0.0248%" height="15" fill="rgb(246,228,12)" fg:x="4239" fg:w="3"/><text x="35.2715%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.02%)</title><rect x="35.0215%" y="229" width="0.0248%" height="15" fill="rgb(213,55,15)" fg:x="4239" fg:w="3"/><text x="35.2715%" y="239.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (11 samples, 0.09%)</title><rect x="35.0463%" y="261" width="0.0909%" height="15" fill="rgb(209,9,3)" fg:x="4242" fg:w="11"/><text x="35.2963%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (12 samples, 0.10%)</title><rect x="35.1371%" y="261" width="0.0991%" height="15" fill="rgb(230,59,30)" fg:x="4253" fg:w="12"/><text x="35.3871%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12 samples, 0.10%)</title><rect x="35.1371%" y="245" width="0.0991%" height="15" fill="rgb(209,121,21)" fg:x="4253" fg:w="12"/><text x="35.3871%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12 samples, 0.10%)</title><rect x="35.1371%" y="229" width="0.0991%" height="15" fill="rgb(220,109,13)" fg:x="4253" fg:w="12"/><text x="35.3871%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.10%)</title><rect x="35.1371%" y="213" width="0.0991%" height="15" fill="rgb(232,18,1)" fg:x="4253" fg:w="12"/><text x="35.3871%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (108 samples, 0.89%)</title><rect x="34.3771%" y="325" width="0.8923%" height="15" fill="rgb(215,41,42)" fg:x="4161" fg:w="108"/><text x="34.6271%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (96 samples, 0.79%)</title><rect x="34.4762%" y="309" width="0.7931%" height="15" fill="rgb(224,123,36)" fg:x="4173" fg:w="96"/><text x="34.7262%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (92 samples, 0.76%)</title><rect x="34.5093%" y="293" width="0.7601%" height="15" fill="rgb(240,125,3)" fg:x="4177" fg:w="92"/><text x="34.7593%" y="303.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (92 samples, 0.76%)</title><rect x="34.5093%" y="277" width="0.7601%" height="15" fill="rgb(205,98,50)" fg:x="4177" fg:w="92"/><text x="34.7593%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (4 samples, 0.03%)</title><rect x="35.2363%" y="261" width="0.0330%" height="15" fill="rgb(205,185,37)" fg:x="4265" fg:w="4"/><text x="35.4863%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (12 samples, 0.10%)</title><rect x="35.8807%" y="261" width="0.0991%" height="15" fill="rgb(238,207,15)" fg:x="4343" fg:w="12"/><text x="36.1307%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (12 samples, 0.10%)</title><rect x="35.8807%" y="245" width="0.0991%" height="15" fill="rgb(213,199,42)" fg:x="4343" fg:w="12"/><text x="36.1307%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (12 samples, 0.10%)</title><rect x="35.8807%" y="229" width="0.0991%" height="15" fill="rgb(235,201,11)" fg:x="4343" fg:w="12"/><text x="36.1307%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (9 samples, 0.07%)</title><rect x="35.9798%" y="245" width="0.0744%" height="15" fill="rgb(207,46,11)" fg:x="4355" fg:w="9"/><text x="36.2298%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (9 samples, 0.07%)</title><rect x="35.9798%" y="229" width="0.0744%" height="15" fill="rgb(241,35,35)" fg:x="4355" fg:w="9"/><text x="36.2298%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (248 samples, 2.05%)</title><rect x="38.0701%" y="229" width="2.0489%" height="15" fill="rgb(243,32,47)" fg:x="4608" fg:w="248"/><text x="38.3201%" y="239.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (248 samples, 2.05%)</title><rect x="38.0701%" y="213" width="2.0489%" height="15" fill="rgb(247,202,23)" fg:x="4608" fg:w="248"/><text x="38.3201%" y="223.50">c..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (575 samples, 4.75%)</title><rect x="35.4180%" y="309" width="4.7505%" height="15" fill="rgb(219,102,11)" fg:x="4287" fg:w="575"/><text x="35.6680%" y="319.50">&lt;core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (559 samples, 4.62%)</title><rect x="35.5502%" y="293" width="4.6183%" height="15" fill="rgb(243,110,44)" fg:x="4303" fg:w="559"/><text x="35.8002%" y="303.50">core:..</text></g><g><title>main::compute_flowchange::_{{closure}} (559 samples, 4.62%)</title><rect x="35.5502%" y="277" width="4.6183%" height="15" fill="rgb(222,74,54)" fg:x="4303" fg:w="559"/><text x="35.8002%" y="287.50">main:..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (507 samples, 4.19%)</title><rect x="35.9798%" y="261" width="4.1887%" height="15" fill="rgb(216,99,12)" fg:x="4355" fg:w="507"/><text x="36.2298%" y="271.50">petgr..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (498 samples, 4.11%)</title><rect x="36.0542%" y="245" width="4.1143%" height="15" fill="rgb(226,22,26)" fg:x="4364" fg:w="498"/><text x="36.3042%" y="255.50">petg..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (6 samples, 0.05%)</title><rect x="40.1190%" y="229" width="0.0496%" height="15" fill="rgb(217,163,10)" fg:x="4856" fg:w="6"/><text x="40.3690%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (6 samples, 0.05%)</title><rect x="40.1190%" y="213" width="0.0496%" height="15" fill="rgb(213,25,53)" fg:x="4856" fg:w="6"/><text x="40.3690%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.05%)</title><rect x="40.2759%" y="277" width="0.0496%" height="15" fill="rgb(252,105,26)" fg:x="4875" fg:w="6"/><text x="40.5259%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (721 samples, 5.96%)</title><rect x="34.3771%" y="357" width="5.9567%" height="15" fill="rgb(220,39,43)" fg:x="4161" fg:w="721"/><text x="34.6271%" y="367.50">core::it..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (721 samples, 5.96%)</title><rect x="34.3771%" y="341" width="5.9567%" height="15" fill="rgb(229,68,48)" fg:x="4161" fg:w="721"/><text x="34.6271%" y="351.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (613 samples, 5.06%)</title><rect x="35.2693%" y="325" width="5.0644%" height="15" fill="rgb(252,8,32)" fg:x="4269" fg:w="613"/><text x="35.5193%" y="335.50">core::..</text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.17%)</title><rect x="40.1685%" y="309" width="0.1652%" height="15" fill="rgb(223,20,43)" fg:x="4862" fg:w="20"/><text x="40.4185%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.12%)</title><rect x="40.2098%" y="293" width="0.1239%" height="15" fill="rgb(229,81,49)" fg:x="4867" fg:w="15"/><text x="40.4598%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (41 samples, 0.34%)</title><rect x="40.4081%" y="293" width="0.3387%" height="15" fill="rgb(236,28,36)" fg:x="4891" fg:w="41"/><text x="40.6581%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (41 samples, 0.34%)</title><rect x="40.4081%" y="277" width="0.3387%" height="15" fill="rgb(249,185,26)" fg:x="4891" fg:w="41"/><text x="40.6581%" y="287.50"></text></g><g><title>core::cmp::min_by (41 samples, 0.34%)</title><rect x="40.4081%" y="261" width="0.3387%" height="15" fill="rgb(249,174,33)" fg:x="4891" fg:w="41"/><text x="40.6581%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 0.02%)</title><rect x="40.7221%" y="245" width="0.0248%" height="15" fill="rgb(233,201,37)" fg:x="4929" fg:w="3"/><text x="40.9721%" y="255.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (3 samples, 0.02%)</title><rect x="40.7221%" y="229" width="0.0248%" height="15" fill="rgb(221,78,26)" fg:x="4929" fg:w="3"/><text x="40.9721%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (54 samples, 0.45%)</title><rect x="40.3338%" y="357" width="0.4461%" height="15" fill="rgb(250,127,30)" fg:x="4882" fg:w="54"/><text x="40.5838%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (54 samples, 0.45%)</title><rect x="40.3338%" y="341" width="0.4461%" height="15" fill="rgb(230,49,44)" fg:x="4882" fg:w="54"/><text x="40.5838%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (54 samples, 0.45%)</title><rect x="40.3338%" y="325" width="0.4461%" height="15" fill="rgb(229,67,23)" fg:x="4882" fg:w="54"/><text x="40.5838%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (54 samples, 0.45%)</title><rect x="40.3338%" y="309" width="0.4461%" height="15" fill="rgb(249,83,47)" fg:x="4882" fg:w="54"/><text x="40.5838%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4 samples, 0.03%)</title><rect x="40.7469%" y="293" width="0.0330%" height="15" fill="rgb(215,43,3)" fg:x="4932" fg:w="4"/><text x="40.9969%" y="303.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="40.7799%" y="277" width="0.0165%" height="15" fill="rgb(238,154,13)" fg:x="4936" fg:w="2"/><text x="41.0299%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (16 samples, 0.13%)</title><rect x="40.7799%" y="357" width="0.1322%" height="15" fill="rgb(219,56,2)" fg:x="4936" fg:w="16"/><text x="41.0299%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (16 samples, 0.13%)</title><rect x="40.7799%" y="341" width="0.1322%" height="15" fill="rgb(233,0,4)" fg:x="4936" fg:w="16"/><text x="41.0299%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.13%)</title><rect x="40.7799%" y="325" width="0.1322%" height="15" fill="rgb(235,30,7)" fg:x="4936" fg:w="16"/><text x="41.0299%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.13%)</title><rect x="40.7799%" y="309" width="0.1322%" height="15" fill="rgb(250,79,13)" fg:x="4936" fg:w="16"/><text x="41.0299%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.13%)</title><rect x="40.7799%" y="293" width="0.1322%" height="15" fill="rgb(211,146,34)" fg:x="4936" fg:w="16"/><text x="41.0299%" y="303.50"></text></g><g><title>cfree (14 samples, 0.12%)</title><rect x="40.7964%" y="277" width="0.1157%" height="15" fill="rgb(228,22,38)" fg:x="4938" fg:w="14"/><text x="41.0464%" y="287.50"></text></g><g><title>[libc.so.6] (7 samples, 0.06%)</title><rect x="40.8543%" y="261" width="0.0578%" height="15" fill="rgb(235,168,5)" fg:x="4945" fg:w="7"/><text x="41.1043%" y="271.50"></text></g><g><title>main::compute_flowchange (850 samples, 7.02%)</title><rect x="33.9475%" y="373" width="7.0225%" height="15" fill="rgb(221,155,16)" fg:x="4109" fg:w="850"/><text x="34.1975%" y="383.50">main::com..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (7 samples, 0.06%)</title><rect x="40.9121%" y="357" width="0.0578%" height="15" fill="rgb(215,215,53)" fg:x="4952" fg:w="7"/><text x="41.1621%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (7 samples, 0.06%)</title><rect x="40.9121%" y="341" width="0.0578%" height="15" fill="rgb(223,4,10)" fg:x="4952" fg:w="7"/><text x="41.1621%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="40.9121%" y="325" width="0.0578%" height="15" fill="rgb(234,103,6)" fg:x="4952" fg:w="7"/><text x="41.1621%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.06%)</title><rect x="40.9121%" y="309" width="0.0578%" height="15" fill="rgb(227,97,0)" fg:x="4952" fg:w="7"/><text x="41.1621%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.06%)</title><rect x="40.9121%" y="293" width="0.0578%" height="15" fill="rgb(234,150,53)" fg:x="4952" fg:w="7"/><text x="41.1621%" y="303.50"></text></g><g><title>cfree (7 samples, 0.06%)</title><rect x="40.9121%" y="277" width="0.0578%" height="15" fill="rgb(228,201,54)" fg:x="4952" fg:w="7"/><text x="41.1621%" y="287.50"></text></g><g><title>[libc.so.6] (6 samples, 0.05%)</title><rect x="40.9204%" y="261" width="0.0496%" height="15" fill="rgb(222,22,37)" fg:x="4953" fg:w="6"/><text x="41.1704%" y="271.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="40.9369%" y="245" width="0.0330%" height="15" fill="rgb(237,53,32)" fg:x="4955" fg:w="4"/><text x="41.1869%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="40.9699%" y="357" width="0.0248%" height="15" fill="rgb(233,25,53)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="40.9699%" y="341" width="0.0248%" height="15" fill="rgb(210,40,34)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="40.9699%" y="325" width="0.0248%" height="15" fill="rgb(241,220,44)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="40.9699%" y="309" width="0.0248%" height="15" fill="rgb(235,28,35)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="40.9699%" y="293" width="0.0248%" height="15" fill="rgb(210,56,17)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.02%)</title><rect x="40.9699%" y="277" width="0.0248%" height="15" fill="rgb(224,130,29)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.02%)</title><rect x="40.9699%" y="261" width="0.0248%" height="15" fill="rgb(235,212,8)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.02%)</title><rect x="40.9699%" y="245" width="0.0248%" height="15" fill="rgb(223,33,50)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.02%)</title><rect x="40.9699%" y="229" width="0.0248%" height="15" fill="rgb(219,149,13)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3 samples, 0.02%)</title><rect x="40.9699%" y="213" width="0.0248%" height="15" fill="rgb(250,156,29)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="223.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (3 samples, 0.02%)</title><rect x="40.9699%" y="197" width="0.0248%" height="15" fill="rgb(216,193,19)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints (3 samples, 0.02%)</title><rect x="40.9699%" y="181" width="0.0248%" height="15" fill="rgb(216,135,14)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="40.9699%" y="165" width="0.0248%" height="15" fill="rgb(241,47,5)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="175.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_endpoints::_{{closure}} (3 samples, 0.02%)</title><rect x="40.9699%" y="149" width="0.0248%" height="15" fill="rgb(233,42,35)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="159.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (3 samples, 0.02%)</title><rect x="40.9699%" y="133" width="0.0248%" height="15" fill="rgb(231,13,6)" fg:x="4959" fg:w="3"/><text x="41.2199%" y="143.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (3 samples, 0.02%)</title><rect x="41.0112%" y="357" width="0.0248%" height="15" fill="rgb(207,181,40)" fg:x="4964" fg:w="3"/><text x="41.2612%" y="367.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (2 samples, 0.02%)</title><rect x="41.0195%" y="341" width="0.0165%" height="15" fill="rgb(254,173,49)" fg:x="4965" fg:w="2"/><text x="41.2695%" y="351.50"></text></g><g><title>main::compute_node_potentials (10 samples, 0.08%)</title><rect x="40.9699%" y="373" width="0.0826%" height="15" fill="rgb(221,1,38)" fg:x="4959" fg:w="10"/><text x="41.2199%" y="383.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (2 samples, 0.02%)</title><rect x="41.0360%" y="357" width="0.0165%" height="15" fill="rgb(206,124,46)" fg:x="4967" fg:w="2"/><text x="41.2860%" y="367.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (2 samples, 0.02%)</title><rect x="41.0360%" y="341" width="0.0165%" height="15" fill="rgb(249,21,11)" fg:x="4967" fg:w="2"/><text x="41.2860%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.48%)</title><rect x="43.5806%" y="357" width="0.4792%" height="15" fill="rgb(222,201,40)" fg:x="5275" fg:w="58"/><text x="43.8306%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.26%)</title><rect x="43.7954%" y="341" width="0.2644%" height="15" fill="rgb(235,61,29)" fg:x="5301" fg:w="32"/><text x="44.0454%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.03%)</title><rect x="44.3325%" y="309" width="0.0330%" height="15" fill="rgb(219,207,3)" fg:x="5366" fg:w="4"/><text x="44.5825%" y="319.50"></text></g><g><title>__rdl_realloc (3 samples, 0.02%)</title><rect x="44.3903%" y="245" width="0.0248%" height="15" fill="rgb(222,56,46)" fg:x="5373" fg:w="3"/><text x="44.6403%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (94 samples, 0.78%)</title><rect x="44.3903%" y="293" width="0.7766%" height="15" fill="rgb(239,76,54)" fg:x="5373" fg:w="94"/><text x="44.6403%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (94 samples, 0.78%)</title><rect x="44.3903%" y="277" width="0.7766%" height="15" fill="rgb(231,124,27)" fg:x="5373" fg:w="94"/><text x="44.6403%" y="287.50"></text></g><g><title>alloc::alloc::realloc (94 samples, 0.78%)</title><rect x="44.3903%" y="261" width="0.7766%" height="15" fill="rgb(249,195,6)" fg:x="5373" fg:w="94"/><text x="44.6403%" y="271.50"></text></g><g><title>realloc (91 samples, 0.75%)</title><rect x="44.4151%" y="245" width="0.7518%" height="15" fill="rgb(237,174,47)" fg:x="5376" fg:w="91"/><text x="44.6651%" y="255.50"></text></g><g><title>[libc.so.6] (83 samples, 0.69%)</title><rect x="44.4812%" y="229" width="0.6857%" height="15" fill="rgb(206,201,31)" fg:x="5384" fg:w="83"/><text x="44.7312%" y="239.50"></text></g><g><title>[libc.so.6] (80 samples, 0.66%)</title><rect x="44.5059%" y="213" width="0.6609%" height="15" fill="rgb(231,57,52)" fg:x="5387" fg:w="80"/><text x="44.7559%" y="223.50"></text></g><g><title>[libc.so.6] (21 samples, 0.17%)</title><rect x="44.9934%" y="197" width="0.1735%" height="15" fill="rgb(248,177,22)" fg:x="5446" fg:w="21"/><text x="45.2434%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (107 samples, 0.88%)</title><rect x="44.3655%" y="309" width="0.8840%" height="15" fill="rgb(215,211,37)" fg:x="5370" fg:w="107"/><text x="44.6155%" y="319.50"></text></g><g><title>malloc (9 samples, 0.07%)</title><rect x="45.1751%" y="293" width="0.0744%" height="15" fill="rgb(241,128,51)" fg:x="5468" fg:w="9"/><text x="45.4251%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (118 samples, 0.97%)</title><rect x="44.3077%" y="341" width="0.9749%" height="15" fill="rgb(227,165,31)" fg:x="5363" fg:w="118"/><text x="44.5577%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (118 samples, 0.97%)</title><rect x="44.3077%" y="325" width="0.9749%" height="15" fill="rgb(228,167,24)" fg:x="5363" fg:w="118"/><text x="44.5577%" y="335.50"></text></g><g><title>core::cmp::max (4 samples, 0.03%)</title><rect x="45.2495%" y="309" width="0.0330%" height="15" fill="rgb(228,143,12)" fg:x="5477" fg:w="4"/><text x="45.4995%" y="319.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.03%)</title><rect x="45.2495%" y="293" width="0.0330%" height="15" fill="rgb(249,149,8)" fg:x="5477" fg:w="4"/><text x="45.4995%" y="303.50"></text></g><g><title>core::cmp::max_by (4 samples, 0.03%)</title><rect x="45.2495%" y="277" width="0.0330%" height="15" fill="rgb(243,35,44)" fg:x="5477" fg:w="4"/><text x="45.4995%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.03%)</title><rect x="45.2826%" y="341" width="0.0330%" height="15" fill="rgb(246,89,9)" fg:x="5481" fg:w="4"/><text x="45.5326%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.03%)</title><rect x="45.2826%" y="325" width="0.0330%" height="15" fill="rgb(233,213,13)" fg:x="5481" fg:w="4"/><text x="45.5326%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (158 samples, 1.31%)</title><rect x="44.0598%" y="357" width="1.3054%" height="15" fill="rgb(233,141,41)" fg:x="5333" fg:w="158"/><text x="44.3098%" y="367.50"></text></g><g><title>core::ptr::write (6 samples, 0.05%)</title><rect x="45.3156%" y="341" width="0.0496%" height="15" fill="rgb(239,167,4)" fg:x="5485" fg:w="6"/><text x="45.5656%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2 samples, 0.02%)</title><rect x="45.3734%" y="309" width="0.0165%" height="15" fill="rgb(209,217,16)" fg:x="5492" fg:w="2"/><text x="45.6234%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="45.3734%" y="293" width="0.0165%" height="15" fill="rgb(219,88,35)" fg:x="5492" fg:w="2"/><text x="45.6234%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.16%)</title><rect x="45.3982%" y="261" width="0.1570%" height="15" fill="rgb(220,193,23)" fg:x="5495" fg:w="19"/><text x="45.6482%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (19 samples, 0.16%)</title><rect x="45.3982%" y="245" width="0.1570%" height="15" fill="rgb(230,90,52)" fg:x="5495" fg:w="19"/><text x="45.6482%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.16%)</title><rect x="45.3982%" y="229" width="0.1570%" height="15" fill="rgb(252,106,19)" fg:x="5495" fg:w="19"/><text x="45.6482%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (19 samples, 0.16%)</title><rect x="45.3982%" y="213" width="0.1570%" height="15" fill="rgb(206,74,20)" fg:x="5495" fg:w="19"/><text x="45.6482%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (19 samples, 0.16%)</title><rect x="45.3982%" y="197" width="0.1570%" height="15" fill="rgb(230,138,44)" fg:x="5495" fg:w="19"/><text x="45.6482%" y="207.50"></text></g><g><title>alloc::alloc::realloc (19 samples, 0.16%)</title><rect x="45.3982%" y="181" width="0.1570%" height="15" fill="rgb(235,182,43)" fg:x="5495" fg:w="19"/><text x="45.6482%" y="191.50"></text></g><g><title>realloc (19 samples, 0.16%)</title><rect x="45.3982%" y="165" width="0.1570%" height="15" fill="rgb(242,16,51)" fg:x="5495" fg:w="19"/><text x="45.6482%" y="175.50"></text></g><g><title>[libc.so.6] (18 samples, 0.15%)</title><rect x="45.4065%" y="149" width="0.1487%" height="15" fill="rgb(248,9,4)" fg:x="5496" fg:w="18"/><text x="45.6565%" y="159.50"></text></g><g><title>[libc.so.6] (17 samples, 0.14%)</title><rect x="45.4147%" y="133" width="0.1404%" height="15" fill="rgb(210,31,22)" fg:x="5497" fg:w="17"/><text x="45.6647%" y="143.50"></text></g><g><title>[libc.so.6] (8 samples, 0.07%)</title><rect x="45.4891%" y="117" width="0.0661%" height="15" fill="rgb(239,54,39)" fg:x="5506" fg:w="8"/><text x="45.7391%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.04%)</title><rect x="45.5552%" y="261" width="0.0413%" height="15" fill="rgb(230,99,41)" fg:x="5514" fg:w="5"/><text x="45.8052%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.04%)</title><rect x="45.5552%" y="245" width="0.0413%" height="15" fill="rgb(253,106,12)" fg:x="5514" fg:w="5"/><text x="45.8052%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (45 samples, 0.37%)</title><rect x="45.3734%" y="357" width="0.3718%" height="15" fill="rgb(213,46,41)" fg:x="5492" fg:w="45"/><text x="45.6234%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (45 samples, 0.37%)</title><rect x="45.3734%" y="341" width="0.3718%" height="15" fill="rgb(215,133,35)" fg:x="5492" fg:w="45"/><text x="45.6234%" y="351.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (45 samples, 0.37%)</title><rect x="45.3734%" y="325" width="0.3718%" height="15" fill="rgb(213,28,5)" fg:x="5492" fg:w="45"/><text x="45.6234%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (43 samples, 0.36%)</title><rect x="45.3900%" y="309" width="0.3553%" height="15" fill="rgb(215,77,49)" fg:x="5494" fg:w="43"/><text x="45.6400%" y="319.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (43 samples, 0.36%)</title><rect x="45.3900%" y="293" width="0.3553%" height="15" fill="rgb(248,100,22)" fg:x="5494" fg:w="43"/><text x="45.6400%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (43 samples, 0.36%)</title><rect x="45.3900%" y="277" width="0.3553%" height="15" fill="rgb(208,67,9)" fg:x="5494" fg:w="43"/><text x="45.6400%" y="287.50"></text></g><g><title>core::ptr::write (18 samples, 0.15%)</title><rect x="45.5965%" y="261" width="0.1487%" height="15" fill="rgb(219,133,21)" fg:x="5519" fg:w="18"/><text x="45.8465%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (29 samples, 0.24%)</title><rect x="45.7452%" y="357" width="0.2396%" height="15" fill="rgb(246,46,29)" fg:x="5537" fg:w="29"/><text x="45.9952%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (29 samples, 0.24%)</title><rect x="45.7452%" y="341" width="0.2396%" height="15" fill="rgb(246,185,52)" fg:x="5537" fg:w="29"/><text x="45.9952%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (3 samples, 0.02%)</title><rect x="45.9848%" y="357" width="0.0248%" height="15" fill="rgb(252,136,11)" fg:x="5566" fg:w="3"/><text x="46.2348%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (3 samples, 0.02%)</title><rect x="45.9848%" y="341" width="0.0248%" height="15" fill="rgb(219,138,53)" fg:x="5566" fg:w="3"/><text x="46.2348%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="45.9848%" y="325" width="0.0248%" height="15" fill="rgb(211,51,23)" fg:x="5566" fg:w="3"/><text x="46.2348%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="45.9848%" y="309" width="0.0248%" height="15" fill="rgb(247,221,28)" fg:x="5566" fg:w="3"/><text x="46.2348%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="45.9848%" y="293" width="0.0248%" height="15" fill="rgb(251,222,45)" fg:x="5566" fg:w="3"/><text x="46.2348%" y="303.50"></text></g><g><title>cfree (3 samples, 0.02%)</title><rect x="45.9848%" y="277" width="0.0248%" height="15" fill="rgb(217,162,53)" fg:x="5566" fg:w="3"/><text x="46.2348%" y="287.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="45.9848%" y="261" width="0.0248%" height="15" fill="rgb(229,93,14)" fg:x="5566" fg:w="3"/><text x="46.2348%" y="271.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (534 samples, 4.41%)</title><rect x="51.4541%" y="309" width="4.4118%" height="15" fill="rgb(209,67,49)" fg:x="6228" fg:w="534"/><text x="51.7041%" y="319.50">&lt;T as..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (534 samples, 4.41%)</title><rect x="51.4541%" y="293" width="4.4118%" height="15" fill="rgb(213,87,29)" fg:x="6228" fg:w="534"/><text x="51.7041%" y="303.50">&lt;petg..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (534 samples, 4.41%)</title><rect x="51.4541%" y="277" width="4.4118%" height="15" fill="rgb(205,151,52)" fg:x="6228" fg:w="534"/><text x="51.7041%" y="287.50">core:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1,313 samples, 10.85%)</title><rect x="46.0096%" y="357" width="10.8477%" height="15" fill="rgb(253,215,39)" fg:x="5569" fg:w="1313"/><text x="46.2596%" y="367.50">core::slice::&lt;im..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1,313 samples, 10.85%)</title><rect x="46.0096%" y="341" width="10.8477%" height="15" fill="rgb(221,220,41)" fg:x="5569" fg:w="1313"/><text x="46.2596%" y="351.50">&lt;T as core::slic..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1,313 samples, 10.85%)</title><rect x="46.0096%" y="325" width="10.8477%" height="15" fill="rgb(218,133,21)" fg:x="5569" fg:w="1313"/><text x="46.2596%" y="335.50">&lt;core::slice::it..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 0.99%)</title><rect x="55.8658%" y="309" width="0.9914%" height="15" fill="rgb(221,193,43)" fg:x="6762" fg:w="120"/><text x="56.1158%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (113 samples, 0.93%)</title><rect x="55.9237%" y="293" width="0.9336%" height="15" fill="rgb(240,128,52)" fg:x="6769" fg:w="113"/><text x="56.1737%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (10 samples, 0.08%)</title><rect x="56.9399%" y="261" width="0.0826%" height="15" fill="rgb(253,114,12)" fg:x="6892" fg:w="10"/><text x="57.1899%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (8 samples, 0.07%)</title><rect x="56.9564%" y="245" width="0.0661%" height="15" fill="rgb(215,223,47)" fg:x="6894" fg:w="8"/><text x="57.2064%" y="255.50"></text></g><g><title>itertools::Itertools::find_position::_{{closure}} (8 samples, 0.07%)</title><rect x="56.9564%" y="229" width="0.0661%" height="15" fill="rgb(248,225,23)" fg:x="6894" fg:w="8"/><text x="57.2064%" y="239.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (8 samples, 0.07%)</title><rect x="56.9564%" y="213" width="0.0661%" height="15" fill="rgb(250,108,0)" fg:x="6894" fg:w="8"/><text x="57.2064%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.07%)</title><rect x="56.9564%" y="197" width="0.0661%" height="15" fill="rgb(228,208,7)" fg:x="6894" fg:w="8"/><text x="57.2064%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.07%)</title><rect x="56.9564%" y="181" width="0.0661%" height="15" fill="rgb(244,45,10)" fg:x="6894" fg:w="8"/><text x="57.2064%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (8 samples, 0.07%)</title><rect x="56.9564%" y="165" width="0.0661%" height="15" fill="rgb(207,125,25)" fg:x="6894" fg:w="8"/><text x="57.2064%" y="175.50"></text></g><g><title>itertools::Itertools::find_position (21 samples, 0.17%)</title><rect x="56.8572%" y="357" width="0.1735%" height="15" fill="rgb(210,195,18)" fg:x="6882" fg:w="21"/><text x="57.1072%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (21 samples, 0.17%)</title><rect x="56.8572%" y="341" width="0.1735%" height="15" fill="rgb(249,80,12)" fg:x="6882" fg:w="21"/><text x="57.1072%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.17%)</title><rect x="56.8572%" y="325" width="0.1735%" height="15" fill="rgb(221,65,9)" fg:x="6882" fg:w="21"/><text x="57.1072%" y="335.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.17%)</title><rect x="56.8572%" y="309" width="0.1735%" height="15" fill="rgb(235,49,36)" fg:x="6882" fg:w="21"/><text x="57.1072%" y="319.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (21 samples, 0.17%)</title><rect x="56.8572%" y="293" width="0.1735%" height="15" fill="rgb(225,32,20)" fg:x="6882" fg:w="21"/><text x="57.1072%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (21 samples, 0.17%)</title><rect x="56.8572%" y="277" width="0.1735%" height="15" fill="rgb(215,141,46)" fg:x="6882" fg:w="21"/><text x="57.1072%" y="287.50"></text></g><g><title>main::find_cycle_with_arc (1,936 samples, 15.99%)</title><rect x="41.0525%" y="373" width="15.9947%" height="15" fill="rgb(250,160,47)" fg:x="4969" fg:w="1936"/><text x="41.3025%" y="383.50">main::find_cycle_with_arc</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.04%)</title><rect x="57.0638%" y="357" width="0.0413%" height="15" fill="rgb(216,222,40)" fg:x="6907" fg:w="5"/><text x="57.3138%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.04%)</title><rect x="57.0638%" y="341" width="0.0413%" height="15" fill="rgb(234,217,39)" fg:x="6907" fg:w="5"/><text x="57.3138%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 0.04%)</title><rect x="57.0638%" y="325" width="0.0413%" height="15" fill="rgb(207,178,40)" fg:x="6907" fg:w="5"/><text x="57.3138%" y="335.50"></text></g><g><title>main::initialization::_{{closure}} (5 samples, 0.04%)</title><rect x="57.0638%" y="309" width="0.0413%" height="15" fill="rgb(221,136,13)" fg:x="6907" fg:w="5"/><text x="57.3138%" y="319.50"></text></g><g><title>main::initialization (9 samples, 0.07%)</title><rect x="57.0473%" y="373" width="0.0744%" height="15" fill="rgb(249,199,10)" fg:x="6905" fg:w="9"/><text x="57.2973%" y="383.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.02%)</title><rect x="57.1051%" y="357" width="0.0165%" height="15" fill="rgb(249,222,13)" fg:x="6912" fg:w="2"/><text x="57.3551%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="58.5426%" y="357" width="0.0165%" height="15" fill="rgb(244,185,38)" fg:x="7086" fg:w="2"/><text x="58.7926%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (16 samples, 0.13%)</title><rect x="58.5592%" y="357" width="0.1322%" height="15" fill="rgb(236,202,9)" fg:x="7088" fg:w="16"/><text x="58.8092%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16 samples, 0.13%)</title><rect x="58.5592%" y="341" width="0.1322%" height="15" fill="rgb(250,229,37)" fg:x="7088" fg:w="16"/><text x="58.8092%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (16 samples, 0.13%)</title><rect x="58.5592%" y="325" width="0.1322%" height="15" fill="rgb(206,174,23)" fg:x="7088" fg:w="16"/><text x="58.8092%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="59.0549%" y="309" width="0.0330%" height="15" fill="rgb(211,33,43)" fg:x="7148" fg:w="4"/><text x="59.3049%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.11%)</title><rect x="59.0879%" y="309" width="0.1074%" height="15" fill="rgb(245,58,50)" fg:x="7152" fg:w="13"/><text x="59.3379%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.11%)</title><rect x="59.0879%" y="293" width="0.1074%" height="15" fill="rgb(244,68,36)" fg:x="7152" fg:w="13"/><text x="59.3379%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.11%)</title><rect x="59.0879%" y="277" width="0.1074%" height="15" fill="rgb(232,229,15)" fg:x="7152" fg:w="13"/><text x="59.3379%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (265 samples, 2.19%)</title><rect x="59.2862%" y="293" width="2.1894%" height="15" fill="rgb(254,30,23)" fg:x="7176" fg:w="265"/><text x="59.5362%" y="303.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (410 samples, 3.39%)</title><rect x="59.1953%" y="309" width="3.3873%" height="15" fill="rgb(235,160,14)" fg:x="7165" fg:w="410"/><text x="59.4453%" y="319.50">&lt;co..</text></g><g><title>main::update_sptree::_{{closure}}::_{{closure}} (134 samples, 1.11%)</title><rect x="61.4755%" y="293" width="1.1071%" height="15" fill="rgb(212,155,44)" fg:x="7441" fg:w="134"/><text x="61.7255%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (134 samples, 1.11%)</title><rect x="61.4755%" y="277" width="1.1071%" height="15" fill="rgb(226,2,50)" fg:x="7441" fg:w="134"/><text x="61.7255%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (134 samples, 1.11%)</title><rect x="61.4755%" y="261" width="1.1071%" height="15" fill="rgb(234,177,6)" fg:x="7441" fg:w="134"/><text x="61.7255%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (472 samples, 3.90%)</title><rect x="58.6996%" y="357" width="3.8995%" height="15" fill="rgb(217,24,9)" fg:x="7105" fg:w="472"/><text x="58.9496%" y="367.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (472 samples, 3.90%)</title><rect x="58.6996%" y="341" width="3.8995%" height="15" fill="rgb(220,13,46)" fg:x="7105" fg:w="472"/><text x="58.9496%" y="351.50">&lt;cor..</text></g><g><title>main::update_sptree::_{{closure}} (470 samples, 3.88%)</title><rect x="58.7161%" y="325" width="3.8830%" height="15" fill="rgb(239,221,27)" fg:x="7107" fg:w="470"/><text x="58.9661%" y="335.50">main..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.02%)</title><rect x="62.5826%" y="309" width="0.0165%" height="15" fill="rgb(222,198,25)" fg:x="7575" fg:w="2"/><text x="62.8326%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="62.6487%" y="325" width="0.0165%" height="15" fill="rgb(211,99,13)" fg:x="7583" fg:w="2"/><text x="62.8987%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.07%)</title><rect x="62.6487%" y="341" width="0.0744%" height="15" fill="rgb(232,111,31)" fg:x="7583" fg:w="9"/><text x="62.8987%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (7 samples, 0.06%)</title><rect x="62.6652%" y="325" width="0.0578%" height="15" fill="rgb(245,82,37)" fg:x="7585" fg:w="7"/><text x="62.9152%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (7 samples, 0.06%)</title><rect x="62.6652%" y="309" width="0.0578%" height="15" fill="rgb(227,149,46)" fg:x="7585" fg:w="7"/><text x="62.9152%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="62.9627%" y="325" width="0.0413%" height="15" fill="rgb(218,36,50)" fg:x="7621" fg:w="5"/><text x="63.2127%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (70 samples, 0.58%)</title><rect x="63.0040%" y="325" width="0.5783%" height="15" fill="rgb(226,80,48)" fg:x="7626" fg:w="70"/><text x="63.2540%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (70 samples, 0.58%)</title><rect x="63.0040%" y="309" width="0.5783%" height="15" fill="rgb(238,224,15)" fg:x="7626" fg:w="70"/><text x="63.2540%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (70 samples, 0.58%)</title><rect x="63.0040%" y="293" width="0.5783%" height="15" fill="rgb(241,136,10)" fg:x="7626" fg:w="70"/><text x="63.2540%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (24 samples, 0.20%)</title><rect x="63.5823%" y="325" width="0.1983%" height="15" fill="rgb(208,32,45)" fg:x="7696" fg:w="24"/><text x="63.8323%" y="335.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (915 samples, 7.56%)</title><rect x="65.4907%" y="277" width="7.5595%" height="15" fill="rgb(207,135,9)" fg:x="7927" fg:w="915"/><text x="65.7407%" y="287.50">&lt;T as core..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (915 samples, 7.56%)</title><rect x="65.4907%" y="261" width="7.5595%" height="15" fill="rgb(206,86,44)" fg:x="7927" fg:w="915"/><text x="65.7407%" y="271.50">&lt;petgraph:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (915 samples, 7.56%)</title><rect x="65.4907%" y="245" width="7.5595%" height="15" fill="rgb(245,177,15)" fg:x="7927" fg:w="915"/><text x="65.7407%" y="255.50">core::cmp:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1,730 samples, 14.29%)</title><rect x="62.6074%" y="357" width="14.2928%" height="15" fill="rgb(206,64,50)" fg:x="7578" fg:w="1730"/><text x="62.8574%" y="367.50">&lt;core::slice::iter::It..</text></g><g><title>main::update_sptree::_{{closure}} (1,716 samples, 14.18%)</title><rect x="62.7231%" y="341" width="14.1771%" height="15" fill="rgb(234,36,40)" fg:x="7592" fg:w="1716"/><text x="62.9731%" y="351.50">main::update_sptree::_..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1,588 samples, 13.12%)</title><rect x="63.7806%" y="325" width="13.1196%" height="15" fill="rgb(213,64,8)" fg:x="7720" fg:w="1588"/><text x="64.0306%" y="335.50">core::slice::&lt;impl [..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1,588 samples, 13.12%)</title><rect x="63.7806%" y="309" width="13.1196%" height="15" fill="rgb(210,75,36)" fg:x="7720" fg:w="1588"/><text x="64.0306%" y="319.50">&lt;T as core::slice::c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1,588 samples, 13.12%)</title><rect x="63.7806%" y="293" width="13.1196%" height="15" fill="rgb(229,88,21)" fg:x="7720" fg:w="1588"/><text x="64.0306%" y="303.50">&lt;core::slice::iter::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (466 samples, 3.85%)</title><rect x="73.0502%" y="277" width="3.8500%" height="15" fill="rgb(252,204,47)" fg:x="8842" fg:w="466"/><text x="73.3002%" y="287.50">&lt;cor..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (459 samples, 3.79%)</title><rect x="73.1081%" y="261" width="3.7921%" height="15" fill="rgb(208,77,27)" fg:x="8849" fg:w="459"/><text x="73.3581%" y="271.50">&lt;cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (684 samples, 5.65%)</title><rect x="77.8090%" y="341" width="5.6510%" height="15" fill="rgb(221,76,26)" fg:x="9418" fg:w="684"/><text x="78.0590%" y="351.50">&lt;core::..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (338 samples, 2.79%)</title><rect x="80.6675%" y="325" width="2.7925%" height="15" fill="rgb(225,139,18)" fg:x="9764" fg:w="338"/><text x="80.9175%" y="335.50">&lt;c..</text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (755 samples, 6.24%)</title><rect x="83.4600%" y="325" width="6.2376%" height="15" fill="rgb(230,137,11)" fg:x="10102" fg:w="755"/><text x="83.7100%" y="335.50">&lt;petgrap..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (755 samples, 6.24%)</title><rect x="83.4600%" y="309" width="6.2376%" height="15" fill="rgb(212,28,1)" fg:x="10102" fg:w="755"/><text x="83.7100%" y="319.50">core::cm..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2,481 samples, 20.50%)</title><rect x="76.9002%" y="357" width="20.4974%" height="15" fill="rgb(248,164,17)" fg:x="9308" fg:w="2481"/><text x="77.1502%" y="367.50">&lt;core::slice::iter::Iter&lt;T&gt; as c..</text></g><g><title>main::update_sptree::_{{closure}} (1,687 samples, 13.94%)</title><rect x="83.4600%" y="341" width="13.9375%" height="15" fill="rgb(222,171,42)" fg:x="10102" fg:w="1687"/><text x="83.7100%" y="351.50">main::update_sptree::..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (932 samples, 7.70%)</title><rect x="89.6976%" y="325" width="7.6999%" height="15" fill="rgb(243,84,45)" fg:x="10857" fg:w="932"/><text x="89.9476%" y="335.50">&lt;petgraph::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (932 samples, 7.70%)</title><rect x="89.6976%" y="309" width="7.6999%" height="15" fill="rgb(252,49,23)" fg:x="10857" fg:w="932"/><text x="89.9476%" y="319.50">core::cmp::..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as petgraph::graph_impl::IndexType&gt;::index (7 samples, 0.06%)</title><rect x="97.3976%" y="357" width="0.0578%" height="15" fill="rgb(215,19,7)" fg:x="11789" fg:w="7"/><text x="97.6476%" y="367.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (7 samples, 0.06%)</title><rect x="97.3976%" y="341" width="0.0578%" height="15" fill="rgb(238,81,41)" fg:x="11789" fg:w="7"/><text x="97.6476%" y="351.50"></text></g><g><title>__rdl_realloc (2 samples, 0.02%)</title><rect x="97.7776%" y="245" width="0.0165%" height="15" fill="rgb(210,199,37)" fg:x="11835" fg:w="2"/><text x="98.0276%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (76 samples, 0.63%)</title><rect x="97.7693%" y="293" width="0.6279%" height="15" fill="rgb(244,192,49)" fg:x="11834" fg:w="76"/><text x="98.0193%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (76 samples, 0.63%)</title><rect x="97.7693%" y="277" width="0.6279%" height="15" fill="rgb(226,211,11)" fg:x="11834" fg:w="76"/><text x="98.0193%" y="287.50"></text></g><g><title>alloc::alloc::realloc (76 samples, 0.63%)</title><rect x="97.7693%" y="261" width="0.6279%" height="15" fill="rgb(236,162,54)" fg:x="11834" fg:w="76"/><text x="98.0193%" y="271.50"></text></g><g><title>realloc (72 samples, 0.59%)</title><rect x="97.8024%" y="245" width="0.5948%" height="15" fill="rgb(220,229,9)" fg:x="11838" fg:w="72"/><text x="98.0524%" y="255.50"></text></g><g><title>[libc.so.6] (60 samples, 0.50%)</title><rect x="97.9015%" y="229" width="0.4957%" height="15" fill="rgb(250,87,22)" fg:x="11850" fg:w="60"/><text x="98.1515%" y="239.50"></text></g><g><title>[libc.so.6] (53 samples, 0.44%)</title><rect x="97.9594%" y="213" width="0.4379%" height="15" fill="rgb(239,43,17)" fg:x="11857" fg:w="53"/><text x="98.2094%" y="223.50"></text></g><g><title>[libc.so.6] (11 samples, 0.09%)</title><rect x="98.3063%" y="197" width="0.0909%" height="15" fill="rgb(231,177,25)" fg:x="11899" fg:w="11"/><text x="98.5563%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (84 samples, 0.69%)</title><rect x="97.7445%" y="341" width="0.6940%" height="15" fill="rgb(219,179,1)" fg:x="11831" fg:w="84"/><text x="97.9945%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (84 samples, 0.69%)</title><rect x="97.7445%" y="325" width="0.6940%" height="15" fill="rgb(238,219,53)" fg:x="11831" fg:w="84"/><text x="97.9945%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (82 samples, 0.68%)</title><rect x="97.7611%" y="309" width="0.6775%" height="15" fill="rgb(232,167,36)" fg:x="11833" fg:w="82"/><text x="98.0111%" y="319.50"></text></g><g><title>malloc (4 samples, 0.03%)</title><rect x="98.4055%" y="293" width="0.0330%" height="15" fill="rgb(244,19,51)" fg:x="11911" fg:w="4"/><text x="98.6555%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.02%)</title><rect x="98.4385%" y="341" width="0.0165%" height="15" fill="rgb(224,6,22)" fg:x="11915" fg:w="2"/><text x="98.6885%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="98.4385%" y="325" width="0.0165%" height="15" fill="rgb(224,145,5)" fg:x="11915" fg:w="2"/><text x="98.6885%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (124 samples, 1.02%)</title><rect x="97.4636%" y="357" width="1.0245%" height="15" fill="rgb(234,130,49)" fg:x="11797" fg:w="124"/><text x="97.7136%" y="367.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="98.4551%" y="341" width="0.0330%" height="15" fill="rgb(254,6,2)" fg:x="11917" fg:w="4"/><text x="98.7051%" y="351.50"></text></g><g><title>core::intrinsics::copy (124 samples, 1.02%)</title><rect x="98.4964%" y="341" width="1.0245%" height="15" fill="rgb(208,96,46)" fg:x="11922" fg:w="124"/><text x="98.7464%" y="351.50"></text></g><g><title>[libc.so.6] (124 samples, 1.02%)</title><rect x="98.4964%" y="325" width="1.0245%" height="15" fill="rgb(239,3,39)" fg:x="11922" fg:w="124"/><text x="98.7464%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (127 samples, 1.05%)</title><rect x="98.4881%" y="357" width="1.0492%" height="15" fill="rgb(233,210,1)" fg:x="11921" fg:w="127"/><text x="98.7381%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.02%)</title><rect x="99.5208%" y="341" width="0.0165%" height="15" fill="rgb(244,137,37)" fg:x="12046" fg:w="2"/><text x="99.7708%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.03%)</title><rect x="99.5539%" y="357" width="0.0330%" height="15" fill="rgb(240,136,2)" fg:x="12050" fg:w="4"/><text x="99.8039%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.03%)</title><rect x="99.5539%" y="341" width="0.0330%" height="15" fill="rgb(239,18,37)" fg:x="12050" fg:w="4"/><text x="99.8039%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.03%)</title><rect x="99.5539%" y="325" width="0.0330%" height="15" fill="rgb(218,185,22)" fg:x="12050" fg:w="4"/><text x="99.8039%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.03%)</title><rect x="99.5539%" y="309" width="0.0330%" height="15" fill="rgb(225,218,4)" fg:x="12050" fg:w="4"/><text x="99.8039%" y="319.50"></text></g><g><title>main::update_sptree::_{{closure}} (4 samples, 0.03%)</title><rect x="99.5539%" y="293" width="0.0330%" height="15" fill="rgb(230,182,32)" fg:x="12050" fg:w="4"/><text x="99.8039%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="99.5704%" y="277" width="0.0165%" height="15" fill="rgb(242,56,43)" fg:x="12052" fg:w="2"/><text x="99.8204%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="99.5704%" y="261" width="0.0165%" height="15" fill="rgb(233,99,24)" fg:x="12052" fg:w="2"/><text x="99.8204%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="99.5704%" y="245" width="0.0165%" height="15" fill="rgb(234,209,42)" fg:x="12052" fg:w="2"/><text x="99.8204%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (27 samples, 0.22%)</title><rect x="99.5869%" y="357" width="0.2231%" height="15" fill="rgb(227,7,12)" fg:x="12054" fg:w="27"/><text x="99.8369%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (27 samples, 0.22%)</title><rect x="99.5869%" y="341" width="0.2231%" height="15" fill="rgb(245,203,43)" fg:x="12054" fg:w="27"/><text x="99.8369%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (11 samples, 0.09%)</title><rect x="99.8100%" y="357" width="0.0909%" height="15" fill="rgb(238,205,33)" fg:x="12081" fg:w="11"/><text x="100.0600%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (11 samples, 0.09%)</title><rect x="99.8100%" y="341" width="0.0909%" height="15" fill="rgb(231,56,7)" fg:x="12081" fg:w="11"/><text x="100.0600%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.09%)</title><rect x="99.8100%" y="325" width="0.0909%" height="15" fill="rgb(244,186,29)" fg:x="12081" fg:w="11"/><text x="100.0600%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.09%)</title><rect x="99.8100%" y="309" width="0.0909%" height="15" fill="rgb(234,111,31)" fg:x="12081" fg:w="11"/><text x="100.0600%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.09%)</title><rect x="99.8100%" y="293" width="0.0909%" height="15" fill="rgb(241,149,10)" fg:x="12081" fg:w="11"/><text x="100.0600%" y="303.50"></text></g><g><title>cfree (10 samples, 0.08%)</title><rect x="99.8182%" y="277" width="0.0826%" height="15" fill="rgb(249,206,44)" fg:x="12082" fg:w="10"/><text x="100.0682%" y="287.50"></text></g><g><title>[libc.so.6] (8 samples, 0.07%)</title><rect x="99.8348%" y="261" width="0.0661%" height="15" fill="rgb(251,153,30)" fg:x="12084" fg:w="8"/><text x="100.0848%" y="271.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="99.8761%" y="245" width="0.0248%" height="15" fill="rgb(239,152,38)" fg:x="12089" fg:w="3"/><text x="100.1261%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (4 samples, 0.03%)</title><rect x="99.9009%" y="357" width="0.0330%" height="15" fill="rgb(249,139,47)" fg:x="12092" fg:w="4"/><text x="100.1509%" y="367.50"></text></g><g><title>main::min_cost (12,041 samples, 99.48%)</title><rect x="0.4792%" y="389" width="99.4795%" height="15" fill="rgb(244,64,35)" fg:x="58" fg:w="12041"/><text x="0.7292%" y="399.50">main::min_cost</text></g><g><title>main::update_sptree (5,185 samples, 42.84%)</title><rect x="57.1216%" y="373" width="42.8371%" height="15" fill="rgb(216,46,15)" fg:x="6914" fg:w="5185"/><text x="57.3716%" y="383.50">main::update_sptree</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (2 samples, 0.02%)</title><rect x="99.9422%" y="357" width="0.0165%" height="15" fill="rgb(250,74,19)" fg:x="12097" fg:w="2"/><text x="100.1922%" y="367.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.02%)</title><rect x="99.9422%" y="341" width="0.0165%" height="15" fill="rgb(249,42,33)" fg:x="12097" fg:w="2"/><text x="100.1922%" y="351.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.02%)</title><rect x="99.9587%" y="389" width="0.0165%" height="15" fill="rgb(242,149,17)" fg:x="12099" fg:w="2"/><text x="100.2087%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.02%)</title><rect x="99.9587%" y="373" width="0.0165%" height="15" fill="rgb(244,29,21)" fg:x="12099" fg:w="2"/><text x="100.2087%" y="383.50"></text></g><g><title>_start (12,045 samples, 99.51%)</title><rect x="0.4709%" y="533" width="99.5126%" height="15" fill="rgb(220,130,37)" fg:x="57" fg:w="12045"/><text x="0.7209%" y="543.50">_start</text></g><g><title>__libc_start_main (12,045 samples, 99.51%)</title><rect x="0.4709%" y="517" width="99.5126%" height="15" fill="rgb(211,67,2)" fg:x="57" fg:w="12045"/><text x="0.7209%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (12,045 samples, 99.51%)</title><rect x="0.4709%" y="501" width="99.5126%" height="15" fill="rgb(235,68,52)" fg:x="57" fg:w="12045"/><text x="0.7209%" y="511.50">[libc.so.6]</text></g><g><title>main (12,045 samples, 99.51%)</title><rect x="0.4709%" y="485" width="99.5126%" height="15" fill="rgb(246,142,3)" fg:x="57" fg:w="12045"/><text x="0.7209%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (12,045 samples, 99.51%)</title><rect x="0.4709%" y="469" width="99.5126%" height="15" fill="rgb(241,25,7)" fg:x="57" fg:w="12045"/><text x="0.7209%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (12,045 samples, 99.51%)</title><rect x="0.4709%" y="453" width="99.5126%" height="15" fill="rgb(242,119,39)" fg:x="57" fg:w="12045"/><text x="0.7209%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,045 samples, 99.51%)</title><rect x="0.4709%" y="437" width="99.5126%" height="15" fill="rgb(241,98,45)" fg:x="57" fg:w="12045"/><text x="0.7209%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (12,045 samples, 99.51%)</title><rect x="0.4709%" y="421" width="99.5126%" height="15" fill="rgb(254,28,30)" fg:x="57" fg:w="12045"/><text x="0.7209%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (12,045 samples, 99.51%)</title><rect x="0.4709%" y="405" width="99.5126%" height="15" fill="rgb(241,142,54)" fg:x="57" fg:w="12045"/><text x="0.7209%" y="415.50">main::main</text></g><g><title>all (12,104 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="12104"/><text x="0.2500%" y="575.50"></text></g><g><title>main (12,104 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(210,85,47)" fg:x="0" fg:w="12104"/><text x="0.2500%" y="559.50">main</text></g><g><title>main::min_cost (2 samples, 0.02%)</title><rect x="99.9835%" y="533" width="0.0165%" height="15" fill="rgb(224,206,25)" fg:x="12102" fg:w="2"/><text x="100.2335%" y="543.50"></text></g></svg></svg>