<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="1372"><g><title>[[heap]] (4 samples, 0.29%)</title><rect x="0.0000%" y="533" width="0.2915%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>[libc.so.6] (4 samples, 0.29%)</title><rect x="0.0000%" y="517" width="0.2915%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="527.50"></text></g><g><title>__rdl_realloc (1 samples, 0.07%)</title><rect x="0.2915%" y="517" width="0.0729%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.5415%" y="527.50"></text></g><g><title>[[stack]] (2 samples, 0.15%)</title><rect x="0.2915%" y="533" width="0.1458%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="2"/><text x="0.5415%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.07%)</title><rect x="0.3644%" y="517" width="0.0729%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.6144%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.07%)</title><rect x="0.3644%" y="501" width="0.0729%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.6144%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.07%)</title><rect x="0.3644%" y="485" width="0.0729%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.6144%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.07%)</title><rect x="0.3644%" y="469" width="0.0729%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.6144%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.66%)</title><rect x="0.4373%" y="533" width="0.6560%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="9"/><text x="0.6873%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.22%)</title><rect x="0.8746%" y="517" width="0.2187%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="3"/><text x="1.1246%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.22%)</title><rect x="0.8746%" y="501" width="0.2187%" height="15" fill="rgb(250,228,42)" fg:x="12" fg:w="3"/><text x="1.1246%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.22%)</title><rect x="0.8746%" y="485" width="0.2187%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="3"/><text x="1.1246%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.15%)</title><rect x="0.9475%" y="469" width="0.1458%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="2"/><text x="1.1975%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.15%)</title><rect x="0.9475%" y="453" width="0.1458%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="2"/><text x="1.1975%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.07%)</title><rect x="1.0204%" y="437" width="0.0729%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="1"/><text x="1.2704%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.22%)</title><rect x="1.0933%" y="533" width="0.2187%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="3"/><text x="1.3433%" y="543.50"></text></g><g><title>[libc.so.6] (3 samples, 0.22%)</title><rect x="1.0933%" y="517" width="0.2187%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="3"/><text x="1.3433%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.07%)</title><rect x="1.3848%" y="373" width="0.0729%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="1"/><text x="1.6348%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.07%)</title><rect x="1.3848%" y="357" width="0.0729%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="1"/><text x="1.6348%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.07%)</title><rect x="1.3848%" y="341" width="0.0729%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="1"/><text x="1.6348%" y="351.50"></text></g><g><title>main::min_cost::_{{closure}} (1 samples, 0.07%)</title><rect x="1.3848%" y="325" width="0.0729%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="1"/><text x="1.6348%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (5 samples, 0.36%)</title><rect x="1.4577%" y="373" width="0.3644%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="5"/><text x="1.7077%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (5 samples, 0.36%)</title><rect x="1.4577%" y="357" width="0.3644%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="5"/><text x="1.7077%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.36%)</title><rect x="1.4577%" y="341" width="0.3644%" height="15" fill="rgb(247,18,42)" fg:x="20" fg:w="5"/><text x="1.7077%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.36%)</title><rect x="1.4577%" y="325" width="0.3644%" height="15" fill="rgb(241,131,45)" fg:x="20" fg:w="5"/><text x="1.7077%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.36%)</title><rect x="1.4577%" y="309" width="0.3644%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="5"/><text x="1.7077%" y="319.50"></text></g><g><title>cfree (5 samples, 0.36%)</title><rect x="1.4577%" y="293" width="0.3644%" height="15" fill="rgb(225,111,53)" fg:x="20" fg:w="5"/><text x="1.7077%" y="303.50"></text></g><g><title>[libc.so.6] (5 samples, 0.36%)</title><rect x="1.4577%" y="277" width="0.3644%" height="15" fill="rgb(238,160,17)" fg:x="20" fg:w="5"/><text x="1.7077%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="1.6764%" y="261" width="0.1458%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="2"/><text x="1.9264%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (5 samples, 0.36%)</title><rect x="2.4052%" y="357" width="0.3644%" height="15" fill="rgb(232,36,49)" fg:x="33" fg:w="5"/><text x="2.6552%" y="367.50"></text></g><g><title>main::__update_node_potentials (14 samples, 1.02%)</title><rect x="1.8222%" y="373" width="1.0204%" height="15" fill="rgb(209,103,24)" fg:x="25" fg:w="14"/><text x="2.0722%" y="383.50"></text></g><g><title>main::get_reduced_cost_edgeindex (1 samples, 0.07%)</title><rect x="2.7697%" y="357" width="0.0729%" height="15" fill="rgb(229,88,8)" fg:x="38" fg:w="1"/><text x="3.0197%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (3 samples, 0.22%)</title><rect x="4.0816%" y="117" width="0.2187%" height="15" fill="rgb(213,181,19)" fg:x="56" fg:w="3"/><text x="4.3316%" y="127.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.22%)</title><rect x="4.0816%" y="101" width="0.2187%" height="15" fill="rgb(254,191,54)" fg:x="56" fg:w="3"/><text x="4.3316%" y="111.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (4 samples, 0.29%)</title><rect x="4.3003%" y="101" width="0.2915%" height="15" fill="rgb(241,83,37)" fg:x="59" fg:w="4"/><text x="4.5503%" y="111.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (2 samples, 0.15%)</title><rect x="4.5918%" y="101" width="0.1458%" height="15" fill="rgb(233,36,39)" fg:x="63" fg:w="2"/><text x="4.8418%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.15%)</title><rect x="4.5918%" y="85" width="0.1458%" height="15" fill="rgb(226,3,54)" fg:x="63" fg:w="2"/><text x="4.8418%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="4.5918%" y="69" width="0.1458%" height="15" fill="rgb(245,192,40)" fg:x="63" fg:w="2"/><text x="4.8418%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.15%)</title><rect x="4.5918%" y="53" width="0.1458%" height="15" fill="rgb(238,167,29)" fg:x="63" fg:w="2"/><text x="4.8418%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.15%)</title><rect x="4.5918%" y="37" width="0.1458%" height="15" fill="rgb(232,182,51)" fg:x="63" fg:w="2"/><text x="4.8418%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.15%)</title><rect x="4.7376%" y="85" width="0.1458%" height="15" fill="rgb(231,60,39)" fg:x="65" fg:w="2"/><text x="4.9876%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.15%)</title><rect x="4.7376%" y="69" width="0.1458%" height="15" fill="rgb(208,69,12)" fg:x="65" fg:w="2"/><text x="4.9876%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.15%)</title><rect x="4.7376%" y="53" width="0.1458%" height="15" fill="rgb(235,93,37)" fg:x="65" fg:w="2"/><text x="4.9876%" y="63.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (1 samples, 0.07%)</title><rect x="4.8834%" y="85" width="0.0729%" height="15" fill="rgb(213,116,39)" fg:x="67" fg:w="1"/><text x="5.1334%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::_{{closure}} (16 samples, 1.17%)</title><rect x="3.8630%" y="181" width="1.1662%" height="15" fill="rgb(222,207,29)" fg:x="53" fg:w="16"/><text x="4.1130%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (16 samples, 1.17%)</title><rect x="3.8630%" y="165" width="1.1662%" height="15" fill="rgb(206,96,30)" fg:x="53" fg:w="16"/><text x="4.1130%" y="175.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (13 samples, 0.95%)</title><rect x="4.0816%" y="149" width="0.9475%" height="15" fill="rgb(218,138,4)" fg:x="56" fg:w="13"/><text x="4.3316%" y="159.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (13 samples, 0.95%)</title><rect x="4.0816%" y="133" width="0.9475%" height="15" fill="rgb(250,191,14)" fg:x="56" fg:w="13"/><text x="4.3316%" y="143.50"></text></g><g><title>main::_find_block_search::_{{closure}} (10 samples, 0.73%)</title><rect x="4.3003%" y="117" width="0.7289%" height="15" fill="rgb(239,60,40)" fg:x="59" fg:w="10"/><text x="4.5503%" y="127.50"></text></g><g><title>main::get_reduced_cost_edgeindex (4 samples, 0.29%)</title><rect x="4.7376%" y="101" width="0.2915%" height="15" fill="rgb(206,27,48)" fg:x="65" fg:w="4"/><text x="4.9876%" y="111.50"></text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (1 samples, 0.07%)</title><rect x="4.9563%" y="85" width="0.0729%" height="15" fill="rgb(225,35,8)" fg:x="68" fg:w="1"/><text x="5.2063%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (65 samples, 4.74%)</title><rect x="7.3615%" y="117" width="4.7376%" height="15" fill="rgb(250,213,24)" fg:x="101" fg:w="65"/><text x="7.6115%" y="127.50">core::..</text></g><g><title>core::cmp::min_by (65 samples, 4.74%)</title><rect x="7.3615%" y="101" width="4.7376%" height="15" fill="rgb(247,123,22)" fg:x="101" fg:w="65"/><text x="7.6115%" y="111.50">core::..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (54 samples, 3.94%)</title><rect x="14.2128%" y="101" width="3.9359%" height="15" fill="rgb(231,138,38)" fg:x="195" fg:w="54"/><text x="14.4628%" y="111.50">&lt;i32..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 1.38%)</title><rect x="18.1487%" y="69" width="1.3848%" height="15" fill="rgb(231,145,46)" fg:x="249" fg:w="19"/><text x="18.3987%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (19 samples, 1.38%)</title><rect x="18.1487%" y="53" width="1.3848%" height="15" fill="rgb(251,118,11)" fg:x="249" fg:w="19"/><text x="18.3987%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (19 samples, 1.38%)</title><rect x="18.1487%" y="37" width="1.3848%" height="15" fill="rgb(217,147,25)" fg:x="249" fg:w="19"/><text x="18.3987%" y="47.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (30 samples, 2.19%)</title><rect x="18.1487%" y="101" width="2.1866%" height="15" fill="rgb(247,81,37)" fg:x="249" fg:w="30"/><text x="18.3987%" y="111.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (30 samples, 2.19%)</title><rect x="18.1487%" y="85" width="2.1866%" height="15" fill="rgb(209,12,38)" fg:x="249" fg:w="30"/><text x="18.3987%" y="95.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.80%)</title><rect x="19.5335%" y="69" width="0.8017%" height="15" fill="rgb(227,1,9)" fg:x="268" fg:w="11"/><text x="19.7835%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.80%)</title><rect x="19.5335%" y="53" width="0.8017%" height="15" fill="rgb(248,47,43)" fg:x="268" fg:w="11"/><text x="19.7835%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.66%)</title><rect x="22.0845%" y="69" width="0.6560%" height="15" fill="rgb(221,10,30)" fg:x="303" fg:w="9"/><text x="22.3345%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (30 samples, 2.19%)</title><rect x="22.0845%" y="85" width="2.1866%" height="15" fill="rgb(210,229,1)" fg:x="303" fg:w="30"/><text x="22.3345%" y="95.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 1.53%)</title><rect x="22.7405%" y="69" width="1.5306%" height="15" fill="rgb(222,148,37)" fg:x="312" fg:w="21"/><text x="22.9905%" y="79.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 1.53%)</title><rect x="22.7405%" y="53" width="1.5306%" height="15" fill="rgb(234,67,33)" fg:x="312" fg:w="21"/><text x="22.9905%" y="63.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (24 samples, 1.75%)</title><rect x="24.2711%" y="85" width="1.7493%" height="15" fill="rgb(247,98,35)" fg:x="333" fg:w="24"/><text x="24.5211%" y="95.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (39 samples, 2.84%)</title><rect x="26.0204%" y="85" width="2.8426%" height="15" fill="rgb(247,138,52)" fg:x="357" fg:w="39"/><text x="26.2704%" y="95.50">&lt;i..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::source (52 samples, 3.79%)</title><rect x="28.8630%" y="85" width="3.7901%" height="15" fill="rgb(213,79,30)" fg:x="396" fg:w="52"/><text x="29.1130%" y="95.50">petg..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (414 samples, 30.17%)</title><rect x="3.1341%" y="197" width="30.1749%" height="15" fill="rgb(246,177,23)" fg:x="43" fg:w="414"/><text x="3.3841%" y="207.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (388 samples, 28.28%)</title><rect x="5.0292%" y="181" width="28.2799%" height="15" fill="rgb(230,62,27)" fg:x="69" fg:w="388"/><text x="5.2792%" y="191.50">core::ops::function::impls::&lt;impl core::ops::..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (378 samples, 27.55%)</title><rect x="5.7580%" y="165" width="27.5510%" height="15" fill="rgb(216,154,8)" fg:x="79" fg:w="378"/><text x="6.0080%" y="175.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (356 samples, 25.95%)</title><rect x="7.3615%" y="149" width="25.9475%" height="15" fill="rgb(244,35,45)" fg:x="101" fg:w="356"/><text x="7.6115%" y="159.50">core::ops::try_trait::NeverShortCircuit&lt;T..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (356 samples, 25.95%)</title><rect x="7.3615%" y="133" width="25.9475%" height="15" fill="rgb(251,115,12)" fg:x="101" fg:w="356"/><text x="7.6115%" y="143.50">core::iter::adapters::map::map_fold::_{{c..</text></g><g><title>main::_find_block_search::_{{closure}} (291 samples, 21.21%)</title><rect x="12.0991%" y="117" width="21.2099%" height="15" fill="rgb(240,54,50)" fg:x="166" fg:w="291"/><text x="12.3491%" y="127.50">main::_find_block_search::_{{clos..</text></g><g><title>main::get_reduced_cost_edgeindex (178 samples, 12.97%)</title><rect x="20.3353%" y="101" width="12.9738%" height="15" fill="rgb(233,84,52)" fg:x="279" fg:w="178"/><text x="20.5853%" y="111.50">main::get_reduced_c..</text></g><g><title>petgraph::graph_impl::Edge&lt;E,Ix&gt;::target (9 samples, 0.66%)</title><rect x="32.6531%" y="85" width="0.6560%" height="15" fill="rgb(207,117,47)" fg:x="448" fg:w="9"/><text x="32.9031%" y="95.50"></text></g><g><title>main::_find_block_search (421 samples, 30.69%)</title><rect x="2.8426%" y="373" width="30.6851%" height="15" fill="rgb(249,43,39)" fg:x="39" fg:w="421"/><text x="3.0926%" y="383.50">main::_find_block_search</text></g><g><title>core::iter::traits::iterator::Iterator::min_by (421 samples, 30.69%)</title><rect x="2.8426%" y="357" width="30.6851%" height="15" fill="rgb(209,38,44)" fg:x="39" fg:w="421"/><text x="3.0926%" y="367.50">core::iter::traits::iterator::Iterator::min_by</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (421 samples, 30.69%)</title><rect x="2.8426%" y="341" width="30.6851%" height="15" fill="rgb(236,212,23)" fg:x="39" fg:w="421"/><text x="3.0926%" y="351.50">core::iter::traits::iterator::Iterator::reduce</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (421 samples, 30.69%)</title><rect x="2.8426%" y="325" width="30.6851%" height="15" fill="rgb(242,79,21)" fg:x="39" fg:w="421"/><text x="3.0926%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (421 samples, 30.69%)</title><rect x="2.8426%" y="309" width="30.6851%" height="15" fill="rgb(211,96,35)" fg:x="39" fg:w="421"/><text x="3.0926%" y="319.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_fold (421 samples, 30.69%)</title><rect x="2.8426%" y="293" width="30.6851%" height="15" fill="rgb(253,215,40)" fg:x="39" fg:w="421"/><text x="3.0926%" y="303.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (421 samples, 30.69%)</title><rect x="2.8426%" y="277" width="30.6851%" height="15" fill="rgb(211,81,21)" fg:x="39" fg:w="421"/><text x="3.0926%" y="287.50">&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (421 samples, 30.69%)</title><rect x="2.8426%" y="261" width="30.6851%" height="15" fill="rgb(208,190,38)" fg:x="39" fg:w="421"/><text x="3.0926%" y="271.50">&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (421 samples, 30.69%)</title><rect x="2.8426%" y="245" width="30.6851%" height="15" fill="rgb(235,213,38)" fg:x="39" fg:w="421"/><text x="3.0926%" y="255.50">&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::it..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (421 samples, 30.69%)</title><rect x="2.8426%" y="229" width="30.6851%" height="15" fill="rgb(237,122,38)" fg:x="39" fg:w="421"/><text x="3.0926%" y="239.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as ..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (421 samples, 30.69%)</title><rect x="2.8426%" y="213" width="30.6851%" height="15" fill="rgb(244,218,35)" fg:x="39" fg:w="421"/><text x="3.0926%" y="223.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.22%)</title><rect x="33.3090%" y="197" width="0.2187%" height="15" fill="rgb(240,68,47)" fg:x="457" fg:w="3"/><text x="33.5590%" y="207.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="33.5277%" y="245" width="0.1458%" height="15" fill="rgb(210,16,53)" fg:x="460" fg:w="2"/><text x="33.7777%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (7 samples, 0.51%)</title><rect x="33.5277%" y="325" width="0.5102%" height="15" fill="rgb(235,124,12)" fg:x="460" fg:w="7"/><text x="33.7777%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.51%)</title><rect x="33.5277%" y="309" width="0.5102%" height="15" fill="rgb(224,169,11)" fg:x="460" fg:w="7"/><text x="33.7777%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (7 samples, 0.51%)</title><rect x="33.5277%" y="293" width="0.5102%" height="15" fill="rgb(250,166,2)" fg:x="460" fg:w="7"/><text x="33.7777%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.51%)</title><rect x="33.5277%" y="277" width="0.5102%" height="15" fill="rgb(242,216,29)" fg:x="460" fg:w="7"/><text x="33.7777%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (7 samples, 0.51%)</title><rect x="33.5277%" y="261" width="0.5102%" height="15" fill="rgb(230,116,27)" fg:x="460" fg:w="7"/><text x="33.7777%" y="271.50"></text></g><g><title>__libc_calloc (5 samples, 0.36%)</title><rect x="33.6735%" y="245" width="0.3644%" height="15" fill="rgb(228,99,48)" fg:x="462" fg:w="5"/><text x="33.9235%" y="255.50"></text></g><g><title>[libc.so.6] (4 samples, 0.29%)</title><rect x="33.7464%" y="229" width="0.2915%" height="15" fill="rgb(253,11,6)" fg:x="463" fg:w="4"/><text x="33.9964%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.15%)</title><rect x="34.0379%" y="325" width="0.1458%" height="15" fill="rgb(247,143,39)" fg:x="467" fg:w="2"/><text x="34.2879%" y="335.50"></text></g><g><title>core::ptr::write (1 samples, 0.07%)</title><rect x="34.1108%" y="309" width="0.0729%" height="15" fill="rgb(236,97,10)" fg:x="468" fg:w="1"/><text x="34.3608%" y="319.50"></text></g><g><title>__rust_alloc (1 samples, 0.07%)</title><rect x="34.1837%" y="229" width="0.0729%" height="15" fill="rgb(233,208,19)" fg:x="469" fg:w="1"/><text x="34.4337%" y="239.50"></text></g><g><title>alloc::vec::from_elem (13 samples, 0.95%)</title><rect x="33.5277%" y="357" width="0.9475%" height="15" fill="rgb(216,164,2)" fg:x="460" fg:w="13"/><text x="33.7777%" y="367.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (13 samples, 0.95%)</title><rect x="33.5277%" y="341" width="0.9475%" height="15" fill="rgb(220,129,5)" fg:x="460" fg:w="13"/><text x="33.7777%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.29%)</title><rect x="34.1837%" y="325" width="0.2915%" height="15" fill="rgb(242,17,10)" fg:x="469" fg:w="4"/><text x="34.4337%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.29%)</title><rect x="34.1837%" y="309" width="0.2915%" height="15" fill="rgb(242,107,0)" fg:x="469" fg:w="4"/><text x="34.4337%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.29%)</title><rect x="34.1837%" y="293" width="0.2915%" height="15" fill="rgb(251,28,31)" fg:x="469" fg:w="4"/><text x="34.4337%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.29%)</title><rect x="34.1837%" y="277" width="0.2915%" height="15" fill="rgb(233,223,10)" fg:x="469" fg:w="4"/><text x="34.4337%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.29%)</title><rect x="34.1837%" y="261" width="0.2915%" height="15" fill="rgb(215,21,27)" fg:x="469" fg:w="4"/><text x="34.4337%" y="271.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.29%)</title><rect x="34.1837%" y="245" width="0.2915%" height="15" fill="rgb(232,23,21)" fg:x="469" fg:w="4"/><text x="34.4337%" y="255.50"></text></g><g><title>malloc (3 samples, 0.22%)</title><rect x="34.2566%" y="229" width="0.2187%" height="15" fill="rgb(244,5,23)" fg:x="470" fg:w="3"/><text x="34.5066%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (1 samples, 0.07%)</title><rect x="34.4752%" y="357" width="0.0729%" height="15" fill="rgb(226,81,46)" fg:x="473" fg:w="1"/><text x="34.7252%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.07%)</title><rect x="35.1312%" y="261" width="0.0729%" height="15" fill="rgb(247,70,30)" fg:x="482" fg:w="1"/><text x="35.3812%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.07%)</title><rect x="35.1312%" y="245" width="0.0729%" height="15" fill="rgb(212,68,19)" fg:x="482" fg:w="1"/><text x="35.3812%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.07%)</title><rect x="35.1312%" y="229" width="0.0729%" height="15" fill="rgb(240,187,13)" fg:x="482" fg:w="1"/><text x="35.3812%" y="239.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1 samples, 0.07%)</title><rect x="35.2041%" y="261" width="0.0729%" height="15" fill="rgb(223,113,26)" fg:x="483" fg:w="1"/><text x="35.4541%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt;&gt;&gt;::index (2 samples, 0.15%)</title><rect x="35.2770%" y="261" width="0.1458%" height="15" fill="rgb(206,192,2)" fg:x="484" fg:w="2"/><text x="35.5270%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.15%)</title><rect x="35.2770%" y="245" width="0.1458%" height="15" fill="rgb(241,108,4)" fg:x="484" fg:w="2"/><text x="35.5270%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.15%)</title><rect x="35.2770%" y="229" width="0.1458%" height="15" fill="rgb(247,173,49)" fg:x="484" fg:w="2"/><text x="35.5270%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.15%)</title><rect x="35.2770%" y="213" width="0.1458%" height="15" fill="rgb(224,114,35)" fg:x="484" fg:w="2"/><text x="35.5270%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.95%)</title><rect x="34.5481%" y="325" width="0.9475%" height="15" fill="rgb(245,159,27)" fg:x="474" fg:w="13"/><text x="34.7981%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (12 samples, 0.87%)</title><rect x="34.6210%" y="309" width="0.8746%" height="15" fill="rgb(245,172,44)" fg:x="475" fg:w="12"/><text x="34.8710%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (12 samples, 0.87%)</title><rect x="34.6210%" y="293" width="0.8746%" height="15" fill="rgb(236,23,11)" fg:x="475" fg:w="12"/><text x="34.8710%" y="303.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (12 samples, 0.87%)</title><rect x="34.6210%" y="277" width="0.8746%" height="15" fill="rgb(205,117,38)" fg:x="475" fg:w="12"/><text x="34.8710%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (1 samples, 0.07%)</title><rect x="35.4227%" y="261" width="0.0729%" height="15" fill="rgb(237,72,25)" fg:x="486" fg:w="1"/><text x="35.6727%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.15%)</title><rect x="35.7872%" y="261" width="0.1458%" height="15" fill="rgb(244,70,9)" fg:x="491" fg:w="2"/><text x="36.0372%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.15%)</title><rect x="35.7872%" y="245" width="0.1458%" height="15" fill="rgb(217,125,39)" fg:x="491" fg:w="2"/><text x="36.0372%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.15%)</title><rect x="35.7872%" y="229" width="0.1458%" height="15" fill="rgb(235,36,10)" fg:x="491" fg:w="2"/><text x="36.0372%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.07%)</title><rect x="35.9329%" y="245" width="0.0729%" height="15" fill="rgb(251,123,47)" fg:x="493" fg:w="1"/><text x="36.1829%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.07%)</title><rect x="35.9329%" y="229" width="0.0729%" height="15" fill="rgb(221,13,13)" fg:x="493" fg:w="1"/><text x="36.1829%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (46 samples, 3.35%)</title><rect x="38.1195%" y="229" width="3.3528%" height="15" fill="rgb(238,131,9)" fg:x="523" fg:w="46"/><text x="38.3695%" y="239.50">&lt;pe..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (46 samples, 3.35%)</title><rect x="38.1195%" y="213" width="3.3528%" height="15" fill="rgb(211,50,8)" fg:x="523" fg:w="46"/><text x="38.3695%" y="223.50">cor..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (82 samples, 5.98%)</title><rect x="35.5685%" y="309" width="5.9767%" height="15" fill="rgb(245,182,24)" fg:x="488" fg:w="82"/><text x="35.8185%" y="319.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (80 samples, 5.83%)</title><rect x="35.7143%" y="293" width="5.8309%" height="15" fill="rgb(242,14,37)" fg:x="490" fg:w="80"/><text x="35.9643%" y="303.50">core::i..</text></g><g><title>main::compute_flowchange::_{{closure}} (80 samples, 5.83%)</title><rect x="35.7143%" y="277" width="5.8309%" height="15" fill="rgb(246,228,12)" fg:x="490" fg:w="80"/><text x="35.9643%" y="287.50">main::c..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (77 samples, 5.61%)</title><rect x="35.9329%" y="261" width="5.6122%" height="15" fill="rgb(213,55,15)" fg:x="493" fg:w="77"/><text x="36.1829%" y="271.50">petgrap..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (76 samples, 5.54%)</title><rect x="36.0058%" y="245" width="5.5394%" height="15" fill="rgb(209,9,3)" fg:x="494" fg:w="76"/><text x="36.2558%" y="255.50">petgrap..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.07%)</title><rect x="41.4723%" y="229" width="0.0729%" height="15" fill="rgb(230,59,30)" fg:x="569" fg:w="1"/><text x="41.7223%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.07%)</title><rect x="41.4723%" y="213" width="0.0729%" height="15" fill="rgb(209,121,21)" fg:x="569" fg:w="1"/><text x="41.7223%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (100 samples, 7.29%)</title><rect x="34.5481%" y="357" width="7.2886%" height="15" fill="rgb(220,109,13)" fg:x="474" fg:w="100"/><text x="34.7981%" y="367.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (100 samples, 7.29%)</title><rect x="34.5481%" y="341" width="7.2886%" height="15" fill="rgb(232,18,1)" fg:x="474" fg:w="100"/><text x="34.7981%" y="351.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (87 samples, 6.34%)</title><rect x="35.4956%" y="325" width="6.3411%" height="15" fill="rgb(215,41,42)" fg:x="487" fg:w="87"/><text x="35.7456%" y="335.50">core::it..</text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.29%)</title><rect x="41.5452%" y="309" width="0.2915%" height="15" fill="rgb(224,123,36)" fg:x="570" fg:w="4"/><text x="41.7952%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.22%)</title><rect x="41.6181%" y="293" width="0.2187%" height="15" fill="rgb(240,125,3)" fg:x="571" fg:w="3"/><text x="41.8681%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.15%)</title><rect x="41.6910%" y="277" width="0.1458%" height="15" fill="rgb(205,98,50)" fg:x="572" fg:w="2"/><text x="41.9410%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (1 samples, 0.07%)</title><rect x="41.8367%" y="357" width="0.0729%" height="15" fill="rgb(205,185,37)" fg:x="574" fg:w="1"/><text x="42.0867%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1 samples, 0.07%)</title><rect x="41.8367%" y="341" width="0.0729%" height="15" fill="rgb(238,207,15)" fg:x="574" fg:w="1"/><text x="42.0867%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="41.8367%" y="325" width="0.0729%" height="15" fill="rgb(213,199,42)" fg:x="574" fg:w="1"/><text x="42.0867%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="41.8367%" y="309" width="0.0729%" height="15" fill="rgb(235,201,11)" fg:x="574" fg:w="1"/><text x="42.0867%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1 samples, 0.07%)</title><rect x="41.8367%" y="293" width="0.0729%" height="15" fill="rgb(207,46,11)" fg:x="574" fg:w="1"/><text x="42.0867%" y="303.50"></text></g><g><title>__rust_dealloc (1 samples, 0.07%)</title><rect x="41.9096%" y="277" width="0.0729%" height="15" fill="rgb(241,35,35)" fg:x="575" fg:w="1"/><text x="42.1596%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (2 samples, 0.15%)</title><rect x="41.9096%" y="357" width="0.1458%" height="15" fill="rgb(243,32,47)" fg:x="575" fg:w="2"/><text x="42.1596%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (2 samples, 0.15%)</title><rect x="41.9096%" y="341" width="0.1458%" height="15" fill="rgb(247,202,23)" fg:x="575" fg:w="2"/><text x="42.1596%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.15%)</title><rect x="41.9096%" y="325" width="0.1458%" height="15" fill="rgb(219,102,11)" fg:x="575" fg:w="2"/><text x="42.1596%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.15%)</title><rect x="41.9096%" y="309" width="0.1458%" height="15" fill="rgb(243,110,44)" fg:x="575" fg:w="2"/><text x="42.1596%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.15%)</title><rect x="41.9096%" y="293" width="0.1458%" height="15" fill="rgb(222,74,54)" fg:x="575" fg:w="2"/><text x="42.1596%" y="303.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="41.9825%" y="277" width="0.0729%" height="15" fill="rgb(216,99,12)" fg:x="576" fg:w="1"/><text x="42.2325%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="41.9825%" y="261" width="0.0729%" height="15" fill="rgb(226,22,26)" fg:x="576" fg:w="1"/><text x="42.2325%" y="271.50"></text></g><g><title>main::compute_flowchange (122 samples, 8.89%)</title><rect x="33.5277%" y="373" width="8.8921%" height="15" fill="rgb(217,163,10)" fg:x="460" fg:w="122"/><text x="33.7777%" y="383.50">main::compute..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (5 samples, 0.36%)</title><rect x="42.0554%" y="357" width="0.3644%" height="15" fill="rgb(213,25,53)" fg:x="577" fg:w="5"/><text x="42.3054%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::EdgeIndex&gt;&gt; (5 samples, 0.36%)</title><rect x="42.0554%" y="341" width="0.3644%" height="15" fill="rgb(252,105,26)" fg:x="577" fg:w="5"/><text x="42.3054%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.36%)</title><rect x="42.0554%" y="325" width="0.3644%" height="15" fill="rgb(220,39,43)" fg:x="577" fg:w="5"/><text x="42.3054%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.36%)</title><rect x="42.0554%" y="309" width="0.3644%" height="15" fill="rgb(229,68,48)" fg:x="577" fg:w="5"/><text x="42.3054%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.36%)</title><rect x="42.0554%" y="293" width="0.3644%" height="15" fill="rgb(252,8,32)" fg:x="577" fg:w="5"/><text x="42.3054%" y="303.50"></text></g><g><title>cfree (5 samples, 0.36%)</title><rect x="42.0554%" y="277" width="0.3644%" height="15" fill="rgb(223,20,43)" fg:x="577" fg:w="5"/><text x="42.3054%" y="287.50"></text></g><g><title>[libc.so.6] (3 samples, 0.22%)</title><rect x="42.2012%" y="261" width="0.2187%" height="15" fill="rgb(229,81,49)" fg:x="579" fg:w="3"/><text x="42.4512%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="42.3469%" y="245" width="0.0729%" height="15" fill="rgb(236,28,36)" fg:x="581" fg:w="1"/><text x="42.5969%" y="255.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.07%)</title><rect x="42.4198%" y="357" width="0.0729%" height="15" fill="rgb(249,185,26)" fg:x="582" fg:w="1"/><text x="42.6698%" y="367.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.07%)</title><rect x="42.4198%" y="341" width="0.0729%" height="15" fill="rgb(249,174,33)" fg:x="582" fg:w="1"/><text x="42.6698%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.07%)</title><rect x="42.4198%" y="325" width="0.0729%" height="15" fill="rgb(233,201,37)" fg:x="582" fg:w="1"/><text x="42.6698%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.07%)</title><rect x="42.4198%" y="309" width="0.0729%" height="15" fill="rgb(221,78,26)" fg:x="582" fg:w="1"/><text x="42.6698%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.07%)</title><rect x="42.4198%" y="293" width="0.0729%" height="15" fill="rgb(250,127,30)" fg:x="582" fg:w="1"/><text x="42.6698%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.07%)</title><rect x="42.4198%" y="277" width="0.0729%" height="15" fill="rgb(230,49,44)" fg:x="582" fg:w="1"/><text x="42.6698%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.07%)</title><rect x="42.4198%" y="261" width="0.0729%" height="15" fill="rgb(229,67,23)" fg:x="582" fg:w="1"/><text x="42.6698%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="42.4198%" y="245" width="0.0729%" height="15" fill="rgb(249,83,47)" fg:x="582" fg:w="1"/><text x="42.6698%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.07%)</title><rect x="42.4927%" y="357" width="0.0729%" height="15" fill="rgb(215,43,3)" fg:x="583" fg:w="1"/><text x="42.7427%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="42.4927%" y="341" width="0.0729%" height="15" fill="rgb(238,154,13)" fg:x="583" fg:w="1"/><text x="42.7427%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="42.4927%" y="325" width="0.0729%" height="15" fill="rgb(219,56,2)" fg:x="583" fg:w="1"/><text x="42.7427%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="42.4927%" y="309" width="0.0729%" height="15" fill="rgb(233,0,4)" fg:x="583" fg:w="1"/><text x="42.7427%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.07%)</title><rect x="42.4927%" y="293" width="0.0729%" height="15" fill="rgb(235,30,7)" fg:x="583" fg:w="1"/><text x="42.7427%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.07%)</title><rect x="42.4927%" y="277" width="0.0729%" height="15" fill="rgb(250,79,13)" fg:x="583" fg:w="1"/><text x="42.7427%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.07%)</title><rect x="42.4927%" y="261" width="0.0729%" height="15" fill="rgb(211,146,34)" fg:x="583" fg:w="1"/><text x="42.7427%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="42.4927%" y="245" width="0.0729%" height="15" fill="rgb(228,22,38)" fg:x="583" fg:w="1"/><text x="42.7427%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="42.4927%" y="229" width="0.0729%" height="15" fill="rgb(235,168,5)" fg:x="583" fg:w="1"/><text x="42.7427%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="42.4927%" y="213" width="0.0729%" height="15" fill="rgb(221,155,16)" fg:x="583" fg:w="1"/><text x="42.7427%" y="223.50"></text></g><g><title>main::compute_node_potentials (3 samples, 0.22%)</title><rect x="42.4198%" y="373" width="0.2187%" height="15" fill="rgb(215,215,53)" fg:x="582" fg:w="3"/><text x="42.6698%" y="383.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (1 samples, 0.07%)</title><rect x="42.5656%" y="357" width="0.0729%" height="15" fill="rgb(223,4,10)" fg:x="584" fg:w="1"/><text x="42.8156%" y="367.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (1 samples, 0.07%)</title><rect x="42.5656%" y="341" width="0.0729%" height="15" fill="rgb(234,103,6)" fg:x="584" fg:w="1"/><text x="42.8156%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (1 samples, 0.07%)</title><rect x="42.5656%" y="325" width="0.0729%" height="15" fill="rgb(227,97,0)" fg:x="584" fg:w="1"/><text x="42.8156%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.51%)</title><rect x="44.9708%" y="357" width="0.5102%" height="15" fill="rgb(234,150,53)" fg:x="617" fg:w="7"/><text x="45.2208%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.22%)</title><rect x="45.2624%" y="341" width="0.2187%" height="15" fill="rgb(228,201,54)" fg:x="621" fg:w="3"/><text x="45.5124%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.07%)</title><rect x="46.2828%" y="309" width="0.0729%" height="15" fill="rgb(222,22,37)" fg:x="635" fg:w="1"/><text x="46.5328%" y="319.50"></text></g><g><title>__rust_realloc (1 samples, 0.07%)</title><rect x="46.5015%" y="245" width="0.0729%" height="15" fill="rgb(237,53,32)" fg:x="638" fg:w="1"/><text x="46.7515%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (21 samples, 1.53%)</title><rect x="46.5015%" y="293" width="1.5306%" height="15" fill="rgb(233,25,53)" fg:x="638" fg:w="21"/><text x="46.7515%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21 samples, 1.53%)</title><rect x="46.5015%" y="277" width="1.5306%" height="15" fill="rgb(210,40,34)" fg:x="638" fg:w="21"/><text x="46.7515%" y="287.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 1.53%)</title><rect x="46.5015%" y="261" width="1.5306%" height="15" fill="rgb(241,220,44)" fg:x="638" fg:w="21"/><text x="46.7515%" y="271.50"></text></g><g><title>realloc (20 samples, 1.46%)</title><rect x="46.5743%" y="245" width="1.4577%" height="15" fill="rgb(235,28,35)" fg:x="639" fg:w="20"/><text x="46.8243%" y="255.50"></text></g><g><title>[libc.so.6] (19 samples, 1.38%)</title><rect x="46.6472%" y="229" width="1.3848%" height="15" fill="rgb(210,56,17)" fg:x="640" fg:w="19"/><text x="46.8972%" y="239.50"></text></g><g><title>[libc.so.6] (17 samples, 1.24%)</title><rect x="46.7930%" y="213" width="1.2391%" height="15" fill="rgb(224,130,29)" fg:x="642" fg:w="17"/><text x="47.0430%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.29%)</title><rect x="47.7405%" y="197" width="0.2915%" height="15" fill="rgb(235,212,8)" fg:x="655" fg:w="4"/><text x="47.9905%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 1.82%)</title><rect x="46.2828%" y="341" width="1.8222%" height="15" fill="rgb(223,33,50)" fg:x="635" fg:w="25"/><text x="46.5328%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (25 samples, 1.82%)</title><rect x="46.2828%" y="325" width="1.8222%" height="15" fill="rgb(219,149,13)" fg:x="635" fg:w="25"/><text x="46.5328%" y="335.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 1.75%)</title><rect x="46.3557%" y="309" width="1.7493%" height="15" fill="rgb(250,156,29)" fg:x="636" fg:w="24"/><text x="46.6057%" y="319.50"></text></g><g><title>malloc (1 samples, 0.07%)</title><rect x="48.0321%" y="293" width="0.0729%" height="15" fill="rgb(216,193,19)" fg:x="659" fg:w="1"/><text x="48.2821%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.22%)</title><rect x="48.1050%" y="341" width="0.2187%" height="15" fill="rgb(216,135,14)" fg:x="660" fg:w="3"/><text x="48.3550%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.22%)</title><rect x="48.1050%" y="325" width="0.2187%" height="15" fill="rgb(241,47,5)" fg:x="660" fg:w="3"/><text x="48.3550%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (42 samples, 3.06%)</title><rect x="45.4810%" y="357" width="3.0612%" height="15" fill="rgb(233,42,35)" fg:x="624" fg:w="42"/><text x="45.7310%" y="367.50">all..</text></g><g><title>core::ptr::write (3 samples, 0.22%)</title><rect x="48.3236%" y="341" width="0.2187%" height="15" fill="rgb(231,13,6)" fg:x="663" fg:w="3"/><text x="48.5736%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.15%)</title><rect x="48.5423%" y="261" width="0.1458%" height="15" fill="rgb(207,181,40)" fg:x="666" fg:w="2"/><text x="48.7923%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.15%)</title><rect x="48.5423%" y="245" width="0.1458%" height="15" fill="rgb(254,173,49)" fg:x="666" fg:w="2"/><text x="48.7923%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.15%)</title><rect x="48.5423%" y="229" width="0.1458%" height="15" fill="rgb(221,1,38)" fg:x="666" fg:w="2"/><text x="48.7923%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.15%)</title><rect x="48.5423%" y="213" width="0.1458%" height="15" fill="rgb(206,124,46)" fg:x="666" fg:w="2"/><text x="48.7923%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.15%)</title><rect x="48.5423%" y="197" width="0.1458%" height="15" fill="rgb(249,21,11)" fg:x="666" fg:w="2"/><text x="48.7923%" y="207.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.15%)</title><rect x="48.5423%" y="181" width="0.1458%" height="15" fill="rgb(222,201,40)" fg:x="666" fg:w="2"/><text x="48.7923%" y="191.50"></text></g><g><title>realloc (2 samples, 0.15%)</title><rect x="48.5423%" y="165" width="0.1458%" height="15" fill="rgb(235,61,29)" fg:x="666" fg:w="2"/><text x="48.7923%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="48.5423%" y="149" width="0.1458%" height="15" fill="rgb(219,207,3)" fg:x="666" fg:w="2"/><text x="48.7923%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="48.5423%" y="133" width="0.1458%" height="15" fill="rgb(222,56,46)" fg:x="666" fg:w="2"/><text x="48.7923%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="48.6152%" y="117" width="0.0729%" height="15" fill="rgb(239,76,54)" fg:x="667" fg:w="1"/><text x="48.8652%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.15%)</title><rect x="48.6880%" y="261" width="0.1458%" height="15" fill="rgb(231,124,27)" fg:x="668" fg:w="2"/><text x="48.9380%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.15%)</title><rect x="48.6880%" y="245" width="0.1458%" height="15" fill="rgb(249,195,6)" fg:x="668" fg:w="2"/><text x="48.9380%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 0.51%)</title><rect x="48.5423%" y="357" width="0.5102%" height="15" fill="rgb(237,174,47)" fg:x="666" fg:w="7"/><text x="48.7923%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.51%)</title><rect x="48.5423%" y="341" width="0.5102%" height="15" fill="rgb(206,201,31)" fg:x="666" fg:w="7"/><text x="48.7923%" y="351.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (7 samples, 0.51%)</title><rect x="48.5423%" y="325" width="0.5102%" height="15" fill="rgb(231,57,52)" fg:x="666" fg:w="7"/><text x="48.7923%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 0.51%)</title><rect x="48.5423%" y="309" width="0.5102%" height="15" fill="rgb(248,177,22)" fg:x="666" fg:w="7"/><text x="48.7923%" y="319.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (7 samples, 0.51%)</title><rect x="48.5423%" y="293" width="0.5102%" height="15" fill="rgb(215,211,37)" fg:x="666" fg:w="7"/><text x="48.7923%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.51%)</title><rect x="48.5423%" y="277" width="0.5102%" height="15" fill="rgb(241,128,51)" fg:x="666" fg:w="7"/><text x="48.7923%" y="287.50"></text></g><g><title>core::ptr::write (3 samples, 0.22%)</title><rect x="48.8338%" y="261" width="0.2187%" height="15" fill="rgb(227,165,31)" fg:x="670" fg:w="3"/><text x="49.0838%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (4 samples, 0.29%)</title><rect x="49.0525%" y="357" width="0.2915%" height="15" fill="rgb(228,167,24)" fg:x="673" fg:w="4"/><text x="49.3025%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.29%)</title><rect x="49.0525%" y="341" width="0.2915%" height="15" fill="rgb(228,143,12)" fg:x="673" fg:w="4"/><text x="49.3025%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.07%)</title><rect x="49.3440%" y="357" width="0.0729%" height="15" fill="rgb(249,149,8)" fg:x="677" fg:w="1"/><text x="49.5940%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.07%)</title><rect x="49.3440%" y="341" width="0.0729%" height="15" fill="rgb(243,35,44)" fg:x="677" fg:w="1"/><text x="49.5940%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="49.3440%" y="325" width="0.0729%" height="15" fill="rgb(246,89,9)" fg:x="677" fg:w="1"/><text x="49.5940%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.07%)</title><rect x="49.3440%" y="309" width="0.0729%" height="15" fill="rgb(233,213,13)" fg:x="677" fg:w="1"/><text x="49.5940%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.07%)</title><rect x="49.3440%" y="293" width="0.0729%" height="15" fill="rgb(233,141,41)" fg:x="677" fg:w="1"/><text x="49.5940%" y="303.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.07%)</title><rect x="49.3440%" y="277" width="0.0729%" height="15" fill="rgb(239,167,4)" fg:x="677" fg:w="1"/><text x="49.5940%" y="287.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (75 samples, 5.47%)</title><rect x="53.7901%" y="309" width="5.4665%" height="15" fill="rgb(209,217,16)" fg:x="738" fg:w="75"/><text x="54.0401%" y="319.50">&lt;T as c..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (75 samples, 5.47%)</title><rect x="53.7901%" y="293" width="5.4665%" height="15" fill="rgb(219,88,35)" fg:x="738" fg:w="75"/><text x="54.0401%" y="303.50">&lt;petgra..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (75 samples, 5.47%)</title><rect x="53.7901%" y="277" width="5.4665%" height="15" fill="rgb(220,193,23)" fg:x="738" fg:w="75"/><text x="54.0401%" y="287.50">core::c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (146 samples, 10.64%)</title><rect x="49.4169%" y="357" width="10.6414%" height="15" fill="rgb(230,90,52)" fg:x="678" fg:w="146"/><text x="49.6669%" y="367.50">core::slice::&lt;im..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (146 samples, 10.64%)</title><rect x="49.4169%" y="341" width="10.6414%" height="15" fill="rgb(252,106,19)" fg:x="678" fg:w="146"/><text x="49.6669%" y="351.50">&lt;T as core::slic..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (146 samples, 10.64%)</title><rect x="49.4169%" y="325" width="10.6414%" height="15" fill="rgb(206,74,20)" fg:x="678" fg:w="146"/><text x="49.6669%" y="335.50">&lt;core::slice::it..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.80%)</title><rect x="59.2566%" y="309" width="0.8017%" height="15" fill="rgb(230,138,44)" fg:x="813" fg:w="11"/><text x="59.5066%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (10 samples, 0.73%)</title><rect x="59.3294%" y="293" width="0.7289%" height="15" fill="rgb(235,182,43)" fg:x="814" fg:w="10"/><text x="59.5794%" y="303.50"></text></g><g><title>itertools::Itertools::find_position (3 samples, 0.22%)</title><rect x="60.0583%" y="357" width="0.2187%" height="15" fill="rgb(242,16,51)" fg:x="824" fg:w="3"/><text x="60.3083%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.22%)</title><rect x="60.0583%" y="341" width="0.2187%" height="15" fill="rgb(248,9,4)" fg:x="824" fg:w="3"/><text x="60.3083%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.22%)</title><rect x="60.0583%" y="325" width="0.2187%" height="15" fill="rgb(210,31,22)" fg:x="824" fg:w="3"/><text x="60.3083%" y="335.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.22%)</title><rect x="60.0583%" y="309" width="0.2187%" height="15" fill="rgb(239,54,39)" fg:x="824" fg:w="3"/><text x="60.3083%" y="319.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::IteratorRefSpec&gt;::spec_try_fold (3 samples, 0.22%)</title><rect x="60.0583%" y="293" width="0.2187%" height="15" fill="rgb(230,99,41)" fg:x="824" fg:w="3"/><text x="60.3083%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.22%)</title><rect x="60.0583%" y="277" width="0.2187%" height="15" fill="rgb(253,106,12)" fg:x="824" fg:w="3"/><text x="60.3083%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (3 samples, 0.22%)</title><rect x="60.0583%" y="261" width="0.2187%" height="15" fill="rgb(213,46,41)" fg:x="824" fg:w="3"/><text x="60.3083%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::_{{closure}} (2 samples, 0.15%)</title><rect x="60.1312%" y="245" width="0.1458%" height="15" fill="rgb(215,133,35)" fg:x="825" fg:w="2"/><text x="60.3812%" y="255.50"></text></g><g><title>itertools::Itertools::find_position::_{{closure}} (2 samples, 0.15%)</title><rect x="60.1312%" y="229" width="0.1458%" height="15" fill="rgb(213,28,5)" fg:x="825" fg:w="2"/><text x="60.3812%" y="239.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (2 samples, 0.15%)</title><rect x="60.1312%" y="213" width="0.1458%" height="15" fill="rgb(215,77,49)" fg:x="825" fg:w="2"/><text x="60.3812%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.15%)</title><rect x="60.1312%" y="197" width="0.1458%" height="15" fill="rgb(248,100,22)" fg:x="825" fg:w="2"/><text x="60.3812%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.15%)</title><rect x="60.1312%" y="181" width="0.1458%" height="15" fill="rgb(208,67,9)" fg:x="825" fg:w="2"/><text x="60.3812%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (2 samples, 0.15%)</title><rect x="60.1312%" y="165" width="0.1458%" height="15" fill="rgb(219,133,21)" fg:x="825" fg:w="2"/><text x="60.3812%" y="175.50"></text></g><g><title>main::find_cycle_with_arc (244 samples, 17.78%)</title><rect x="42.6385%" y="373" width="17.7843%" height="15" fill="rgb(246,46,29)" fg:x="585" fg:w="244"/><text x="42.8885%" y="383.50">main::find_cycle_with_arc</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (2 samples, 0.15%)</title><rect x="60.2770%" y="357" width="0.1458%" height="15" fill="rgb(246,185,52)" fg:x="827" fg:w="2"/><text x="60.5270%" y="367.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.15%)</title><rect x="60.2770%" y="341" width="0.1458%" height="15" fill="rgb(252,136,11)" fg:x="827" fg:w="2"/><text x="60.5270%" y="351.50"></text></g><g><title>main::initialization (1 samples, 0.07%)</title><rect x="60.4227%" y="373" width="0.0729%" height="15" fill="rgb(219,138,53)" fg:x="829" fg:w="1"/><text x="60.6727%" y="383.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="60.4227%" y="357" width="0.0729%" height="15" fill="rgb(211,51,23)" fg:x="829" fg:w="1"/><text x="60.6727%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="60.4227%" y="341" width="0.0729%" height="15" fill="rgb(247,221,28)" fg:x="829" fg:w="1"/><text x="60.6727%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.07%)</title><rect x="60.4227%" y="325" width="0.0729%" height="15" fill="rgb(251,222,45)" fg:x="829" fg:w="1"/><text x="60.6727%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.07%)</title><rect x="60.4227%" y="309" width="0.0729%" height="15" fill="rgb(217,162,53)" fg:x="829" fg:w="1"/><text x="60.6727%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.07%)</title><rect x="60.4227%" y="293" width="0.0729%" height="15" fill="rgb(229,93,14)" fg:x="829" fg:w="1"/><text x="60.6727%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="60.4227%" y="277" width="0.0729%" height="15" fill="rgb(209,67,49)" fg:x="829" fg:w="1"/><text x="60.6727%" y="287.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="60.4227%" y="261" width="0.0729%" height="15" fill="rgb(213,87,29)" fg:x="829" fg:w="1"/><text x="60.6727%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.07%)</title><rect x="62.1720%" y="309" width="0.0729%" height="15" fill="rgb(205,151,52)" fg:x="853" fg:w="1"/><text x="62.4220%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.31%)</title><rect x="62.3178%" y="293" width="1.3120%" height="15" fill="rgb(253,215,39)" fg:x="855" fg:w="18"/><text x="62.5678%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (38 samples, 2.77%)</title><rect x="62.2449%" y="309" width="2.7697%" height="15" fill="rgb(221,220,41)" fg:x="854" fg:w="38"/><text x="62.4949%" y="319.50">&lt;c..</text></g><g><title>main::update_sptree::_{{closure}}::_{{closure}} (19 samples, 1.38%)</title><rect x="63.6297%" y="293" width="1.3848%" height="15" fill="rgb(218,133,21)" fg:x="873" fg:w="19"/><text x="63.8797%" y="303.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (19 samples, 1.38%)</title><rect x="63.6297%" y="277" width="1.3848%" height="15" fill="rgb(221,193,43)" fg:x="873" fg:w="19"/><text x="63.8797%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (19 samples, 1.38%)</title><rect x="63.6297%" y="261" width="1.3848%" height="15" fill="rgb(240,128,52)" fg:x="873" fg:w="19"/><text x="63.8797%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (41 samples, 2.99%)</title><rect x="62.0991%" y="357" width="2.9883%" height="15" fill="rgb(253,114,12)" fg:x="852" fg:w="41"/><text x="62.3491%" y="367.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (41 samples, 2.99%)</title><rect x="62.0991%" y="341" width="2.9883%" height="15" fill="rgb(215,223,47)" fg:x="852" fg:w="41"/><text x="62.3491%" y="351.50">&lt;co..</text></g><g><title>main::update_sptree::_{{closure}} (41 samples, 2.99%)</title><rect x="62.0991%" y="325" width="2.9883%" height="15" fill="rgb(248,225,23)" fg:x="852" fg:w="41"/><text x="62.3491%" y="335.50">mai..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.07%)</title><rect x="65.0146%" y="309" width="0.0729%" height="15" fill="rgb(250,108,0)" fg:x="892" fg:w="1"/><text x="65.2646%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.15%)</title><rect x="65.2332%" y="341" width="0.1458%" height="15" fill="rgb(228,208,7)" fg:x="895" fg:w="2"/><text x="65.4832%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.15%)</title><rect x="65.2332%" y="325" width="0.1458%" height="15" fill="rgb(244,45,10)" fg:x="895" fg:w="2"/><text x="65.4832%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (2 samples, 0.15%)</title><rect x="65.2332%" y="309" width="0.1458%" height="15" fill="rgb(207,125,25)" fg:x="895" fg:w="2"/><text x="65.4832%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.51%)</title><rect x="65.7434%" y="325" width="0.5102%" height="15" fill="rgb(210,195,18)" fg:x="902" fg:w="7"/><text x="65.9934%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.51%)</title><rect x="65.7434%" y="309" width="0.5102%" height="15" fill="rgb(249,80,12)" fg:x="902" fg:w="7"/><text x="65.9934%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.51%)</title><rect x="65.7434%" y="293" width="0.5102%" height="15" fill="rgb(221,65,9)" fg:x="902" fg:w="7"/><text x="65.9934%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (3 samples, 0.22%)</title><rect x="66.2536%" y="325" width="0.2187%" height="15" fill="rgb(235,49,36)" fg:x="909" fg:w="3"/><text x="66.5036%" y="335.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (111 samples, 8.09%)</title><rect x="68.8047%" y="277" width="8.0904%" height="15" fill="rgb(225,32,20)" fg:x="944" fg:w="111"/><text x="69.0547%" y="287.50">&lt;T as core:..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (111 samples, 8.09%)</title><rect x="68.8047%" y="261" width="8.0904%" height="15" fill="rgb(215,141,46)" fg:x="944" fg:w="111"/><text x="69.0547%" y="271.50">&lt;petgraph::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (111 samples, 8.09%)</title><rect x="68.8047%" y="245" width="8.0904%" height="15" fill="rgb(250,160,47)" fg:x="944" fg:w="111"/><text x="69.0547%" y="255.50">core::cmp::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (197 samples, 14.36%)</title><rect x="65.0875%" y="357" width="14.3586%" height="15" fill="rgb(216,222,40)" fg:x="893" fg:w="197"/><text x="65.3375%" y="367.50">&lt;core::slice::iter::It..</text></g><g><title>main::update_sptree::_{{closure}} (193 samples, 14.07%)</title><rect x="65.3790%" y="341" width="14.0671%" height="15" fill="rgb(234,217,39)" fg:x="897" fg:w="193"/><text x="65.6290%" y="351.50">main::update_sptree::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (178 samples, 12.97%)</title><rect x="66.4723%" y="325" width="12.9738%" height="15" fill="rgb(207,178,40)" fg:x="912" fg:w="178"/><text x="66.7223%" y="335.50">core::slice::&lt;impl ..</text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (178 samples, 12.97%)</title><rect x="66.4723%" y="309" width="12.9738%" height="15" fill="rgb(221,136,13)" fg:x="912" fg:w="178"/><text x="66.7223%" y="319.50">&lt;T as core::slice::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (178 samples, 12.97%)</title><rect x="66.4723%" y="293" width="12.9738%" height="15" fill="rgb(249,199,10)" fg:x="912" fg:w="178"/><text x="66.7223%" y="303.50">&lt;core::slice::iter:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 2.55%)</title><rect x="76.8950%" y="277" width="2.5510%" height="15" fill="rgb(249,222,13)" fg:x="1055" fg:w="35"/><text x="77.1450%" y="287.50">&lt;c..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (35 samples, 2.55%)</title><rect x="76.8950%" y="261" width="2.5510%" height="15" fill="rgb(244,185,38)" fg:x="1055" fg:w="35"/><text x="77.1450%" y="271.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 6.34%)</title><rect x="80.1020%" y="341" width="6.3411%" height="15" fill="rgb(236,202,9)" fg:x="1099" fg:w="87"/><text x="80.3520%" y="351.50">&lt;core::s..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (43 samples, 3.13%)</title><rect x="83.3090%" y="325" width="3.1341%" height="15" fill="rgb(250,229,37)" fg:x="1143" fg:w="43"/><text x="83.5590%" y="335.50">&lt;co..</text></g><g><title>&lt;petgraph::graph_impl::EdgeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (64 samples, 4.66%)</title><rect x="86.4431%" y="325" width="4.6647%" height="15" fill="rgb(206,174,23)" fg:x="1186" fg:w="64"/><text x="86.6931%" y="335.50">&lt;petg..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (64 samples, 4.66%)</title><rect x="86.4431%" y="309" width="4.6647%" height="15" fill="rgb(211,33,43)" fg:x="1186" fg:w="64"/><text x="86.6931%" y="319.50">core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (225 samples, 16.40%)</title><rect x="79.4461%" y="357" width="16.3994%" height="15" fill="rgb(245,58,50)" fg:x="1090" fg:w="225"/><text x="79.6961%" y="367.50">&lt;core::slice::iter::Iter&lt;..</text></g><g><title>main::update_sptree::_{{closure}} (129 samples, 9.40%)</title><rect x="86.4431%" y="341" width="9.4023%" height="15" fill="rgb(244,68,36)" fg:x="1186" fg:w="129"/><text x="86.6931%" y="351.50">main::update_..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (65 samples, 4.74%)</title><rect x="91.1079%" y="325" width="4.7376%" height="15" fill="rgb(232,229,15)" fg:x="1250" fg:w="65"/><text x="91.3579%" y="335.50">&lt;petgr..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (65 samples, 4.74%)</title><rect x="91.1079%" y="309" width="4.7376%" height="15" fill="rgb(254,30,23)" fg:x="1250" fg:w="65"/><text x="91.3579%" y="319.50">core::..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.15%)</title><rect x="95.8455%" y="357" width="0.1458%" height="15" fill="rgb(235,160,14)" fg:x="1315" fg:w="2"/><text x="96.0955%" y="367.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.15%)</title><rect x="95.8455%" y="341" width="0.1458%" height="15" fill="rgb(212,155,44)" fg:x="1315" fg:w="2"/><text x="96.0955%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (17 samples, 1.24%)</title><rect x="96.5743%" y="293" width="1.2391%" height="15" fill="rgb(226,2,50)" fg:x="1325" fg:w="17"/><text x="96.8243%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (17 samples, 1.24%)</title><rect x="96.5743%" y="277" width="1.2391%" height="15" fill="rgb(234,177,6)" fg:x="1325" fg:w="17"/><text x="96.8243%" y="287.50"></text></g><g><title>alloc::alloc::realloc (17 samples, 1.24%)</title><rect x="96.5743%" y="261" width="1.2391%" height="15" fill="rgb(217,24,9)" fg:x="1325" fg:w="17"/><text x="96.8243%" y="271.50"></text></g><g><title>realloc (16 samples, 1.17%)</title><rect x="96.6472%" y="245" width="1.1662%" height="15" fill="rgb(220,13,46)" fg:x="1326" fg:w="16"/><text x="96.8972%" y="255.50"></text></g><g><title>[libc.so.6] (11 samples, 0.80%)</title><rect x="97.0117%" y="229" width="0.8017%" height="15" fill="rgb(239,221,27)" fg:x="1331" fg:w="11"/><text x="97.2617%" y="239.50"></text></g><g><title>[libc.so.6] (7 samples, 0.51%)</title><rect x="97.3032%" y="213" width="0.5102%" height="15" fill="rgb(222,198,25)" fg:x="1335" fg:w="7"/><text x="97.5532%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="97.6676%" y="197" width="0.1458%" height="15" fill="rgb(211,99,13)" fg:x="1340" fg:w="2"/><text x="97.9176%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 1.31%)</title><rect x="96.5743%" y="341" width="1.3120%" height="15" fill="rgb(232,111,31)" fg:x="1325" fg:w="18"/><text x="96.8243%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (18 samples, 1.31%)</title><rect x="96.5743%" y="325" width="1.3120%" height="15" fill="rgb(245,82,37)" fg:x="1325" fg:w="18"/><text x="96.8243%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 1.31%)</title><rect x="96.5743%" y="309" width="1.3120%" height="15" fill="rgb(227,149,46)" fg:x="1325" fg:w="18"/><text x="96.8243%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.07%)</title><rect x="97.8134%" y="293" width="0.0729%" height="15" fill="rgb(218,36,50)" fg:x="1342" fg:w="1"/><text x="98.0634%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.15%)</title><rect x="97.8863%" y="341" width="0.1458%" height="15" fill="rgb(226,80,48)" fg:x="1343" fg:w="2"/><text x="98.1363%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.15%)</title><rect x="97.8863%" y="325" width="0.1458%" height="15" fill="rgb(238,224,15)" fg:x="1343" fg:w="2"/><text x="98.1363%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (32 samples, 2.33%)</title><rect x="95.9913%" y="357" width="2.3324%" height="15" fill="rgb(241,136,10)" fg:x="1317" fg:w="32"/><text x="96.2413%" y="367.50">a..</text></g><g><title>core::ptr::write (4 samples, 0.29%)</title><rect x="98.0321%" y="341" width="0.2915%" height="15" fill="rgb(208,32,45)" fg:x="1345" fg:w="4"/><text x="98.2821%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (9 samples, 0.66%)</title><rect x="98.3236%" y="357" width="0.6560%" height="15" fill="rgb(207,135,9)" fg:x="1349" fg:w="9"/><text x="98.5736%" y="367.50"></text></g><g><title>core::intrinsics::copy (9 samples, 0.66%)</title><rect x="98.3236%" y="341" width="0.6560%" height="15" fill="rgb(206,86,44)" fg:x="1349" fg:w="9"/><text x="98.5736%" y="351.50"></text></g><g><title>[libc.so.6] (9 samples, 0.66%)</title><rect x="98.3236%" y="325" width="0.6560%" height="15" fill="rgb(245,177,15)" fg:x="1349" fg:w="9"/><text x="98.5736%" y="335.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.07%)</title><rect x="98.9796%" y="357" width="0.0729%" height="15" fill="rgb(206,64,50)" fg:x="1358" fg:w="1"/><text x="99.2296%" y="367.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.07%)</title><rect x="98.9796%" y="341" width="0.0729%" height="15" fill="rgb(234,36,40)" fg:x="1358" fg:w="1"/><text x="99.2296%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1 samples, 0.07%)</title><rect x="98.9796%" y="325" width="0.0729%" height="15" fill="rgb(213,64,8)" fg:x="1358" fg:w="1"/><text x="99.2296%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.07%)</title><rect x="99.0525%" y="357" width="0.0729%" height="15" fill="rgb(210,75,36)" fg:x="1359" fg:w="1"/><text x="99.3025%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="99.0525%" y="341" width="0.0729%" height="15" fill="rgb(229,88,21)" fg:x="1359" fg:w="1"/><text x="99.3025%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="99.0525%" y="325" width="0.0729%" height="15" fill="rgb(252,204,47)" fg:x="1359" fg:w="1"/><text x="99.3025%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.07%)</title><rect x="99.0525%" y="309" width="0.0729%" height="15" fill="rgb(208,77,27)" fg:x="1359" fg:w="1"/><text x="99.3025%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1 samples, 0.07%)</title><rect x="99.0525%" y="293" width="0.0729%" height="15" fill="rgb(221,76,26)" fg:x="1359" fg:w="1"/><text x="99.3025%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.07%)</title><rect x="99.0525%" y="277" width="0.0729%" height="15" fill="rgb(225,139,18)" fg:x="1359" fg:w="1"/><text x="99.3025%" y="287.50"></text></g><g><title>main::update_sptree::_{{closure}} (1 samples, 0.07%)</title><rect x="99.0525%" y="261" width="0.0729%" height="15" fill="rgb(230,137,11)" fg:x="1359" fg:w="1"/><text x="99.3025%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.07%)</title><rect x="99.1254%" y="357" width="0.0729%" height="15" fill="rgb(212,28,1)" fg:x="1360" fg:w="1"/><text x="99.3754%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.07%)</title><rect x="99.1254%" y="341" width="0.0729%" height="15" fill="rgb(248,164,17)" fg:x="1360" fg:w="1"/><text x="99.3754%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (4 samples, 0.29%)</title><rect x="99.1983%" y="357" width="0.2915%" height="15" fill="rgb(222,171,42)" fg:x="1361" fg:w="4"/><text x="99.4483%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (4 samples, 0.29%)</title><rect x="99.1983%" y="341" width="0.2915%" height="15" fill="rgb(243,84,45)" fg:x="1361" fg:w="4"/><text x="99.4483%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.29%)</title><rect x="99.1983%" y="325" width="0.2915%" height="15" fill="rgb(252,49,23)" fg:x="1361" fg:w="4"/><text x="99.4483%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.29%)</title><rect x="99.1983%" y="309" width="0.2915%" height="15" fill="rgb(215,19,7)" fg:x="1361" fg:w="4"/><text x="99.4483%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.29%)</title><rect x="99.1983%" y="293" width="0.2915%" height="15" fill="rgb(238,81,41)" fg:x="1361" fg:w="4"/><text x="99.4483%" y="303.50"></text></g><g><title>cfree (3 samples, 0.22%)</title><rect x="99.2711%" y="277" width="0.2187%" height="15" fill="rgb(210,199,37)" fg:x="1362" fg:w="3"/><text x="99.5211%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="99.3440%" y="261" width="0.1458%" height="15" fill="rgb(244,192,49)" fg:x="1363" fg:w="2"/><text x="99.5940%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.07%)</title><rect x="99.4898%" y="357" width="0.0729%" height="15" fill="rgb(226,211,11)" fg:x="1365" fg:w="1"/><text x="99.7398%" y="367.50"></text></g><g><title>main::min_cost (1,350 samples, 98.40%)</title><rect x="1.3120%" y="389" width="98.3965%" height="15" fill="rgb(236,162,54)" fg:x="18" fg:w="1350"/><text x="1.5620%" y="399.50">main::min_cost</text></g><g><title>main::update_sptree (538 samples, 39.21%)</title><rect x="60.4956%" y="373" width="39.2128%" height="15" fill="rgb(220,229,9)" fg:x="830" fg:w="538"/><text x="60.7456%" y="383.50">main::update_sptree</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::index (2 samples, 0.15%)</title><rect x="99.5627%" y="357" width="0.1458%" height="15" fill="rgb(250,87,22)" fg:x="1366" fg:w="2"/><text x="99.8127%" y="367.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (2 samples, 0.15%)</title><rect x="99.5627%" y="341" width="0.1458%" height="15" fill="rgb(239,43,17)" fg:x="1366" fg:w="2"/><text x="99.8127%" y="351.50"></text></g><g><title>_start (1,351 samples, 98.47%)</title><rect x="1.3120%" y="533" width="98.4694%" height="15" fill="rgb(231,177,25)" fg:x="18" fg:w="1351"/><text x="1.5620%" y="543.50">_start</text></g><g><title>__libc_start_main (1,351 samples, 98.47%)</title><rect x="1.3120%" y="517" width="98.4694%" height="15" fill="rgb(219,179,1)" fg:x="18" fg:w="1351"/><text x="1.5620%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,351 samples, 98.47%)</title><rect x="1.3120%" y="501" width="98.4694%" height="15" fill="rgb(238,219,53)" fg:x="18" fg:w="1351"/><text x="1.5620%" y="511.50">[libc.so.6]</text></g><g><title>main (1,351 samples, 98.47%)</title><rect x="1.3120%" y="485" width="98.4694%" height="15" fill="rgb(232,167,36)" fg:x="18" fg:w="1351"/><text x="1.5620%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (1,351 samples, 98.47%)</title><rect x="1.3120%" y="469" width="98.4694%" height="15" fill="rgb(244,19,51)" fg:x="18" fg:w="1351"/><text x="1.5620%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (1,351 samples, 98.47%)</title><rect x="1.3120%" y="453" width="98.4694%" height="15" fill="rgb(224,6,22)" fg:x="18" fg:w="1351"/><text x="1.5620%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,351 samples, 98.47%)</title><rect x="1.3120%" y="437" width="98.4694%" height="15" fill="rgb(224,145,5)" fg:x="18" fg:w="1351"/><text x="1.5620%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,351 samples, 98.47%)</title><rect x="1.3120%" y="421" width="98.4694%" height="15" fill="rgb(234,130,49)" fg:x="18" fg:w="1351"/><text x="1.5620%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (1,351 samples, 98.47%)</title><rect x="1.3120%" y="405" width="98.4694%" height="15" fill="rgb(254,6,2)" fg:x="18" fg:w="1351"/><text x="1.5620%" y="415.50">main::main</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (1 samples, 0.07%)</title><rect x="99.7085%" y="389" width="0.0729%" height="15" fill="rgb(208,96,46)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.07%)</title><rect x="99.7085%" y="373" width="0.0729%" height="15" fill="rgb(239,3,39)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.07%)</title><rect x="99.7085%" y="357" width="0.0729%" height="15" fill="rgb(233,210,1)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.07%)</title><rect x="99.7085%" y="341" width="0.0729%" height="15" fill="rgb(244,137,37)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="99.7085%" y="325" width="0.0729%" height="15" fill="rgb(240,136,2)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.07%)</title><rect x="99.7085%" y="309" width="0.0729%" height="15" fill="rgb(239,18,37)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.07%)</title><rect x="99.7085%" y="293" width="0.0729%" height="15" fill="rgb(218,185,22)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="303.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.07%)</title><rect x="99.7085%" y="277" width="0.0729%" height="15" fill="rgb(225,218,4)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="287.50"></text></g><g><title>realloc (1 samples, 0.07%)</title><rect x="99.7085%" y="261" width="0.0729%" height="15" fill="rgb(230,182,32)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="99.7085%" y="245" width="0.0729%" height="15" fill="rgb(242,56,43)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="99.7085%" y="229" width="0.0729%" height="15" fill="rgb(233,99,24)" fg:x="1368" fg:w="1"/><text x="99.9585%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="99.7813%" y="533" width="0.0729%" height="15" fill="rgb(234,209,42)" fg:x="1369" fg:w="1"/><text x="100.0313%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.07%)</title><rect x="99.8542%" y="517" width="0.0729%" height="15" fill="rgb(227,7,12)" fg:x="1370" fg:w="1"/><text x="100.1042%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&gt;&gt; (1 samples, 0.07%)</title><rect x="99.8542%" y="501" width="0.0729%" height="15" fill="rgb(245,203,43)" fg:x="1370" fg:w="1"/><text x="100.1042%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="99.8542%" y="485" width="0.0729%" height="15" fill="rgb(238,205,33)" fg:x="1370" fg:w="1"/><text x="100.1042%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.07%)</title><rect x="99.8542%" y="469" width="0.0729%" height="15" fill="rgb(231,56,7)" fg:x="1370" fg:w="1"/><text x="100.1042%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.07%)</title><rect x="99.8542%" y="453" width="0.0729%" height="15" fill="rgb(244,186,29)" fg:x="1370" fg:w="1"/><text x="100.1042%" y="463.50"></text></g><g><title>all (1,372 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="1372"/><text x="0.2500%" y="575.50"></text></g><g><title>main (1,372 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="1372"/><text x="0.2500%" y="559.50">main</text></g><g><title>main::min_cost (2 samples, 0.15%)</title><rect x="99.8542%" y="533" width="0.1458%" height="15" fill="rgb(249,206,44)" fg:x="1370" fg:w="2"/><text x="100.1042%" y="543.50"></text></g><g><title>main::find_cycle_with_arc (1 samples, 0.07%)</title><rect x="99.9271%" y="517" width="0.0729%" height="15" fill="rgb(251,153,30)" fg:x="1371" fg:w="1"/><text x="100.1771%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.07%)</title><rect x="99.9271%" y="501" width="0.0729%" height="15" fill="rgb(239,152,38)" fg:x="1371" fg:w="1"/><text x="100.1771%" y="511.50"></text></g></svg></svg>