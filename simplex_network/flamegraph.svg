<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="15949"><g><title>[libc.so.6] (68 samples, 0.43%)</title><rect x="0.0000%" y="453" width="0.4264%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="68"/><text x="0.2500%" y="463.50"></text></g><g><title>__libc_calloc (3 samples, 0.02%)</title><rect x="0.4264%" y="453" width="0.0188%" height="15" fill="rgb(217,0,24)" fg:x="68" fg:w="3"/><text x="0.6764%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.01%)</title><rect x="0.4452%" y="453" width="0.0125%" height="15" fill="rgb(221,193,54)" fg:x="71" fg:w="2"/><text x="0.6952%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.01%)</title><rect x="0.4452%" y="437" width="0.0125%" height="15" fill="rgb(248,212,6)" fg:x="71" fg:w="2"/><text x="0.6952%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.04%)</title><rect x="0.4577%" y="453" width="0.0439%" height="15" fill="rgb(208,68,35)" fg:x="73" fg:w="7"/><text x="0.7077%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.01%)</title><rect x="0.4891%" y="437" width="0.0125%" height="15" fill="rgb(232,128,0)" fg:x="78" fg:w="2"/><text x="0.7391%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.01%)</title><rect x="0.4891%" y="421" width="0.0125%" height="15" fill="rgb(207,160,47)" fg:x="78" fg:w="2"/><text x="0.7391%" y="431.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.01%)</title><rect x="0.4891%" y="405" width="0.0125%" height="15" fill="rgb(228,23,34)" fg:x="78" fg:w="2"/><text x="0.7391%" y="415.50"></text></g><g><title>cfree (9 samples, 0.06%)</title><rect x="0.5016%" y="453" width="0.0564%" height="15" fill="rgb(218,30,26)" fg:x="80" fg:w="9"/><text x="0.7516%" y="463.50"></text></g><g><title>malloc (5 samples, 0.03%)</title><rect x="0.5643%" y="453" width="0.0313%" height="15" fill="rgb(220,122,19)" fg:x="90" fg:w="5"/><text x="0.8143%" y="463.50"></text></g><g><title>[[heap]] (96 samples, 0.60%)</title><rect x="0.0000%" y="469" width="0.6019%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="96"/><text x="0.2500%" y="479.50"></text></g><g><title>__rdl_realloc (19 samples, 0.12%)</title><rect x="0.6019%" y="453" width="0.1191%" height="15" fill="rgb(240,193,28)" fg:x="96" fg:w="19"/><text x="0.8519%" y="463.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="0.7210%" y="453" width="0.0125%" height="15" fill="rgb(216,20,37)" fg:x="115" fg:w="2"/><text x="0.9710%" y="463.50"></text></g><g><title>malloc (4 samples, 0.03%)</title><rect x="0.7336%" y="453" width="0.0251%" height="15" fill="rgb(206,188,39)" fg:x="117" fg:w="4"/><text x="0.9836%" y="463.50"></text></g><g><title>[[stack]] (44 samples, 0.28%)</title><rect x="0.6019%" y="469" width="0.2759%" height="15" fill="rgb(217,207,13)" fg:x="96" fg:w="44"/><text x="0.8519%" y="479.50"></text></g><g><title>realloc (19 samples, 0.12%)</title><rect x="0.7587%" y="453" width="0.1191%" height="15" fill="rgb(231,73,38)" fg:x="121" fg:w="19"/><text x="1.0087%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.06%)</title><rect x="0.8778%" y="469" width="0.0564%" height="15" fill="rgb(225,20,46)" fg:x="140" fg:w="9"/><text x="1.1278%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.9154%" y="453" width="0.0188%" height="15" fill="rgb(210,31,41)" fg:x="146" fg:w="3"/><text x="1.1654%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.9154%" y="437" width="0.0188%" height="15" fill="rgb(221,200,47)" fg:x="146" fg:w="3"/><text x="1.1654%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.02%)</title><rect x="0.9154%" y="421" width="0.0188%" height="15" fill="rgb(226,26,5)" fg:x="146" fg:w="3"/><text x="1.1654%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="0.9217%" y="405" width="0.0125%" height="15" fill="rgb(249,33,26)" fg:x="147" fg:w="2"/><text x="1.1717%" y="415.50"></text></g><g><title>[libc.so.6] (18 samples, 0.11%)</title><rect x="0.9342%" y="469" width="0.1129%" height="15" fill="rgb(235,183,28)" fg:x="149" fg:w="18"/><text x="1.1842%" y="479.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="1.0220%" y="453" width="0.0251%" height="15" fill="rgb(221,5,38)" fg:x="163" fg:w="4"/><text x="1.2720%" y="463.50"></text></g><g><title>[libc.so.6] (235 samples, 1.47%)</title><rect x="1.0534%" y="453" width="1.4734%" height="15" fill="rgb(247,18,42)" fg:x="168" fg:w="235"/><text x="1.3034%" y="463.50"></text></g><g><title>__rdl_realloc (18 samples, 0.11%)</title><rect x="2.5331%" y="453" width="0.1129%" height="15" fill="rgb(241,131,45)" fg:x="404" fg:w="18"/><text x="2.7831%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 0.19%)</title><rect x="2.6459%" y="453" width="0.1881%" height="15" fill="rgb(249,31,29)" fg:x="422" fg:w="30"/><text x="2.8959%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (30 samples, 0.19%)</title><rect x="2.6459%" y="437" width="0.1881%" height="15" fill="rgb(225,111,53)" fg:x="422" fg:w="30"/><text x="2.8959%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (22 samples, 0.14%)</title><rect x="2.6961%" y="421" width="0.1379%" height="15" fill="rgb(238,160,17)" fg:x="430" fg:w="22"/><text x="2.9461%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (22 samples, 0.14%)</title><rect x="2.6961%" y="405" width="0.1379%" height="15" fill="rgb(214,148,48)" fg:x="430" fg:w="22"/><text x="2.9461%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (42 samples, 0.26%)</title><rect x="2.8340%" y="453" width="0.2633%" height="15" fill="rgb(232,36,49)" fg:x="452" fg:w="42"/><text x="3.0840%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 0.05%)</title><rect x="3.0472%" y="437" width="0.0502%" height="15" fill="rgb(209,103,24)" fg:x="486" fg:w="8"/><text x="3.2972%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 0.05%)</title><rect x="3.0472%" y="421" width="0.0502%" height="15" fill="rgb(229,88,8)" fg:x="486" fg:w="8"/><text x="3.2972%" y="431.50"></text></g><g><title>alloc::alloc::realloc (8 samples, 0.05%)</title><rect x="3.0472%" y="405" width="0.0502%" height="15" fill="rgb(213,181,19)" fg:x="486" fg:w="8"/><text x="3.2972%" y="415.50"></text></g><g><title>cfree (10 samples, 0.06%)</title><rect x="3.0974%" y="453" width="0.0627%" height="15" fill="rgb(254,191,54)" fg:x="494" fg:w="10"/><text x="3.3474%" y="463.50"></text></g><g><title>main::_find_first_arc (15 samples, 0.09%)</title><rect x="3.1601%" y="453" width="0.0940%" height="15" fill="rgb(241,83,37)" fg:x="504" fg:w="15"/><text x="3.4101%" y="463.50"></text></g><g><title>main::get_reduced_cost_edgeindex (12 samples, 0.08%)</title><rect x="3.2541%" y="453" width="0.0752%" height="15" fill="rgb(233,36,39)" fg:x="519" fg:w="12"/><text x="3.5041%" y="463.50"></text></g><g><title>malloc (15 samples, 0.09%)</title><rect x="3.3294%" y="453" width="0.0940%" height="15" fill="rgb(226,3,54)" fg:x="531" fg:w="15"/><text x="3.5794%" y="463.50"></text></g><g><title>[unknown] (441 samples, 2.77%)</title><rect x="1.0534%" y="469" width="2.7651%" height="15" fill="rgb(245,192,40)" fg:x="168" fg:w="441"/><text x="1.3034%" y="479.50">[u..</text></g><g><title>realloc (63 samples, 0.40%)</title><rect x="3.4234%" y="453" width="0.3950%" height="15" fill="rgb(238,167,29)" fg:x="546" fg:w="63"/><text x="3.6734%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (84 samples, 0.53%)</title><rect x="3.9125%" y="309" width="0.5267%" height="15" fill="rgb(232,182,51)" fg:x="624" fg:w="84"/><text x="4.1625%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (84 samples, 0.53%)</title><rect x="3.9125%" y="293" width="0.5267%" height="15" fill="rgb(231,60,39)" fg:x="624" fg:w="84"/><text x="4.1625%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.53%)</title><rect x="3.9125%" y="277" width="0.5267%" height="15" fill="rgb(208,69,12)" fg:x="624" fg:w="84"/><text x="4.1625%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (84 samples, 0.53%)</title><rect x="3.9125%" y="261" width="0.5267%" height="15" fill="rgb(235,93,37)" fg:x="624" fg:w="84"/><text x="4.1625%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (84 samples, 0.53%)</title><rect x="3.9125%" y="245" width="0.5267%" height="15" fill="rgb(213,116,39)" fg:x="624" fg:w="84"/><text x="4.1625%" y="255.50"></text></g><g><title>cfree (83 samples, 0.52%)</title><rect x="3.9187%" y="229" width="0.5204%" height="15" fill="rgb(222,207,29)" fg:x="625" fg:w="83"/><text x="4.1687%" y="239.50"></text></g><g><title>[libc.so.6] (72 samples, 0.45%)</title><rect x="3.9877%" y="213" width="0.4514%" height="15" fill="rgb(206,96,30)" fg:x="636" fg:w="72"/><text x="4.2377%" y="223.50"></text></g><g><title>[libc.so.6] (40 samples, 0.25%)</title><rect x="4.1884%" y="197" width="0.2508%" height="15" fill="rgb(218,138,4)" fg:x="668" fg:w="40"/><text x="4.4384%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="4.4203%" y="181" width="0.0188%" height="15" fill="rgb(250,191,14)" fg:x="705" fg:w="3"/><text x="4.6703%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17 samples, 0.11%)</title><rect x="5.1602%" y="293" width="0.1066%" height="15" fill="rgb(239,60,40)" fg:x="823" fg:w="17"/><text x="5.4102%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17 samples, 0.11%)</title><rect x="5.1602%" y="277" width="0.1066%" height="15" fill="rgb(206,27,48)" fg:x="823" fg:w="17"/><text x="5.4102%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.11%)</title><rect x="5.1602%" y="261" width="0.1066%" height="15" fill="rgb(225,35,8)" fg:x="823" fg:w="17"/><text x="5.4102%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (40 samples, 0.25%)</title><rect x="5.2668%" y="293" width="0.2508%" height="15" fill="rgb(250,213,24)" fg:x="840" fg:w="40"/><text x="5.5168%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.03%)</title><rect x="5.5176%" y="293" width="0.0251%" height="15" fill="rgb(247,123,22)" fg:x="880" fg:w="4"/><text x="5.7676%" y="303.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.02%)</title><rect x="5.5866%" y="261" width="0.0188%" height="15" fill="rgb(231,138,38)" fg:x="891" fg:w="3"/><text x="5.8366%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (3 samples, 0.02%)</title><rect x="5.5866%" y="245" width="0.0188%" height="15" fill="rgb(231,145,46)" fg:x="891" fg:w="3"/><text x="5.8366%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.08%)</title><rect x="5.5427%" y="293" width="0.0752%" height="15" fill="rgb(251,118,11)" fg:x="884" fg:w="12"/><text x="5.7927%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.08%)</title><rect x="5.5427%" y="277" width="0.0752%" height="15" fill="rgb(217,147,25)" fg:x="884" fg:w="12"/><text x="5.7927%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.01%)</title><rect x="5.6054%" y="261" width="0.0125%" height="15" fill="rgb(247,81,37)" fg:x="894" fg:w="2"/><text x="5.8554%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.13%)</title><rect x="6.3891%" y="261" width="0.1254%" height="15" fill="rgb(209,12,38)" fg:x="1019" fg:w="20"/><text x="6.6391%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.03%)</title><rect x="6.4832%" y="245" width="0.0313%" height="15" fill="rgb(227,1,9)" fg:x="1034" fg:w="5"/><text x="6.7332%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.03%)</title><rect x="6.4832%" y="229" width="0.0313%" height="15" fill="rgb(248,47,43)" fg:x="1034" fg:w="5"/><text x="6.7332%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (54 samples, 0.34%)</title><rect x="6.3891%" y="277" width="0.3386%" height="15" fill="rgb(221,10,30)" fg:x="1019" fg:w="54"/><text x="6.6391%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (34 samples, 0.21%)</title><rect x="6.5145%" y="261" width="0.2132%" height="15" fill="rgb(210,229,1)" fg:x="1039" fg:w="34"/><text x="6.7645%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (34 samples, 0.21%)</title><rect x="6.5145%" y="245" width="0.2132%" height="15" fill="rgb(222,148,37)" fg:x="1039" fg:w="34"/><text x="6.7645%" y="255.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (30 samples, 0.19%)</title><rect x="6.7277%" y="277" width="0.1881%" height="15" fill="rgb(234,67,33)" fg:x="1073" fg:w="30"/><text x="6.9777%" y="287.50"></text></g><g><title>main::_find_first_arc (488 samples, 3.06%)</title><rect x="4.4391%" y="309" width="3.0598%" height="15" fill="rgb(247,98,35)" fg:x="708" fg:w="488"/><text x="4.6891%" y="319.50">mai..</text></g><g><title>main::get_reduced_cost_edgeindex (300 samples, 1.88%)</title><rect x="5.6179%" y="293" width="1.8810%" height="15" fill="rgb(247,138,52)" fg:x="896" fg:w="300"/><text x="5.8679%" y="303.50">m..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (93 samples, 0.58%)</title><rect x="6.9158%" y="277" width="0.5831%" height="15" fill="rgb(213,79,30)" fg:x="1103" fg:w="93"/><text x="7.1658%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="7.5616%" y="293" width="0.0125%" height="15" fill="rgb(246,177,23)" fg:x="1206" fg:w="2"/><text x="7.8116%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="7.5616%" y="277" width="0.0125%" height="15" fill="rgb(230,62,27)" fg:x="1206" fg:w="2"/><text x="7.8116%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.01%)</title><rect x="7.5741%" y="293" width="0.0125%" height="15" fill="rgb(216,154,8)" fg:x="1208" fg:w="2"/><text x="7.8241%" y="303.50"></text></g><g><title>__rdl_realloc (3 samples, 0.02%)</title><rect x="7.6055%" y="181" width="0.0188%" height="15" fill="rgb(244,35,45)" fg:x="1213" fg:w="3"/><text x="7.8555%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (35 samples, 0.22%)</title><rect x="7.6055%" y="277" width="0.2194%" height="15" fill="rgb(251,115,12)" fg:x="1213" fg:w="35"/><text x="7.8555%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (35 samples, 0.22%)</title><rect x="7.6055%" y="261" width="0.2194%" height="15" fill="rgb(240,54,50)" fg:x="1213" fg:w="35"/><text x="7.8555%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (35 samples, 0.22%)</title><rect x="7.6055%" y="245" width="0.2194%" height="15" fill="rgb(233,84,52)" fg:x="1213" fg:w="35"/><text x="7.8555%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (35 samples, 0.22%)</title><rect x="7.6055%" y="229" width="0.2194%" height="15" fill="rgb(207,117,47)" fg:x="1213" fg:w="35"/><text x="7.8555%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (35 samples, 0.22%)</title><rect x="7.6055%" y="213" width="0.2194%" height="15" fill="rgb(249,43,39)" fg:x="1213" fg:w="35"/><text x="7.8555%" y="223.50"></text></g><g><title>alloc::alloc::realloc (35 samples, 0.22%)</title><rect x="7.6055%" y="197" width="0.2194%" height="15" fill="rgb(209,38,44)" fg:x="1213" fg:w="35"/><text x="7.8555%" y="207.50"></text></g><g><title>realloc (32 samples, 0.20%)</title><rect x="7.6243%" y="181" width="0.2006%" height="15" fill="rgb(236,212,23)" fg:x="1216" fg:w="32"/><text x="7.8743%" y="191.50"></text></g><g><title>[libc.so.6] (27 samples, 0.17%)</title><rect x="7.6557%" y="165" width="0.1693%" height="15" fill="rgb(242,79,21)" fg:x="1221" fg:w="27"/><text x="7.9057%" y="175.50"></text></g><g><title>[libc.so.6] (23 samples, 0.14%)</title><rect x="7.6807%" y="149" width="0.1442%" height="15" fill="rgb(211,96,35)" fg:x="1225" fg:w="23"/><text x="7.9307%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="7.8124%" y="133" width="0.0125%" height="15" fill="rgb(253,215,40)" fg:x="1246" fg:w="2"/><text x="8.0624%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.01%)</title><rect x="7.8249%" y="277" width="0.0125%" height="15" fill="rgb(211,81,21)" fg:x="1248" fg:w="2"/><text x="8.0749%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="7.8249%" y="261" width="0.0125%" height="15" fill="rgb(208,190,38)" fg:x="1248" fg:w="2"/><text x="8.0749%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (44 samples, 0.28%)</title><rect x="7.5867%" y="293" width="0.2759%" height="15" fill="rgb(235,213,38)" fg:x="1210" fg:w="44"/><text x="7.8367%" y="303.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="7.8375%" y="277" width="0.0251%" height="15" fill="rgb(237,122,38)" fg:x="1250" fg:w="4"/><text x="8.0875%" y="287.50"></text></g><g><title>[libc.so.6] (15 samples, 0.09%)</title><rect x="7.8939%" y="181" width="0.0940%" height="15" fill="rgb(244,218,35)" fg:x="1259" fg:w="15"/><text x="8.1439%" y="191.50"></text></g><g><title>__libc_calloc (117 samples, 0.73%)</title><rect x="7.9880%" y="181" width="0.7336%" height="15" fill="rgb(240,68,47)" fg:x="1274" fg:w="117"/><text x="8.2380%" y="191.50"></text></g><g><title>[libc.so.6] (105 samples, 0.66%)</title><rect x="8.0632%" y="165" width="0.6583%" height="15" fill="rgb(210,16,53)" fg:x="1286" fg:w="105"/><text x="8.3132%" y="175.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="8.6902%" y="149" width="0.0313%" height="15" fill="rgb(235,124,12)" fg:x="1386" fg:w="5"/><text x="8.9402%" y="159.50"></text></g><g><title>__rdl_alloc_zeroed (5 samples, 0.03%)</title><rect x="8.7215%" y="181" width="0.0313%" height="15" fill="rgb(224,169,11)" fg:x="1391" fg:w="5"/><text x="8.9715%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (138 samples, 0.87%)</title><rect x="7.8939%" y="229" width="0.8653%" height="15" fill="rgb(250,166,2)" fg:x="1259" fg:w="138"/><text x="8.1439%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (138 samples, 0.87%)</title><rect x="7.8939%" y="213" width="0.8653%" height="15" fill="rgb(242,216,29)" fg:x="1259" fg:w="138"/><text x="8.1439%" y="223.50"></text></g><g><title>alloc::alloc::alloc_zeroed (138 samples, 0.87%)</title><rect x="7.8939%" y="197" width="0.8653%" height="15" fill="rgb(230,116,27)" fg:x="1259" fg:w="138"/><text x="8.1439%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (140 samples, 0.88%)</title><rect x="7.8876%" y="261" width="0.8778%" height="15" fill="rgb(228,99,48)" fg:x="1258" fg:w="140"/><text x="8.1376%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (140 samples, 0.88%)</title><rect x="7.8876%" y="245" width="0.8778%" height="15" fill="rgb(253,11,6)" fg:x="1258" fg:w="140"/><text x="8.1376%" y="255.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.02%)</title><rect x="8.8469%" y="213" width="0.0188%" height="15" fill="rgb(247,143,39)" fg:x="1411" fg:w="3"/><text x="9.0969%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (3 samples, 0.02%)</title><rect x="8.8469%" y="197" width="0.0188%" height="15" fill="rgb(236,97,10)" fg:x="1411" fg:w="3"/><text x="9.0969%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (15 samples, 0.09%)</title><rect x="8.7780%" y="245" width="0.0940%" height="15" fill="rgb(233,208,19)" fg:x="1400" fg:w="15"/><text x="9.0280%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (15 samples, 0.09%)</title><rect x="8.7780%" y="229" width="0.0940%" height="15" fill="rgb(216,164,2)" fg:x="1400" fg:w="15"/><text x="9.0280%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (71 samples, 0.45%)</title><rect x="8.7654%" y="261" width="0.4452%" height="15" fill="rgb(220,129,5)" fg:x="1398" fg:w="71"/><text x="9.0154%" y="271.50"></text></g><g><title>core::ptr::write (54 samples, 0.34%)</title><rect x="8.8720%" y="245" width="0.3386%" height="15" fill="rgb(242,17,10)" fg:x="1415" fg:w="54"/><text x="9.1220%" y="255.50"></text></g><g><title>__rdl_alloc (3 samples, 0.02%)</title><rect x="9.2357%" y="165" width="0.0188%" height="15" fill="rgb(242,107,0)" fg:x="1473" fg:w="3"/><text x="9.4857%" y="175.50"></text></g><g><title>__rust_alloc (2 samples, 0.01%)</title><rect x="9.2545%" y="165" width="0.0125%" height="15" fill="rgb(251,28,31)" fg:x="1476" fg:w="2"/><text x="9.5045%" y="175.50"></text></g><g><title>core::ptr::read_volatile (3 samples, 0.02%)</title><rect x="9.2670%" y="165" width="0.0188%" height="15" fill="rgb(233,223,10)" fg:x="1478" fg:w="3"/><text x="9.5170%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (149 samples, 0.93%)</title><rect x="9.2357%" y="213" width="0.9342%" height="15" fill="rgb(215,21,27)" fg:x="1473" fg:w="149"/><text x="9.4857%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (149 samples, 0.93%)</title><rect x="9.2357%" y="197" width="0.9342%" height="15" fill="rgb(232,23,21)" fg:x="1473" fg:w="149"/><text x="9.4857%" y="207.50"></text></g><g><title>alloc::alloc::alloc (149 samples, 0.93%)</title><rect x="9.2357%" y="181" width="0.9342%" height="15" fill="rgb(244,5,23)" fg:x="1473" fg:w="149"/><text x="9.4857%" y="191.50"></text></g><g><title>malloc (141 samples, 0.88%)</title><rect x="9.2858%" y="165" width="0.8841%" height="15" fill="rgb(226,81,46)" fg:x="1481" fg:w="141"/><text x="9.5358%" y="175.50"></text></g><g><title>[libc.so.6] (53 samples, 0.33%)</title><rect x="9.8376%" y="149" width="0.3323%" height="15" fill="rgb(247,70,30)" fg:x="1569" fg:w="53"/><text x="10.0876%" y="159.50"></text></g><g><title>[libc.so.6] (18 samples, 0.11%)</title><rect x="10.0571%" y="133" width="0.1129%" height="15" fill="rgb(212,68,19)" fg:x="1604" fg:w="18"/><text x="10.3071%" y="143.50"></text></g><g><title>alloc::vec::from_elem (371 samples, 2.33%)</title><rect x="7.8626%" y="293" width="2.3262%" height="15" fill="rgb(240,187,13)" fg:x="1254" fg:w="371"/><text x="8.1126%" y="303.50">a..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (371 samples, 2.33%)</title><rect x="7.8626%" y="277" width="2.3262%" height="15" fill="rgb(223,113,26)" fg:x="1254" fg:w="371"/><text x="8.1126%" y="287.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (156 samples, 0.98%)</title><rect x="9.2106%" y="261" width="0.9781%" height="15" fill="rgb(206,192,2)" fg:x="1469" fg:w="156"/><text x="9.4606%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (156 samples, 0.98%)</title><rect x="9.2106%" y="245" width="0.9781%" height="15" fill="rgb(241,108,4)" fg:x="1469" fg:w="156"/><text x="9.4606%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (156 samples, 0.98%)</title><rect x="9.2106%" y="229" width="0.9781%" height="15" fill="rgb(247,173,49)" fg:x="1469" fg:w="156"/><text x="9.4606%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.02%)</title><rect x="10.1699%" y="213" width="0.0188%" height="15" fill="rgb(224,114,35)" fg:x="1622" fg:w="3"/><text x="10.4199%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.02%)</title><rect x="10.1699%" y="197" width="0.0188%" height="15" fill="rgb(245,159,27)" fg:x="1622" fg:w="3"/><text x="10.4199%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (21 samples, 0.13%)</title><rect x="10.1887%" y="293" width="0.1317%" height="15" fill="rgb(245,172,44)" fg:x="1625" fg:w="21"/><text x="10.4387%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (64 samples, 0.40%)</title><rect x="13.0353%" y="197" width="0.4013%" height="15" fill="rgb(236,23,11)" fg:x="2079" fg:w="64"/><text x="13.2853%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (64 samples, 0.40%)</title><rect x="13.0353%" y="181" width="0.4013%" height="15" fill="rgb(205,117,38)" fg:x="2079" fg:w="64"/><text x="13.2853%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (64 samples, 0.40%)</title><rect x="13.0353%" y="165" width="0.4013%" height="15" fill="rgb(237,72,25)" fg:x="2079" fg:w="64"/><text x="13.2853%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (23 samples, 0.14%)</title><rect x="13.4366%" y="197" width="0.1442%" height="15" fill="rgb(244,70,9)" fg:x="2143" fg:w="23"/><text x="13.6866%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (23 samples, 0.14%)</title><rect x="13.4366%" y="181" width="0.1442%" height="15" fill="rgb(217,125,39)" fg:x="2143" fg:w="23"/><text x="13.6866%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (23 samples, 0.14%)</title><rect x="13.4366%" y="165" width="0.1442%" height="15" fill="rgb(235,36,10)" fg:x="2143" fg:w="23"/><text x="13.6866%" y="175.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (88 samples, 0.55%)</title><rect x="13.5808%" y="197" width="0.5518%" height="15" fill="rgb(251,123,47)" fg:x="2166" fg:w="88"/><text x="13.8308%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (623 samples, 3.91%)</title><rect x="10.3204%" y="261" width="3.9062%" height="15" fill="rgb(221,13,13)" fg:x="1646" fg:w="623"/><text x="10.5704%" y="271.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (566 samples, 3.55%)</title><rect x="10.6778%" y="245" width="3.5488%" height="15" fill="rgb(238,131,9)" fg:x="1703" fg:w="566"/><text x="10.9278%" y="255.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (562 samples, 3.52%)</title><rect x="10.7029%" y="229" width="3.5237%" height="15" fill="rgb(211,50,8)" fg:x="1707" fg:w="562"/><text x="10.9529%" y="239.50">cor..</text></g><g><title>main::compute_flowchange::_{{closure}} (562 samples, 3.52%)</title><rect x="10.7029%" y="213" width="3.5237%" height="15" fill="rgb(245,182,24)" fg:x="1707" fg:w="562"/><text x="10.9529%" y="223.50">mai..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (15 samples, 0.09%)</title><rect x="14.1325%" y="197" width="0.0940%" height="15" fill="rgb(242,14,37)" fg:x="2254" fg:w="15"/><text x="14.3825%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (214 samples, 1.34%)</title><rect x="15.8129%" y="197" width="1.3418%" height="15" fill="rgb(246,228,12)" fg:x="2522" fg:w="214"/><text x="16.0629%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (214 samples, 1.34%)</title><rect x="15.8129%" y="181" width="1.3418%" height="15" fill="rgb(213,55,15)" fg:x="2522" fg:w="214"/><text x="16.0629%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (214 samples, 1.34%)</title><rect x="15.8129%" y="165" width="1.3418%" height="15" fill="rgb(209,9,3)" fg:x="2522" fg:w="214"/><text x="16.0629%" y="175.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (46 samples, 0.29%)</title><rect x="17.1547%" y="197" width="0.2884%" height="15" fill="rgb(230,59,30)" fg:x="2736" fg:w="46"/><text x="17.4047%" y="207.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (46 samples, 0.29%)</title><rect x="17.1547%" y="181" width="0.2884%" height="15" fill="rgb(209,121,21)" fg:x="2736" fg:w="46"/><text x="17.4047%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (26 samples, 0.16%)</title><rect x="17.7817%" y="181" width="0.1630%" height="15" fill="rgb(220,109,13)" fg:x="2836" fg:w="26"/><text x="18.0317%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (19 samples, 0.12%)</title><rect x="17.8256%" y="165" width="0.1191%" height="15" fill="rgb(232,18,1)" fg:x="2843" fg:w="19"/><text x="18.0756%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (19 samples, 0.12%)</title><rect x="17.8256%" y="149" width="0.1191%" height="15" fill="rgb(215,41,42)" fg:x="2843" fg:w="19"/><text x="18.0756%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (89 samples, 0.56%)</title><rect x="17.9447%" y="181" width="0.5580%" height="15" fill="rgb(224,123,36)" fg:x="2862" fg:w="89"/><text x="18.1947%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (89 samples, 0.56%)</title><rect x="17.9447%" y="165" width="0.5580%" height="15" fill="rgb(240,125,3)" fg:x="2862" fg:w="89"/><text x="18.1947%" y="175.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (1,359 samples, 8.52%)</title><rect x="29.7448%" y="165" width="8.5209%" height="15" fill="rgb(205,98,50)" fg:x="4744" fg:w="1359"/><text x="29.9948%" y="175.50">&lt;petgraph::g..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1,359 samples, 8.52%)</title><rect x="29.7448%" y="149" width="8.5209%" height="15" fill="rgb(205,185,37)" fg:x="4744" fg:w="1359"/><text x="29.9948%" y="159.50">core::cmp::i..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (3,356 samples, 21.04%)</title><rect x="17.4431%" y="197" width="21.0421%" height="15" fill="rgb(238,207,15)" fg:x="2782" fg:w="3356"/><text x="17.6931%" y="207.50">petgraph::graph_impl::Graph&lt;N,E,T..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (3,187 samples, 19.98%)</title><rect x="18.5027%" y="181" width="19.9824%" height="15" fill="rgb(213,199,42)" fg:x="2951" fg:w="3187"/><text x="18.7527%" y="191.50">petgraph::graph_impl::Graph&lt;N,E..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (35 samples, 0.22%)</title><rect x="38.2657%" y="165" width="0.2194%" height="15" fill="rgb(235,201,11)" fg:x="6103" fg:w="35"/><text x="38.5157%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (35 samples, 0.22%)</title><rect x="38.2657%" y="149" width="0.2194%" height="15" fill="rgb(207,46,11)" fg:x="6103" fg:w="35"/><text x="38.5157%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (3,832 samples, 24.03%)</title><rect x="14.6153%" y="245" width="24.0266%" height="15" fill="rgb(241,35,35)" fg:x="2331" fg:w="3832"/><text x="14.8653%" y="255.50">&lt;core::iter::adapters::enumerate::Enum..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,796 samples, 23.80%)</title><rect x="14.8411%" y="229" width="23.8009%" height="15" fill="rgb(243,32,47)" fg:x="2367" fg:w="3796"/><text x="15.0911%" y="239.50">core::iter::traits::iterator::Iterator..</text></g><g><title>main::compute_flowchange::_{{closure}} (3,796 samples, 23.80%)</title><rect x="14.8411%" y="213" width="23.8009%" height="15" fill="rgb(247,202,23)" fg:x="2367" fg:w="3796"/><text x="15.0911%" y="223.50">main::compute_flowchange::_{{closure}}</text></g><g><title>petgraph::graph_impl::NodeIndex&lt;Ix&gt;::new (25 samples, 0.16%)</title><rect x="38.4852%" y="197" width="0.1567%" height="15" fill="rgb(219,102,11)" fg:x="6138" fg:w="25"/><text x="38.7352%" y="207.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::new (25 samples, 0.16%)</title><rect x="38.4852%" y="181" width="0.1567%" height="15" fill="rgb(243,110,44)" fg:x="6138" fg:w="25"/><text x="38.7352%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (32 samples, 0.20%)</title><rect x="38.6795%" y="213" width="0.2006%" height="15" fill="rgb(222,74,54)" fg:x="6169" fg:w="32"/><text x="38.9295%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4,591 samples, 28.79%)</title><rect x="10.3204%" y="293" width="28.7855%" height="15" fill="rgb(216,99,12)" fg:x="1646" fg:w="4591"/><text x="10.5704%" y="303.50">core::iter::traits::iterator::Iterator::for_ea..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,591 samples, 28.79%)</title><rect x="10.3204%" y="277" width="28.7855%" height="15" fill="rgb(226,22,26)" fg:x="1646" fg:w="4591"/><text x="10.5704%" y="287.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,968 samples, 24.88%)</title><rect x="14.2266%" y="261" width="24.8793%" height="15" fill="rgb(217,163,10)" fg:x="2269" fg:w="3968"/><text x="14.4766%" y="271.50">core::iter::traits::iterator::Iterator::..</text></g><g><title>&lt;itertools::tuple_impl::TupleWindows&lt;I,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.46%)</title><rect x="38.6419%" y="245" width="0.4640%" height="15" fill="rgb(213,25,53)" fg:x="6163" fg:w="74"/><text x="38.8919%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.43%)</title><rect x="38.6795%" y="229" width="0.4264%" height="15" fill="rgb(252,105,26)" fg:x="6169" fg:w="68"/><text x="38.9295%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (36 samples, 0.23%)</title><rect x="38.8802%" y="213" width="0.2257%" height="15" fill="rgb(220,39,43)" fg:x="6201" fg:w="36"/><text x="39.1302%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (36 samples, 0.23%)</title><rect x="38.8802%" y="197" width="0.2257%" height="15" fill="rgb(229,68,48)" fg:x="6201" fg:w="36"/><text x="39.1302%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (125 samples, 0.78%)</title><rect x="39.4507%" y="229" width="0.7837%" height="15" fill="rgb(252,8,32)" fg:x="6292" fg:w="125"/><text x="39.7007%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (121 samples, 0.76%)</title><rect x="39.4758%" y="213" width="0.7587%" height="15" fill="rgb(223,20,43)" fg:x="6296" fg:w="121"/><text x="39.7258%" y="223.50"></text></g><g><title>core::cmp::min_by (121 samples, 0.76%)</title><rect x="39.4758%" y="197" width="0.7587%" height="15" fill="rgb(229,81,49)" fg:x="6296" fg:w="121"/><text x="39.7258%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (18 samples, 0.11%)</title><rect x="40.1216%" y="181" width="0.1129%" height="15" fill="rgb(236,28,36)" fg:x="6399" fg:w="18"/><text x="40.3716%" y="191.50"></text></g><g><title>main::compute_flowchange::_{{closure}} (18 samples, 0.11%)</title><rect x="40.1216%" y="165" width="0.1129%" height="15" fill="rgb(249,185,26)" fg:x="6399" fg:w="18"/><text x="40.3716%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (181 samples, 1.13%)</title><rect x="39.1059%" y="293" width="1.1349%" height="15" fill="rgb(249,174,33)" fg:x="6237" fg:w="181"/><text x="39.3559%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (181 samples, 1.13%)</title><rect x="39.1059%" y="277" width="1.1349%" height="15" fill="rgb(233,201,37)" fg:x="6237" fg:w="181"/><text x="39.3559%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (178 samples, 1.12%)</title><rect x="39.1247%" y="261" width="1.1161%" height="15" fill="rgb(221,78,26)" fg:x="6240" fg:w="178"/><text x="39.3747%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (178 samples, 1.12%)</title><rect x="39.1247%" y="245" width="1.1161%" height="15" fill="rgb(250,127,30)" fg:x="6240" fg:w="178"/><text x="39.3747%" y="255.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.03%)</title><rect x="40.2533%" y="213" width="0.0251%" height="15" fill="rgb(230,49,44)" fg:x="6420" fg:w="4"/><text x="40.5033%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (91 samples, 0.57%)</title><rect x="40.2408%" y="245" width="0.5706%" height="15" fill="rgb(229,67,23)" fg:x="6418" fg:w="91"/><text x="40.4908%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (91 samples, 0.57%)</title><rect x="40.2408%" y="229" width="0.5706%" height="15" fill="rgb(249,83,47)" fg:x="6418" fg:w="91"/><text x="40.4908%" y="239.50"></text></g><g><title>cfree (84 samples, 0.53%)</title><rect x="40.2847%" y="213" width="0.5267%" height="15" fill="rgb(215,43,3)" fg:x="6425" fg:w="84"/><text x="40.5347%" y="223.50"></text></g><g><title>[libc.so.6] (52 samples, 0.33%)</title><rect x="40.4853%" y="197" width="0.3260%" height="15" fill="rgb(238,154,13)" fg:x="6457" fg:w="52"/><text x="40.7353%" y="207.50"></text></g><g><title>[libc.so.6] (11 samples, 0.07%)</title><rect x="40.7424%" y="181" width="0.0690%" height="15" fill="rgb(219,56,2)" fg:x="6498" fg:w="11"/><text x="40.9924%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="40.7988%" y="165" width="0.0125%" height="15" fill="rgb(233,0,4)" fg:x="6507" fg:w="2"/><text x="41.0488%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (92 samples, 0.58%)</title><rect x="40.2408%" y="293" width="0.5768%" height="15" fill="rgb(235,30,7)" fg:x="6418" fg:w="92"/><text x="40.4908%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (92 samples, 0.58%)</title><rect x="40.2408%" y="277" width="0.5768%" height="15" fill="rgb(250,79,13)" fg:x="6418" fg:w="92"/><text x="40.4908%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.58%)</title><rect x="40.2408%" y="261" width="0.5768%" height="15" fill="rgb(211,146,34)" fg:x="6418" fg:w="92"/><text x="40.4908%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (32 samples, 0.20%)</title><rect x="40.8176%" y="293" width="0.2006%" height="15" fill="rgb(228,22,38)" fg:x="6510" fg:w="32"/><text x="41.0676%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (32 samples, 0.20%)</title><rect x="40.8176%" y="277" width="0.2006%" height="15" fill="rgb(235,168,5)" fg:x="6510" fg:w="32"/><text x="41.0676%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.20%)</title><rect x="40.8176%" y="261" width="0.2006%" height="15" fill="rgb(221,155,16)" fg:x="6510" fg:w="32"/><text x="41.0676%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (32 samples, 0.20%)</title><rect x="40.8176%" y="245" width="0.2006%" height="15" fill="rgb(215,215,53)" fg:x="6510" fg:w="32"/><text x="41.0676%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (32 samples, 0.20%)</title><rect x="40.8176%" y="229" width="0.2006%" height="15" fill="rgb(223,4,10)" fg:x="6510" fg:w="32"/><text x="41.0676%" y="239.50"></text></g><g><title>cfree (31 samples, 0.19%)</title><rect x="40.8239%" y="213" width="0.1944%" height="15" fill="rgb(234,103,6)" fg:x="6511" fg:w="31"/><text x="41.0739%" y="223.50"></text></g><g><title>[libc.so.6] (23 samples, 0.14%)</title><rect x="40.8740%" y="197" width="0.1442%" height="15" fill="rgb(227,97,0)" fg:x="6519" fg:w="23"/><text x="41.1240%" y="207.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="41.0057%" y="181" width="0.0125%" height="15" fill="rgb(234,150,53)" fg:x="6540" fg:w="2"/><text x="41.2557%" y="191.50"></text></g><g><title>main::compute_flowchange (5,348 samples, 33.53%)</title><rect x="7.4989%" y="309" width="33.5319%" height="15" fill="rgb(228,201,54)" fg:x="1196" fg:w="5348"/><text x="7.7489%" y="319.50">main::compute_flowchange</text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (2 samples, 0.01%)</title><rect x="41.0182%" y="293" width="0.0125%" height="15" fill="rgb(222,22,37)" fg:x="6542" fg:w="2"/><text x="41.2682%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (2 samples, 0.01%)</title><rect x="41.0182%" y="277" width="0.0125%" height="15" fill="rgb(237,53,32)" fg:x="6542" fg:w="2"/><text x="41.2682%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.08%)</title><rect x="46.3603%" y="293" width="0.0815%" height="15" fill="rgb(233,25,53)" fg:x="7394" fg:w="13"/><text x="46.6103%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (73 samples, 0.46%)</title><rect x="46.4418%" y="293" width="0.4577%" height="15" fill="rgb(210,40,34)" fg:x="7407" fg:w="73"/><text x="46.6918%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (73 samples, 0.46%)</title><rect x="46.4418%" y="277" width="0.4577%" height="15" fill="rgb(241,220,44)" fg:x="7407" fg:w="73"/><text x="46.6918%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (73 samples, 0.46%)</title><rect x="46.4418%" y="261" width="0.4577%" height="15" fill="rgb(235,28,35)" fg:x="7407" fg:w="73"/><text x="46.6918%" y="271.50"></text></g><g><title>__rdl_alloc (7 samples, 0.04%)</title><rect x="46.9183%" y="229" width="0.0439%" height="15" fill="rgb(210,56,17)" fg:x="7483" fg:w="7"/><text x="47.1683%" y="239.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.01%)</title><rect x="46.9685%" y="229" width="0.0125%" height="15" fill="rgb(224,130,29)" fg:x="7491" fg:w="2"/><text x="47.2185%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (58 samples, 0.36%)</title><rect x="46.8995%" y="293" width="0.3637%" height="15" fill="rgb(235,212,8)" fg:x="7480" fg:w="58"/><text x="47.1495%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.35%)</title><rect x="46.9120%" y="277" width="0.3511%" height="15" fill="rgb(223,33,50)" fg:x="7482" fg:w="56"/><text x="47.1620%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.35%)</title><rect x="46.9120%" y="261" width="0.3511%" height="15" fill="rgb(219,149,13)" fg:x="7482" fg:w="56"/><text x="47.1620%" y="271.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.35%)</title><rect x="46.9120%" y="245" width="0.3511%" height="15" fill="rgb(250,156,29)" fg:x="7482" fg:w="56"/><text x="47.1620%" y="255.50"></text></g><g><title>malloc (45 samples, 0.28%)</title><rect x="46.9810%" y="229" width="0.2821%" height="15" fill="rgb(216,193,19)" fg:x="7493" fg:w="45"/><text x="47.2310%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.06%)</title><rect x="47.9090%" y="245" width="0.0564%" height="15" fill="rgb(216,135,14)" fg:x="7641" fg:w="9"/><text x="48.1590%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.06%)</title><rect x="47.9654%" y="245" width="0.0564%" height="15" fill="rgb(241,47,5)" fg:x="7650" fg:w="9"/><text x="48.2154%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (4 samples, 0.03%)</title><rect x="47.9967%" y="229" width="0.0251%" height="15" fill="rgb(233,42,35)" fg:x="7655" fg:w="4"/><text x="48.2467%" y="239.50"></text></g><g><title>__rdl_realloc (18 samples, 0.11%)</title><rect x="48.1472%" y="181" width="0.1129%" height="15" fill="rgb(231,13,6)" fg:x="7679" fg:w="18"/><text x="48.3972%" y="191.50"></text></g><g><title>__rust_realloc (6 samples, 0.04%)</title><rect x="48.2601%" y="181" width="0.0376%" height="15" fill="rgb(207,181,40)" fg:x="7697" fg:w="6"/><text x="48.5101%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (838 samples, 5.25%)</title><rect x="48.1284%" y="229" width="5.2542%" height="15" fill="rgb(254,173,49)" fg:x="7676" fg:w="838"/><text x="48.3784%" y="239.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::grow_impl (838 samples, 5.25%)</title><rect x="48.1284%" y="213" width="5.2542%" height="15" fill="rgb(221,1,38)" fg:x="7676" fg:w="838"/><text x="48.3784%" y="223.50">alloc:..</text></g><g><title>alloc::alloc::realloc (837 samples, 5.25%)</title><rect x="48.1347%" y="197" width="5.2480%" height="15" fill="rgb(206,124,46)" fg:x="7677" fg:w="837"/><text x="48.3847%" y="207.50">alloc:..</text></g><g><title>realloc (811 samples, 5.08%)</title><rect x="48.2977%" y="181" width="5.0850%" height="15" fill="rgb(249,21,11)" fg:x="7703" fg:w="811"/><text x="48.5477%" y="191.50">realloc</text></g><g><title>[libc.so.6] (706 samples, 4.43%)</title><rect x="48.9560%" y="165" width="4.4266%" height="15" fill="rgb(222,201,40)" fg:x="7808" fg:w="706"/><text x="49.2060%" y="175.50">[libc..</text></g><g><title>[libc.so.6] (585 samples, 3.67%)</title><rect x="49.7147%" y="149" width="3.6679%" height="15" fill="rgb(235,61,29)" fg:x="7929" fg:w="585"/><text x="49.9647%" y="159.50">[lib..</text></g><g><title>[libc.so.6] (118 samples, 0.74%)</title><rect x="52.6428%" y="133" width="0.7399%" height="15" fill="rgb(219,207,3)" fg:x="8396" fg:w="118"/><text x="52.8928%" y="143.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="53.3513%" y="117" width="0.0313%" height="15" fill="rgb(222,56,46)" fg:x="8509" fg:w="5"/><text x="53.6013%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (870 samples, 5.45%)</title><rect x="48.0281%" y="245" width="5.4549%" height="15" fill="rgb(239,76,54)" fg:x="7660" fg:w="870"/><text x="48.2781%" y="255.50">alloc::..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (16 samples, 0.10%)</title><rect x="53.3827%" y="229" width="0.1003%" height="15" fill="rgb(231,124,27)" fg:x="8514" fg:w="16"/><text x="53.6327%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.03%)</title><rect x="53.4830%" y="245" width="0.0313%" height="15" fill="rgb(249,195,6)" fg:x="8530" fg:w="5"/><text x="53.7330%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (5 samples, 0.03%)</title><rect x="53.4830%" y="229" width="0.0313%" height="15" fill="rgb(237,174,47)" fg:x="8530" fg:w="5"/><text x="53.7330%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (920 samples, 5.77%)</title><rect x="47.8400%" y="277" width="5.7684%" height="15" fill="rgb(206,201,31)" fg:x="7630" fg:w="920"/><text x="48.0900%" y="287.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (920 samples, 5.77%)</title><rect x="47.8400%" y="261" width="5.7684%" height="15" fill="rgb(231,57,52)" fg:x="7630" fg:w="920"/><text x="48.0900%" y="271.50">alloc::..</text></g><g><title>core::cmp::max (15 samples, 0.09%)</title><rect x="53.5143%" y="245" width="0.0940%" height="15" fill="rgb(248,177,22)" fg:x="8535" fg:w="15"/><text x="53.7643%" y="255.50"></text></g><g><title>core::cmp::Ord::max (15 samples, 0.09%)</title><rect x="53.5143%" y="229" width="0.0940%" height="15" fill="rgb(215,211,37)" fg:x="8535" fg:w="15"/><text x="53.7643%" y="239.50"></text></g><g><title>core::cmp::max_by (15 samples, 0.09%)</title><rect x="53.5143%" y="213" width="0.0940%" height="15" fill="rgb(241,128,51)" fg:x="8535" fg:w="15"/><text x="53.7643%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (18 samples, 0.11%)</title><rect x="53.6084%" y="277" width="0.1129%" height="15" fill="rgb(227,165,31)" fg:x="8550" fg:w="18"/><text x="53.8584%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18 samples, 0.11%)</title><rect x="53.6084%" y="261" width="0.1129%" height="15" fill="rgb(228,167,24)" fg:x="8550" fg:w="18"/><text x="53.8584%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,081 samples, 6.78%)</title><rect x="47.2694%" y="293" width="6.7779%" height="15" fill="rgb(228,143,12)" fg:x="7539" fg:w="1081"/><text x="47.5194%" y="303.50">alloc::ve..</text></g><g><title>core::ptr::write (52 samples, 0.33%)</title><rect x="53.7212%" y="277" width="0.3260%" height="15" fill="rgb(249,149,8)" fg:x="8568" fg:w="52"/><text x="53.9712%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (15 samples, 0.09%)</title><rect x="54.0849%" y="229" width="0.0940%" height="15" fill="rgb(243,35,44)" fg:x="8626" fg:w="15"/><text x="54.3349%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.09%)</title><rect x="54.0849%" y="213" width="0.0940%" height="15" fill="rgb(246,89,9)" fg:x="8626" fg:w="15"/><text x="54.3349%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="54.4799%" y="149" width="0.0125%" height="15" fill="rgb(233,213,13)" fg:x="8689" fg:w="2"/><text x="54.7299%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (179 samples, 1.12%)</title><rect x="54.4924%" y="149" width="1.1223%" height="15" fill="rgb(233,141,41)" fg:x="8691" fg:w="179"/><text x="54.7424%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (179 samples, 1.12%)</title><rect x="54.4924%" y="133" width="1.1223%" height="15" fill="rgb(239,167,4)" fg:x="8691" fg:w="179"/><text x="54.7424%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (179 samples, 1.12%)</title><rect x="54.4924%" y="117" width="1.1223%" height="15" fill="rgb(209,217,16)" fg:x="8691" fg:w="179"/><text x="54.7424%" y="127.50"></text></g><g><title>alloc::alloc::realloc (178 samples, 1.12%)</title><rect x="54.4987%" y="101" width="1.1161%" height="15" fill="rgb(219,88,35)" fg:x="8692" fg:w="178"/><text x="54.7487%" y="111.50"></text></g><g><title>realloc (178 samples, 1.12%)</title><rect x="54.4987%" y="85" width="1.1161%" height="15" fill="rgb(220,193,23)" fg:x="8692" fg:w="178"/><text x="54.7487%" y="95.50"></text></g><g><title>[libc.so.6] (165 samples, 1.03%)</title><rect x="54.5802%" y="69" width="1.0345%" height="15" fill="rgb(230,90,52)" fg:x="8705" fg:w="165"/><text x="54.8302%" y="79.50"></text></g><g><title>[libc.so.6] (141 samples, 0.88%)</title><rect x="54.7307%" y="53" width="0.8841%" height="15" fill="rgb(252,106,19)" fg:x="8729" fg:w="141"/><text x="54.9807%" y="63.50"></text></g><g><title>[libc.so.6] (39 samples, 0.24%)</title><rect x="55.3702%" y="37" width="0.2445%" height="15" fill="rgb(206,74,20)" fg:x="8831" fg:w="39"/><text x="55.6202%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (184 samples, 1.15%)</title><rect x="54.4674%" y="181" width="1.1537%" height="15" fill="rgb(230,138,44)" fg:x="8687" fg:w="184"/><text x="54.7174%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (184 samples, 1.15%)</title><rect x="54.4674%" y="165" width="1.1537%" height="15" fill="rgb(235,182,43)" fg:x="8687" fg:w="184"/><text x="54.7174%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (19 samples, 0.12%)</title><rect x="55.6210%" y="181" width="0.1191%" height="15" fill="rgb(242,16,51)" fg:x="8871" fg:w="19"/><text x="55.8710%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (19 samples, 0.12%)</title><rect x="55.6210%" y="165" width="0.1191%" height="15" fill="rgb(248,9,4)" fg:x="8871" fg:w="19"/><text x="55.8710%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (366 samples, 2.29%)</title><rect x="54.0473%" y="261" width="2.2948%" height="15" fill="rgb(210,31,22)" fg:x="8620" fg:w="366"/><text x="54.2973%" y="271.50">&lt;..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (366 samples, 2.29%)</title><rect x="54.0473%" y="245" width="2.2948%" height="15" fill="rgb(239,54,39)" fg:x="8620" fg:w="366"/><text x="54.2973%" y="255.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (345 samples, 2.16%)</title><rect x="54.1789%" y="229" width="2.1631%" height="15" fill="rgb(230,99,41)" fg:x="8641" fg:w="345"/><text x="54.4289%" y="239.50">c..</text></g><g><title>main::find_cycle_with_arc::_{{closure}} (345 samples, 2.16%)</title><rect x="54.1789%" y="213" width="2.1631%" height="15" fill="rgb(253,106,12)" fg:x="8641" fg:w="345"/><text x="54.4289%" y="223.50">m..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (345 samples, 2.16%)</title><rect x="54.1789%" y="197" width="2.1631%" height="15" fill="rgb(213,46,41)" fg:x="8641" fg:w="345"/><text x="54.4289%" y="207.50">a..</text></g><g><title>core::ptr::write (96 samples, 0.60%)</title><rect x="55.7402%" y="181" width="0.6019%" height="15" fill="rgb(215,133,35)" fg:x="8890" fg:w="96"/><text x="55.9902%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (369 samples, 2.31%)</title><rect x="54.0473%" y="293" width="2.3136%" height="15" fill="rgb(213,28,5)" fg:x="8620" fg:w="369"/><text x="54.2973%" y="303.50">c..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (369 samples, 2.31%)</title><rect x="54.0473%" y="277" width="2.3136%" height="15" fill="rgb(215,77,49)" fg:x="8620" fg:w="369"/><text x="54.2973%" y="287.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (3 samples, 0.02%)</title><rect x="56.3421%" y="261" width="0.0188%" height="15" fill="rgb(248,100,22)" fg:x="8986" fg:w="3"/><text x="56.5921%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::nth_back (3 samples, 0.02%)</title><rect x="56.3421%" y="245" width="0.0188%" height="15" fill="rgb(208,67,9)" fg:x="8986" fg:w="3"/><text x="56.5921%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (392 samples, 2.46%)</title><rect x="56.3609%" y="293" width="2.4578%" height="15" fill="rgb(219,133,21)" fg:x="8989" fg:w="392"/><text x="56.6109%" y="303.50">co..</text></g><g><title>main::find_cycle_with_arc (2,878 samples, 18.05%)</title><rect x="41.0308%" y="309" width="18.0450%" height="15" fill="rgb(246,46,29)" fg:x="6544" fg:w="2878"/><text x="41.2808%" y="319.50">main::find_cycle_with_arc</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (41 samples, 0.26%)</title><rect x="58.8187%" y="293" width="0.2571%" height="15" fill="rgb(246,185,52)" fg:x="9381" fg:w="41"/><text x="59.0687%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (41 samples, 0.26%)</title><rect x="58.8187%" y="277" width="0.2571%" height="15" fill="rgb(252,136,11)" fg:x="9381" fg:w="41"/><text x="59.0687%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.26%)</title><rect x="58.8187%" y="261" width="0.2571%" height="15" fill="rgb(219,138,53)" fg:x="9381" fg:w="41"/><text x="59.0687%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (41 samples, 0.26%)</title><rect x="58.8187%" y="245" width="0.2571%" height="15" fill="rgb(211,51,23)" fg:x="9381" fg:w="41"/><text x="59.0687%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (41 samples, 0.26%)</title><rect x="58.8187%" y="229" width="0.2571%" height="15" fill="rgb(247,221,28)" fg:x="9381" fg:w="41"/><text x="59.0687%" y="239.50"></text></g><g><title>cfree (41 samples, 0.26%)</title><rect x="58.8187%" y="213" width="0.2571%" height="15" fill="rgb(251,222,45)" fg:x="9381" fg:w="41"/><text x="59.0687%" y="223.50"></text></g><g><title>[libc.so.6] (27 samples, 0.17%)</title><rect x="58.9065%" y="197" width="0.1693%" height="15" fill="rgb(217,162,53)" fg:x="9395" fg:w="27"/><text x="59.1565%" y="207.50"></text></g><g><title>[libc.so.6] (12 samples, 0.08%)</title><rect x="59.0006%" y="181" width="0.0752%" height="15" fill="rgb(229,93,14)" fg:x="9410" fg:w="12"/><text x="59.2506%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="59.0821%" y="293" width="0.0125%" height="15" fill="rgb(209,67,49)" fg:x="9423" fg:w="2"/><text x="59.3321%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.01%)</title><rect x="59.0821%" y="277" width="0.0125%" height="15" fill="rgb(213,87,29)" fg:x="9423" fg:w="2"/><text x="59.3321%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.01%)</title><rect x="59.0821%" y="261" width="0.0125%" height="15" fill="rgb(205,151,52)" fg:x="9423" fg:w="2"/><text x="59.3321%" y="271.50"></text></g><g><title>main::initialization::_{{closure}} (2 samples, 0.01%)</title><rect x="59.0821%" y="245" width="0.0125%" height="15" fill="rgb(253,215,39)" fg:x="9423" fg:w="2"/><text x="59.3321%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="59.0946%" y="277" width="0.0188%" height="15" fill="rgb(221,220,41)" fg:x="9425" fg:w="3"/><text x="59.3446%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="59.0946%" y="261" width="0.0188%" height="15" fill="rgb(218,133,21)" fg:x="9425" fg:w="3"/><text x="59.3446%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="59.0946%" y="245" width="0.0188%" height="15" fill="rgb(221,193,43)" fg:x="9425" fg:w="3"/><text x="59.3446%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="59.0946%" y="229" width="0.0188%" height="15" fill="rgb(240,128,52)" fg:x="9425" fg:w="3"/><text x="59.3446%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="59.0946%" y="213" width="0.0188%" height="15" fill="rgb(253,114,12)" fg:x="9425" fg:w="3"/><text x="59.3446%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.01%)</title><rect x="59.1009%" y="197" width="0.0125%" height="15" fill="rgb(215,223,47)" fg:x="9426" fg:w="2"/><text x="59.3509%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="59.1009%" y="181" width="0.0125%" height="15" fill="rgb(248,225,23)" fg:x="9426" fg:w="2"/><text x="59.3509%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="59.1009%" y="165" width="0.0125%" height="15" fill="rgb(250,108,0)" fg:x="9426" fg:w="2"/><text x="59.3509%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.02%)</title><rect x="59.1134%" y="277" width="0.0188%" height="15" fill="rgb(228,208,7)" fg:x="9428" fg:w="3"/><text x="59.3634%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.02%)</title><rect x="59.1134%" y="261" width="0.0188%" height="15" fill="rgb(244,45,10)" fg:x="9428" fg:w="3"/><text x="59.3634%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.02%)</title><rect x="59.1134%" y="245" width="0.0188%" height="15" fill="rgb(207,125,25)" fg:x="9428" fg:w="3"/><text x="59.3634%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.02%)</title><rect x="59.1134%" y="229" width="0.0188%" height="15" fill="rgb(210,195,18)" fg:x="9428" fg:w="3"/><text x="59.3634%" y="239.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (3 samples, 0.02%)</title><rect x="59.1134%" y="213" width="0.0188%" height="15" fill="rgb(249,80,12)" fg:x="9428" fg:w="3"/><text x="59.3634%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (3 samples, 0.02%)</title><rect x="59.1134%" y="197" width="0.0188%" height="15" fill="rgb(221,65,9)" fg:x="9428" fg:w="3"/><text x="59.3634%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (3 samples, 0.02%)</title><rect x="59.1134%" y="181" width="0.0188%" height="15" fill="rgb(235,49,36)" fg:x="9428" fg:w="3"/><text x="59.3634%" y="191.50"></text></g><g><title>core::slice::sort::find_streak (2 samples, 0.01%)</title><rect x="59.1322%" y="213" width="0.0125%" height="15" fill="rgb(225,32,20)" fg:x="9431" fg:w="2"/><text x="59.3822%" y="223.50"></text></g><g><title>itertools::Itertools::sorted_by_key (3 samples, 0.02%)</title><rect x="59.1322%" y="277" width="0.0188%" height="15" fill="rgb(215,141,46)" fg:x="9431" fg:w="3"/><text x="59.3822%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (3 samples, 0.02%)</title><rect x="59.1322%" y="261" width="0.0188%" height="15" fill="rgb(250,160,47)" fg:x="9431" fg:w="3"/><text x="59.3822%" y="271.50"></text></g><g><title>alloc::slice::stable_sort (3 samples, 0.02%)</title><rect x="59.1322%" y="245" width="0.0188%" height="15" fill="rgb(216,222,40)" fg:x="9431" fg:w="3"/><text x="59.3822%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.02%)</title><rect x="59.1322%" y="229" width="0.0188%" height="15" fill="rgb(234,217,39)" fg:x="9431" fg:w="3"/><text x="59.3822%" y="239.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="59.1573%" y="245" width="0.0188%" height="15" fill="rgb(207,178,40)" fg:x="9435" fg:w="3"/><text x="59.4073%" y="255.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (5 samples, 0.03%)</title><rect x="59.1510%" y="277" width="0.0313%" height="15" fill="rgb(221,136,13)" fg:x="9434" fg:w="5"/><text x="59.4010%" y="287.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (4 samples, 0.03%)</title><rect x="59.1573%" y="261" width="0.0251%" height="15" fill="rgb(249,199,10)" fg:x="9435" fg:w="4"/><text x="59.4073%" y="271.50"></text></g><g><title>main::compute_node_potentials (16 samples, 0.10%)</title><rect x="59.0946%" y="293" width="0.1003%" height="15" fill="rgb(249,222,13)" fg:x="9425" fg:w="16"/><text x="59.3446%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (2 samples, 0.01%)</title><rect x="59.1824%" y="277" width="0.0125%" height="15" fill="rgb(244,185,38)" fg:x="9439" fg:w="2"/><text x="59.4324%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (2 samples, 0.01%)</title><rect x="59.1824%" y="261" width="0.0125%" height="15" fill="rgb(236,202,9)" fg:x="9439" fg:w="2"/><text x="59.4324%" y="271.50"></text></g><g><title>main::initialization (21 samples, 0.13%)</title><rect x="59.0758%" y="309" width="0.1317%" height="15" fill="rgb(250,229,37)" fg:x="9422" fg:w="21"/><text x="59.3258%" y="319.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.01%)</title><rect x="59.1949%" y="293" width="0.0125%" height="15" fill="rgb(206,174,23)" fg:x="9441" fg:w="2"/><text x="59.4449%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.01%)</title><rect x="59.1949%" y="277" width="0.0125%" height="15" fill="rgb(211,33,43)" fg:x="9441" fg:w="2"/><text x="59.4449%" y="287.50"></text></g><g><title>core::ptr::write (2 samples, 0.01%)</title><rect x="59.1949%" y="261" width="0.0125%" height="15" fill="rgb(245,58,50)" fg:x="9441" fg:w="2"/><text x="59.4449%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="61.0697%" y="277" width="0.0125%" height="15" fill="rgb(244,68,36)" fg:x="9740" fg:w="2"/><text x="61.3197%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17 samples, 0.11%)</title><rect x="61.0697%" y="293" width="0.1066%" height="15" fill="rgb(232,229,15)" fg:x="9740" fg:w="17"/><text x="61.3197%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15 samples, 0.09%)</title><rect x="61.0822%" y="277" width="0.0940%" height="15" fill="rgb(254,30,23)" fg:x="9742" fg:w="15"/><text x="61.3322%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.09%)</title><rect x="61.0822%" y="261" width="0.0940%" height="15" fill="rgb(235,160,14)" fg:x="9742" fg:w="15"/><text x="61.3322%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 0.04%)</title><rect x="61.1762%" y="293" width="0.0376%" height="15" fill="rgb(212,155,44)" fg:x="9757" fg:w="6"/><text x="61.4262%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.04%)</title><rect x="61.1762%" y="277" width="0.0376%" height="15" fill="rgb(226,2,50)" fg:x="9757" fg:w="6"/><text x="61.4262%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.04%)</title><rect x="61.1762%" y="261" width="0.0376%" height="15" fill="rgb(234,177,6)" fg:x="9757" fg:w="6"/><text x="61.4262%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="61.2139%" y="293" width="0.0251%" height="15" fill="rgb(217,24,9)" fg:x="9763" fg:w="4"/><text x="61.4639%" y="303.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="61.2139%" y="277" width="0.0251%" height="15" fill="rgb(220,13,46)" fg:x="9763" fg:w="4"/><text x="61.4639%" y="287.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (255 samples, 1.60%)</title><rect x="61.2389%" y="293" width="1.5988%" height="15" fill="rgb(239,221,27)" fg:x="9767" fg:w="255"/><text x="61.4889%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.03%)</title><rect x="62.8691%" y="277" width="0.0251%" height="15" fill="rgb(222,198,25)" fg:x="10027" fg:w="4"/><text x="63.1191%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="62.8754%" y="261" width="0.0188%" height="15" fill="rgb(211,99,13)" fg:x="10028" fg:w="3"/><text x="63.1254%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="62.8754%" y="245" width="0.0188%" height="15" fill="rgb(232,111,31)" fg:x="10028" fg:w="3"/><text x="63.1254%" y="255.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (5 samples, 0.03%)</title><rect x="62.8942%" y="277" width="0.0313%" height="15" fill="rgb(245,82,37)" fg:x="10031" fg:w="5"/><text x="63.1442%" y="287.50"></text></g><g><title>main::update_node_potentials (594 samples, 3.72%)</title><rect x="59.2075%" y="309" width="3.7244%" height="15" fill="rgb(227,149,46)" fg:x="9443" fg:w="594"/><text x="59.4575%" y="319.50">main..</text></g><g><title>main::get_reduced_cost_edgeindex (14 samples, 0.09%)</title><rect x="62.8441%" y="293" width="0.0878%" height="15" fill="rgb(218,36,50)" fg:x="10023" fg:w="14"/><text x="63.0941%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="70.3179%" y="293" width="0.0376%" height="15" fill="rgb(226,80,48)" fg:x="11215" fg:w="6"/><text x="70.5679%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="70.3680%" y="277" width="0.0313%" height="15" fill="rgb(238,224,15)" fg:x="11223" fg:w="5"/><text x="70.6180%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.03%)</title><rect x="70.3743%" y="261" width="0.0251%" height="15" fill="rgb(241,136,10)" fg:x="11224" fg:w="4"/><text x="70.6243%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.03%)</title><rect x="70.3743%" y="245" width="0.0251%" height="15" fill="rgb(208,32,45)" fg:x="11224" fg:w="4"/><text x="70.6243%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (132 samples, 0.83%)</title><rect x="70.3555%" y="293" width="0.8276%" height="15" fill="rgb(207,135,9)" fg:x="11221" fg:w="132"/><text x="70.6055%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (125 samples, 0.78%)</title><rect x="70.3994%" y="277" width="0.7837%" height="15" fill="rgb(206,86,44)" fg:x="11228" fg:w="125"/><text x="70.6494%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (125 samples, 0.78%)</title><rect x="70.3994%" y="261" width="0.7837%" height="15" fill="rgb(245,177,15)" fg:x="11228" fg:w="125"/><text x="70.6494%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="71.1831%" y="277" width="0.0125%" height="15" fill="rgb(206,64,50)" fg:x="11353" fg:w="2"/><text x="71.4331%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.01%)</title><rect x="71.1831%" y="261" width="0.0125%" height="15" fill="rgb(234,36,40)" fg:x="11353" fg:w="2"/><text x="71.4331%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="71.1831%" y="245" width="0.0125%" height="15" fill="rgb(213,64,8)" fg:x="11353" fg:w="2"/><text x="71.4331%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 0.04%)</title><rect x="71.1831%" y="293" width="0.0376%" height="15" fill="rgb(210,75,36)" fg:x="11353" fg:w="6"/><text x="71.4331%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.03%)</title><rect x="71.1957%" y="277" width="0.0251%" height="15" fill="rgb(229,88,21)" fg:x="11355" fg:w="4"/><text x="71.4457%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="71.1957%" y="261" width="0.0251%" height="15" fill="rgb(252,204,47)" fg:x="11355" fg:w="4"/><text x="71.4457%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (54 samples, 0.34%)</title><rect x="72.9199%" y="245" width="0.3386%" height="15" fill="rgb(208,77,27)" fg:x="11630" fg:w="54"/><text x="73.1699%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (54 samples, 0.34%)</title><rect x="72.9199%" y="229" width="0.3386%" height="15" fill="rgb(221,76,26)" fg:x="11630" fg:w="54"/><text x="73.1699%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (54 samples, 0.34%)</title><rect x="72.9199%" y="213" width="0.3386%" height="15" fill="rgb(225,139,18)" fg:x="11630" fg:w="54"/><text x="73.1699%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="73.2585%" y="245" width="0.0251%" height="15" fill="rgb(230,137,11)" fg:x="11684" fg:w="4"/><text x="73.5085%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.03%)</title><rect x="73.2585%" y="229" width="0.0251%" height="15" fill="rgb(212,28,1)" fg:x="11684" fg:w="4"/><text x="73.5085%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="73.2585%" y="213" width="0.0251%" height="15" fill="rgb(248,164,17)" fg:x="11684" fg:w="4"/><text x="73.5085%" y="223.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (29 samples, 0.18%)</title><rect x="73.2836%" y="245" width="0.1818%" height="15" fill="rgb(222,171,42)" fg:x="11688" fg:w="29"/><text x="73.5336%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (48 samples, 0.30%)</title><rect x="73.5030%" y="181" width="0.3010%" height="15" fill="rgb(243,84,45)" fg:x="11723" fg:w="48"/><text x="73.7530%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (48 samples, 0.30%)</title><rect x="73.5030%" y="165" width="0.3010%" height="15" fill="rgb(252,49,23)" fg:x="11723" fg:w="48"/><text x="73.7530%" y="175.50"></text></g><g><title>alloc::alloc::realloc (48 samples, 0.30%)</title><rect x="73.5030%" y="149" width="0.3010%" height="15" fill="rgb(215,19,7)" fg:x="11723" fg:w="48"/><text x="73.7530%" y="159.50"></text></g><g><title>realloc (48 samples, 0.30%)</title><rect x="73.5030%" y="133" width="0.3010%" height="15" fill="rgb(238,81,41)" fg:x="11723" fg:w="48"/><text x="73.7530%" y="143.50"></text></g><g><title>[libc.so.6] (37 samples, 0.23%)</title><rect x="73.5720%" y="117" width="0.2320%" height="15" fill="rgb(210,199,37)" fg:x="11734" fg:w="37"/><text x="73.8220%" y="127.50"></text></g><g><title>[libc.so.6] (32 samples, 0.20%)</title><rect x="73.6034%" y="101" width="0.2006%" height="15" fill="rgb(244,192,49)" fg:x="11739" fg:w="32"/><text x="73.8534%" y="111.50"></text></g><g><title>[libc.so.6] (8 samples, 0.05%)</title><rect x="73.7538%" y="85" width="0.0502%" height="15" fill="rgb(226,211,11)" fg:x="11763" fg:w="8"/><text x="74.0038%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (49 samples, 0.31%)</title><rect x="73.5030%" y="197" width="0.3072%" height="15" fill="rgb(236,162,54)" fg:x="11723" fg:w="49"/><text x="73.7530%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (52 samples, 0.33%)</title><rect x="73.4905%" y="229" width="0.3260%" height="15" fill="rgb(220,229,9)" fg:x="11721" fg:w="52"/><text x="73.7405%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (52 samples, 0.33%)</title><rect x="73.4905%" y="213" width="0.3260%" height="15" fill="rgb(250,87,22)" fg:x="11721" fg:w="52"/><text x="73.7405%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (61 samples, 0.38%)</title><rect x="73.4654%" y="245" width="0.3825%" height="15" fill="rgb(239,43,17)" fg:x="11717" fg:w="61"/><text x="73.7154%" y="255.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="73.8228%" y="229" width="0.0251%" height="15" fill="rgb(231,177,25)" fg:x="11774" fg:w="4"/><text x="74.0728%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (426 samples, 2.67%)</title><rect x="71.2208%" y="293" width="2.6710%" height="15" fill="rgb(219,179,1)" fg:x="11359" fg:w="426"/><text x="71.4708%" y="303.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (426 samples, 2.67%)</title><rect x="71.2208%" y="277" width="2.6710%" height="15" fill="rgb(238,219,53)" fg:x="11359" fg:w="426"/><text x="71.4708%" y="287.50">&lt;c..</text></g><g><title>main::update_sptree::_{{closure}} (424 samples, 2.66%)</title><rect x="71.2333%" y="261" width="2.6585%" height="15" fill="rgb(232,167,36)" fg:x="11361" fg:w="424"/><text x="71.4833%" y="271.50">ma..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (7 samples, 0.04%)</title><rect x="73.8479%" y="245" width="0.0439%" height="15" fill="rgb(244,19,51)" fg:x="11778" fg:w="7"/><text x="74.0979%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.05%)</title><rect x="73.8918%" y="293" width="0.0502%" height="15" fill="rgb(224,6,22)" fg:x="11785" fg:w="8"/><text x="74.1418%" y="303.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (8 samples, 0.05%)</title><rect x="73.8918%" y="277" width="0.0502%" height="15" fill="rgb(224,145,5)" fg:x="11785" fg:w="8"/><text x="74.1418%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.13%)</title><rect x="74.0234%" y="277" width="0.1317%" height="15" fill="rgb(234,130,49)" fg:x="11806" fg:w="21"/><text x="74.2734%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.08%)</title><rect x="74.0736%" y="261" width="0.0815%" height="15" fill="rgb(254,6,2)" fg:x="11814" fg:w="13"/><text x="74.3236%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (104 samples, 0.65%)</title><rect x="75.0768%" y="261" width="0.6521%" height="15" fill="rgb(208,96,46)" fg:x="11974" fg:w="104"/><text x="75.3268%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (104 samples, 0.65%)</title><rect x="75.0768%" y="245" width="0.6521%" height="15" fill="rgb(239,3,39)" fg:x="11974" fg:w="104"/><text x="75.3268%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (104 samples, 0.65%)</title><rect x="75.0768%" y="229" width="0.6521%" height="15" fill="rgb(233,210,1)" fg:x="11974" fg:w="104"/><text x="75.3268%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (379 samples, 2.38%)</title><rect x="73.9419%" y="293" width="2.3763%" height="15" fill="rgb(244,137,37)" fg:x="11793" fg:w="379"/><text x="74.1919%" y="303.50">&lt;c..</text></g><g><title>main::update_sptree::_{{closure}} (345 samples, 2.16%)</title><rect x="74.1551%" y="277" width="2.1631%" height="15" fill="rgb(240,136,2)" fg:x="11827" fg:w="345"/><text x="74.4051%" y="287.50">m..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (94 samples, 0.59%)</title><rect x="75.7289%" y="261" width="0.5894%" height="15" fill="rgb(239,18,37)" fg:x="12078" fg:w="94"/><text x="75.9789%" y="271.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (36 samples, 0.23%)</title><rect x="76.3183%" y="293" width="0.2257%" height="15" fill="rgb(218,185,22)" fg:x="12172" fg:w="36"/><text x="76.5683%" y="303.50"></text></g><g><title>__rdl_alloc (3 samples, 0.02%)</title><rect x="76.5440%" y="229" width="0.0188%" height="15" fill="rgb(225,218,4)" fg:x="12208" fg:w="3"/><text x="76.7940%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (11 samples, 0.07%)</title><rect x="76.5440%" y="293" width="0.0690%" height="15" fill="rgb(230,182,32)" fg:x="12208" fg:w="11"/><text x="76.7940%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.07%)</title><rect x="76.5440%" y="277" width="0.0690%" height="15" fill="rgb(242,56,43)" fg:x="12208" fg:w="11"/><text x="76.7940%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.07%)</title><rect x="76.5440%" y="261" width="0.0690%" height="15" fill="rgb(233,99,24)" fg:x="12208" fg:w="11"/><text x="76.7940%" y="271.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.07%)</title><rect x="76.5440%" y="245" width="0.0690%" height="15" fill="rgb(234,209,42)" fg:x="12208" fg:w="11"/><text x="76.7940%" y="255.50"></text></g><g><title>malloc (7 samples, 0.04%)</title><rect x="76.5691%" y="229" width="0.0439%" height="15" fill="rgb(227,7,12)" fg:x="12212" fg:w="7"/><text x="76.8191%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.04%)</title><rect x="76.6130%" y="293" width="0.0376%" height="15" fill="rgb(245,203,43)" fg:x="12219" fg:w="6"/><text x="76.8630%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.06%)</title><rect x="78.4751%" y="245" width="0.0627%" height="15" fill="rgb(238,205,33)" fg:x="12516" fg:w="10"/><text x="78.7251%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.05%)</title><rect x="78.5378%" y="245" width="0.0502%" height="15" fill="rgb(231,56,7)" fg:x="12526" fg:w="8"/><text x="78.7878%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (3 samples, 0.02%)</title><rect x="78.5880%" y="245" width="0.0188%" height="15" fill="rgb(244,186,29)" fg:x="12534" fg:w="3"/><text x="78.8380%" y="255.50"></text></g><g><title>__rdl_realloc (19 samples, 0.12%)</title><rect x="78.8074%" y="181" width="0.1191%" height="15" fill="rgb(234,111,31)" fg:x="12569" fg:w="19"/><text x="79.0574%" y="191.50"></text></g><g><title>__rust_realloc (8 samples, 0.05%)</title><rect x="78.9266%" y="181" width="0.0502%" height="15" fill="rgb(241,149,10)" fg:x="12588" fg:w="8"/><text x="79.1766%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,093 samples, 6.85%)</title><rect x="78.7698%" y="229" width="6.8531%" height="15" fill="rgb(249,206,44)" fg:x="12563" fg:w="1093"/><text x="79.0198%" y="239.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::Global::grow_impl (1,093 samples, 6.85%)</title><rect x="78.7698%" y="213" width="6.8531%" height="15" fill="rgb(251,153,30)" fg:x="12563" fg:w="1093"/><text x="79.0198%" y="223.50">alloc::al..</text></g><g><title>alloc::alloc::realloc (1,091 samples, 6.84%)</title><rect x="78.7824%" y="197" width="6.8406%" height="15" fill="rgb(239,152,38)" fg:x="12565" fg:w="1091"/><text x="79.0324%" y="207.50">alloc::al..</text></g><g><title>realloc (1,060 samples, 6.65%)</title><rect x="78.9767%" y="181" width="6.6462%" height="15" fill="rgb(249,139,47)" fg:x="12596" fg:w="1060"/><text x="79.2267%" y="191.50">realloc</text></g><g><title>[libc.so.6] (964 samples, 6.04%)</title><rect x="79.5787%" y="165" width="6.0443%" height="15" fill="rgb(244,64,35)" fg:x="12692" fg:w="964"/><text x="79.8287%" y="175.50">[libc.so..</text></g><g><title>[libc.so.6] (888 samples, 5.57%)</title><rect x="80.0552%" y="149" width="5.5677%" height="15" fill="rgb(216,46,15)" fg:x="12768" fg:w="888"/><text x="80.3052%" y="159.50">[libc.s..</text></g><g><title>[libc.so.6] (274 samples, 1.72%)</title><rect x="83.9049%" y="133" width="1.7180%" height="15" fill="rgb(250,74,19)" fg:x="13382" fg:w="274"/><text x="84.1549%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="85.6041%" y="117" width="0.0188%" height="15" fill="rgb(249,42,33)" fg:x="13653" fg:w="3"/><text x="85.8541%" y="127.50"></text></g><g><title>__rdl_alloc (3 samples, 0.02%)</title><rect x="85.6229%" y="229" width="0.0188%" height="15" fill="rgb(242,149,17)" fg:x="13656" fg:w="3"/><text x="85.8729%" y="239.50"></text></g><g><title>__rust_alloc (2 samples, 0.01%)</title><rect x="85.6417%" y="229" width="0.0125%" height="15" fill="rgb(244,29,21)" fg:x="13659" fg:w="2"/><text x="85.8917%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (13 samples, 0.08%)</title><rect x="85.6543%" y="229" width="0.0815%" height="15" fill="rgb(220,130,37)" fg:x="13661" fg:w="13"/><text x="85.9043%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,193 samples, 7.48%)</title><rect x="78.6068%" y="245" width="7.4801%" height="15" fill="rgb(211,67,2)" fg:x="12537" fg:w="1193"/><text x="78.8568%" y="255.50">alloc::raw..</text></g><g><title>malloc (56 samples, 0.35%)</title><rect x="85.7358%" y="229" width="0.3511%" height="15" fill="rgb(235,68,52)" fg:x="13674" fg:w="56"/><text x="85.9858%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (4 samples, 0.03%)</title><rect x="86.0869%" y="245" width="0.0251%" height="15" fill="rgb(246,142,3)" fg:x="13730" fg:w="4"/><text x="86.3369%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (4 samples, 0.03%)</title><rect x="86.0869%" y="229" width="0.0251%" height="15" fill="rgb(241,25,7)" fg:x="13730" fg:w="4"/><text x="86.3369%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,254 samples, 7.86%)</title><rect x="78.3748%" y="277" width="7.8626%" height="15" fill="rgb(242,119,39)" fg:x="12500" fg:w="1254"/><text x="78.6248%" y="287.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,254 samples, 7.86%)</title><rect x="78.3748%" y="261" width="7.8626%" height="15" fill="rgb(241,98,45)" fg:x="12500" fg:w="1254"/><text x="78.6248%" y="271.50">alloc::raw_..</text></g><g><title>core::cmp::max (20 samples, 0.13%)</title><rect x="86.1120%" y="245" width="0.1254%" height="15" fill="rgb(254,28,30)" fg:x="13734" fg:w="20"/><text x="86.3620%" y="255.50"></text></g><g><title>core::cmp::Ord::max (20 samples, 0.13%)</title><rect x="86.1120%" y="229" width="0.1254%" height="15" fill="rgb(241,142,54)" fg:x="13734" fg:w="20"/><text x="86.3620%" y="239.50"></text></g><g><title>core::cmp::max_by (20 samples, 0.13%)</title><rect x="86.1120%" y="213" width="0.1254%" height="15" fill="rgb(222,85,15)" fg:x="13734" fg:w="20"/><text x="86.3620%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (64 samples, 0.40%)</title><rect x="86.2374%" y="277" width="0.4013%" height="15" fill="rgb(210,85,47)" fg:x="13754" fg:w="64"/><text x="86.4874%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (64 samples, 0.40%)</title><rect x="86.2374%" y="261" width="0.4013%" height="15" fill="rgb(224,206,25)" fg:x="13754" fg:w="64"/><text x="86.4874%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,734 samples, 10.87%)</title><rect x="76.6506%" y="293" width="10.8722%" height="15" fill="rgb(243,201,19)" fg:x="12225" fg:w="1734"/><text x="76.9006%" y="303.50">alloc::vec::Vec&lt;..</text></g><g><title>core::ptr::write (141 samples, 0.88%)</title><rect x="86.6387%" y="277" width="0.8841%" height="15" fill="rgb(236,59,4)" fg:x="13818" fg:w="141"/><text x="86.8887%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (18 samples, 0.11%)</title><rect x="87.5227%" y="293" width="0.1129%" height="15" fill="rgb(254,179,45)" fg:x="13959" fg:w="18"/><text x="87.7727%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.03%)</title><rect x="87.6419%" y="261" width="0.0313%" height="15" fill="rgb(226,14,10)" fg:x="13978" fg:w="5"/><text x="87.8919%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.03%)</title><rect x="87.6419%" y="245" width="0.0313%" height="15" fill="rgb(244,27,41)" fg:x="13978" fg:w="5"/><text x="87.8919%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (2 samples, 0.01%)</title><rect x="87.6607%" y="229" width="0.0125%" height="15" fill="rgb(235,35,32)" fg:x="13981" fg:w="2"/><text x="87.9107%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.01%)</title><rect x="87.6607%" y="213" width="0.0125%" height="15" fill="rgb(218,68,31)" fg:x="13981" fg:w="2"/><text x="87.9107%" y="223.50"></text></g><g><title>main::update_sptree::_{{closure}} (2 samples, 0.01%)</title><rect x="87.6607%" y="197" width="0.0125%" height="15" fill="rgb(207,120,37)" fg:x="13981" fg:w="2"/><text x="87.9107%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.03%)</title><rect x="87.6983%" y="213" width="0.0251%" height="15" fill="rgb(227,98,0)" fg:x="13987" fg:w="4"/><text x="87.9483%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.03%)</title><rect x="87.6983%" y="197" width="0.0251%" height="15" fill="rgb(207,7,3)" fg:x="13987" fg:w="4"/><text x="87.9483%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.03%)</title><rect x="87.6983%" y="181" width="0.0251%" height="15" fill="rgb(206,98,19)" fg:x="13987" fg:w="4"/><text x="87.9483%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.09%)</title><rect x="87.6356%" y="277" width="0.0940%" height="15" fill="rgb(217,5,26)" fg:x="13977" fg:w="15"/><text x="87.8856%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.06%)</title><rect x="87.6732%" y="261" width="0.0564%" height="15" fill="rgb(235,190,38)" fg:x="13983" fg:w="9"/><text x="87.9232%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9 samples, 0.06%)</title><rect x="87.6732%" y="245" width="0.0564%" height="15" fill="rgb(247,86,24)" fg:x="13983" fg:w="9"/><text x="87.9232%" y="255.50"></text></g><g><title>main::update_sptree::_{{closure}} (9 samples, 0.06%)</title><rect x="87.6732%" y="229" width="0.0564%" height="15" fill="rgb(205,101,16)" fg:x="13983" fg:w="9"/><text x="87.9232%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="87.7296%" y="261" width="0.0125%" height="15" fill="rgb(246,168,33)" fg:x="13992" fg:w="2"/><text x="87.9796%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="87.8613%" y="229" width="0.0125%" height="15" fill="rgb(231,114,1)" fg:x="14013" fg:w="2"/><text x="88.1113%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="87.8613%" y="213" width="0.0125%" height="15" fill="rgb(207,184,53)" fg:x="14013" fg:w="2"/><text x="88.1113%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="87.8613%" y="197" width="0.0125%" height="15" fill="rgb(224,95,51)" fg:x="14013" fg:w="2"/><text x="88.1113%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.01%)</title><rect x="87.8738%" y="229" width="0.0125%" height="15" fill="rgb(212,188,45)" fg:x="14015" fg:w="2"/><text x="88.1238%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.01%)</title><rect x="87.8738%" y="213" width="0.0125%" height="15" fill="rgb(223,154,38)" fg:x="14015" fg:w="2"/><text x="88.1238%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.01%)</title><rect x="87.8738%" y="197" width="0.0125%" height="15" fill="rgb(251,22,52)" fg:x="14015" fg:w="2"/><text x="88.1238%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (24 samples, 0.15%)</title><rect x="87.7422%" y="261" width="0.1505%" height="15" fill="rgb(229,209,22)" fg:x="13994" fg:w="24"/><text x="87.9922%" y="271.50"></text></g><g><title>main::update_sptree::_{{closure}} (24 samples, 0.15%)</title><rect x="87.7422%" y="245" width="0.1505%" height="15" fill="rgb(234,138,34)" fg:x="13994" fg:w="24"/><text x="87.9922%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (62 samples, 0.39%)</title><rect x="87.6356%" y="293" width="0.3887%" height="15" fill="rgb(212,95,11)" fg:x="13977" fg:w="62"/><text x="87.8856%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (47 samples, 0.29%)</title><rect x="87.7296%" y="277" width="0.2947%" height="15" fill="rgb(240,179,47)" fg:x="13992" fg:w="47"/><text x="87.9796%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (21 samples, 0.13%)</title><rect x="87.8927%" y="261" width="0.1317%" height="15" fill="rgb(240,163,11)" fg:x="14018" fg:w="21"/><text x="88.1427%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.13%)</title><rect x="87.8927%" y="245" width="0.1317%" height="15" fill="rgb(236,37,12)" fg:x="14018" fg:w="21"/><text x="88.1427%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (21 samples, 0.13%)</title><rect x="87.8927%" y="229" width="0.1317%" height="15" fill="rgb(232,164,16)" fg:x="14018" fg:w="21"/><text x="88.1427%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.13%)</title><rect x="87.8927%" y="213" width="0.1317%" height="15" fill="rgb(244,205,15)" fg:x="14018" fg:w="21"/><text x="88.1427%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (21 samples, 0.13%)</title><rect x="87.8927%" y="197" width="0.1317%" height="15" fill="rgb(223,117,47)" fg:x="14018" fg:w="21"/><text x="88.1427%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.13%)</title><rect x="87.8927%" y="181" width="0.1317%" height="15" fill="rgb(244,107,35)" fg:x="14018" fg:w="21"/><text x="88.1427%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.13%)</title><rect x="87.8927%" y="165" width="0.1317%" height="15" fill="rgb(205,140,8)" fg:x="14018" fg:w="21"/><text x="88.1427%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.13%)</title><rect x="87.8927%" y="149" width="0.1317%" height="15" fill="rgb(228,84,46)" fg:x="14018" fg:w="21"/><text x="88.1427%" y="159.50"></text></g><g><title>cfree (20 samples, 0.13%)</title><rect x="87.8989%" y="133" width="0.1254%" height="15" fill="rgb(254,188,9)" fg:x="14019" fg:w="20"/><text x="88.1489%" y="143.50"></text></g><g><title>[libc.so.6] (14 samples, 0.09%)</title><rect x="87.9365%" y="117" width="0.0878%" height="15" fill="rgb(206,112,54)" fg:x="14025" fg:w="14"/><text x="88.1865%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="88.0118%" y="101" width="0.0125%" height="15" fill="rgb(216,84,49)" fg:x="14037" fg:w="2"/><text x="88.2618%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1,615 samples, 10.13%)</title><rect x="88.0243%" y="293" width="10.1260%" height="15" fill="rgb(214,194,35)" fg:x="14039" fg:w="1615"/><text x="88.2743%" y="303.50">core::option::O..</text></g><g><title>core::option::Option&lt;T&gt;::is_some (1,615 samples, 10.13%)</title><rect x="88.0243%" y="277" width="10.1260%" height="15" fill="rgb(249,28,3)" fg:x="14039" fg:w="1615"/><text x="88.2743%" y="287.50">core::option::O..</text></g><g><title>__rdl_dealloc (6 samples, 0.04%)</title><rect x="98.1754%" y="213" width="0.0376%" height="15" fill="rgb(222,56,52)" fg:x="15658" fg:w="6"/><text x="98.4254%" y="223.50"></text></g><g><title>__rust_dealloc (6 samples, 0.04%)</title><rect x="98.2131%" y="213" width="0.0376%" height="15" fill="rgb(245,217,50)" fg:x="15664" fg:w="6"/><text x="98.4631%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (166 samples, 1.04%)</title><rect x="98.1754%" y="245" width="1.0408%" height="15" fill="rgb(213,201,24)" fg:x="15658" fg:w="166"/><text x="98.4254%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (166 samples, 1.04%)</title><rect x="98.1754%" y="229" width="1.0408%" height="15" fill="rgb(248,116,28)" fg:x="15658" fg:w="166"/><text x="98.4254%" y="239.50"></text></g><g><title>cfree (154 samples, 0.97%)</title><rect x="98.2507%" y="213" width="0.9656%" height="15" fill="rgb(219,72,43)" fg:x="15670" fg:w="154"/><text x="98.5007%" y="223.50"></text></g><g><title>[libc.so.6] (123 samples, 0.77%)</title><rect x="98.4450%" y="197" width="0.7712%" height="15" fill="rgb(209,138,14)" fg:x="15701" fg:w="123"/><text x="98.6950%" y="207.50"></text></g><g><title>[libc.so.6] (61 samples, 0.38%)</title><rect x="98.8338%" y="181" width="0.3825%" height="15" fill="rgb(222,18,33)" fg:x="15763" fg:w="61"/><text x="99.0838%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (171 samples, 1.07%)</title><rect x="98.1566%" y="293" width="1.0722%" height="15" fill="rgb(213,199,7)" fg:x="15655" fg:w="171"/><text x="98.4066%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (171 samples, 1.07%)</title><rect x="98.1566%" y="277" width="1.0722%" height="15" fill="rgb(250,110,10)" fg:x="15655" fg:w="171"/><text x="98.4066%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (171 samples, 1.07%)</title><rect x="98.1566%" y="261" width="1.0722%" height="15" fill="rgb(248,123,6)" fg:x="15655" fg:w="171"/><text x="98.4066%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="99.2163%" y="245" width="0.0125%" height="15" fill="rgb(206,91,31)" fg:x="15824" fg:w="2"/><text x="99.4663%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (2 samples, 0.01%)</title><rect x="99.2163%" y="229" width="0.0125%" height="15" fill="rgb(211,154,13)" fg:x="15824" fg:w="2"/><text x="99.4663%" y="239.50"></text></g><g><title>main::min_cost (15,265 samples, 95.71%)</title><rect x="3.8372%" y="325" width="95.7113%" height="15" fill="rgb(225,148,7)" fg:x="612" fg:w="15265"/><text x="4.0872%" y="335.50">main::min_cost</text></g><g><title>main::update_sptree (5,840 samples, 36.62%)</title><rect x="62.9318%" y="309" width="36.6167%" height="15" fill="rgb(220,160,43)" fg:x="10037" fg:w="5840"/><text x="63.1818%" y="319.50">main::update_sptree</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (51 samples, 0.32%)</title><rect x="99.2288%" y="293" width="0.3198%" height="15" fill="rgb(213,52,39)" fg:x="15826" fg:w="51"/><text x="99.4788%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (2 samples, 0.01%)</title><rect x="99.5486%" y="325" width="0.0125%" height="15" fill="rgb(243,137,7)" fg:x="15877" fg:w="2"/><text x="99.7986%" y="335.50"></text></g><g><title>_start (15,269 samples, 95.74%)</title><rect x="3.8310%" y="469" width="95.7364%" height="15" fill="rgb(230,79,13)" fg:x="611" fg:w="15269"/><text x="4.0810%" y="479.50">_start</text></g><g><title>__libc_start_main (15,269 samples, 95.74%)</title><rect x="3.8310%" y="453" width="95.7364%" height="15" fill="rgb(247,105,23)" fg:x="611" fg:w="15269"/><text x="4.0810%" y="463.50">__libc_start_main</text></g><g><title>[libc.so.6] (15,269 samples, 95.74%)</title><rect x="3.8310%" y="437" width="95.7364%" height="15" fill="rgb(223,179,41)" fg:x="611" fg:w="15269"/><text x="4.0810%" y="447.50">[libc.so.6]</text></g><g><title>main (15,269 samples, 95.74%)</title><rect x="3.8310%" y="421" width="95.7364%" height="15" fill="rgb(218,9,34)" fg:x="611" fg:w="15269"/><text x="4.0810%" y="431.50">main</text></g><g><title>std::rt::lang_start_internal (15,269 samples, 95.74%)</title><rect x="3.8310%" y="405" width="95.7364%" height="15" fill="rgb(222,106,8)" fg:x="611" fg:w="15269"/><text x="4.0810%" y="415.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (15,269 samples, 95.74%)</title><rect x="3.8310%" y="389" width="95.7364%" height="15" fill="rgb(211,220,0)" fg:x="611" fg:w="15269"/><text x="4.0810%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (15,269 samples, 95.74%)</title><rect x="3.8310%" y="373" width="95.7364%" height="15" fill="rgb(229,52,16)" fg:x="611" fg:w="15269"/><text x="4.0810%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (15,269 samples, 95.74%)</title><rect x="3.8310%" y="357" width="95.7364%" height="15" fill="rgb(212,155,18)" fg:x="611" fg:w="15269"/><text x="4.0810%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (15,269 samples, 95.74%)</title><rect x="3.8310%" y="341" width="95.7364%" height="15" fill="rgb(242,21,14)" fg:x="611" fg:w="15269"/><text x="4.0810%" y="351.50">main::main</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.08%)</title><rect x="99.5674%" y="469" width="0.0815%" height="15" fill="rgb(222,19,48)" fg:x="15880" fg:w="13"/><text x="99.8174%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.01%)</title><rect x="99.6363%" y="453" width="0.0125%" height="15" fill="rgb(232,45,27)" fg:x="15891" fg:w="2"/><text x="99.8863%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.01%)</title><rect x="99.6363%" y="437" width="0.0125%" height="15" fill="rgb(249,103,42)" fg:x="15891" fg:w="2"/><text x="99.8863%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.01%)</title><rect x="99.6363%" y="421" width="0.0125%" height="15" fill="rgb(246,81,33)" fg:x="15891" fg:w="2"/><text x="99.8863%" y="431.50"></text></g><g><title>cfree (8 samples, 0.05%)</title><rect x="99.6489%" y="469" width="0.0502%" height="15" fill="rgb(252,33,42)" fg:x="15893" fg:w="8"/><text x="99.8989%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.01%)</title><rect x="99.7053%" y="453" width="0.0125%" height="15" fill="rgb(209,212,41)" fg:x="15902" fg:w="2"/><text x="99.9553%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.01%)</title><rect x="99.7053%" y="437" width="0.0125%" height="15" fill="rgb(207,154,6)" fg:x="15902" fg:w="2"/><text x="99.9553%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.7053%" y="421" width="0.0125%" height="15" fill="rgb(223,64,47)" fg:x="15902" fg:w="2"/><text x="99.9553%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="99.7053%" y="405" width="0.0125%" height="15" fill="rgb(211,161,38)" fg:x="15902" fg:w="2"/><text x="99.9553%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="99.7053%" y="389" width="0.0125%" height="15" fill="rgb(219,138,40)" fg:x="15902" fg:w="2"/><text x="99.9553%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2 samples, 0.01%)</title><rect x="99.7179%" y="405" width="0.0125%" height="15" fill="rgb(241,228,46)" fg:x="15904" fg:w="2"/><text x="99.9679%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="99.7179%" y="389" width="0.0125%" height="15" fill="rgb(223,209,38)" fg:x="15904" fg:w="2"/><text x="99.9679%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2 samples, 0.01%)</title><rect x="99.7179%" y="373" width="0.0125%" height="15" fill="rgb(236,164,45)" fg:x="15904" fg:w="2"/><text x="99.9679%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="99.7179%" y="357" width="0.0125%" height="15" fill="rgb(231,15,5)" fg:x="15904" fg:w="2"/><text x="99.9679%" y="367.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2 samples, 0.01%)</title><rect x="99.7179%" y="341" width="0.0125%" height="15" fill="rgb(252,35,15)" fg:x="15904" fg:w="2"/><text x="99.9679%" y="351.50"></text></g><g><title>alloc::vec::from_elem (4 samples, 0.03%)</title><rect x="99.7179%" y="437" width="0.0251%" height="15" fill="rgb(248,181,18)" fg:x="15904" fg:w="4"/><text x="99.9679%" y="447.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 0.03%)</title><rect x="99.7179%" y="421" width="0.0251%" height="15" fill="rgb(233,39,42)" fg:x="15904" fg:w="4"/><text x="99.9679%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="99.7304%" y="405" width="0.0125%" height="15" fill="rgb(238,110,33)" fg:x="15906" fg:w="2"/><text x="99.9804%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="99.7304%" y="389" width="0.0125%" height="15" fill="rgb(233,195,10)" fg:x="15906" fg:w="2"/><text x="99.9804%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="99.7304%" y="373" width="0.0125%" height="15" fill="rgb(254,105,3)" fg:x="15906" fg:w="2"/><text x="99.9804%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="99.7304%" y="357" width="0.0125%" height="15" fill="rgb(221,225,9)" fg:x="15906" fg:w="2"/><text x="99.9804%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="99.7304%" y="341" width="0.0125%" height="15" fill="rgb(224,227,45)" fg:x="15906" fg:w="2"/><text x="99.9804%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="99.7304%" y="325" width="0.0125%" height="15" fill="rgb(229,198,43)" fg:x="15906" fg:w="2"/><text x="99.9804%" y="335.50"></text></g><g><title>main::compute_flowchange (10 samples, 0.06%)</title><rect x="99.7179%" y="453" width="0.0627%" height="15" fill="rgb(206,209,35)" fg:x="15904" fg:w="10"/><text x="99.9679%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (6 samples, 0.04%)</title><rect x="99.7429%" y="437" width="0.0376%" height="15" fill="rgb(245,195,53)" fg:x="15908" fg:w="6"/><text x="99.9929%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (6 samples, 0.04%)</title><rect x="99.7429%" y="421" width="0.0376%" height="15" fill="rgb(240,92,26)" fg:x="15908" fg:w="6"/><text x="99.9929%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="99.7429%" y="405" width="0.0376%" height="15" fill="rgb(207,40,23)" fg:x="15908" fg:w="6"/><text x="99.9929%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.04%)</title><rect x="99.7429%" y="389" width="0.0376%" height="15" fill="rgb(223,111,35)" fg:x="15908" fg:w="6"/><text x="99.9929%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.04%)</title><rect x="99.7429%" y="373" width="0.0376%" height="15" fill="rgb(229,147,28)" fg:x="15908" fg:w="6"/><text x="99.9929%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.02%)</title><rect x="99.7806%" y="437" width="0.0188%" height="15" fill="rgb(211,29,28)" fg:x="15914" fg:w="3"/><text x="100.0306%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="99.7806%" y="421" width="0.0188%" height="15" fill="rgb(228,72,33)" fg:x="15914" fg:w="3"/><text x="100.0306%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="99.7806%" y="405" width="0.0188%" height="15" fill="rgb(205,214,31)" fg:x="15914" fg:w="3"/><text x="100.0306%" y="415.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="99.7806%" y="389" width="0.0188%" height="15" fill="rgb(224,111,15)" fg:x="15914" fg:w="3"/><text x="100.0306%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.08%)</title><rect x="99.7994%" y="437" width="0.0752%" height="15" fill="rgb(253,21,26)" fg:x="15917" fg:w="12"/><text x="100.0494%" y="447.50"></text></g><g><title>main::find_cycle_with_arc (19 samples, 0.12%)</title><rect x="99.7806%" y="453" width="0.1191%" height="15" fill="rgb(245,139,43)" fg:x="15914" fg:w="19"/><text x="100.0306%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.03%)</title><rect x="99.8746%" y="437" width="0.0251%" height="15" fill="rgb(252,170,7)" fg:x="15929" fg:w="4"/><text x="100.1246%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.03%)</title><rect x="99.8746%" y="421" width="0.0251%" height="15" fill="rgb(231,118,14)" fg:x="15929" fg:w="4"/><text x="100.1246%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.03%)</title><rect x="99.8746%" y="405" width="0.0251%" height="15" fill="rgb(238,83,0)" fg:x="15929" fg:w="4"/><text x="100.1246%" y="415.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (4 samples, 0.03%)</title><rect x="99.8746%" y="389" width="0.0251%" height="15" fill="rgb(221,39,39)" fg:x="15929" fg:w="4"/><text x="100.1246%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.03%)</title><rect x="99.8746%" y="373" width="0.0251%" height="15" fill="rgb(222,119,46)" fg:x="15929" fg:w="4"/><text x="100.1246%" y="383.50"></text></g><g><title>main::find_cycle_with_arc::_{{closure}} (4 samples, 0.03%)</title><rect x="99.8746%" y="357" width="0.0251%" height="15" fill="rgb(222,165,49)" fg:x="15929" fg:w="4"/><text x="100.1246%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.03%)</title><rect x="99.8746%" y="341" width="0.0251%" height="15" fill="rgb(219,113,52)" fg:x="15929" fg:w="4"/><text x="100.1246%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.01%)</title><rect x="99.8997%" y="437" width="0.0125%" height="15" fill="rgb(214,7,15)" fg:x="15933" fg:w="2"/><text x="100.1497%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="99.8997%" y="421" width="0.0125%" height="15" fill="rgb(235,32,4)" fg:x="15933" fg:w="2"/><text x="100.1497%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="99.8997%" y="405" width="0.0125%" height="15" fill="rgb(238,90,54)" fg:x="15933" fg:w="2"/><text x="100.1497%" y="415.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="99.8997%" y="389" width="0.0125%" height="15" fill="rgb(213,208,19)" fg:x="15933" fg:w="2"/><text x="100.1497%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.02%)</title><rect x="99.9122%" y="437" width="0.0188%" height="15" fill="rgb(233,156,4)" fg:x="15935" fg:w="3"/><text x="100.1622%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="99.9310%" y="437" width="0.0125%" height="15" fill="rgb(207,194,5)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.01%)</title><rect x="99.9310%" y="421" width="0.0125%" height="15" fill="rgb(206,111,30)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (2 samples, 0.01%)</title><rect x="99.9310%" y="405" width="0.0125%" height="15" fill="rgb(243,70,54)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.9310%" y="389" width="0.0125%" height="15" fill="rgb(242,28,8)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (2 samples, 0.01%)</title><rect x="99.9310%" y="373" width="0.0125%" height="15" fill="rgb(219,106,18)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="383.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.9310%" y="357" width="0.0125%" height="15" fill="rgb(244,222,10)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.01%)</title><rect x="99.9310%" y="341" width="0.0125%" height="15" fill="rgb(236,179,52)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="99.9310%" y="325" width="0.0125%" height="15" fill="rgb(213,23,39)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="99.9310%" y="309" width="0.0125%" height="15" fill="rgb(238,48,10)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="99.9310%" y="293" width="0.0125%" height="15" fill="rgb(251,196,23)" fg:x="15938" fg:w="2"/><text x="100.1810%" y="303.50"></text></g><g><title>main::min_cost (41 samples, 0.26%)</title><rect x="99.7053%" y="469" width="0.2571%" height="15" fill="rgb(250,152,24)" fg:x="15902" fg:w="41"/><text x="99.9553%" y="479.50"></text></g><g><title>main::update_sptree (10 samples, 0.06%)</title><rect x="99.8997%" y="453" width="0.0627%" height="15" fill="rgb(209,150,17)" fg:x="15933" fg:w="10"/><text x="100.1497%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (3 samples, 0.02%)</title><rect x="99.9436%" y="437" width="0.0188%" height="15" fill="rgb(234,202,34)" fg:x="15940" fg:w="3"/><text x="100.1936%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (3 samples, 0.02%)</title><rect x="99.9436%" y="421" width="0.0188%" height="15" fill="rgb(253,148,53)" fg:x="15940" fg:w="3"/><text x="100.1936%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="99.9436%" y="405" width="0.0188%" height="15" fill="rgb(218,129,16)" fg:x="15940" fg:w="3"/><text x="100.1936%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="99.9436%" y="389" width="0.0188%" height="15" fill="rgb(216,85,19)" fg:x="15940" fg:w="3"/><text x="100.1936%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="99.9436%" y="373" width="0.0188%" height="15" fill="rgb(235,228,7)" fg:x="15940" fg:w="3"/><text x="100.1936%" y="383.50"></text></g><g><title>all (15,949 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(245,175,0)" fg:x="0" fg:w="15949"/><text x="0.2500%" y="511.50"></text></g><g><title>main (15,949 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(208,168,36)" fg:x="0" fg:w="15949"/><text x="0.2500%" y="495.50">main</text></g><g><title>malloc (6 samples, 0.04%)</title><rect x="99.9624%" y="469" width="0.0376%" height="15" fill="rgb(246,171,24)" fg:x="15943" fg:w="6"/><text x="100.2124%" y="479.50"></text></g></svg></svg>