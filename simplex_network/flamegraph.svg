<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="39480"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.01%)</title><rect x="0.0000%" y="533" width="0.0101%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.03%)</title><rect x="0.0101%" y="533" width="0.0253%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="10"/><text x="0.2601%" y="543.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="0.0355%" y="517" width="0.0152%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="6"/><text x="0.2855%" y="527.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (6 samples, 0.02%)</title><rect x="0.0355%" y="501" width="0.0152%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="6"/><text x="0.2855%" y="511.50"></text></g><g><title>[[heap]] (18 samples, 0.05%)</title><rect x="0.0355%" y="533" width="0.0456%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="18"/><text x="0.2855%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.03%)</title><rect x="0.0507%" y="517" width="0.0304%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="12"/><text x="0.3007%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.03%)</title><rect x="0.0507%" y="501" width="0.0304%" height="15" fill="rgb(207,160,47)" fg:x="20" fg:w="12"/><text x="0.3007%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (12 samples, 0.03%)</title><rect x="0.0507%" y="485" width="0.0304%" height="15" fill="rgb(228,23,34)" fg:x="20" fg:w="12"/><text x="0.3007%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (12 samples, 0.03%)</title><rect x="0.0507%" y="469" width="0.0304%" height="15" fill="rgb(218,30,26)" fg:x="20" fg:w="12"/><text x="0.3007%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 0.09%)</title><rect x="0.0811%" y="517" width="0.0912%" height="15" fill="rgb(220,122,19)" fg:x="32" fg:w="36"/><text x="0.3311%" y="527.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.03%)</title><rect x="0.1722%" y="517" width="0.0279%" height="15" fill="rgb(250,228,42)" fg:x="68" fg:w="11"/><text x="0.4222%" y="527.50"></text></g><g><title>[libc.so.6] (28 samples, 0.07%)</title><rect x="0.2001%" y="517" width="0.0709%" height="15" fill="rgb(240,193,28)" fg:x="79" fg:w="28"/><text x="0.4501%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.01%)</title><rect x="0.2710%" y="517" width="0.0127%" height="15" fill="rgb(216,20,37)" fg:x="107" fg:w="5"/><text x="0.5210%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.01%)</title><rect x="0.2710%" y="501" width="0.0127%" height="15" fill="rgb(206,188,39)" fg:x="107" fg:w="5"/><text x="0.5210%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.01%)</title><rect x="0.2710%" y="485" width="0.0127%" height="15" fill="rgb(217,207,13)" fg:x="107" fg:w="5"/><text x="0.5210%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (5 samples, 0.01%)</title><rect x="0.2710%" y="469" width="0.0127%" height="15" fill="rgb(231,73,38)" fg:x="107" fg:w="5"/><text x="0.5210%" y="479.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for isize&gt;::from_str (16 samples, 0.04%)</title><rect x="0.2888%" y="517" width="0.0405%" height="15" fill="rgb(225,20,46)" fg:x="114" fg:w="16"/><text x="0.5388%" y="527.50"></text></g><g><title>core::num::from_str_radix (23 samples, 0.06%)</title><rect x="0.3293%" y="517" width="0.0583%" height="15" fill="rgb(210,31,41)" fg:x="130" fg:w="23"/><text x="0.5793%" y="527.50"></text></g><g><title>core::slice::memchr::memchr_aligned (9 samples, 0.02%)</title><rect x="0.3875%" y="517" width="0.0228%" height="15" fill="rgb(221,200,47)" fg:x="153" fg:w="9"/><text x="0.6375%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (58 samples, 0.15%)</title><rect x="0.4103%" y="389" width="0.1469%" height="15" fill="rgb(226,26,5)" fg:x="162" fg:w="58"/><text x="0.6603%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (58 samples, 0.15%)</title><rect x="0.4103%" y="373" width="0.1469%" height="15" fill="rgb(249,33,26)" fg:x="162" fg:w="58"/><text x="0.6603%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (58 samples, 0.15%)</title><rect x="0.4103%" y="357" width="0.1469%" height="15" fill="rgb(235,183,28)" fg:x="162" fg:w="58"/><text x="0.6603%" y="367.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.20%)</title><rect x="0.4103%" y="469" width="0.2001%" height="15" fill="rgb(221,5,38)" fg:x="162" fg:w="79"/><text x="0.6603%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.20%)</title><rect x="0.4103%" y="453" width="0.2001%" height="15" fill="rgb(247,18,42)" fg:x="162" fg:w="79"/><text x="0.6603%" y="463.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.20%)</title><rect x="0.4103%" y="437" width="0.2001%" height="15" fill="rgb(241,131,45)" fg:x="162" fg:w="79"/><text x="0.6603%" y="447.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (79 samples, 0.20%)</title><rect x="0.4103%" y="421" width="0.2001%" height="15" fill="rgb(249,31,29)" fg:x="162" fg:w="79"/><text x="0.6603%" y="431.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (79 samples, 0.20%)</title><rect x="0.4103%" y="405" width="0.2001%" height="15" fill="rgb(225,111,53)" fg:x="162" fg:w="79"/><text x="0.6603%" y="415.50"></text></g><g><title>core::slice::memchr::memchr (21 samples, 0.05%)</title><rect x="0.5572%" y="389" width="0.0532%" height="15" fill="rgb(238,160,17)" fg:x="220" fg:w="21"/><text x="0.8072%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.06%)</title><rect x="0.6104%" y="373" width="0.0583%" height="15" fill="rgb(214,148,48)" fg:x="241" fg:w="23"/><text x="0.8604%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.06%)</title><rect x="0.6104%" y="357" width="0.0583%" height="15" fill="rgb(232,36,49)" fg:x="241" fg:w="23"/><text x="0.8604%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (23 samples, 0.06%)</title><rect x="0.6104%" y="341" width="0.0583%" height="15" fill="rgb(209,103,24)" fg:x="241" fg:w="23"/><text x="0.8604%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.06%)</title><rect x="0.6104%" y="325" width="0.0583%" height="15" fill="rgb(229,88,8)" fg:x="241" fg:w="23"/><text x="0.8604%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.06%)</title><rect x="0.6104%" y="309" width="0.0583%" height="15" fill="rgb(213,181,19)" fg:x="241" fg:w="23"/><text x="0.8604%" y="319.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.06%)</title><rect x="0.6104%" y="293" width="0.0583%" height="15" fill="rgb(254,191,54)" fg:x="241" fg:w="23"/><text x="0.8604%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (30 samples, 0.08%)</title><rect x="0.6104%" y="437" width="0.0760%" height="15" fill="rgb(241,83,37)" fg:x="241" fg:w="30"/><text x="0.8604%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 0.08%)</title><rect x="0.6104%" y="421" width="0.0760%" height="15" fill="rgb(233,36,39)" fg:x="241" fg:w="30"/><text x="0.8604%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.08%)</title><rect x="0.6104%" y="405" width="0.0760%" height="15" fill="rgb(226,3,54)" fg:x="241" fg:w="30"/><text x="0.8604%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 0.08%)</title><rect x="0.6104%" y="389" width="0.0760%" height="15" fill="rgb(245,192,40)" fg:x="241" fg:w="30"/><text x="0.8604%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.02%)</title><rect x="0.6687%" y="373" width="0.0177%" height="15" fill="rgb(238,167,29)" fg:x="264" fg:w="7"/><text x="0.9187%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.02%)</title><rect x="0.6687%" y="357" width="0.0177%" height="15" fill="rgb(232,182,51)" fg:x="264" fg:w="7"/><text x="0.9187%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 0.03%)</title><rect x="0.6864%" y="437" width="0.0253%" height="15" fill="rgb(231,60,39)" fg:x="271" fg:w="10"/><text x="0.9364%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.03%)</title><rect x="0.6864%" y="421" width="0.0253%" height="15" fill="rgb(208,69,12)" fg:x="271" fg:w="10"/><text x="0.9364%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (19 samples, 0.05%)</title><rect x="0.7118%" y="437" width="0.0481%" height="15" fill="rgb(235,93,37)" fg:x="281" fg:w="19"/><text x="0.9618%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (19 samples, 0.05%)</title><rect x="0.7118%" y="421" width="0.0481%" height="15" fill="rgb(213,116,39)" fg:x="281" fg:w="19"/><text x="0.9618%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.05%)</title><rect x="0.7118%" y="405" width="0.0481%" height="15" fill="rgb(222,207,29)" fg:x="281" fg:w="19"/><text x="0.9618%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.05%)</title><rect x="0.7118%" y="389" width="0.0481%" height="15" fill="rgb(206,96,30)" fg:x="281" fg:w="19"/><text x="0.9618%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.05%)</title><rect x="0.7118%" y="373" width="0.0481%" height="15" fill="rgb(218,138,4)" fg:x="281" fg:w="19"/><text x="0.9618%" y="383.50"></text></g><g><title>main::parser::parsed_graph (204 samples, 0.52%)</title><rect x="0.4103%" y="517" width="0.5167%" height="15" fill="rgb(250,191,14)" fg:x="162" fg:w="204"/><text x="0.6603%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (204 samples, 0.52%)</title><rect x="0.4103%" y="501" width="0.5167%" height="15" fill="rgb(239,60,40)" fg:x="162" fg:w="204"/><text x="0.6603%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (204 samples, 0.52%)</title><rect x="0.4103%" y="485" width="0.5167%" height="15" fill="rgb(206,27,48)" fg:x="162" fg:w="204"/><text x="0.6603%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (125 samples, 0.32%)</title><rect x="0.6104%" y="469" width="0.3166%" height="15" fill="rgb(225,35,8)" fg:x="241" fg:w="125"/><text x="0.8604%" y="479.50"></text></g><g><title>main::parser::parsed_graph::_{{closure}} (125 samples, 0.32%)</title><rect x="0.6104%" y="453" width="0.3166%" height="15" fill="rgb(250,213,24)" fg:x="241" fg:w="125"/><text x="0.8604%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (66 samples, 0.17%)</title><rect x="0.7599%" y="437" width="0.1672%" height="15" fill="rgb(247,123,22)" fg:x="300" fg:w="66"/><text x="1.0099%" y="447.50"></text></g><g><title>[[stack]] (335 samples, 0.85%)</title><rect x="0.0811%" y="533" width="0.8485%" height="15" fill="rgb(231,138,38)" fg:x="32" fg:w="335"/><text x="0.3311%" y="543.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (247 samples, 0.63%)</title><rect x="0.9296%" y="517" width="0.6256%" height="15" fill="rgb(231,145,46)" fg:x="367" fg:w="247"/><text x="1.1796%" y="527.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (247 samples, 0.63%)</title><rect x="0.9296%" y="501" width="0.6256%" height="15" fill="rgb(251,118,11)" fg:x="367" fg:w="247"/><text x="1.1796%" y="511.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (77 samples, 0.20%)</title><rect x="1.3602%" y="485" width="0.1950%" height="15" fill="rgb(217,147,25)" fg:x="537" fg:w="77"/><text x="1.6102%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (77 samples, 0.20%)</title><rect x="1.3602%" y="469" width="0.1950%" height="15" fill="rgb(247,81,37)" fg:x="537" fg:w="77"/><text x="1.6102%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (77 samples, 0.20%)</title><rect x="1.3602%" y="453" width="0.1950%" height="15" fill="rgb(209,12,38)" fg:x="537" fg:w="77"/><text x="1.6102%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (77 samples, 0.20%)</title><rect x="1.3602%" y="437" width="0.1950%" height="15" fill="rgb(227,1,9)" fg:x="537" fg:w="77"/><text x="1.6102%" y="447.50"></text></g><g><title>[anon] (277 samples, 0.70%)</title><rect x="0.9296%" y="533" width="0.7016%" height="15" fill="rgb(248,47,43)" fg:x="367" fg:w="277"/><text x="1.1796%" y="543.50"></text></g><g><title>realloc (28 samples, 0.07%)</title><rect x="1.5603%" y="517" width="0.0709%" height="15" fill="rgb(221,10,30)" fg:x="616" fg:w="28"/><text x="1.8103%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.01%)</title><rect x="1.6616%" y="469" width="0.0127%" height="15" fill="rgb(210,229,1)" fg:x="656" fg:w="5"/><text x="1.9116%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (18 samples, 0.05%)</title><rect x="1.6312%" y="533" width="0.0456%" height="15" fill="rgb(222,148,37)" fg:x="644" fg:w="18"/><text x="1.8812%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 0.03%)</title><rect x="1.6515%" y="517" width="0.0253%" height="15" fill="rgb(234,67,33)" fg:x="652" fg:w="10"/><text x="1.9015%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.02%)</title><rect x="1.6565%" y="501" width="0.0203%" height="15" fill="rgb(247,98,35)" fg:x="654" fg:w="8"/><text x="1.9065%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.02%)</title><rect x="1.6565%" y="485" width="0.0203%" height="15" fill="rgb(247,138,52)" fg:x="654" fg:w="8"/><text x="1.9065%" y="495.50"></text></g><g><title>[libc.so.6] (20 samples, 0.05%)</title><rect x="1.6768%" y="533" width="0.0507%" height="15" fill="rgb(213,79,30)" fg:x="662" fg:w="20"/><text x="1.9268%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (26 samples, 0.07%)</title><rect x="1.9504%" y="485" width="0.0659%" height="15" fill="rgb(246,177,23)" fg:x="770" fg:w="26"/><text x="2.2004%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (26 samples, 0.07%)</title><rect x="1.9504%" y="469" width="0.0659%" height="15" fill="rgb(230,62,27)" fg:x="770" fg:w="26"/><text x="2.2004%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.03%)</title><rect x="1.9909%" y="453" width="0.0253%" height="15" fill="rgb(216,154,8)" fg:x="786" fg:w="10"/><text x="2.2409%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.03%)</title><rect x="1.9909%" y="437" width="0.0253%" height="15" fill="rgb(244,35,45)" fg:x="786" fg:w="10"/><text x="2.2409%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (125 samples, 0.32%)</title><rect x="1.7275%" y="517" width="0.3166%" height="15" fill="rgb(251,115,12)" fg:x="682" fg:w="125"/><text x="1.9775%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (57 samples, 0.14%)</title><rect x="1.8997%" y="501" width="0.1444%" height="15" fill="rgb(240,54,50)" fg:x="750" fg:w="57"/><text x="2.1497%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.03%)</title><rect x="2.0162%" y="485" width="0.0279%" height="15" fill="rgb(233,84,52)" fg:x="796" fg:w="11"/><text x="2.2662%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.03%)</title><rect x="2.0162%" y="469" width="0.0279%" height="15" fill="rgb(207,117,47)" fg:x="796" fg:w="11"/><text x="2.2662%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.03%)</title><rect x="2.0162%" y="453" width="0.0279%" height="15" fill="rgb(249,43,39)" fg:x="796" fg:w="11"/><text x="2.2662%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (11 samples, 0.03%)</title><rect x="2.0162%" y="437" width="0.0279%" height="15" fill="rgb(209,38,44)" fg:x="796" fg:w="11"/><text x="2.2662%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.03%)</title><rect x="2.0162%" y="421" width="0.0279%" height="15" fill="rgb(236,212,23)" fg:x="796" fg:w="11"/><text x="2.2662%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.03%)</title><rect x="2.0162%" y="405" width="0.0279%" height="15" fill="rgb(242,79,21)" fg:x="796" fg:w="11"/><text x="2.2662%" y="415.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.03%)</title><rect x="2.0162%" y="389" width="0.0279%" height="15" fill="rgb(211,96,35)" fg:x="796" fg:w="11"/><text x="2.2662%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (41 samples, 0.10%)</title><rect x="3.0876%" y="469" width="0.1039%" height="15" fill="rgb(253,215,40)" fg:x="1219" fg:w="41"/><text x="3.3376%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (41 samples, 0.10%)</title><rect x="3.0876%" y="453" width="0.1039%" height="15" fill="rgb(211,81,21)" fg:x="1219" fg:w="41"/><text x="3.3376%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (41 samples, 0.10%)</title><rect x="3.0876%" y="437" width="0.1039%" height="15" fill="rgb(208,190,38)" fg:x="1219" fg:w="41"/><text x="3.3376%" y="447.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (492 samples, 1.25%)</title><rect x="2.0441%" y="517" width="1.2462%" height="15" fill="rgb(235,213,38)" fg:x="807" fg:w="492"/><text x="2.2941%" y="527.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (198 samples, 0.50%)</title><rect x="2.7888%" y="501" width="0.5015%" height="15" fill="rgb(237,122,38)" fg:x="1101" fg:w="198"/><text x="3.0388%" y="511.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (80 samples, 0.20%)</title><rect x="3.0876%" y="485" width="0.2026%" height="15" fill="rgb(244,218,35)" fg:x="1219" fg:w="80"/><text x="3.3376%" y="495.50"></text></g><g><title>core::slice::memchr::memchr (39 samples, 0.10%)</title><rect x="3.1915%" y="469" width="0.0988%" height="15" fill="rgb(240,68,47)" fg:x="1260" fg:w="39"/><text x="3.4415%" y="479.50"></text></g><g><title>[libc.so.6] (41 samples, 0.10%)</title><rect x="3.2903%" y="517" width="0.1039%" height="15" fill="rgb(210,16,53)" fg:x="1299" fg:w="41"/><text x="3.5403%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.04%)</title><rect x="3.3967%" y="517" width="0.0431%" height="15" fill="rgb(235,124,12)" fg:x="1341" fg:w="17"/><text x="3.6467%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.01%)</title><rect x="3.4397%" y="517" width="0.0127%" height="15" fill="rgb(224,169,11)" fg:x="1358" fg:w="5"/><text x="3.6897%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.01%)</title><rect x="3.4422%" y="501" width="0.0101%" height="15" fill="rgb(250,166,2)" fg:x="1359" fg:w="4"/><text x="3.6922%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (27 samples, 0.07%)</title><rect x="3.4524%" y="517" width="0.0684%" height="15" fill="rgb(242,216,29)" fg:x="1363" fg:w="27"/><text x="3.7024%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11 samples, 0.03%)</title><rect x="3.4929%" y="501" width="0.0279%" height="15" fill="rgb(230,116,27)" fg:x="1379" fg:w="11"/><text x="3.7429%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (11 samples, 0.03%)</title><rect x="3.4929%" y="485" width="0.0279%" height="15" fill="rgb(228,99,48)" fg:x="1379" fg:w="11"/><text x="3.7429%" y="495.50"></text></g><g><title>alloc::alloc::realloc (11 samples, 0.03%)</title><rect x="3.4929%" y="469" width="0.0279%" height="15" fill="rgb(253,11,6)" fg:x="1379" fg:w="11"/><text x="3.7429%" y="479.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for isize&gt;::from_str (19 samples, 0.05%)</title><rect x="3.5208%" y="517" width="0.0481%" height="15" fill="rgb(247,143,39)" fg:x="1390" fg:w="19"/><text x="3.7708%" y="527.50"></text></g><g><title>[unknown] (777 samples, 1.97%)</title><rect x="1.7275%" y="533" width="1.9681%" height="15" fill="rgb(236,97,10)" fg:x="682" fg:w="777"/><text x="1.9775%" y="543.50">[..</text></g><g><title>malloc (42 samples, 0.11%)</title><rect x="3.5892%" y="517" width="0.1064%" height="15" fill="rgb(233,208,19)" fg:x="1417" fg:w="42"/><text x="3.8392%" y="527.50"></text></g><g><title>__rdl_dealloc (35 samples, 0.09%)</title><rect x="3.6955%" y="533" width="0.0887%" height="15" fill="rgb(216,164,2)" fg:x="1459" fg:w="35"/><text x="3.9455%" y="543.50"></text></g><g><title>__rdl_realloc (8 samples, 0.02%)</title><rect x="3.7842%" y="533" width="0.0203%" height="15" fill="rgb(220,129,5)" fg:x="1494" fg:w="8"/><text x="4.0342%" y="543.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.05%)</title><rect x="3.8298%" y="309" width="0.0481%" height="15" fill="rgb(242,17,10)" fg:x="1512" fg:w="19"/><text x="4.0798%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (65 samples, 0.16%)</title><rect x="3.8779%" y="277" width="0.1646%" height="15" fill="rgb(242,107,0)" fg:x="1531" fg:w="65"/><text x="4.1279%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (146 samples, 0.37%)</title><rect x="3.8298%" y="373" width="0.3698%" height="15" fill="rgb(251,28,31)" fg:x="1512" fg:w="146"/><text x="4.0798%" y="383.50"></text></g><g><title>main::min_cost::_{{closure}} (146 samples, 0.37%)</title><rect x="3.8298%" y="357" width="0.3698%" height="15" fill="rgb(233,223,10)" fg:x="1512" fg:w="146"/><text x="4.0798%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (146 samples, 0.37%)</title><rect x="3.8298%" y="341" width="0.3698%" height="15" fill="rgb(215,21,27)" fg:x="1512" fg:w="146"/><text x="4.0798%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (146 samples, 0.37%)</title><rect x="3.8298%" y="325" width="0.3698%" height="15" fill="rgb(232,23,21)" fg:x="1512" fg:w="146"/><text x="4.0798%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (127 samples, 0.32%)</title><rect x="3.8779%" y="309" width="0.3217%" height="15" fill="rgb(244,5,23)" fg:x="1531" fg:w="127"/><text x="4.1279%" y="319.50"></text></g><g><title>main::min_cost::_{{closure}}::_{{closure}} (127 samples, 0.32%)</title><rect x="3.8779%" y="293" width="0.3217%" height="15" fill="rgb(226,81,46)" fg:x="1531" fg:w="127"/><text x="4.1279%" y="303.50"></text></g><g><title>&lt;i64 as core::ops::arith::SubAssign&gt;::sub_assign (62 samples, 0.16%)</title><rect x="4.0426%" y="277" width="0.1570%" height="15" fill="rgb(247,70,30)" fg:x="1596" fg:w="62"/><text x="4.2926%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.04%)</title><rect x="4.2553%" y="245" width="0.0355%" height="15" fill="rgb(212,68,19)" fg:x="1680" fg:w="14"/><text x="4.5053%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.12%)</title><rect x="4.1996%" y="293" width="0.1165%" height="15" fill="rgb(240,187,13)" fg:x="1658" fg:w="46"/><text x="4.4496%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.06%)</title><rect x="4.2553%" y="277" width="0.0608%" height="15" fill="rgb(223,113,26)" fg:x="1680" fg:w="24"/><text x="4.5053%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.06%)</title><rect x="4.2553%" y="261" width="0.0608%" height="15" fill="rgb(206,192,2)" fg:x="1680" fg:w="24"/><text x="4.5053%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (10 samples, 0.03%)</title><rect x="4.2908%" y="245" width="0.0253%" height="15" fill="rgb(241,108,4)" fg:x="1694" fg:w="10"/><text x="4.5408%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (10 samples, 0.03%)</title><rect x="4.2908%" y="229" width="0.0253%" height="15" fill="rgb(247,173,49)" fg:x="1694" fg:w="10"/><text x="4.5408%" y="239.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (39 samples, 0.10%)</title><rect x="4.3161%" y="277" width="0.0988%" height="15" fill="rgb(224,114,35)" fg:x="1704" fg:w="39"/><text x="4.5661%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (488 samples, 1.24%)</title><rect x="4.3161%" y="293" width="1.2361%" height="15" fill="rgb(245,159,27)" fg:x="1704" fg:w="488"/><text x="4.5661%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::clone::Clone for [T: N]&gt;::clone (449 samples, 1.14%)</title><rect x="4.4149%" y="277" width="1.1373%" height="15" fill="rgb(245,172,44)" fg:x="1743" fg:w="449"/><text x="4.6649%" y="287.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (449 samples, 1.14%)</title><rect x="4.4149%" y="261" width="1.1373%" height="15" fill="rgb(236,23,11)" fg:x="1743" fg:w="449"/><text x="4.6649%" y="271.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (913 samples, 2.31%)</title><rect x="4.1996%" y="373" width="2.3126%" height="15" fill="rgb(205,117,38)" fg:x="1658" fg:w="913"/><text x="4.4496%" y="383.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (913 samples, 2.31%)</title><rect x="4.1996%" y="357" width="2.3126%" height="15" fill="rgb(237,72,25)" fg:x="1658" fg:w="913"/><text x="4.4496%" y="367.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (913 samples, 2.31%)</title><rect x="4.1996%" y="341" width="2.3126%" height="15" fill="rgb(244,70,9)" fg:x="1658" fg:w="913"/><text x="4.4496%" y="351.50">a..</text></g><g><title>alloc::slice::hack::to_vec (913 samples, 2.31%)</title><rect x="4.1996%" y="325" width="2.3126%" height="15" fill="rgb(217,125,39)" fg:x="1658" fg:w="913"/><text x="4.4496%" y="335.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (913 samples, 2.31%)</title><rect x="4.1996%" y="309" width="2.3126%" height="15" fill="rgb(235,36,10)" fg:x="1658" fg:w="913"/><text x="4.4496%" y="319.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (379 samples, 0.96%)</title><rect x="5.5522%" y="293" width="0.9600%" height="15" fill="rgb(251,123,47)" fg:x="2192" fg:w="379"/><text x="5.8022%" y="303.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (123 samples, 0.31%)</title><rect x="7.2416%" y="309" width="0.3116%" height="15" fill="rgb(221,13,13)" fg:x="2859" fg:w="123"/><text x="7.4916%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (24 samples, 0.06%)</title><rect x="7.5532%" y="309" width="0.0608%" height="15" fill="rgb(238,131,9)" fg:x="2982" fg:w="24"/><text x="7.8032%" y="319.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (21 samples, 0.05%)</title><rect x="7.6140%" y="309" width="0.0532%" height="15" fill="rgb(211,50,8)" fg:x="3006" fg:w="21"/><text x="7.8640%" y="319.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (21 samples, 0.05%)</title><rect x="7.6140%" y="293" width="0.0532%" height="15" fill="rgb(245,182,24)" fg:x="3006" fg:w="21"/><text x="7.8640%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (472 samples, 1.20%)</title><rect x="6.5122%" y="373" width="1.1955%" height="15" fill="rgb(242,14,37)" fg:x="2571" fg:w="472"/><text x="6.7622%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (472 samples, 1.20%)</title><rect x="6.5122%" y="357" width="1.1955%" height="15" fill="rgb(246,228,12)" fg:x="2571" fg:w="472"/><text x="6.7622%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (472 samples, 1.20%)</title><rect x="6.5122%" y="341" width="1.1955%" height="15" fill="rgb(213,55,15)" fg:x="2571" fg:w="472"/><text x="6.7622%" y="351.50"></text></g><g><title>main::min_cost::_{{closure}} (472 samples, 1.20%)</title><rect x="6.5122%" y="325" width="1.1955%" height="15" fill="rgb(209,9,3)" fg:x="2571" fg:w="472"/><text x="6.7622%" y="335.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight_mut (16 samples, 0.04%)</title><rect x="7.6672%" y="309" width="0.0405%" height="15" fill="rgb(230,59,30)" fg:x="3027" fg:w="16"/><text x="7.9172%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (9 samples, 0.02%)</title><rect x="7.6849%" y="293" width="0.0228%" height="15" fill="rgb(209,121,21)" fg:x="3034" fg:w="9"/><text x="7.9349%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (9 samples, 0.02%)</title><rect x="7.6849%" y="277" width="0.0228%" height="15" fill="rgb(220,109,13)" fg:x="3034" fg:w="9"/><text x="7.9349%" y="287.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (73 samples, 0.18%)</title><rect x="8.4245%" y="357" width="0.1849%" height="15" fill="rgb(232,18,1)" fg:x="3326" fg:w="73"/><text x="8.6745%" y="367.50"></text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (6 samples, 0.02%)</title><rect x="8.6094%" y="357" width="0.0152%" height="15" fill="rgb(215,41,42)" fg:x="3399" fg:w="6"/><text x="8.8594%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (44 samples, 0.11%)</title><rect x="8.6246%" y="357" width="0.1114%" height="15" fill="rgb(224,123,36)" fg:x="3405" fg:w="44"/><text x="8.8746%" y="367.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (18 samples, 0.05%)</title><rect x="8.7361%" y="325" width="0.0456%" height="15" fill="rgb(240,125,3)" fg:x="3449" fg:w="18"/><text x="8.9861%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (18 samples, 0.05%)</title><rect x="8.7361%" y="309" width="0.0456%" height="15" fill="rgb(205,98,50)" fg:x="3449" fg:w="18"/><text x="8.9861%" y="319.50"></text></g><g><title>main::_best_arc (430 samples, 1.09%)</title><rect x="7.7077%" y="373" width="1.0892%" height="15" fill="rgb(205,185,37)" fg:x="3043" fg:w="430"/><text x="7.9577%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (24 samples, 0.06%)</title><rect x="8.7361%" y="357" width="0.0608%" height="15" fill="rgb(238,207,15)" fg:x="3449" fg:w="24"/><text x="8.9861%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (24 samples, 0.06%)</title><rect x="8.7361%" y="341" width="0.0608%" height="15" fill="rgb(213,199,42)" fg:x="3449" fg:w="24"/><text x="8.9861%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (6 samples, 0.02%)</title><rect x="8.7817%" y="325" width="0.0152%" height="15" fill="rgb(235,201,11)" fg:x="3467" fg:w="6"/><text x="9.0317%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (2,150 samples, 5.45%)</title><rect x="36.9250%" y="357" width="5.4458%" height="15" fill="rgb(207,46,11)" fg:x="14578" fg:w="2150"/><text x="37.1750%" y="367.50">&lt;i64 as..</text></g><g><title>&lt;i64 as core::ops::arith::Mul&gt;::mul (145 samples, 0.37%)</title><rect x="42.3708%" y="357" width="0.3673%" height="15" fill="rgb(241,35,35)" fg:x="16728" fg:w="145"/><text x="42.6208%" y="367.50"></text></g><g><title>&lt;i64 as num_traits::sign::Signed&gt;::is_negative (350 samples, 0.89%)</title><rect x="42.7381%" y="357" width="0.8865%" height="15" fill="rgb(243,32,47)" fg:x="16873" fg:w="350"/><text x="42.9881%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (1,530 samples, 3.88%)</title><rect x="43.6246%" y="357" width="3.8754%" height="15" fill="rgb(247,202,23)" fg:x="17223" fg:w="1530"/><text x="43.8746%" y="367.50">core..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (514 samples, 1.30%)</title><rect x="47.5127%" y="325" width="1.3019%" height="15" fill="rgb(219,102,11)" fg:x="18758" fg:w="514"/><text x="47.7627%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (514 samples, 1.30%)</title><rect x="47.5127%" y="309" width="1.3019%" height="15" fill="rgb(243,110,44)" fg:x="18758" fg:w="514"/><text x="47.7627%" y="319.50"></text></g><g><title>main::_block_search_v1 (15,948 samples, 40.40%)</title><rect x="8.7969%" y="373" width="40.3951%" height="15" fill="rgb(222,74,54)" fg:x="3473" fg:w="15948"/><text x="9.0469%" y="383.50">main::_block_search_v1</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (668 samples, 1.69%)</title><rect x="47.5000%" y="357" width="1.6920%" height="15" fill="rgb(216,99,12)" fg:x="18753" fg:w="668"/><text x="47.7500%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (668 samples, 1.69%)</title><rect x="47.5000%" y="341" width="1.6920%" height="15" fill="rgb(226,22,26)" fg:x="18753" fg:w="668"/><text x="47.7500%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (149 samples, 0.38%)</title><rect x="48.8146%" y="325" width="0.3774%" height="15" fill="rgb(217,163,10)" fg:x="19272" fg:w="149"/><text x="49.0646%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (49 samples, 0.12%)</title><rect x="50.6864%" y="357" width="0.1241%" height="15" fill="rgb(213,25,53)" fg:x="20011" fg:w="49"/><text x="50.9364%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (49 samples, 0.12%)</title><rect x="50.6864%" y="341" width="0.1241%" height="15" fill="rgb(252,105,26)" fg:x="20011" fg:w="49"/><text x="50.9364%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (49 samples, 0.12%)</title><rect x="50.6864%" y="325" width="0.1241%" height="15" fill="rgb(220,39,43)" fg:x="20011" fg:w="49"/><text x="50.9364%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::arith::Sub&gt;::sub (23 samples, 0.06%)</title><rect x="50.8156%" y="357" width="0.0583%" height="15" fill="rgb(229,68,48)" fg:x="20062" fg:w="23"/><text x="51.0656%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::lt (4 samples, 0.01%)</title><rect x="50.8865%" y="357" width="0.0101%" height="15" fill="rgb(252,8,32)" fg:x="20090" fg:w="4"/><text x="51.1365%" y="367.50"></text></g><g><title>main::_compute_flowchange (677 samples, 1.71%)</title><rect x="49.1920%" y="373" width="1.7148%" height="15" fill="rgb(223,20,43)" fg:x="19421" fg:w="677"/><text x="49.4420%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (4 samples, 0.01%)</title><rect x="50.8967%" y="357" width="0.0101%" height="15" fill="rgb(229,81,49)" fg:x="20094" fg:w="4"/><text x="51.1467%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.03%)</title><rect x="50.9068%" y="309" width="0.0329%" height="15" fill="rgb(236,28,36)" fg:x="20098" fg:w="13"/><text x="51.1568%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.03%)</title><rect x="50.9068%" y="293" width="0.0329%" height="15" fill="rgb(249,185,26)" fg:x="20098" fg:w="13"/><text x="51.1568%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.03%)</title><rect x="50.9068%" y="277" width="0.0329%" height="15" fill="rgb(249,174,33)" fg:x="20098" fg:w="13"/><text x="51.1568%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (95 samples, 0.24%)</title><rect x="50.9068%" y="325" width="0.2406%" height="15" fill="rgb(233,201,37)" fg:x="20098" fg:w="95"/><text x="51.1568%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (82 samples, 0.21%)</title><rect x="50.9397%" y="309" width="0.2077%" height="15" fill="rgb(221,78,26)" fg:x="20111" fg:w="82"/><text x="51.1897%" y="319.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (82 samples, 0.21%)</title><rect x="50.9397%" y="293" width="0.2077%" height="15" fill="rgb(250,127,30)" fg:x="20111" fg:w="82"/><text x="51.1897%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.05%)</title><rect x="53.7690%" y="293" width="0.0481%" height="15" fill="rgb(230,49,44)" fg:x="21228" fg:w="19"/><text x="54.0190%" y="303.50"></text></g><g><title>core::ptr::write (19 samples, 0.05%)</title><rect x="53.7690%" y="277" width="0.0481%" height="15" fill="rgb(229,67,23)" fg:x="21228" fg:w="19"/><text x="54.0190%" y="287.50"></text></g><g><title>petgraph::graph_impl::EdgeIndex&lt;Ix&gt;::index (8 samples, 0.02%)</title><rect x="53.8171%" y="293" width="0.0203%" height="15" fill="rgb(249,83,47)" fg:x="21247" fg:w="8"/><text x="54.0671%" y="303.50"></text></g><g><title>&lt;u32 as petgraph::graph_impl::IndexType&gt;::index (8 samples, 0.02%)</title><rect x="53.8171%" y="277" width="0.0203%" height="15" fill="rgb(215,43,3)" fg:x="21247" fg:w="8"/><text x="54.0671%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,158 samples, 2.93%)</title><rect x="50.9068%" y="357" width="2.9331%" height="15" fill="rgb(238,154,13)" fg:x="20098" fg:w="1158"/><text x="51.1568%" y="367.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,158 samples, 2.93%)</title><rect x="50.9068%" y="341" width="2.9331%" height="15" fill="rgb(219,56,2)" fg:x="20098" fg:w="1158"/><text x="51.1568%" y="351.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1,063 samples, 2.69%)</title><rect x="51.1474%" y="325" width="2.6925%" height="15" fill="rgb(233,0,4)" fg:x="20193" fg:w="1063"/><text x="51.3974%" y="335.50">co..</text></g><g><title>main::initialization::_{{closure}} (1,063 samples, 2.69%)</title><rect x="51.1474%" y="309" width="2.6925%" height="15" fill="rgb(235,30,7)" fg:x="20193" fg:w="1063"/><text x="51.3974%" y="319.50">ma..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::cmp::PartialEq&gt;::eq (3,988 samples, 10.10%)</title><rect x="54.0375%" y="325" width="10.1013%" height="15" fill="rgb(250,79,13)" fg:x="21334" fg:w="3988"/><text x="54.2875%" y="335.50">&lt;petgraph::grap..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (3,988 samples, 10.10%)</title><rect x="54.0375%" y="309" width="10.1013%" height="15" fill="rgb(211,146,34)" fg:x="21334" fg:w="3988"/><text x="54.2875%" y="319.50">core::cmp::impl..</text></g><g><title>main::initialization (5,234 samples, 13.26%)</title><rect x="50.9068%" y="373" width="13.2573%" height="15" fill="rgb(228,22,38)" fg:x="20098" fg:w="5234"/><text x="51.1568%" y="383.50">main::initialization</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (4,074 samples, 10.32%)</title><rect x="53.8450%" y="357" width="10.3191%" height="15" fill="rgb(235,168,5)" fg:x="21258" fg:w="4074"/><text x="54.0950%" y="367.50">petgraph::graph..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (4,074 samples, 10.32%)</title><rect x="53.8450%" y="341" width="10.3191%" height="15" fill="rgb(221,155,16)" fg:x="21258" fg:w="4074"/><text x="54.0950%" y="351.50">petgraph::graph..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (10 samples, 0.03%)</title><rect x="64.1388%" y="325" width="0.0253%" height="15" fill="rgb(215,215,53)" fg:x="25322" fg:w="10"/><text x="64.3888%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (10 samples, 0.03%)</title><rect x="64.1388%" y="309" width="0.0253%" height="15" fill="rgb(223,4,10)" fg:x="25322" fg:w="10"/><text x="64.3888%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.02%)</title><rect x="64.5441%" y="357" width="0.0152%" height="15" fill="rgb(234,103,6)" fg:x="25482" fg:w="6"/><text x="64.7941%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.02%)</title><rect x="64.5441%" y="341" width="0.0152%" height="15" fill="rgb(227,97,0)" fg:x="25482" fg:w="6"/><text x="64.7941%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.02%)</title><rect x="64.5441%" y="325" width="0.0152%" height="15" fill="rgb(234,150,53)" fg:x="25482" fg:w="6"/><text x="64.7941%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (100 samples, 0.25%)</title><rect x="64.5669%" y="357" width="0.2533%" height="15" fill="rgb(228,201,54)" fg:x="25491" fg:w="100"/><text x="64.8169%" y="367.50"></text></g><g><title>main::update_node_potentials (262 samples, 0.66%)</title><rect x="64.1641%" y="373" width="0.6636%" height="15" fill="rgb(222,22,37)" fg:x="25332" fg:w="262"/><text x="64.4141%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.02%)</title><rect x="65.8561%" y="357" width="0.0228%" height="15" fill="rgb(237,53,32)" fg:x="26000" fg:w="9"/><text x="66.1061%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.02%)</title><rect x="65.8561%" y="341" width="0.0228%" height="15" fill="rgb(233,25,53)" fg:x="26000" fg:w="9"/><text x="66.1061%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.02%)</title><rect x="65.8561%" y="325" width="0.0228%" height="15" fill="rgb(210,40,34)" fg:x="26000" fg:w="9"/><text x="66.1061%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.03%)</title><rect x="66.2994%" y="309" width="0.0329%" height="15" fill="rgb(241,220,44)" fg:x="26175" fg:w="13"/><text x="66.5494%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.03%)</title><rect x="66.2994%" y="293" width="0.0329%" height="15" fill="rgb(235,28,35)" fg:x="26175" fg:w="13"/><text x="66.5494%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.03%)</title><rect x="66.2994%" y="277" width="0.0329%" height="15" fill="rgb(210,56,17)" fg:x="26175" fg:w="13"/><text x="66.5494%" y="287.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (23 samples, 0.06%)</title><rect x="66.3323%" y="309" width="0.0583%" height="15" fill="rgb(224,130,29)" fg:x="26188" fg:w="23"/><text x="66.5823%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (209 samples, 0.53%)</title><rect x="65.8815%" y="357" width="0.5294%" height="15" fill="rgb(235,212,8)" fg:x="26010" fg:w="209"/><text x="66.1315%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (209 samples, 0.53%)</title><rect x="65.8815%" y="341" width="0.5294%" height="15" fill="rgb(223,33,50)" fg:x="26010" fg:w="209"/><text x="66.1315%" y="351.50"></text></g><g><title>main::update_sptree::_{{closure}} (209 samples, 0.53%)</title><rect x="65.8815%" y="325" width="0.5294%" height="15" fill="rgb(219,149,13)" fg:x="26010" fg:w="209"/><text x="66.1315%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.02%)</title><rect x="66.3906%" y="309" width="0.0203%" height="15" fill="rgb(250,156,29)" fg:x="26211" fg:w="8"/><text x="66.6406%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.02%)</title><rect x="66.3906%" y="293" width="0.0203%" height="15" fill="rgb(216,193,19)" fg:x="26211" fg:w="8"/><text x="66.6406%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.02%)</title><rect x="66.3906%" y="277" width="0.0203%" height="15" fill="rgb(216,135,14)" fg:x="26211" fg:w="8"/><text x="66.6406%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.02%)</title><rect x="66.3906%" y="261" width="0.0203%" height="15" fill="rgb(241,47,5)" fg:x="26211" fg:w="8"/><text x="66.6406%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8 samples, 0.02%)</title><rect x="66.3906%" y="245" width="0.0203%" height="15" fill="rgb(233,42,35)" fg:x="26211" fg:w="8"/><text x="66.6406%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (8 samples, 0.02%)</title><rect x="66.3906%" y="229" width="0.0203%" height="15" fill="rgb(231,13,6)" fg:x="26211" fg:w="8"/><text x="66.6406%" y="239.50"></text></g><g><title>alloc::alloc::realloc (8 samples, 0.02%)</title><rect x="66.3906%" y="213" width="0.0203%" height="15" fill="rgb(207,181,40)" fg:x="26211" fg:w="8"/><text x="66.6406%" y="223.50"></text></g><g><title>realloc (8 samples, 0.02%)</title><rect x="66.3906%" y="197" width="0.0203%" height="15" fill="rgb(254,173,49)" fg:x="26211" fg:w="8"/><text x="66.6406%" y="207.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="66.3931%" y="181" width="0.0177%" height="15" fill="rgb(221,1,38)" fg:x="26212" fg:w="7"/><text x="66.6431%" y="191.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="66.3931%" y="165" width="0.0177%" height="15" fill="rgb(206,124,46)" fg:x="26212" fg:w="7"/><text x="66.6431%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.03%)</title><rect x="66.4159%" y="341" width="0.0304%" height="15" fill="rgb(249,21,11)" fg:x="26221" fg:w="12"/><text x="66.6659%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.01%)</title><rect x="66.4336%" y="325" width="0.0127%" height="15" fill="rgb(222,201,40)" fg:x="26228" fg:w="5"/><text x="66.6836%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (23 samples, 0.06%)</title><rect x="66.5451%" y="325" width="0.0583%" height="15" fill="rgb(235,61,29)" fg:x="26272" fg:w="23"/><text x="66.7951%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (23 samples, 0.06%)</title><rect x="66.5451%" y="309" width="0.0583%" height="15" fill="rgb(219,207,3)" fg:x="26272" fg:w="23"/><text x="66.7951%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (23 samples, 0.06%)</title><rect x="66.5451%" y="293" width="0.0583%" height="15" fill="rgb(222,56,46)" fg:x="26272" fg:w="23"/><text x="66.7951%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (110 samples, 0.28%)</title><rect x="66.4108%" y="357" width="0.2786%" height="15" fill="rgb(239,76,54)" fg:x="26219" fg:w="110"/><text x="66.6608%" y="367.50"></text></g><g><title>main::update_sptree::_{{closure}} (96 samples, 0.24%)</title><rect x="66.4463%" y="341" width="0.2432%" height="15" fill="rgb(231,124,27)" fg:x="26233" fg:w="96"/><text x="66.6963%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (34 samples, 0.09%)</title><rect x="66.6033%" y="325" width="0.0861%" height="15" fill="rgb(249,195,6)" fg:x="26295" fg:w="34"/><text x="66.8533%" y="335.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (6 samples, 0.02%)</title><rect x="66.6895%" y="357" width="0.0152%" height="15" fill="rgb(237,174,47)" fg:x="26329" fg:w="6"/><text x="66.9395%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (50 samples, 0.13%)</title><rect x="66.7300%" y="293" width="0.1266%" height="15" fill="rgb(206,201,31)" fg:x="26345" fg:w="50"/><text x="66.9800%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (50 samples, 0.13%)</title><rect x="66.7300%" y="277" width="0.1266%" height="15" fill="rgb(231,57,52)" fg:x="26345" fg:w="50"/><text x="66.9800%" y="287.50"></text></g><g><title>alloc::alloc::realloc (48 samples, 0.12%)</title><rect x="66.7351%" y="261" width="0.1216%" height="15" fill="rgb(248,177,22)" fg:x="26347" fg:w="48"/><text x="66.9851%" y="271.50"></text></g><g><title>realloc (48 samples, 0.12%)</title><rect x="66.7351%" y="245" width="0.1216%" height="15" fill="rgb(215,211,37)" fg:x="26347" fg:w="48"/><text x="66.9851%" y="255.50"></text></g><g><title>[libc.so.6] (35 samples, 0.09%)</title><rect x="66.7680%" y="229" width="0.0887%" height="15" fill="rgb(241,128,51)" fg:x="26360" fg:w="35"/><text x="67.0180%" y="239.50"></text></g><g><title>[libc.so.6] (31 samples, 0.08%)</title><rect x="66.7781%" y="213" width="0.0785%" height="15" fill="rgb(227,165,31)" fg:x="26364" fg:w="31"/><text x="67.0281%" y="223.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="66.8414%" y="197" width="0.0152%" height="15" fill="rgb(228,167,24)" fg:x="26389" fg:w="6"/><text x="67.0914%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (55 samples, 0.14%)</title><rect x="66.7249%" y="341" width="0.1393%" height="15" fill="rgb(228,143,12)" fg:x="26343" fg:w="55"/><text x="66.9749%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (55 samples, 0.14%)</title><rect x="66.7249%" y="325" width="0.1393%" height="15" fill="rgb(249,149,8)" fg:x="26343" fg:w="55"/><text x="66.9749%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (53 samples, 0.13%)</title><rect x="66.7300%" y="309" width="0.1342%" height="15" fill="rgb(243,35,44)" fg:x="26345" fg:w="53"/><text x="66.9800%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (79 samples, 0.20%)</title><rect x="66.7097%" y="357" width="0.2001%" height="15" fill="rgb(246,89,9)" fg:x="26337" fg:w="79"/><text x="66.9597%" y="367.50"></text></g><g><title>core::ptr::write (18 samples, 0.05%)</title><rect x="66.8642%" y="341" width="0.0456%" height="15" fill="rgb(233,213,13)" fg:x="26398" fg:w="18"/><text x="67.1142%" y="351.50"></text></g><g><title>alloc::vec::from_elem (24 samples, 0.06%)</title><rect x="66.9098%" y="357" width="0.0608%" height="15" fill="rgb(233,141,41)" fg:x="26416" fg:w="24"/><text x="67.1598%" y="367.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (24 samples, 0.06%)</title><rect x="66.9098%" y="341" width="0.0608%" height="15" fill="rgb(239,167,4)" fg:x="26416" fg:w="24"/><text x="67.1598%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22 samples, 0.06%)</title><rect x="66.9149%" y="325" width="0.0557%" height="15" fill="rgb(209,217,16)" fg:x="26418" fg:w="22"/><text x="67.1649%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.06%)</title><rect x="66.9149%" y="309" width="0.0557%" height="15" fill="rgb(219,88,35)" fg:x="26418" fg:w="22"/><text x="67.1649%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (22 samples, 0.06%)</title><rect x="66.9149%" y="293" width="0.0557%" height="15" fill="rgb(220,193,23)" fg:x="26418" fg:w="22"/><text x="67.1649%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.06%)</title><rect x="66.9149%" y="277" width="0.0557%" height="15" fill="rgb(230,90,52)" fg:x="26418" fg:w="22"/><text x="67.1649%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.06%)</title><rect x="66.9149%" y="261" width="0.0557%" height="15" fill="rgb(252,106,19)" fg:x="26418" fg:w="22"/><text x="67.1649%" y="271.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.06%)</title><rect x="66.9149%" y="245" width="0.0557%" height="15" fill="rgb(206,74,20)" fg:x="26418" fg:w="22"/><text x="67.1649%" y="255.50"></text></g><g><title>malloc (20 samples, 0.05%)</title><rect x="66.9200%" y="229" width="0.0507%" height="15" fill="rgb(230,138,44)" fg:x="26420" fg:w="20"/><text x="67.1700%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.02%)</title><rect x="66.9807%" y="229" width="0.0177%" height="15" fill="rgb(235,182,43)" fg:x="26444" fg:w="7"/><text x="67.2307%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.02%)</title><rect x="66.9807%" y="213" width="0.0177%" height="15" fill="rgb(242,16,51)" fg:x="26444" fg:w="7"/><text x="67.2307%" y="223.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.02%)</title><rect x="66.9807%" y="197" width="0.0177%" height="15" fill="rgb(248,9,4)" fg:x="26444" fg:w="7"/><text x="67.2307%" y="207.50"></text></g><g><title>malloc (5 samples, 0.01%)</title><rect x="66.9858%" y="181" width="0.0127%" height="15" fill="rgb(210,31,22)" fg:x="26446" fg:w="5"/><text x="67.2358%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 0.03%)</title><rect x="66.9732%" y="357" width="0.0279%" height="15" fill="rgb(239,54,39)" fg:x="26441" fg:w="11"/><text x="67.2232%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11 samples, 0.03%)</title><rect x="66.9732%" y="341" width="0.0279%" height="15" fill="rgb(230,99,41)" fg:x="26441" fg:w="11"/><text x="67.2232%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.03%)</title><rect x="66.9757%" y="325" width="0.0253%" height="15" fill="rgb(253,106,12)" fg:x="26442" fg:w="10"/><text x="67.2257%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10 samples, 0.03%)</title><rect x="66.9757%" y="309" width="0.0253%" height="15" fill="rgb(213,46,41)" fg:x="26442" fg:w="10"/><text x="67.2257%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.02%)</title><rect x="66.9807%" y="293" width="0.0203%" height="15" fill="rgb(215,133,35)" fg:x="26444" fg:w="8"/><text x="67.2307%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.02%)</title><rect x="66.9807%" y="277" width="0.0203%" height="15" fill="rgb(213,28,5)" fg:x="26444" fg:w="8"/><text x="67.2307%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.02%)</title><rect x="66.9807%" y="261" width="0.0203%" height="15" fill="rgb(215,77,49)" fg:x="26444" fg:w="8"/><text x="67.2307%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (8 samples, 0.02%)</title><rect x="66.9807%" y="245" width="0.0203%" height="15" fill="rgb(248,100,22)" fg:x="26444" fg:w="8"/><text x="67.2307%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.01%)</title><rect x="67.0010%" y="341" width="0.0127%" height="15" fill="rgb(208,67,9)" fg:x="26452" fg:w="5"/><text x="67.2510%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="67.0137%" y="325" width="0.0101%" height="15" fill="rgb(219,133,21)" fg:x="26457" fg:w="4"/><text x="67.2637%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18 samples, 0.05%)</title><rect x="67.0010%" y="357" width="0.0456%" height="15" fill="rgb(246,46,29)" fg:x="26452" fg:w="18"/><text x="67.2510%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (13 samples, 0.03%)</title><rect x="67.0137%" y="341" width="0.0329%" height="15" fill="rgb(246,185,52)" fg:x="26457" fg:w="13"/><text x="67.2637%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (9 samples, 0.02%)</title><rect x="67.0238%" y="325" width="0.0228%" height="15" fill="rgb(252,136,11)" fg:x="26461" fg:w="9"/><text x="67.2738%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.02%)</title><rect x="67.0238%" y="309" width="0.0228%" height="15" fill="rgb(219,138,53)" fg:x="26461" fg:w="9"/><text x="67.2738%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (9 samples, 0.02%)</title><rect x="67.0238%" y="293" width="0.0228%" height="15" fill="rgb(211,51,23)" fg:x="26461" fg:w="9"/><text x="67.2738%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.02%)</title><rect x="67.0238%" y="277" width="0.0228%" height="15" fill="rgb(247,221,28)" fg:x="26461" fg:w="9"/><text x="67.2738%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (9 samples, 0.02%)</title><rect x="67.0238%" y="261" width="0.0228%" height="15" fill="rgb(251,222,45)" fg:x="26461" fg:w="9"/><text x="67.2738%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.02%)</title><rect x="67.0238%" y="245" width="0.0228%" height="15" fill="rgb(217,162,53)" fg:x="26461" fg:w="9"/><text x="67.2738%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.02%)</title><rect x="67.0238%" y="229" width="0.0228%" height="15" fill="rgb(229,93,14)" fg:x="26461" fg:w="9"/><text x="67.2738%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.02%)</title><rect x="67.0238%" y="213" width="0.0228%" height="15" fill="rgb(209,67,49)" fg:x="26461" fg:w="9"/><text x="67.2738%" y="223.50"></text></g><g><title>cfree (9 samples, 0.02%)</title><rect x="67.0238%" y="197" width="0.0228%" height="15" fill="rgb(213,87,29)" fg:x="26461" fg:w="9"/><text x="67.2738%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.05%)</title><rect x="67.0542%" y="309" width="0.0532%" height="15" fill="rgb(205,151,52)" fg:x="26473" fg:w="21"/><text x="67.3042%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.05%)</title><rect x="67.0542%" y="293" width="0.0532%" height="15" fill="rgb(253,215,39)" fg:x="26473" fg:w="21"/><text x="67.3042%" y="303.50"></text></g><g><title>cfree (21 samples, 0.05%)</title><rect x="67.0542%" y="277" width="0.0532%" height="15" fill="rgb(221,220,41)" fg:x="26473" fg:w="21"/><text x="67.3042%" y="287.50"></text></g><g><title>[libc.so.6] (16 samples, 0.04%)</title><rect x="67.0669%" y="261" width="0.0405%" height="15" fill="rgb(218,133,21)" fg:x="26478" fg:w="16"/><text x="67.3169%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (23 samples, 0.06%)</title><rect x="67.0517%" y="357" width="0.0583%" height="15" fill="rgb(221,193,43)" fg:x="26472" fg:w="23"/><text x="67.3017%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (23 samples, 0.06%)</title><rect x="67.0517%" y="341" width="0.0583%" height="15" fill="rgb(240,128,52)" fg:x="26472" fg:w="23"/><text x="67.3017%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.06%)</title><rect x="67.0517%" y="325" width="0.0583%" height="15" fill="rgb(253,114,12)" fg:x="26472" fg:w="23"/><text x="67.3017%" y="335.50"></text></g><g><title>main::min_cost (24,993 samples, 63.31%)</title><rect x="3.8070%" y="389" width="63.3055%" height="15" fill="rgb(215,223,47)" fg:x="1503" fg:w="24993"/><text x="4.0570%" y="399.50">main::min_cost</text></g><g><title>main::update_sptree (902 samples, 2.28%)</title><rect x="64.8278%" y="373" width="2.2847%" height="15" fill="rgb(248,225,23)" fg:x="25594" fg:w="902"/><text x="65.0778%" y="383.50">m..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (84 samples, 0.21%)</title><rect x="67.5709%" y="261" width="0.2128%" height="15" fill="rgb(250,108,0)" fg:x="26677" fg:w="84"/><text x="67.8209%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (84 samples, 0.21%)</title><rect x="67.5709%" y="245" width="0.2128%" height="15" fill="rgb(228,208,7)" fg:x="26677" fg:w="84"/><text x="67.8209%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (84 samples, 0.21%)</title><rect x="67.5709%" y="229" width="0.2128%" height="15" fill="rgb(244,45,10)" fg:x="26677" fg:w="84"/><text x="67.8209%" y="239.50"></text></g><g><title>[libc.so.6] (60 samples, 0.15%)</title><rect x="67.6317%" y="213" width="0.1520%" height="15" fill="rgb(207,125,25)" fg:x="26701" fg:w="60"/><text x="67.8817%" y="223.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,320 samples, 3.34%)</title><rect x="67.1707%" y="309" width="3.3435%" height="15" fill="rgb(210,195,18)" fg:x="26519" fg:w="1320"/><text x="67.4207%" y="319.50">&lt;co..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1,320 samples, 3.34%)</title><rect x="67.1707%" y="293" width="3.3435%" height="15" fill="rgb(249,80,12)" fg:x="26519" fg:w="1320"/><text x="67.4207%" y="303.50">cor..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,297 samples, 3.29%)</title><rect x="67.2290%" y="277" width="3.2852%" height="15" fill="rgb(221,65,9)" fg:x="26542" fg:w="1297"/><text x="67.4790%" y="287.50">&lt;co..</text></g><g><title>core::slice::memchr::memchr (1,077 samples, 2.73%)</title><rect x="67.7862%" y="261" width="2.7280%" height="15" fill="rgb(235,49,36)" fg:x="26762" fg:w="1077"/><text x="68.0362%" y="271.50">co..</text></g><g><title>core::slice::memchr::memchr_aligned (1,064 samples, 2.70%)</title><rect x="67.8191%" y="245" width="2.6950%" height="15" fill="rgb(225,32,20)" fg:x="26775" fg:w="1064"/><text x="68.0691%" y="255.50">co..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1,444 samples, 3.66%)</title><rect x="67.1707%" y="341" width="3.6575%" height="15" fill="rgb(215,141,46)" fg:x="26519" fg:w="1444"/><text x="67.4207%" y="351.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,444 samples, 3.66%)</title><rect x="67.1707%" y="325" width="3.6575%" height="15" fill="rgb(250,160,47)" fg:x="26519" fg:w="1444"/><text x="67.4207%" y="335.50">&lt;cor..</text></g><g><title>core::option::Option&lt;T&gt;::map (124 samples, 0.31%)</title><rect x="70.5142%" y="309" width="0.3141%" height="15" fill="rgb(216,222,40)" fg:x="27839" fg:w="124"/><text x="70.7642%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (124 samples, 0.31%)</title><rect x="70.5142%" y="293" width="0.3141%" height="15" fill="rgb(234,217,39)" fg:x="27839" fg:w="124"/><text x="70.7642%" y="303.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (124 samples, 0.31%)</title><rect x="70.5142%" y="277" width="0.3141%" height="15" fill="rgb(207,178,40)" fg:x="27839" fg:w="124"/><text x="70.7642%" y="287.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (124 samples, 0.31%)</title><rect x="70.5142%" y="261" width="0.3141%" height="15" fill="rgb(221,136,13)" fg:x="27839" fg:w="124"/><text x="70.7642%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (112 samples, 0.28%)</title><rect x="70.5446%" y="245" width="0.2837%" height="15" fill="rgb(249,199,10)" fg:x="27851" fg:w="112"/><text x="70.7946%" y="255.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (112 samples, 0.28%)</title><rect x="70.5446%" y="229" width="0.2837%" height="15" fill="rgb(249,222,13)" fg:x="27851" fg:w="112"/><text x="70.7946%" y="239.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (112 samples, 0.28%)</title><rect x="70.5446%" y="213" width="0.2837%" height="15" fill="rgb(244,185,38)" fg:x="27851" fg:w="112"/><text x="70.7946%" y="223.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (112 samples, 0.28%)</title><rect x="70.5446%" y="197" width="0.2837%" height="15" fill="rgb(236,202,9)" fg:x="27851" fg:w="112"/><text x="70.7946%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (112 samples, 0.28%)</title><rect x="70.5446%" y="181" width="0.2837%" height="15" fill="rgb(250,229,37)" fg:x="27851" fg:w="112"/><text x="70.7946%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (110 samples, 0.28%)</title><rect x="70.5496%" y="165" width="0.2786%" height="15" fill="rgb(206,174,23)" fg:x="27853" fg:w="110"/><text x="70.7996%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (110 samples, 0.28%)</title><rect x="70.5496%" y="149" width="0.2786%" height="15" fill="rgb(211,33,43)" fg:x="27853" fg:w="110"/><text x="70.7996%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (110 samples, 0.28%)</title><rect x="70.5496%" y="133" width="0.2786%" height="15" fill="rgb(245,58,50)" fg:x="27853" fg:w="110"/><text x="70.7996%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.02%)</title><rect x="71.1905%" y="309" width="0.0228%" height="15" fill="rgb(244,68,36)" fg:x="28106" fg:w="9"/><text x="71.4405%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.02%)</title><rect x="71.1905%" y="293" width="0.0228%" height="15" fill="rgb(232,229,15)" fg:x="28106" fg:w="9"/><text x="71.4405%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.02%)</title><rect x="71.1905%" y="277" width="0.0228%" height="15" fill="rgb(254,30,23)" fg:x="28106" fg:w="9"/><text x="71.4405%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (33 samples, 0.08%)</title><rect x="71.2133%" y="309" width="0.0836%" height="15" fill="rgb(235,160,14)" fg:x="28115" fg:w="33"/><text x="71.4633%" y="319.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (33 samples, 0.08%)</title><rect x="71.2133%" y="293" width="0.0836%" height="15" fill="rgb(212,155,44)" fg:x="28115" fg:w="33"/><text x="71.4633%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for char&gt;::eq (33 samples, 0.08%)</title><rect x="71.2133%" y="277" width="0.0836%" height="15" fill="rgb(226,2,50)" fg:x="28115" fg:w="33"/><text x="71.4633%" y="287.50"></text></g><g><title>__rdl_alloc (20 samples, 0.05%)</title><rect x="71.3982%" y="149" width="0.0507%" height="15" fill="rgb(234,177,6)" fg:x="28188" fg:w="20"/><text x="71.6482%" y="159.50"></text></g><g><title>__rust_alloc (16 samples, 0.04%)</title><rect x="71.4488%" y="149" width="0.0405%" height="15" fill="rgb(217,24,9)" fg:x="28208" fg:w="16"/><text x="71.6988%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (268 samples, 0.68%)</title><rect x="71.3652%" y="197" width="0.6788%" height="15" fill="rgb(220,13,46)" fg:x="28175" fg:w="268"/><text x="71.6152%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (268 samples, 0.68%)</title><rect x="71.3652%" y="181" width="0.6788%" height="15" fill="rgb(239,221,27)" fg:x="28175" fg:w="268"/><text x="71.6152%" y="191.50"></text></g><g><title>alloc::alloc::alloc (268 samples, 0.68%)</title><rect x="71.3652%" y="165" width="0.6788%" height="15" fill="rgb(222,198,25)" fg:x="28175" fg:w="268"/><text x="71.6152%" y="175.50"></text></g><g><title>malloc (218 samples, 0.55%)</title><rect x="71.4919%" y="149" width="0.5522%" height="15" fill="rgb(211,99,13)" fg:x="28225" fg:w="218"/><text x="71.7419%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (317 samples, 0.80%)</title><rect x="71.2969%" y="245" width="0.8029%" height="15" fill="rgb(232,111,31)" fg:x="28148" fg:w="317"/><text x="71.5469%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (317 samples, 0.80%)</title><rect x="71.2969%" y="229" width="0.8029%" height="15" fill="rgb(245,82,37)" fg:x="28148" fg:w="317"/><text x="71.5469%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (317 samples, 0.80%)</title><rect x="71.2969%" y="213" width="0.8029%" height="15" fill="rgb(227,149,46)" fg:x="28148" fg:w="317"/><text x="71.5469%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (22 samples, 0.06%)</title><rect x="72.0441%" y="197" width="0.0557%" height="15" fill="rgb(218,36,50)" fg:x="28443" fg:w="22"/><text x="72.2941%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (22 samples, 0.06%)</title><rect x="72.0441%" y="181" width="0.0557%" height="15" fill="rgb(226,80,48)" fg:x="28443" fg:w="22"/><text x="72.2941%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (434 samples, 1.10%)</title><rect x="71.2969%" y="309" width="1.0993%" height="15" fill="rgb(238,224,15)" fg:x="28148" fg:w="434"/><text x="71.5469%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (434 samples, 1.10%)</title><rect x="71.2969%" y="293" width="1.0993%" height="15" fill="rgb(241,136,10)" fg:x="28148" fg:w="434"/><text x="71.5469%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (434 samples, 1.10%)</title><rect x="71.2969%" y="277" width="1.0993%" height="15" fill="rgb(208,32,45)" fg:x="28148" fg:w="434"/><text x="71.5469%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (434 samples, 1.10%)</title><rect x="71.2969%" y="261" width="1.0993%" height="15" fill="rgb(207,135,9)" fg:x="28148" fg:w="434"/><text x="71.5469%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (117 samples, 0.30%)</title><rect x="72.0998%" y="245" width="0.2964%" height="15" fill="rgb(206,86,44)" fg:x="28465" fg:w="117"/><text x="72.3498%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (117 samples, 0.30%)</title><rect x="72.0998%" y="229" width="0.2964%" height="15" fill="rgb(245,177,15)" fg:x="28465" fg:w="117"/><text x="72.3498%" y="239.50"></text></g><g><title>[libc.so.6] (110 samples, 0.28%)</title><rect x="72.1175%" y="213" width="0.2786%" height="15" fill="rgb(206,64,50)" fg:x="28472" fg:w="110"/><text x="72.3675%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (47 samples, 0.12%)</title><rect x="75.2710%" y="165" width="0.1190%" height="15" fill="rgb(234,36,40)" fg:x="29717" fg:w="47"/><text x="75.5210%" y="175.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (47 samples, 0.12%)</title><rect x="75.3901%" y="165" width="0.1190%" height="15" fill="rgb(213,64,8)" fg:x="29764" fg:w="47"/><text x="75.6401%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (47 samples, 0.12%)</title><rect x="75.3901%" y="149" width="0.1190%" height="15" fill="rgb(210,75,36)" fg:x="29764" fg:w="47"/><text x="75.6401%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (47 samples, 0.12%)</title><rect x="75.3901%" y="133" width="0.1190%" height="15" fill="rgb(229,88,21)" fg:x="29764" fg:w="47"/><text x="75.6401%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (314 samples, 0.80%)</title><rect x="75.5091%" y="165" width="0.7953%" height="15" fill="rgb(252,204,47)" fg:x="29811" fg:w="314"/><text x="75.7591%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (314 samples, 0.80%)</title><rect x="75.5091%" y="149" width="0.7953%" height="15" fill="rgb(208,77,27)" fg:x="29811" fg:w="314"/><text x="75.7591%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (314 samples, 0.80%)</title><rect x="75.5091%" y="133" width="0.7953%" height="15" fill="rgb(221,76,26)" fg:x="29811" fg:w="314"/><text x="75.7591%" y="143.50"></text></g><g><title>[libc.so.6] (229 samples, 0.58%)</title><rect x="75.7244%" y="117" width="0.5800%" height="15" fill="rgb(225,139,18)" fg:x="29896" fg:w="229"/><text x="75.9744%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (34 samples, 0.09%)</title><rect x="76.3045%" y="165" width="0.0861%" height="15" fill="rgb(230,137,11)" fg:x="30125" fg:w="34"/><text x="76.5545%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (34 samples, 0.09%)</title><rect x="76.3045%" y="149" width="0.0861%" height="15" fill="rgb(212,28,1)" fg:x="30125" fg:w="34"/><text x="76.5545%" y="159.50"></text></g><g><title>core::slice::memchr::memchr_aligned (397 samples, 1.01%)</title><rect x="76.5957%" y="149" width="1.0056%" height="15" fill="rgb(248,164,17)" fg:x="30240" fg:w="397"/><text x="76.8457%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1,736 samples, 4.40%)</title><rect x="74.0071%" y="181" width="4.3972%" height="15" fill="rgb(222,171,42)" fg:x="29218" fg:w="1736"/><text x="74.2571%" y="191.50">&lt;core..</text></g><g><title>core::slice::memchr::memchr (795 samples, 2.01%)</title><rect x="76.3906%" y="165" width="2.0137%" height="15" fill="rgb(243,84,45)" fg:x="30159" fg:w="795"/><text x="76.6406%" y="175.50">c..</text></g><g><title>core::slice::memchr::memchr_naive (317 samples, 0.80%)</title><rect x="77.6013%" y="149" width="0.8029%" height="15" fill="rgb(252,49,23)" fg:x="30637" fg:w="317"/><text x="77.8513%" y="159.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (25 samples, 0.06%)</title><rect x="78.4043%" y="181" width="0.0633%" height="15" fill="rgb(215,19,7)" fg:x="30954" fg:w="25"/><text x="78.6543%" y="191.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (25 samples, 0.06%)</title><rect x="78.4043%" y="165" width="0.0633%" height="15" fill="rgb(238,81,41)" fg:x="30954" fg:w="25"/><text x="78.6543%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.01%)</title><rect x="78.4574%" y="149" width="0.0101%" height="15" fill="rgb(210,199,37)" fg:x="30975" fg:w="4"/><text x="78.7074%" y="159.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,042 samples, 5.17%)</title><rect x="73.4068%" y="213" width="5.1722%" height="15" fill="rgb(244,192,49)" fg:x="28981" fg:w="2042"/><text x="73.6568%" y="223.50">&lt;core:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1,999 samples, 5.06%)</title><rect x="73.5157%" y="197" width="5.0633%" height="15" fill="rgb(226,211,11)" fg:x="29024" fg:w="1999"/><text x="73.7657%" y="207.50">core::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (44 samples, 0.11%)</title><rect x="78.4676%" y="181" width="0.1114%" height="15" fill="rgb(236,162,54)" fg:x="30979" fg:w="44"/><text x="78.7176%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (21 samples, 0.05%)</title><rect x="78.5258%" y="165" width="0.0532%" height="15" fill="rgb(220,229,9)" fg:x="31002" fg:w="21"/><text x="78.7758%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (21 samples, 0.05%)</title><rect x="78.5258%" y="149" width="0.0532%" height="15" fill="rgb(250,87,22)" fg:x="31002" fg:w="21"/><text x="78.7758%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.07%)</title><rect x="78.5790%" y="213" width="0.0684%" height="15" fill="rgb(239,43,17)" fg:x="31023" fg:w="27"/><text x="78.8290%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (27 samples, 0.07%)</title><rect x="78.5790%" y="197" width="0.0684%" height="15" fill="rgb(231,177,25)" fg:x="31023" fg:w="27"/><text x="78.8290%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (36 samples, 0.09%)</title><rect x="78.7589%" y="149" width="0.0912%" height="15" fill="rgb(219,179,1)" fg:x="31094" fg:w="36"/><text x="79.0089%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (58 samples, 0.15%)</title><rect x="78.8501%" y="149" width="0.1469%" height="15" fill="rgb(238,219,53)" fg:x="31130" fg:w="58"/><text x="79.1001%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (5 samples, 0.01%)</title><rect x="78.9970%" y="149" width="0.0127%" height="15" fill="rgb(232,167,36)" fg:x="31188" fg:w="5"/><text x="79.2470%" y="159.50"></text></g><g><title>__rdl_realloc (128 samples, 0.32%)</title><rect x="79.2148%" y="85" width="0.3242%" height="15" fill="rgb(244,19,51)" fg:x="31274" fg:w="128"/><text x="79.4648%" y="95.50"></text></g><g><title>__rust_realloc (15 samples, 0.04%)</title><rect x="79.5390%" y="85" width="0.0380%" height="15" fill="rgb(224,6,22)" fg:x="31402" fg:w="15"/><text x="79.7890%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,394 samples, 6.06%)</title><rect x="79.1692%" y="133" width="6.0638%" height="15" fill="rgb(224,145,5)" fg:x="31256" fg:w="2394"/><text x="79.4192%" y="143.50">&lt;alloc::..</text></g><g><title>alloc::alloc::Global::grow_impl (2,394 samples, 6.06%)</title><rect x="79.1692%" y="117" width="6.0638%" height="15" fill="rgb(234,130,49)" fg:x="31256" fg:w="2394"/><text x="79.4192%" y="127.50">alloc::a..</text></g><g><title>alloc::alloc::realloc (2,394 samples, 6.06%)</title><rect x="79.1692%" y="101" width="6.0638%" height="15" fill="rgb(254,6,2)" fg:x="31256" fg:w="2394"/><text x="79.4192%" y="111.50">alloc::a..</text></g><g><title>realloc (2,233 samples, 5.66%)</title><rect x="79.5770%" y="85" width="5.6560%" height="15" fill="rgb(208,96,46)" fg:x="31417" fg:w="2233"/><text x="79.8270%" y="95.50">realloc</text></g><g><title>[libc.so.6] (1,795 samples, 4.55%)</title><rect x="80.6864%" y="69" width="4.5466%" height="15" fill="rgb(239,3,39)" fg:x="31855" fg:w="1795"/><text x="80.9364%" y="79.50">[libc..</text></g><g><title>[libc.so.6] (1,125 samples, 2.85%)</title><rect x="82.3835%" y="53" width="2.8495%" height="15" fill="rgb(233,210,1)" fg:x="32525" fg:w="1125"/><text x="82.6335%" y="63.50">[l..</text></g><g><title>[libc.so.6] (15 samples, 0.04%)</title><rect x="85.1950%" y="37" width="0.0380%" height="15" fill="rgb(244,137,37)" fg:x="33635" fg:w="15"/><text x="85.4450%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,628 samples, 6.66%)</title><rect x="79.0096%" y="149" width="6.6565%" height="15" fill="rgb(240,136,2)" fg:x="31193" fg:w="2628"/><text x="79.2596%" y="159.50">alloc::ra..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (171 samples, 0.43%)</title><rect x="85.2330%" y="133" width="0.4331%" height="15" fill="rgb(239,18,37)" fg:x="33650" fg:w="171"/><text x="85.4830%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::array (8 samples, 0.02%)</title><rect x="85.6662%" y="149" width="0.0203%" height="15" fill="rgb(218,185,22)" fg:x="33821" fg:w="8"/><text x="85.9162%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (8 samples, 0.02%)</title><rect x="85.6662%" y="133" width="0.0203%" height="15" fill="rgb(225,218,4)" fg:x="33821" fg:w="8"/><text x="85.9162%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,876 samples, 7.28%)</title><rect x="78.6474%" y="213" width="7.2847%" height="15" fill="rgb(230,182,32)" fg:x="31050" fg:w="2876"/><text x="78.8974%" y="223.50">alloc::vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,876 samples, 7.28%)</title><rect x="78.6474%" y="197" width="7.2847%" height="15" fill="rgb(242,56,43)" fg:x="31050" fg:w="2876"/><text x="78.8974%" y="207.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,863 samples, 7.25%)</title><rect x="78.6803%" y="181" width="7.2518%" height="15" fill="rgb(233,99,24)" fg:x="31063" fg:w="2863"/><text x="78.9303%" y="191.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,863 samples, 7.25%)</title><rect x="78.6803%" y="165" width="7.2518%" height="15" fill="rgb(234,209,42)" fg:x="31063" fg:w="2863"/><text x="78.9303%" y="175.50">alloc::raw..</text></g><g><title>core::cmp::max (97 samples, 0.25%)</title><rect x="85.6864%" y="149" width="0.2457%" height="15" fill="rgb(227,7,12)" fg:x="33829" fg:w="97"/><text x="85.9364%" y="159.50"></text></g><g><title>core::cmp::Ord::max (97 samples, 0.25%)</title><rect x="85.6864%" y="133" width="0.2457%" height="15" fill="rgb(245,203,43)" fg:x="33829" fg:w="97"/><text x="85.9364%" y="143.50"></text></g><g><title>core::cmp::max_by (97 samples, 0.25%)</title><rect x="85.6864%" y="117" width="0.2457%" height="15" fill="rgb(238,205,33)" fg:x="33829" fg:w="97"/><text x="85.9364%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5,673 samples, 14.37%)</title><rect x="72.8369%" y="245" width="14.3693%" height="15" fill="rgb(231,56,7)" fg:x="28756" fg:w="5673"/><text x="73.0869%" y="255.50">&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (5,673 samples, 14.37%)</title><rect x="72.8369%" y="229" width="14.3693%" height="15" fill="rgb(244,186,29)" fg:x="28756" fg:w="5673"/><text x="73.0869%" y="239.50">alloc::vec::Vec&lt;T,A&gt;::..</text></g><g><title>core::ptr::write (503 samples, 1.27%)</title><rect x="85.9321%" y="213" width="1.2741%" height="15" fill="rgb(234,111,31)" fg:x="33926" fg:w="503"/><text x="86.1821%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.03%)</title><rect x="87.5608%" y="197" width="0.0253%" height="15" fill="rgb(241,149,10)" fg:x="34569" fg:w="10"/><text x="87.8108%" y="207.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (14 samples, 0.04%)</title><rect x="87.5861%" y="197" width="0.0355%" height="15" fill="rgb(249,206,44)" fg:x="34579" fg:w="14"/><text x="87.8361%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (14 samples, 0.04%)</title><rect x="87.5861%" y="181" width="0.0355%" height="15" fill="rgb(251,153,30)" fg:x="34579" fg:w="14"/><text x="87.8361%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14 samples, 0.04%)</title><rect x="87.5861%" y="165" width="0.0355%" height="15" fill="rgb(239,152,38)" fg:x="34579" fg:w="14"/><text x="87.8361%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (89 samples, 0.23%)</title><rect x="87.6216%" y="197" width="0.2254%" height="15" fill="rgb(249,139,47)" fg:x="34593" fg:w="89"/><text x="87.8716%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (89 samples, 0.23%)</title><rect x="87.6216%" y="181" width="0.2254%" height="15" fill="rgb(244,64,35)" fg:x="34593" fg:w="89"/><text x="87.8716%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (89 samples, 0.23%)</title><rect x="87.6216%" y="165" width="0.2254%" height="15" fill="rgb(216,46,15)" fg:x="34593" fg:w="89"/><text x="87.8716%" y="175.50"></text></g><g><title>[libc.so.6] (70 samples, 0.18%)</title><rect x="87.6697%" y="149" width="0.1773%" height="15" fill="rgb(250,74,19)" fg:x="34612" fg:w="70"/><text x="87.9197%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (11 samples, 0.03%)</title><rect x="87.8470%" y="197" width="0.0279%" height="15" fill="rgb(249,42,33)" fg:x="34682" fg:w="11"/><text x="88.0970%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (11 samples, 0.03%)</title><rect x="87.8470%" y="181" width="0.0279%" height="15" fill="rgb(242,149,17)" fg:x="34682" fg:w="11"/><text x="88.0970%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (395 samples, 1.00%)</title><rect x="87.3430%" y="213" width="1.0005%" height="15" fill="rgb(244,29,21)" fg:x="34483" fg:w="395"/><text x="87.5930%" y="223.50"></text></g><g><title>core::slice::memchr::memchr (185 samples, 0.47%)</title><rect x="87.8749%" y="197" width="0.4686%" height="15" fill="rgb(220,130,37)" fg:x="34693" fg:w="185"/><text x="88.1249%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_aligned (164 samples, 0.42%)</title><rect x="87.9281%" y="181" width="0.4154%" height="15" fill="rgb(211,67,2)" fg:x="34714" fg:w="164"/><text x="88.1781%" y="191.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (457 samples, 1.16%)</title><rect x="87.2062%" y="245" width="1.1575%" height="15" fill="rgb(235,68,52)" fg:x="34429" fg:w="457"/><text x="87.4562%" y="255.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (440 samples, 1.11%)</title><rect x="87.2492%" y="229" width="1.1145%" height="15" fill="rgb(246,142,3)" fg:x="34446" fg:w="440"/><text x="87.4992%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (8 samples, 0.02%)</title><rect x="88.3435%" y="213" width="0.0203%" height="15" fill="rgb(241,25,7)" fg:x="34878" fg:w="8"/><text x="88.5935%" y="223.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (8 samples, 0.02%)</title><rect x="88.3435%" y="197" width="0.0203%" height="15" fill="rgb(242,119,39)" fg:x="34878" fg:w="8"/><text x="88.5935%" y="207.50"></text></g><g><title>__rdl_alloc (17 samples, 0.04%)</title><rect x="88.4574%" y="133" width="0.0431%" height="15" fill="rgb(241,98,45)" fg:x="34923" fg:w="17"/><text x="88.7074%" y="143.50"></text></g><g><title>__rust_alloc (18 samples, 0.05%)</title><rect x="88.5005%" y="133" width="0.0456%" height="15" fill="rgb(254,28,30)" fg:x="34940" fg:w="18"/><text x="88.7505%" y="143.50"></text></g><g><title>core::ptr::read_volatile (12 samples, 0.03%)</title><rect x="88.5461%" y="133" width="0.0304%" height="15" fill="rgb(241,142,54)" fg:x="34958" fg:w="12"/><text x="88.7961%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6,824 samples, 17.28%)</title><rect x="72.3961%" y="309" width="17.2847%" height="15" fill="rgb(222,85,15)" fg:x="28582" fg:w="6824"/><text x="72.6461%" y="319.50">core::iter::traits::iterato..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,824 samples, 17.28%)</title><rect x="72.3961%" y="293" width="17.2847%" height="15" fill="rgb(210,85,47)" fg:x="28582" fg:w="6824"/><text x="72.6461%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,824 samples, 17.28%)</title><rect x="72.3961%" y="277" width="17.2847%" height="15" fill="rgb(224,206,25)" fg:x="28582" fg:w="6824"/><text x="72.6461%" y="287.50">&lt;alloc::vec::Vec&lt;T&gt; as allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,788 samples, 17.19%)</title><rect x="72.4873%" y="261" width="17.1935%" height="15" fill="rgb(243,201,19)" fg:x="28618" fg:w="6788"/><text x="72.7373%" y="271.50">&lt;alloc::vec::Vec&lt;T&gt; as allo..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (520 samples, 1.32%)</title><rect x="88.3637%" y="245" width="1.3171%" height="15" fill="rgb(236,59,4)" fg:x="34886" fg:w="520"/><text x="88.6137%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (520 samples, 1.32%)</title><rect x="88.3637%" y="229" width="1.3171%" height="15" fill="rgb(254,179,45)" fg:x="34886" fg:w="520"/><text x="88.6137%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (520 samples, 1.32%)</title><rect x="88.3637%" y="213" width="1.3171%" height="15" fill="rgb(226,14,10)" fg:x="34886" fg:w="520"/><text x="88.6137%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (499 samples, 1.26%)</title><rect x="88.4169%" y="197" width="1.2639%" height="15" fill="rgb(244,27,41)" fg:x="34907" fg:w="499"/><text x="88.6669%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (499 samples, 1.26%)</title><rect x="88.4169%" y="181" width="1.2639%" height="15" fill="rgb(235,35,32)" fg:x="34907" fg:w="499"/><text x="88.6669%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (499 samples, 1.26%)</title><rect x="88.4169%" y="165" width="1.2639%" height="15" fill="rgb(218,68,31)" fg:x="34907" fg:w="499"/><text x="88.6669%" y="175.50"></text></g><g><title>alloc::alloc::alloc (499 samples, 1.26%)</title><rect x="88.4169%" y="149" width="1.2639%" height="15" fill="rgb(207,120,37)" fg:x="34907" fg:w="499"/><text x="88.6669%" y="159.50"></text></g><g><title>malloc (436 samples, 1.10%)</title><rect x="88.5765%" y="133" width="1.1044%" height="15" fill="rgb(227,98,0)" fg:x="34970" fg:w="436"/><text x="88.8265%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (27 samples, 0.07%)</title><rect x="89.6809%" y="309" width="0.0684%" height="15" fill="rgb(207,7,3)" fg:x="35406" fg:w="27"/><text x="89.9309%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.07%)</title><rect x="89.6809%" y="293" width="0.0684%" height="15" fill="rgb(206,98,19)" fg:x="35406" fg:w="27"/><text x="89.9309%" y="303.50"></text></g><g><title>core::str::validations::next_code_point (27 samples, 0.07%)</title><rect x="89.6809%" y="277" width="0.0684%" height="15" fill="rgb(217,5,26)" fg:x="35406" fg:w="27"/><text x="89.9309%" y="287.50"></text></g><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="89.8784%" y="229" width="0.0127%" height="15" fill="rgb(235,190,38)" fg:x="35484" fg:w="5"/><text x="90.1284%" y="239.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.01%)</title><rect x="89.8911%" y="229" width="0.0127%" height="15" fill="rgb(247,86,24)" fg:x="35489" fg:w="5"/><text x="90.1411%" y="239.50"></text></g><g><title>__rust_dealloc (32 samples, 0.08%)</title><rect x="89.9037%" y="229" width="0.0811%" height="15" fill="rgb(205,101,16)" fg:x="35494" fg:w="32"/><text x="90.1537%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,597 samples, 4.05%)</title><rect x="89.7670%" y="261" width="4.0451%" height="15" fill="rgb(246,168,33)" fg:x="35440" fg:w="1597"/><text x="90.0170%" y="271.50">&lt;all..</text></g><g><title>alloc::alloc::dealloc (1,597 samples, 4.05%)</title><rect x="89.7670%" y="245" width="4.0451%" height="15" fill="rgb(231,114,1)" fg:x="35440" fg:w="1597"/><text x="90.0170%" y="255.50">allo..</text></g><g><title>cfree (1,511 samples, 3.83%)</title><rect x="89.9848%" y="229" width="3.8273%" height="15" fill="rgb(207,184,53)" fg:x="35526" fg:w="1511"/><text x="90.2348%" y="239.50">cfree</text></g><g><title>[libc.so.6] (1,152 samples, 2.92%)</title><rect x="90.8941%" y="213" width="2.9179%" height="15" fill="rgb(224,95,51)" fg:x="35885" fg:w="1152"/><text x="91.1441%" y="223.50">[l..</text></g><g><title>[libc.so.6] (120 samples, 0.30%)</title><rect x="93.5081%" y="197" width="0.3040%" height="15" fill="rgb(212,188,45)" fg:x="36917" fg:w="120"/><text x="93.7581%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (1,619 samples, 4.10%)</title><rect x="89.7492%" y="309" width="4.1008%" height="15" fill="rgb(223,154,38)" fg:x="35433" fg:w="1619"/><text x="89.9992%" y="319.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (1,619 samples, 4.10%)</title><rect x="89.7492%" y="293" width="4.1008%" height="15" fill="rgb(251,22,52)" fg:x="35433" fg:w="1619"/><text x="89.9992%" y="303.50">core..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,619 samples, 4.10%)</title><rect x="89.7492%" y="277" width="4.1008%" height="15" fill="rgb(229,209,22)" fg:x="35433" fg:w="1619"/><text x="89.9992%" y="287.50">&lt;all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (15 samples, 0.04%)</title><rect x="93.8121%" y="261" width="0.0380%" height="15" fill="rgb(234,138,34)" fg:x="37037" fg:w="15"/><text x="94.0621%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (105 samples, 0.27%)</title><rect x="93.8501%" y="309" width="0.2660%" height="15" fill="rgb(212,95,11)" fg:x="37052" fg:w="105"/><text x="94.1001%" y="319.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for isize&gt;::from_str (861 samples, 2.18%)</title><rect x="94.1337%" y="293" width="2.1809%" height="15" fill="rgb(240,179,47)" fg:x="37164" fg:w="861"/><text x="94.3837%" y="303.50">c..</text></g><g><title>core::num::from_str_radix (708 samples, 1.79%)</title><rect x="94.5213%" y="277" width="1.7933%" height="15" fill="rgb(240,163,11)" fg:x="37317" fg:w="708"/><text x="94.7713%" y="287.50">c..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (602 samples, 1.52%)</title><rect x="96.3146%" y="293" width="1.5248%" height="15" fill="rgb(236,37,12)" fg:x="38025" fg:w="602"/><text x="96.5646%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1,471 samples, 3.73%)</title><rect x="94.1160%" y="309" width="3.7259%" height="15" fill="rgb(232,164,16)" fg:x="37157" fg:w="1471"/><text x="94.3660%" y="319.50">core..</text></g><g><title>core::str::&lt;impl str&gt;::split (213 samples, 0.54%)</title><rect x="97.8419%" y="309" width="0.5395%" height="15" fill="rgb(244,205,15)" fg:x="38628" fg:w="213"/><text x="98.0919%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.01%)</title><rect x="99.0780%" y="277" width="0.0101%" height="15" fill="rgb(223,117,47)" fg:x="39116" fg:w="4"/><text x="99.3280%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (97 samples, 0.25%)</title><rect x="99.0324%" y="293" width="0.2457%" height="15" fill="rgb(244,107,35)" fg:x="39098" fg:w="97"/><text x="99.2824%" y="303.50"></text></g><g><title>core::ptr::write (75 samples, 0.19%)</title><rect x="99.0881%" y="277" width="0.1900%" height="15" fill="rgb(205,140,8)" fg:x="39120" fg:w="75"/><text x="99.3381%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12,777 samples, 32.36%)</title><rect x="67.1125%" y="373" width="32.3632%" height="15" fill="rgb(228,84,46)" fg:x="26496" fg:w="12777"/><text x="67.3625%" y="383.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (12,777 samples, 32.36%)</title><rect x="67.1125%" y="357" width="32.3632%" height="15" fill="rgb(254,188,9)" fg:x="26496" fg:w="12777"/><text x="67.3625%" y="367.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (11,310 samples, 28.65%)</title><rect x="70.8283%" y="341" width="28.6474%" height="15" fill="rgb(206,112,54)" fg:x="27963" fg:w="11310"/><text x="71.0783%" y="351.50">core::iter::traits::iterator::Iterator::for_ea..</text></g><g><title>main::parser::parsed_graph::_{{closure}} (11,310 samples, 28.65%)</title><rect x="70.8283%" y="325" width="28.6474%" height="15" fill="rgb(216,84,49)" fg:x="27963" fg:w="11310"/><text x="71.0783%" y="335.50">main::parser::parsed_graph::_{{closure}}</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (432 samples, 1.09%)</title><rect x="98.3815%" y="309" width="1.0942%" height="15" fill="rgb(214,194,35)" fg:x="38841" fg:w="432"/><text x="98.6315%" y="319.50"></text></g><g><title>petgraph::graph_impl::index_twice (75 samples, 0.19%)</title><rect x="99.2857%" y="293" width="0.1900%" height="15" fill="rgb(249,28,3)" fg:x="39198" fg:w="75"/><text x="99.5357%" y="303.50"></text></g><g><title>core::cmp::max (17 samples, 0.04%)</title><rect x="99.4326%" y="277" width="0.0431%" height="15" fill="rgb(222,56,52)" fg:x="39256" fg:w="17"/><text x="99.6826%" y="287.50"></text></g><g><title>core::cmp::Ord::max (17 samples, 0.04%)</title><rect x="99.4326%" y="261" width="0.0431%" height="15" fill="rgb(245,217,50)" fg:x="39256" fg:w="17"/><text x="99.6826%" y="271.50"></text></g><g><title>core::cmp::max_by (17 samples, 0.04%)</title><rect x="99.4326%" y="245" width="0.0431%" height="15" fill="rgb(213,201,24)" fg:x="39256" fg:w="17"/><text x="99.6826%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (93 samples, 0.24%)</title><rect x="99.4757%" y="341" width="0.2356%" height="15" fill="rgb(248,116,28)" fg:x="39273" fg:w="93"/><text x="99.7257%" y="351.50"></text></g><g><title>_start (37,870 samples, 95.92%)</title><rect x="3.8045%" y="533" width="95.9220%" height="15" fill="rgb(219,72,43)" fg:x="1502" fg:w="37870"/><text x="4.0545%" y="543.50">_start</text></g><g><title>__libc_start_main (37,870 samples, 95.92%)</title><rect x="3.8045%" y="517" width="95.9220%" height="15" fill="rgb(209,138,14)" fg:x="1502" fg:w="37870"/><text x="4.0545%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (37,870 samples, 95.92%)</title><rect x="3.8045%" y="501" width="95.9220%" height="15" fill="rgb(222,18,33)" fg:x="1502" fg:w="37870"/><text x="4.0545%" y="511.50">[libc.so.6]</text></g><g><title>main (37,870 samples, 95.92%)</title><rect x="3.8045%" y="485" width="95.9220%" height="15" fill="rgb(213,199,7)" fg:x="1502" fg:w="37870"/><text x="4.0545%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (37,870 samples, 95.92%)</title><rect x="3.8045%" y="469" width="95.9220%" height="15" fill="rgb(250,110,10)" fg:x="1502" fg:w="37870"/><text x="4.0545%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (37,869 samples, 95.92%)</title><rect x="3.8070%" y="453" width="95.9195%" height="15" fill="rgb(248,123,6)" fg:x="1503" fg:w="37869"/><text x="4.0570%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (37,869 samples, 95.92%)</title><rect x="3.8070%" y="437" width="95.9195%" height="15" fill="rgb(206,91,31)" fg:x="1503" fg:w="37869"/><text x="4.0570%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (37,869 samples, 95.92%)</title><rect x="3.8070%" y="421" width="95.9195%" height="15" fill="rgb(211,154,13)" fg:x="1503" fg:w="37869"/><text x="4.0570%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (37,869 samples, 95.92%)</title><rect x="3.8070%" y="405" width="95.9195%" height="15" fill="rgb(225,148,7)" fg:x="1503" fg:w="37869"/><text x="4.0570%" y="415.50">main::main</text></g><g><title>main::parser::parsed_graph (12,876 samples, 32.61%)</title><rect x="67.1125%" y="389" width="32.6140%" height="15" fill="rgb(220,160,43)" fg:x="26496" fg:w="12876"/><text x="67.3625%" y="399.50">main::parser::parsed_graph</text></g><g><title>std::fs::read_to_string (99 samples, 0.25%)</title><rect x="99.4757%" y="373" width="0.2508%" height="15" fill="rgb(213,52,39)" fg:x="39273" fg:w="99"/><text x="99.7257%" y="383.50"></text></g><g><title>std::fs::read_to_string::inner (99 samples, 0.25%)</title><rect x="99.4757%" y="357" width="0.2508%" height="15" fill="rgb(243,137,7)" fg:x="39273" fg:w="99"/><text x="99.7257%" y="367.50"></text></g><g><title>std::io::default_read_to_end (6 samples, 0.02%)</title><rect x="99.7112%" y="341" width="0.0152%" height="15" fill="rgb(230,79,13)" fg:x="39366" fg:w="6"/><text x="99.9612%" y="351.50"></text></g><g><title>read (6 samples, 0.02%)</title><rect x="99.7112%" y="325" width="0.0152%" height="15" fill="rgb(247,105,23)" fg:x="39366" fg:w="6"/><text x="99.9612%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.04%)</title><rect x="99.7264%" y="533" width="0.0405%" height="15" fill="rgb(223,179,41)" fg:x="39372" fg:w="16"/><text x="99.9764%" y="543.50"></text></g><g><title>cfree (6 samples, 0.02%)</title><rect x="99.7670%" y="533" width="0.0152%" height="15" fill="rgb(218,9,34)" fg:x="39388" fg:w="6"/><text x="100.0170%" y="543.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="99.7670%" y="517" width="0.0152%" height="15" fill="rgb(222,106,8)" fg:x="39388" fg:w="6"/><text x="100.0170%" y="527.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for isize&gt;::from_str (22 samples, 0.06%)</title><rect x="99.7822%" y="533" width="0.0557%" height="15" fill="rgb(211,220,0)" fg:x="39394" fg:w="22"/><text x="100.0322%" y="543.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (25 samples, 0.06%)</title><rect x="99.8379%" y="533" width="0.0633%" height="15" fill="rgb(229,52,16)" fg:x="39416" fg:w="25"/><text x="100.0879%" y="543.50"></text></g><g><title>core::slice::memchr::memchr_aligned (37 samples, 0.09%)</title><rect x="99.9012%" y="533" width="0.0937%" height="15" fill="rgb(212,155,18)" fg:x="39441" fg:w="37"/><text x="100.1512%" y="543.50"></text></g><g><title>all (39,480 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(242,21,14)" fg:x="0" fg:w="39480"/><text x="0.2500%" y="575.50"></text></g><g><title>main (39,480 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(222,19,48)" fg:x="0" fg:w="39480"/><text x="0.2500%" y="559.50">main</text></g></svg></svg>