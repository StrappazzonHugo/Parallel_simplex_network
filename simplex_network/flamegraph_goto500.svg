<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="216864"><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (32 samples, 0.01%)</title><rect x="0.0475%" y="117" width="0.0148%" height="15" fill="rgb(227,0,7)" fg:x="103" fg:w="32"/><text x="0.2975%" y="127.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (33 samples, 0.02%)</title><rect x="0.0475%" y="133" width="0.0152%" height="15" fill="rgb(217,0,24)" fg:x="103" fg:w="33"/><text x="0.2975%" y="143.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (45 samples, 0.02%)</title><rect x="0.0466%" y="213" width="0.0208%" height="15" fill="rgb(221,193,54)" fg:x="101" fg:w="45"/><text x="0.2966%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (45 samples, 0.02%)</title><rect x="0.0466%" y="197" width="0.0208%" height="15" fill="rgb(248,212,6)" fg:x="101" fg:w="45"/><text x="0.2966%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (45 samples, 0.02%)</title><rect x="0.0466%" y="181" width="0.0208%" height="15" fill="rgb(208,68,35)" fg:x="101" fg:w="45"/><text x="0.2966%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (45 samples, 0.02%)</title><rect x="0.0466%" y="165" width="0.0208%" height="15" fill="rgb(232,128,0)" fg:x="101" fg:w="45"/><text x="0.2966%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (45 samples, 0.02%)</title><rect x="0.0466%" y="149" width="0.0208%" height="15" fill="rgb(207,160,47)" fg:x="101" fg:w="45"/><text x="0.2966%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (24 samples, 0.01%)</title><rect x="0.0673%" y="213" width="0.0111%" height="15" fill="rgb(228,23,34)" fg:x="146" fg:w="24"/><text x="0.3173%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 0.01%)</title><rect x="0.0682%" y="197" width="0.0101%" height="15" fill="rgb(218,30,26)" fg:x="148" fg:w="22"/><text x="0.3182%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (22 samples, 0.01%)</title><rect x="0.0682%" y="181" width="0.0101%" height="15" fill="rgb(220,122,19)" fg:x="148" fg:w="22"/><text x="0.3182%" y="191.50"></text></g><g><title>main::min_cost::_{{closure}} (22 samples, 0.01%)</title><rect x="0.0682%" y="165" width="0.0101%" height="15" fill="rgb(250,228,42)" fg:x="148" fg:w="22"/><text x="0.3182%" y="175.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (10,631 samples, 4.90%)</title><rect x="52.8280%" y="197" width="4.9022%" height="15" fill="rgb(240,193,28)" fg:x="114565" fg:w="10631"/><text x="53.0780%" y="207.50">&lt;i32 a..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1,754 samples, 0.81%)</title><rect x="57.7302%" y="197" width="0.8088%" height="15" fill="rgb(216,20,37)" fg:x="125196" fg:w="1754"/><text x="57.9802%" y="207.50"></text></g><g><title>&lt;i32 as num_traits::sign::Signed&gt;::is_negative (7,064 samples, 3.26%)</title><rect x="58.5390%" y="197" width="3.2573%" height="15" fill="rgb(206,188,39)" fg:x="126950" fg:w="7064"/><text x="58.7890%" y="207.50">&lt;i3..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (11,588 samples, 5.34%)</title><rect x="61.7963%" y="197" width="5.3434%" height="15" fill="rgb(217,207,13)" fg:x="134014" fg:w="11588"/><text x="62.0463%" y="207.50">core::c..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,925 samples, 0.89%)</title><rect x="67.1730%" y="165" width="0.8877%" height="15" fill="rgb(231,73,38)" fg:x="145674" fg:w="1925"/><text x="67.4230%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,925 samples, 0.89%)</title><rect x="67.1730%" y="149" width="0.8877%" height="15" fill="rgb(225,20,46)" fg:x="145674" fg:w="1925"/><text x="67.4230%" y="159.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5,303 samples, 2.45%)</title><rect x="67.1398%" y="197" width="2.4453%" height="15" fill="rgb(210,31,41)" fg:x="145602" fg:w="5303"/><text x="67.3898%" y="207.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5,303 samples, 2.45%)</title><rect x="67.1398%" y="181" width="2.4453%" height="15" fill="rgb(221,200,47)" fg:x="145602" fg:w="5303"/><text x="67.3898%" y="191.50">&lt;c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,306 samples, 1.52%)</title><rect x="68.0606%" y="165" width="1.5245%" height="15" fill="rgb(226,26,5)" fg:x="147599" fg:w="3306"/><text x="68.3106%" y="175.50"></text></g><g><title>main::_block_search_v1 (150,743 samples, 69.51%)</title><rect x="0.0793%" y="213" width="69.5104%" height="15" fill="rgb(249,33,26)" fg:x="172" fg:w="150743"/><text x="0.3293%" y="223.50">main::_block_search_v1</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,615 samples, 0.74%)</title><rect x="89.9006%" y="197" width="0.7447%" height="15" fill="rgb(235,183,28)" fg:x="194962" fg:w="1615"/><text x="90.1506%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,615 samples, 0.74%)</title><rect x="89.9006%" y="181" width="0.7447%" height="15" fill="rgb(221,5,38)" fg:x="194962" fg:w="1615"/><text x="90.1506%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,615 samples, 0.74%)</title><rect x="89.9006%" y="165" width="0.7447%" height="15" fill="rgb(247,18,42)" fg:x="194962" fg:w="1615"/><text x="90.1506%" y="175.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (3,990 samples, 1.84%)</title><rect x="90.6458%" y="197" width="1.8399%" height="15" fill="rgb(241,131,45)" fg:x="196578" fg:w="3990"/><text x="90.8958%" y="207.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (89 samples, 0.04%)</title><rect x="92.4870%" y="197" width="0.0410%" height="15" fill="rgb(249,31,29)" fg:x="200571" fg:w="89"/><text x="92.7370%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (157 samples, 0.07%)</title><rect x="92.5294%" y="197" width="0.0724%" height="15" fill="rgb(225,111,53)" fg:x="200663" fg:w="157"/><text x="92.7794%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (136 samples, 0.06%)</title><rect x="92.6018%" y="197" width="0.0627%" height="15" fill="rgb(238,160,17)" fg:x="200820" fg:w="136"/><text x="92.8518%" y="207.50"></text></g><g><title>main::_compute_flowchange (51,998 samples, 23.98%)</title><rect x="69.5897%" y="213" width="23.9772%" height="15" fill="rgb(214,148,48)" fg:x="150915" fg:w="51998"/><text x="69.8397%" y="223.50">main::_compute_flowchange</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1,957 samples, 0.90%)</title><rect x="92.6645%" y="197" width="0.9024%" height="15" fill="rgb(232,36,49)" fg:x="200956" fg:w="1957"/><text x="92.9145%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (39 samples, 0.02%)</title><rect x="93.5739%" y="197" width="0.0180%" height="15" fill="rgb(209,103,24)" fg:x="202928" fg:w="39"/><text x="93.8239%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (39 samples, 0.02%)</title><rect x="93.5739%" y="181" width="0.0180%" height="15" fill="rgb(229,88,8)" fg:x="202928" fg:w="39"/><text x="93.8239%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (28 samples, 0.01%)</title><rect x="93.5789%" y="165" width="0.0129%" height="15" fill="rgb(213,181,19)" fg:x="202939" fg:w="28"/><text x="93.8289%" y="175.50"></text></g><g><title>main::initialization::_{{closure}} (28 samples, 0.01%)</title><rect x="93.5789%" y="149" width="0.0129%" height="15" fill="rgb(254,191,54)" fg:x="202939" fg:w="28"/><text x="93.8289%" y="159.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (25 samples, 0.01%)</title><rect x="93.6080%" y="181" width="0.0115%" height="15" fill="rgb(241,83,37)" fg:x="203002" fg:w="25"/><text x="93.8580%" y="191.50"></text></g><g><title>main::compute_node_potentials (71 samples, 0.03%)</title><rect x="93.5918%" y="197" width="0.0327%" height="15" fill="rgb(233,36,39)" fg:x="202967" fg:w="71"/><text x="93.8418%" y="207.50"></text></g><g><title>main::initialization (136 samples, 0.06%)</title><rect x="93.5706%" y="213" width="0.0627%" height="15" fill="rgb(226,3,54)" fg:x="202921" fg:w="136"/><text x="93.8206%" y="223.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (263 samples, 0.12%)</title><rect x="93.7680%" y="197" width="0.1213%" height="15" fill="rgb(245,192,40)" fg:x="203349" fg:w="263"/><text x="94.0180%" y="207.50"></text></g><g><title>main::update_node_potentials (608 samples, 0.28%)</title><rect x="93.6333%" y="213" width="0.2804%" height="15" fill="rgb(238,167,29)" fg:x="203057" fg:w="608"/><text x="93.8833%" y="223.50"></text></g><g><title>main::get_reduced_cost_edgeindex (53 samples, 0.02%)</title><rect x="93.8893%" y="197" width="0.0244%" height="15" fill="rgb(232,182,51)" fg:x="203612" fg:w="53"/><text x="94.1393%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (25 samples, 0.01%)</title><rect x="93.9022%" y="181" width="0.0115%" height="15" fill="rgb(231,60,39)" fg:x="203640" fg:w="25"/><text x="94.1522%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (41 samples, 0.02%)</title><rect x="98.8864%" y="197" width="0.0189%" height="15" fill="rgb(208,69,12)" fg:x="214449" fg:w="41"/><text x="99.1364%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (41 samples, 0.02%)</title><rect x="98.8864%" y="181" width="0.0189%" height="15" fill="rgb(235,93,37)" fg:x="214449" fg:w="41"/><text x="99.1364%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.02%)</title><rect x="98.8864%" y="165" width="0.0189%" height="15" fill="rgb(213,116,39)" fg:x="214449" fg:w="41"/><text x="99.1364%" y="175.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (65 samples, 0.03%)</title><rect x="99.0155%" y="149" width="0.0300%" height="15" fill="rgb(222,207,29)" fg:x="214729" fg:w="65"/><text x="99.2655%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (316 samples, 0.15%)</title><rect x="98.9076%" y="197" width="0.1457%" height="15" fill="rgb(206,96,30)" fg:x="214495" fg:w="316"/><text x="99.1576%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (316 samples, 0.15%)</title><rect x="98.9076%" y="181" width="0.1457%" height="15" fill="rgb(218,138,4)" fg:x="214495" fg:w="316"/><text x="99.1576%" y="191.50"></text></g><g><title>main::update_sptree::_{{closure}} (315 samples, 0.15%)</title><rect x="98.9081%" y="165" width="0.1453%" height="15" fill="rgb(250,191,14)" fg:x="214496" fg:w="315"/><text x="99.1581%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (43 samples, 0.02%)</title><rect x="99.1087%" y="165" width="0.0198%" height="15" fill="rgb(239,60,40)" fg:x="214931" fg:w="43"/><text x="99.3587%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (43 samples, 0.02%)</title><rect x="99.1087%" y="149" width="0.0198%" height="15" fill="rgb(206,27,48)" fg:x="214931" fg:w="43"/><text x="99.3587%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (43 samples, 0.02%)</title><rect x="99.1087%" y="133" width="0.0198%" height="15" fill="rgb(225,35,8)" fg:x="214931" fg:w="43"/><text x="99.3587%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (549 samples, 0.25%)</title><rect x="99.0584%" y="197" width="0.2532%" height="15" fill="rgb(250,213,24)" fg:x="214822" fg:w="549"/><text x="99.3084%" y="207.50"></text></g><g><title>main::update_sptree::_{{closure}} (511 samples, 0.24%)</title><rect x="99.0759%" y="181" width="0.2356%" height="15" fill="rgb(247,123,22)" fg:x="214860" fg:w="511"/><text x="99.3259%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (397 samples, 0.18%)</title><rect x="99.1285%" y="165" width="0.1831%" height="15" fill="rgb(231,138,38)" fg:x="214974" fg:w="397"/><text x="99.3785%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (158 samples, 0.07%)</title><rect x="99.3415%" y="133" width="0.0729%" height="15" fill="rgb(231,145,46)" fg:x="215436" fg:w="158"/><text x="99.5915%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (158 samples, 0.07%)</title><rect x="99.3415%" y="117" width="0.0729%" height="15" fill="rgb(251,118,11)" fg:x="215436" fg:w="158"/><text x="99.5915%" y="127.50"></text></g><g><title>alloc::alloc::realloc (158 samples, 0.07%)</title><rect x="99.3415%" y="101" width="0.0729%" height="15" fill="rgb(217,147,25)" fg:x="215436" fg:w="158"/><text x="99.5915%" y="111.50"></text></g><g><title>realloc (150 samples, 0.07%)</title><rect x="99.3452%" y="85" width="0.0692%" height="15" fill="rgb(247,81,37)" fg:x="215444" fg:w="150"/><text x="99.5952%" y="95.50"></text></g><g><title>[libc.so.6] (131 samples, 0.06%)</title><rect x="99.3540%" y="69" width="0.0604%" height="15" fill="rgb(209,12,38)" fg:x="215463" fg:w="131"/><text x="99.6040%" y="79.50"></text></g><g><title>[libc.so.6] (109 samples, 0.05%)</title><rect x="99.3641%" y="53" width="0.0503%" height="15" fill="rgb(227,1,9)" fg:x="215485" fg:w="109"/><text x="99.6141%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (188 samples, 0.09%)</title><rect x="99.3392%" y="149" width="0.0867%" height="15" fill="rgb(248,47,43)" fg:x="215431" fg:w="188"/><text x="99.5892%" y="159.50"></text></g><g><title>malloc (22 samples, 0.01%)</title><rect x="99.4158%" y="133" width="0.0101%" height="15" fill="rgb(221,10,30)" fg:x="215597" fg:w="22"/><text x="99.6658%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (193 samples, 0.09%)</title><rect x="99.3374%" y="181" width="0.0890%" height="15" fill="rgb(210,229,1)" fg:x="215427" fg:w="193"/><text x="99.5874%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (193 samples, 0.09%)</title><rect x="99.3374%" y="165" width="0.0890%" height="15" fill="rgb(222,148,37)" fg:x="215427" fg:w="193"/><text x="99.5874%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (248 samples, 0.11%)</title><rect x="99.3249%" y="197" width="0.1144%" height="15" fill="rgb(234,67,33)" fg:x="215400" fg:w="248"/><text x="99.5749%" y="207.50"></text></g><g><title>core::ptr::write (27 samples, 0.01%)</title><rect x="99.4268%" y="181" width="0.0125%" height="15" fill="rgb(247,98,35)" fg:x="215621" fg:w="27"/><text x="99.6768%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (245 samples, 0.11%)</title><rect x="99.4439%" y="165" width="0.1130%" height="15" fill="rgb(247,138,52)" fg:x="215658" fg:w="245"/><text x="99.6939%" y="175.50"></text></g><g><title>core::ptr::write (235 samples, 0.11%)</title><rect x="99.4485%" y="149" width="0.1084%" height="15" fill="rgb(213,79,30)" fg:x="215668" fg:w="235"/><text x="99.6985%" y="159.50"></text></g><g><title>__rdl_alloc (28 samples, 0.01%)</title><rect x="99.5573%" y="69" width="0.0129%" height="15" fill="rgb(246,177,23)" fg:x="215904" fg:w="28"/><text x="99.8073%" y="79.50"></text></g><g><title>alloc::vec::from_elem (715 samples, 0.33%)</title><rect x="99.4434%" y="197" width="0.3297%" height="15" fill="rgb(230,62,27)" fg:x="215657" fg:w="715"/><text x="99.6934%" y="207.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (715 samples, 0.33%)</title><rect x="99.4434%" y="181" width="0.3297%" height="15" fill="rgb(216,154,8)" fg:x="215657" fg:w="715"/><text x="99.6934%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (469 samples, 0.22%)</title><rect x="99.5569%" y="165" width="0.2163%" height="15" fill="rgb(244,35,45)" fg:x="215903" fg:w="469"/><text x="99.8069%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (469 samples, 0.22%)</title><rect x="99.5569%" y="149" width="0.2163%" height="15" fill="rgb(251,115,12)" fg:x="215903" fg:w="469"/><text x="99.8069%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (469 samples, 0.22%)</title><rect x="99.5569%" y="133" width="0.2163%" height="15" fill="rgb(240,54,50)" fg:x="215903" fg:w="469"/><text x="99.8069%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (468 samples, 0.22%)</title><rect x="99.5573%" y="117" width="0.2158%" height="15" fill="rgb(233,84,52)" fg:x="215904" fg:w="468"/><text x="99.8073%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (468 samples, 0.22%)</title><rect x="99.5573%" y="101" width="0.2158%" height="15" fill="rgb(207,117,47)" fg:x="215904" fg:w="468"/><text x="99.8073%" y="111.50"></text></g><g><title>alloc::alloc::alloc (468 samples, 0.22%)</title><rect x="99.5573%" y="85" width="0.2158%" height="15" fill="rgb(249,43,39)" fg:x="215904" fg:w="468"/><text x="99.8073%" y="95.50"></text></g><g><title>malloc (412 samples, 0.19%)</title><rect x="99.5831%" y="69" width="0.1900%" height="15" fill="rgb(209,38,44)" fg:x="215960" fg:w="412"/><text x="99.8331%" y="79.50"></text></g><g><title>[libc.so.6] (128 samples, 0.06%)</title><rect x="99.7141%" y="53" width="0.0590%" height="15" fill="rgb(236,212,23)" fg:x="216244" fg:w="128"/><text x="99.9641%" y="63.50"></text></g><g><title>[libc.so.6] (35 samples, 0.02%)</title><rect x="99.7570%" y="37" width="0.0161%" height="15" fill="rgb(242,79,21)" fg:x="216337" fg:w="35"/><text x="100.0070%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (24 samples, 0.01%)</title><rect x="99.7787%" y="133" width="0.0111%" height="15" fill="rgb(211,96,35)" fg:x="216384" fg:w="24"/><text x="100.0287%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (24 samples, 0.01%)</title><rect x="99.7787%" y="117" width="0.0111%" height="15" fill="rgb(253,215,40)" fg:x="216384" fg:w="24"/><text x="100.0287%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (24 samples, 0.01%)</title><rect x="99.7787%" y="101" width="0.0111%" height="15" fill="rgb(211,81,21)" fg:x="216384" fg:w="24"/><text x="100.0287%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (24 samples, 0.01%)</title><rect x="99.7787%" y="85" width="0.0111%" height="15" fill="rgb(208,190,38)" fg:x="216384" fg:w="24"/><text x="100.0287%" y="95.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (24 samples, 0.01%)</title><rect x="99.7787%" y="69" width="0.0111%" height="15" fill="rgb(235,213,38)" fg:x="216384" fg:w="24"/><text x="100.0287%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (36 samples, 0.02%)</title><rect x="99.7773%" y="197" width="0.0166%" height="15" fill="rgb(237,122,38)" fg:x="216381" fg:w="36"/><text x="100.0273%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (36 samples, 0.02%)</title><rect x="99.7773%" y="181" width="0.0166%" height="15" fill="rgb(244,218,35)" fg:x="216381" fg:w="36"/><text x="100.0273%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34 samples, 0.02%)</title><rect x="99.7782%" y="165" width="0.0157%" height="15" fill="rgb(240,68,47)" fg:x="216383" fg:w="34"/><text x="100.0282%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33 samples, 0.02%)</title><rect x="99.7787%" y="149" width="0.0152%" height="15" fill="rgb(210,16,53)" fg:x="216384" fg:w="33"/><text x="100.0287%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (45 samples, 0.02%)</title><rect x="99.8008%" y="165" width="0.0208%" height="15" fill="rgb(235,124,12)" fg:x="216432" fg:w="45"/><text x="100.0508%" y="175.50"></text></g><g><title>main::update_sptree::_{{closure}} (45 samples, 0.02%)</title><rect x="99.8008%" y="149" width="0.0208%" height="15" fill="rgb(224,169,11)" fg:x="216432" fg:w="45"/><text x="100.0508%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (123 samples, 0.06%)</title><rect x="99.7939%" y="197" width="0.0567%" height="15" fill="rgb(250,166,2)" fg:x="216417" fg:w="123"/><text x="100.0439%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (113 samples, 0.05%)</title><rect x="99.7985%" y="181" width="0.0521%" height="15" fill="rgb(242,216,29)" fg:x="216427" fg:w="113"/><text x="100.0485%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (63 samples, 0.03%)</title><rect x="99.8215%" y="165" width="0.0291%" height="15" fill="rgb(230,116,27)" fg:x="216477" fg:w="63"/><text x="100.0715%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.03%)</title><rect x="99.8215%" y="149" width="0.0291%" height="15" fill="rgb(228,99,48)" fg:x="216477" fg:w="63"/><text x="100.0715%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (63 samples, 0.03%)</title><rect x="99.8215%" y="133" width="0.0291%" height="15" fill="rgb(253,11,6)" fg:x="216477" fg:w="63"/><text x="100.0715%" y="143.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.03%)</title><rect x="99.8215%" y="117" width="0.0291%" height="15" fill="rgb(247,143,39)" fg:x="216477" fg:w="63"/><text x="100.0715%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (63 samples, 0.03%)</title><rect x="99.8215%" y="101" width="0.0291%" height="15" fill="rgb(236,97,10)" fg:x="216477" fg:w="63"/><text x="100.0715%" y="111.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.03%)</title><rect x="99.8215%" y="85" width="0.0291%" height="15" fill="rgb(233,208,19)" fg:x="216477" fg:w="63"/><text x="100.0715%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (63 samples, 0.03%)</title><rect x="99.8215%" y="69" width="0.0291%" height="15" fill="rgb(216,164,2)" fg:x="216477" fg:w="63"/><text x="100.0715%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (63 samples, 0.03%)</title><rect x="99.8215%" y="53" width="0.0291%" height="15" fill="rgb(220,129,5)" fg:x="216477" fg:w="63"/><text x="100.0715%" y="63.50"></text></g><g><title>cfree (53 samples, 0.02%)</title><rect x="99.8262%" y="37" width="0.0244%" height="15" fill="rgb(242,17,10)" fg:x="216487" fg:w="53"/><text x="100.0762%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (91 samples, 0.04%)</title><rect x="99.8506%" y="197" width="0.0420%" height="15" fill="rgb(242,107,0)" fg:x="216540" fg:w="91"/><text x="100.1006%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (148 samples, 0.07%)</title><rect x="99.8944%" y="149" width="0.0682%" height="15" fill="rgb(251,28,31)" fg:x="216635" fg:w="148"/><text x="100.1444%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (148 samples, 0.07%)</title><rect x="99.8944%" y="133" width="0.0682%" height="15" fill="rgb(233,223,10)" fg:x="216635" fg:w="148"/><text x="100.1444%" y="143.50"></text></g><g><title>cfree (139 samples, 0.06%)</title><rect x="99.8986%" y="117" width="0.0641%" height="15" fill="rgb(215,21,27)" fg:x="216644" fg:w="139"/><text x="100.1486%" y="127.50"></text></g><g><title>[libc.so.6] (123 samples, 0.06%)</title><rect x="99.9059%" y="101" width="0.0567%" height="15" fill="rgb(232,23,21)" fg:x="216660" fg:w="123"/><text x="100.1559%" y="111.50"></text></g><g><title>[libc.so.6] (49 samples, 0.02%)</title><rect x="99.9401%" y="85" width="0.0226%" height="15" fill="rgb(244,5,23)" fg:x="216734" fg:w="49"/><text x="100.1901%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (156 samples, 0.07%)</title><rect x="99.8926%" y="197" width="0.0719%" height="15" fill="rgb(226,81,46)" fg:x="216631" fg:w="156"/><text x="100.1426%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (156 samples, 0.07%)</title><rect x="99.8926%" y="181" width="0.0719%" height="15" fill="rgb(247,70,30)" fg:x="216631" fg:w="156"/><text x="100.1426%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (156 samples, 0.07%)</title><rect x="99.8926%" y="165" width="0.0719%" height="15" fill="rgb(212,68,19)" fg:x="216631" fg:w="156"/><text x="100.1426%" y="175.50"></text></g><g><title>main::min_cost (216,743 samples, 99.94%)</title><rect x="0.0281%" y="229" width="99.9442%" height="15" fill="rgb(240,187,13)" fg:x="61" fg:w="216743"/><text x="0.2781%" y="239.50">main::min_cost</text></g><g><title>main::update_sptree (13,139 samples, 6.06%)</title><rect x="93.9137%" y="213" width="6.0586%" height="15" fill="rgb(223,113,26)" fg:x="203665" fg:w="13139"/><text x="94.1637%" y="223.50">main::up..</text></g><g><title>_start (216,780 samples, 99.96%)</title><rect x="0.0221%" y="373" width="99.9613%" height="15" fill="rgb(206,192,2)" fg:x="48" fg:w="216780"/><text x="0.2721%" y="383.50">_start</text></g><g><title>__libc_start_main (216,780 samples, 99.96%)</title><rect x="0.0221%" y="357" width="99.9613%" height="15" fill="rgb(241,108,4)" fg:x="48" fg:w="216780"/><text x="0.2721%" y="367.50">__libc_start_main</text></g><g><title>[libc.so.6] (216,780 samples, 99.96%)</title><rect x="0.0221%" y="341" width="99.9613%" height="15" fill="rgb(247,173,49)" fg:x="48" fg:w="216780"/><text x="0.2721%" y="351.50">[libc.so.6]</text></g><g><title>main (216,780 samples, 99.96%)</title><rect x="0.0221%" y="325" width="99.9613%" height="15" fill="rgb(224,114,35)" fg:x="48" fg:w="216780"/><text x="0.2721%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (216,780 samples, 99.96%)</title><rect x="0.0221%" y="309" width="99.9613%" height="15" fill="rgb(245,159,27)" fg:x="48" fg:w="216780"/><text x="0.2721%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (216,780 samples, 99.96%)</title><rect x="0.0221%" y="293" width="99.9613%" height="15" fill="rgb(245,172,44)" fg:x="48" fg:w="216780"/><text x="0.2721%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (216,780 samples, 99.96%)</title><rect x="0.0221%" y="277" width="99.9613%" height="15" fill="rgb(236,23,11)" fg:x="48" fg:w="216780"/><text x="0.2721%" y="287.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (216,780 samples, 99.96%)</title><rect x="0.0221%" y="261" width="99.9613%" height="15" fill="rgb(205,117,38)" fg:x="48" fg:w="216780"/><text x="0.2721%" y="271.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (216,780 samples, 99.96%)</title><rect x="0.0221%" y="245" width="99.9613%" height="15" fill="rgb(237,72,25)" fg:x="48" fg:w="216780"/><text x="0.2721%" y="255.50">main::main</text></g><g><title>main::min_cost (29 samples, 0.01%)</title><rect x="99.9839%" y="373" width="0.0134%" height="15" fill="rgb(244,70,9)" fg:x="216829" fg:w="29"/><text x="100.2339%" y="383.50"></text></g><g><title>main::update_sptree (29 samples, 0.01%)</title><rect x="99.9839%" y="357" width="0.0134%" height="15" fill="rgb(217,125,39)" fg:x="216829" fg:w="29"/><text x="100.2339%" y="367.50"></text></g><g><title>all (216,864 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="216864"/><text x="0.2500%" y="415.50"></text></g><g><title>main (216,864 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="216864"/><text x="0.2500%" y="399.50">main</text></g></svg></svg>