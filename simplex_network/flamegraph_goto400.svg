<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="65615"><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.01%)</title><rect x="0.0152%" y="373" width="0.0137%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="9"/><text x="0.2652%" y="383.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="0.0762%" y="117" width="0.0168%" height="15" fill="rgb(217,0,24)" fg:x="50" fg:w="11"/><text x="0.3262%" y="127.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="0.0762%" y="133" width="0.0183%" height="15" fill="rgb(221,193,54)" fg:x="50" fg:w="12"/><text x="0.3262%" y="143.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (15 samples, 0.02%)</title><rect x="0.0762%" y="213" width="0.0229%" height="15" fill="rgb(248,212,6)" fg:x="50" fg:w="15"/><text x="0.3262%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.02%)</title><rect x="0.0762%" y="197" width="0.0229%" height="15" fill="rgb(208,68,35)" fg:x="50" fg:w="15"/><text x="0.3262%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.02%)</title><rect x="0.0762%" y="181" width="0.0229%" height="15" fill="rgb(232,128,0)" fg:x="50" fg:w="15"/><text x="0.3262%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.02%)</title><rect x="0.0762%" y="165" width="0.0229%" height="15" fill="rgb(207,160,47)" fg:x="50" fg:w="15"/><text x="0.3262%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.02%)</title><rect x="0.0762%" y="149" width="0.0229%" height="15" fill="rgb(228,23,34)" fg:x="50" fg:w="15"/><text x="0.3262%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 0.02%)</title><rect x="0.0991%" y="213" width="0.0229%" height="15" fill="rgb(218,30,26)" fg:x="65" fg:w="15"/><text x="0.3491%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 0.02%)</title><rect x="0.1006%" y="197" width="0.0213%" height="15" fill="rgb(220,122,19)" fg:x="66" fg:w="14"/><text x="0.3506%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (14 samples, 0.02%)</title><rect x="0.1006%" y="181" width="0.0213%" height="15" fill="rgb(250,228,42)" fg:x="66" fg:w="14"/><text x="0.3506%" y="191.50"></text></g><g><title>main::min_cost::_{{closure}} (14 samples, 0.02%)</title><rect x="0.1006%" y="165" width="0.0213%" height="15" fill="rgb(240,193,28)" fg:x="66" fg:w="14"/><text x="0.3506%" y="175.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (3,376 samples, 5.15%)</title><rect x="51.1621%" y="197" width="5.1452%" height="15" fill="rgb(216,20,37)" fg:x="33570" fg:w="3376"/><text x="51.4121%" y="207.50">&lt;i32 a..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (770 samples, 1.17%)</title><rect x="56.3072%" y="197" width="1.1735%" height="15" fill="rgb(206,188,39)" fg:x="36946" fg:w="770"/><text x="56.5572%" y="207.50"></text></g><g><title>&lt;i32 as num_traits::sign::Signed&gt;::is_negative (2,916 samples, 4.44%)</title><rect x="57.4808%" y="197" width="4.4441%" height="15" fill="rgb(217,207,13)" fg:x="37716" fg:w="2916"/><text x="57.7308%" y="207.50">&lt;i32 ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (4,416 samples, 6.73%)</title><rect x="61.9249%" y="197" width="6.7302%" height="15" fill="rgb(231,73,38)" fg:x="40632" fg:w="4416"/><text x="62.1749%" y="207.50">core::cmp..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (820 samples, 1.25%)</title><rect x="68.7175%" y="165" width="1.2497%" height="15" fill="rgb(225,20,46)" fg:x="45089" fg:w="820"/><text x="68.9675%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (820 samples, 1.25%)</title><rect x="68.7175%" y="149" width="1.2497%" height="15" fill="rgb(210,31,41)" fg:x="45089" fg:w="820"/><text x="68.9675%" y="159.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,291 samples, 3.49%)</title><rect x="68.6566%" y="197" width="3.4916%" height="15" fill="rgb(221,200,47)" fg:x="45049" fg:w="2291"/><text x="68.9066%" y="207.50">cor..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,291 samples, 3.49%)</title><rect x="68.6566%" y="181" width="3.4916%" height="15" fill="rgb(226,26,5)" fg:x="45049" fg:w="2291"/><text x="68.9066%" y="191.50">&lt;co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,431 samples, 2.18%)</title><rect x="69.9672%" y="165" width="2.1809%" height="15" fill="rgb(249,33,26)" fg:x="45909" fg:w="1431"/><text x="70.2172%" y="175.50">c..</text></g><g><title>main::_block_search_v1 (47,264 samples, 72.03%)</title><rect x="0.1219%" y="213" width="72.0323%" height="15" fill="rgb(235,183,28)" fg:x="80" fg:w="47264"/><text x="0.3719%" y="223.50">main::_block_search_v1</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (704 samples, 1.07%)</title><rect x="87.9067%" y="197" width="1.0729%" height="15" fill="rgb(221,5,38)" fg:x="57680" fg:w="704"/><text x="88.1567%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (704 samples, 1.07%)</title><rect x="87.9067%" y="181" width="1.0729%" height="15" fill="rgb(247,18,42)" fg:x="57680" fg:w="704"/><text x="88.1567%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (704 samples, 1.07%)</title><rect x="87.9067%" y="165" width="1.0729%" height="15" fill="rgb(241,131,45)" fg:x="57680" fg:w="704"/><text x="88.1567%" y="175.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (1,312 samples, 2.00%)</title><rect x="88.9812%" y="197" width="1.9995%" height="15" fill="rgb(249,31,29)" fg:x="58385" fg:w="1312"/><text x="89.2312%" y="207.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (22 samples, 0.03%)</title><rect x="90.9853%" y="197" width="0.0335%" height="15" fill="rgb(225,111,53)" fg:x="59700" fg:w="22"/><text x="91.2353%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (57 samples, 0.09%)</title><rect x="91.0234%" y="197" width="0.0869%" height="15" fill="rgb(238,160,17)" fg:x="59725" fg:w="57"/><text x="91.2734%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (56 samples, 0.09%)</title><rect x="91.1103%" y="197" width="0.0853%" height="15" fill="rgb(214,148,48)" fg:x="59782" fg:w="56"/><text x="91.3603%" y="207.50"></text></g><g><title>main::_compute_flowchange (13,030 samples, 19.86%)</title><rect x="72.1542%" y="213" width="19.8583%" height="15" fill="rgb(232,36,49)" fg:x="47344" fg:w="13030"/><text x="72.4042%" y="223.50">main::_compute_flowchange</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (536 samples, 0.82%)</title><rect x="91.1956%" y="197" width="0.8169%" height="15" fill="rgb(209,103,24)" fg:x="59838" fg:w="536"/><text x="91.4456%" y="207.50"></text></g><g><title>main::_find_best_arc (7 samples, 0.01%)</title><rect x="92.0125%" y="213" width="0.0107%" height="15" fill="rgb(229,88,8)" fg:x="60374" fg:w="7"/><text x="92.2625%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (27 samples, 0.04%)</title><rect x="92.0338%" y="197" width="0.0411%" height="15" fill="rgb(213,181,19)" fg:x="60388" fg:w="27"/><text x="92.2838%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (27 samples, 0.04%)</title><rect x="92.0338%" y="181" width="0.0411%" height="15" fill="rgb(254,191,54)" fg:x="60388" fg:w="27"/><text x="92.2838%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (25 samples, 0.04%)</title><rect x="92.0369%" y="165" width="0.0381%" height="15" fill="rgb(241,83,37)" fg:x="60390" fg:w="25"/><text x="92.2869%" y="175.50"></text></g><g><title>main::initialization::_{{closure}} (25 samples, 0.04%)</title><rect x="92.0369%" y="149" width="0.0381%" height="15" fill="rgb(233,36,39)" fg:x="60390" fg:w="25"/><text x="92.2869%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (9 samples, 0.01%)</title><rect x="92.0750%" y="181" width="0.0137%" height="15" fill="rgb(226,3,54)" fg:x="60415" fg:w="9"/><text x="92.3250%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (9 samples, 0.01%)</title><rect x="92.0750%" y="165" width="0.0137%" height="15" fill="rgb(245,192,40)" fg:x="60415" fg:w="9"/><text x="92.3250%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.01%)</title><rect x="92.0750%" y="149" width="0.0137%" height="15" fill="rgb(238,167,29)" fg:x="60415" fg:w="9"/><text x="92.3250%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9 samples, 0.01%)</title><rect x="92.0750%" y="133" width="0.0137%" height="15" fill="rgb(232,182,51)" fg:x="60415" fg:w="9"/><text x="92.3250%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.01%)</title><rect x="92.0750%" y="117" width="0.0137%" height="15" fill="rgb(231,60,39)" fg:x="60415" fg:w="9"/><text x="92.3250%" y="127.50"></text></g><g><title>core::slice::sort::find_streak (7 samples, 0.01%)</title><rect x="92.0963%" y="117" width="0.0107%" height="15" fill="rgb(208,69,12)" fg:x="60429" fg:w="7"/><text x="92.3463%" y="127.50"></text></g><g><title>itertools::Itertools::sorted_by_key (12 samples, 0.02%)</title><rect x="92.0963%" y="181" width="0.0183%" height="15" fill="rgb(235,93,37)" fg:x="60429" fg:w="12"/><text x="92.3463%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (12 samples, 0.02%)</title><rect x="92.0963%" y="165" width="0.0183%" height="15" fill="rgb(213,116,39)" fg:x="60429" fg:w="12"/><text x="92.3463%" y="175.50"></text></g><g><title>alloc::slice::stable_sort (12 samples, 0.02%)</title><rect x="92.0963%" y="149" width="0.0183%" height="15" fill="rgb(222,207,29)" fg:x="60429" fg:w="12"/><text x="92.3463%" y="159.50"></text></g><g><title>core::slice::sort::merge_sort (12 samples, 0.02%)</title><rect x="92.0963%" y="133" width="0.0183%" height="15" fill="rgb(206,96,30)" fg:x="60429" fg:w="12"/><text x="92.3463%" y="143.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (14 samples, 0.02%)</title><rect x="92.1146%" y="181" width="0.0213%" height="15" fill="rgb(218,138,4)" fg:x="60441" fg:w="14"/><text x="92.3646%" y="191.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (10 samples, 0.02%)</title><rect x="92.1207%" y="165" width="0.0152%" height="15" fill="rgb(250,191,14)" fg:x="60445" fg:w="10"/><text x="92.3707%" y="175.50"></text></g><g><title>main::compute_node_potentials (49 samples, 0.07%)</title><rect x="92.0750%" y="197" width="0.0747%" height="15" fill="rgb(239,60,40)" fg:x="60415" fg:w="49"/><text x="92.3250%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (9 samples, 0.01%)</title><rect x="92.1359%" y="181" width="0.0137%" height="15" fill="rgb(206,27,48)" fg:x="60455" fg:w="9"/><text x="92.3859%" y="191.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (9 samples, 0.01%)</title><rect x="92.1359%" y="165" width="0.0137%" height="15" fill="rgb(225,35,8)" fg:x="60455" fg:w="9"/><text x="92.3859%" y="175.50"></text></g><g><title>main::initialization (96 samples, 0.15%)</title><rect x="92.0232%" y="213" width="0.1463%" height="15" fill="rgb(250,213,24)" fg:x="60381" fg:w="96"/><text x="92.2732%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (13 samples, 0.02%)</title><rect x="92.1497%" y="197" width="0.0198%" height="15" fill="rgb(247,123,22)" fg:x="60464" fg:w="13"/><text x="92.3997%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (90 samples, 0.14%)</title><rect x="92.3402%" y="197" width="0.1372%" height="15" fill="rgb(231,138,38)" fg:x="60589" fg:w="90"/><text x="92.5902%" y="207.50"></text></g><g><title>main::update_node_potentials (221 samples, 0.34%)</title><rect x="92.1695%" y="213" width="0.3368%" height="15" fill="rgb(231,145,46)" fg:x="60477" fg:w="221"/><text x="92.4195%" y="223.50"></text></g><g><title>main::get_reduced_cost_edgeindex (19 samples, 0.03%)</title><rect x="92.4773%" y="197" width="0.0290%" height="15" fill="rgb(251,118,11)" fg:x="60679" fg:w="19"/><text x="92.7273%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (7 samples, 0.01%)</title><rect x="92.4956%" y="181" width="0.0107%" height="15" fill="rgb(217,147,25)" fg:x="60691" fg:w="7"/><text x="92.7456%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17 samples, 0.03%)</title><rect x="98.4089%" y="197" width="0.0259%" height="15" fill="rgb(247,81,37)" fg:x="64571" fg:w="17"/><text x="98.6589%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17 samples, 0.03%)</title><rect x="98.4089%" y="181" width="0.0259%" height="15" fill="rgb(209,12,38)" fg:x="64571" fg:w="17"/><text x="98.6589%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.03%)</title><rect x="98.4089%" y="165" width="0.0259%" height="15" fill="rgb(227,1,9)" fg:x="64571" fg:w="17"/><text x="98.6589%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.01%)</title><rect x="98.6025%" y="149" width="0.0122%" height="15" fill="rgb(248,47,43)" fg:x="64698" fg:w="8"/><text x="98.8525%" y="159.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.01%)</title><rect x="98.6025%" y="133" width="0.0122%" height="15" fill="rgb(221,10,30)" fg:x="64698" fg:w="8"/><text x="98.8525%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.01%)</title><rect x="98.6025%" y="117" width="0.0122%" height="15" fill="rgb(210,229,1)" fg:x="64698" fg:w="8"/><text x="98.8525%" y="127.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (33 samples, 0.05%)</title><rect x="98.6177%" y="149" width="0.0503%" height="15" fill="rgb(222,148,37)" fg:x="64708" fg:w="33"/><text x="98.8677%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (152 samples, 0.23%)</title><rect x="98.4379%" y="197" width="0.2317%" height="15" fill="rgb(234,67,33)" fg:x="64590" fg:w="152"/><text x="98.6879%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (152 samples, 0.23%)</title><rect x="98.4379%" y="181" width="0.2317%" height="15" fill="rgb(247,98,35)" fg:x="64590" fg:w="152"/><text x="98.6879%" y="191.50"></text></g><g><title>main::update_sptree::_{{closure}} (152 samples, 0.23%)</title><rect x="98.4379%" y="165" width="0.2317%" height="15" fill="rgb(247,138,52)" fg:x="64590" fg:w="152"/><text x="98.6879%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (27 samples, 0.04%)</title><rect x="98.7442%" y="165" width="0.0411%" height="15" fill="rgb(213,79,30)" fg:x="64791" fg:w="27"/><text x="98.9942%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.04%)</title><rect x="98.7442%" y="149" width="0.0411%" height="15" fill="rgb(246,177,23)" fg:x="64791" fg:w="27"/><text x="98.9942%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.04%)</title><rect x="98.7442%" y="133" width="0.0411%" height="15" fill="rgb(230,62,27)" fg:x="64791" fg:w="27"/><text x="98.9942%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (231 samples, 0.35%)</title><rect x="98.6741%" y="197" width="0.3521%" height="15" fill="rgb(216,154,8)" fg:x="64745" fg:w="231"/><text x="98.9241%" y="207.50"></text></g><g><title>main::update_sptree::_{{closure}} (221 samples, 0.34%)</title><rect x="98.6893%" y="181" width="0.3368%" height="15" fill="rgb(244,35,45)" fg:x="64755" fg:w="221"/><text x="98.9393%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (158 samples, 0.24%)</title><rect x="98.7853%" y="165" width="0.2408%" height="15" fill="rgb(251,115,12)" fg:x="64818" fg:w="158"/><text x="99.0353%" y="175.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (13 samples, 0.02%)</title><rect x="99.0261%" y="197" width="0.0198%" height="15" fill="rgb(240,54,50)" fg:x="64976" fg:w="13"/><text x="99.2761%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (69 samples, 0.11%)</title><rect x="99.0810%" y="133" width="0.1052%" height="15" fill="rgb(233,84,52)" fg:x="65012" fg:w="69"/><text x="99.3310%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (69 samples, 0.11%)</title><rect x="99.0810%" y="117" width="0.1052%" height="15" fill="rgb(207,117,47)" fg:x="65012" fg:w="69"/><text x="99.3310%" y="127.50"></text></g><g><title>alloc::alloc::realloc (69 samples, 0.11%)</title><rect x="99.0810%" y="101" width="0.1052%" height="15" fill="rgb(249,43,39)" fg:x="65012" fg:w="69"/><text x="99.3310%" y="111.50"></text></g><g><title>realloc (67 samples, 0.10%)</title><rect x="99.0841%" y="85" width="0.1021%" height="15" fill="rgb(209,38,44)" fg:x="65014" fg:w="67"/><text x="99.3341%" y="95.50"></text></g><g><title>[libc.so.6] (59 samples, 0.09%)</title><rect x="99.0962%" y="69" width="0.0899%" height="15" fill="rgb(236,212,23)" fg:x="65022" fg:w="59"/><text x="99.3462%" y="79.50"></text></g><g><title>[libc.so.6] (45 samples, 0.07%)</title><rect x="99.1176%" y="53" width="0.0686%" height="15" fill="rgb(242,79,21)" fg:x="65036" fg:w="45"/><text x="99.3676%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (78 samples, 0.12%)</title><rect x="99.0810%" y="149" width="0.1189%" height="15" fill="rgb(211,96,35)" fg:x="65012" fg:w="78"/><text x="99.3310%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (84 samples, 0.13%)</title><rect x="99.0749%" y="181" width="0.1280%" height="15" fill="rgb(253,215,40)" fg:x="65008" fg:w="84"/><text x="99.3249%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (84 samples, 0.13%)</title><rect x="99.0749%" y="165" width="0.1280%" height="15" fill="rgb(211,81,21)" fg:x="65008" fg:w="84"/><text x="99.3249%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (124 samples, 0.19%)</title><rect x="99.0566%" y="197" width="0.1890%" height="15" fill="rgb(208,190,38)" fg:x="64996" fg:w="124"/><text x="99.3066%" y="207.50"></text></g><g><title>core::ptr::write (26 samples, 0.04%)</title><rect x="99.2060%" y="181" width="0.0396%" height="15" fill="rgb(235,213,38)" fg:x="65094" fg:w="26"/><text x="99.4560%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (95 samples, 0.14%)</title><rect x="99.2502%" y="165" width="0.1448%" height="15" fill="rgb(237,122,38)" fg:x="65123" fg:w="95"/><text x="99.5002%" y="175.50"></text></g><g><title>core::ptr::write (89 samples, 0.14%)</title><rect x="99.2593%" y="149" width="0.1356%" height="15" fill="rgb(244,218,35)" fg:x="65129" fg:w="89"/><text x="99.5093%" y="159.50"></text></g><g><title>__rdl_alloc (8 samples, 0.01%)</title><rect x="99.3965%" y="69" width="0.0122%" height="15" fill="rgb(240,68,47)" fg:x="65219" fg:w="8"/><text x="99.6465%" y="79.50"></text></g><g><title>core::ptr::read_volatile (9 samples, 0.01%)</title><rect x="99.4163%" y="69" width="0.0137%" height="15" fill="rgb(210,16,53)" fg:x="65232" fg:w="9"/><text x="99.6663%" y="79.50"></text></g><g><title>alloc::vec::from_elem (289 samples, 0.44%)</title><rect x="99.2502%" y="197" width="0.4404%" height="15" fill="rgb(235,124,12)" fg:x="65123" fg:w="289"/><text x="99.5002%" y="207.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (289 samples, 0.44%)</title><rect x="99.2502%" y="181" width="0.4404%" height="15" fill="rgb(224,169,11)" fg:x="65123" fg:w="289"/><text x="99.5002%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (194 samples, 0.30%)</title><rect x="99.3950%" y="165" width="0.2957%" height="15" fill="rgb(250,166,2)" fg:x="65218" fg:w="194"/><text x="99.6450%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (194 samples, 0.30%)</title><rect x="99.3950%" y="149" width="0.2957%" height="15" fill="rgb(242,216,29)" fg:x="65218" fg:w="194"/><text x="99.6450%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (194 samples, 0.30%)</title><rect x="99.3950%" y="133" width="0.2957%" height="15" fill="rgb(230,116,27)" fg:x="65218" fg:w="194"/><text x="99.6450%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (193 samples, 0.29%)</title><rect x="99.3965%" y="117" width="0.2941%" height="15" fill="rgb(228,99,48)" fg:x="65219" fg:w="193"/><text x="99.6465%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (193 samples, 0.29%)</title><rect x="99.3965%" y="101" width="0.2941%" height="15" fill="rgb(253,11,6)" fg:x="65219" fg:w="193"/><text x="99.6465%" y="111.50"></text></g><g><title>alloc::alloc::alloc (193 samples, 0.29%)</title><rect x="99.3965%" y="85" width="0.2941%" height="15" fill="rgb(247,143,39)" fg:x="65219" fg:w="193"/><text x="99.6465%" y="95.50"></text></g><g><title>malloc (171 samples, 0.26%)</title><rect x="99.4300%" y="69" width="0.2606%" height="15" fill="rgb(236,97,10)" fg:x="65241" fg:w="171"/><text x="99.6800%" y="79.50"></text></g><g><title>[libc.so.6] (63 samples, 0.10%)</title><rect x="99.5946%" y="53" width="0.0960%" height="15" fill="rgb(233,208,19)" fg:x="65349" fg:w="63"/><text x="99.8446%" y="63.50"></text></g><g><title>[libc.so.6] (25 samples, 0.04%)</title><rect x="99.6525%" y="37" width="0.0381%" height="15" fill="rgb(216,164,2)" fg:x="65387" fg:w="25"/><text x="99.9025%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (14 samples, 0.02%)</title><rect x="99.6906%" y="197" width="0.0213%" height="15" fill="rgb(220,129,5)" fg:x="65412" fg:w="14"/><text x="99.9406%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14 samples, 0.02%)</title><rect x="99.6906%" y="181" width="0.0213%" height="15" fill="rgb(242,17,10)" fg:x="65412" fg:w="14"/><text x="99.9406%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 0.02%)</title><rect x="99.6906%" y="165" width="0.0213%" height="15" fill="rgb(242,107,0)" fg:x="65412" fg:w="14"/><text x="99.9406%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (14 samples, 0.02%)</title><rect x="99.6906%" y="149" width="0.0213%" height="15" fill="rgb(251,28,31)" fg:x="65412" fg:w="14"/><text x="99.9406%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.01%)</title><rect x="99.7013%" y="133" width="0.0107%" height="15" fill="rgb(233,223,10)" fg:x="65419" fg:w="7"/><text x="99.9513%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="99.7013%" y="117" width="0.0107%" height="15" fill="rgb(215,21,27)" fg:x="65419" fg:w="7"/><text x="99.9513%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="99.7013%" y="101" width="0.0107%" height="15" fill="rgb(232,23,21)" fg:x="65419" fg:w="7"/><text x="99.9513%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (7 samples, 0.01%)</title><rect x="99.7013%" y="85" width="0.0107%" height="15" fill="rgb(244,5,23)" fg:x="65419" fg:w="7"/><text x="99.9513%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 0.01%)</title><rect x="99.7226%" y="165" width="0.0107%" height="15" fill="rgb(226,81,46)" fg:x="65433" fg:w="7"/><text x="99.9726%" y="175.50"></text></g><g><title>main::update_sptree::_{{closure}} (7 samples, 0.01%)</title><rect x="99.7226%" y="149" width="0.0107%" height="15" fill="rgb(247,70,30)" fg:x="65433" fg:w="7"/><text x="99.9726%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.02%)</title><rect x="99.7333%" y="69" width="0.0244%" height="15" fill="rgb(212,68,19)" fg:x="65440" fg:w="16"/><text x="99.9833%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.02%)</title><rect x="99.7333%" y="53" width="0.0244%" height="15" fill="rgb(240,187,13)" fg:x="65440" fg:w="16"/><text x="99.9833%" y="63.50"></text></g><g><title>cfree (13 samples, 0.02%)</title><rect x="99.7379%" y="37" width="0.0198%" height="15" fill="rgb(223,113,26)" fg:x="65443" fg:w="13"/><text x="99.9879%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (31 samples, 0.05%)</title><rect x="99.7120%" y="197" width="0.0472%" height="15" fill="rgb(206,192,2)" fg:x="65426" fg:w="31"/><text x="99.9620%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (25 samples, 0.04%)</title><rect x="99.7211%" y="181" width="0.0381%" height="15" fill="rgb(241,108,4)" fg:x="65432" fg:w="25"/><text x="99.9711%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (17 samples, 0.03%)</title><rect x="99.7333%" y="165" width="0.0259%" height="15" fill="rgb(247,173,49)" fg:x="65440" fg:w="17"/><text x="99.9833%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.03%)</title><rect x="99.7333%" y="149" width="0.0259%" height="15" fill="rgb(224,114,35)" fg:x="65440" fg:w="17"/><text x="99.9833%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (17 samples, 0.03%)</title><rect x="99.7333%" y="133" width="0.0259%" height="15" fill="rgb(245,159,27)" fg:x="65440" fg:w="17"/><text x="99.9833%" y="143.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.03%)</title><rect x="99.7333%" y="117" width="0.0259%" height="15" fill="rgb(245,172,44)" fg:x="65440" fg:w="17"/><text x="99.9833%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (17 samples, 0.03%)</title><rect x="99.7333%" y="101" width="0.0259%" height="15" fill="rgb(236,23,11)" fg:x="65440" fg:w="17"/><text x="99.9833%" y="111.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.03%)</title><rect x="99.7333%" y="85" width="0.0259%" height="15" fill="rgb(205,117,38)" fg:x="65440" fg:w="17"/><text x="99.9833%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (40 samples, 0.06%)</title><rect x="99.7592%" y="197" width="0.0610%" height="15" fill="rgb(237,72,25)" fg:x="65457" fg:w="40"/><text x="100.0092%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (79 samples, 0.12%)</title><rect x="99.8217%" y="149" width="0.1204%" height="15" fill="rgb(244,70,9)" fg:x="65498" fg:w="79"/><text x="100.0717%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (79 samples, 0.12%)</title><rect x="99.8217%" y="133" width="0.1204%" height="15" fill="rgb(217,125,39)" fg:x="65498" fg:w="79"/><text x="100.0717%" y="143.50"></text></g><g><title>cfree (77 samples, 0.12%)</title><rect x="99.8247%" y="117" width="0.1174%" height="15" fill="rgb(235,36,10)" fg:x="65500" fg:w="77"/><text x="100.0747%" y="127.50"></text></g><g><title>[libc.so.6] (51 samples, 0.08%)</title><rect x="99.8644%" y="101" width="0.0777%" height="15" fill="rgb(251,123,47)" fg:x="65526" fg:w="51"/><text x="100.1144%" y="111.50"></text></g><g><title>[libc.so.6] (27 samples, 0.04%)</title><rect x="99.9009%" y="85" width="0.0411%" height="15" fill="rgb(221,13,13)" fg:x="65550" fg:w="27"/><text x="100.1509%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (81 samples, 0.12%)</title><rect x="99.8202%" y="197" width="0.1234%" height="15" fill="rgb(238,131,9)" fg:x="65497" fg:w="81"/><text x="100.0702%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (81 samples, 0.12%)</title><rect x="99.8202%" y="181" width="0.1234%" height="15" fill="rgb(211,50,8)" fg:x="65497" fg:w="81"/><text x="100.0702%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.12%)</title><rect x="99.8202%" y="165" width="0.1234%" height="15" fill="rgb(245,182,24)" fg:x="65497" fg:w="81"/><text x="100.0702%" y="175.50"></text></g><g><title>main::min_cost (65,554 samples, 99.91%)</title><rect x="0.0503%" y="229" width="99.9070%" height="15" fill="rgb(242,14,37)" fg:x="33" fg:w="65554"/><text x="0.3003%" y="239.50">main::min_cost</text></g><g><title>main::update_sptree (4,889 samples, 7.45%)</title><rect x="92.5063%" y="213" width="7.4510%" height="15" fill="rgb(246,228,12)" fg:x="60698" fg:w="4889"/><text x="92.7563%" y="223.50">main::upda..</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (9 samples, 0.01%)</title><rect x="99.9436%" y="197" width="0.0137%" height="15" fill="rgb(213,55,15)" fg:x="65578" fg:w="9"/><text x="100.1936%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.01%)</title><rect x="99.9573%" y="213" width="0.0137%" height="15" fill="rgb(209,9,3)" fg:x="65587" fg:w="9"/><text x="100.2073%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (10 samples, 0.02%)</title><rect x="99.9573%" y="229" width="0.0152%" height="15" fill="rgb(230,59,30)" fg:x="65587" fg:w="10"/><text x="100.2073%" y="239.50"></text></g><g><title>_start (65,579 samples, 99.95%)</title><rect x="0.0351%" y="373" width="99.9451%" height="15" fill="rgb(209,121,21)" fg:x="23" fg:w="65579"/><text x="0.2851%" y="383.50">_start</text></g><g><title>__libc_start_main (65,579 samples, 99.95%)</title><rect x="0.0351%" y="357" width="99.9451%" height="15" fill="rgb(220,109,13)" fg:x="23" fg:w="65579"/><text x="0.2851%" y="367.50">__libc_start_main</text></g><g><title>[libc.so.6] (65,579 samples, 99.95%)</title><rect x="0.0351%" y="341" width="99.9451%" height="15" fill="rgb(232,18,1)" fg:x="23" fg:w="65579"/><text x="0.2851%" y="351.50">[libc.so.6]</text></g><g><title>main (65,579 samples, 99.95%)</title><rect x="0.0351%" y="325" width="99.9451%" height="15" fill="rgb(215,41,42)" fg:x="23" fg:w="65579"/><text x="0.2851%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (65,579 samples, 99.95%)</title><rect x="0.0351%" y="309" width="99.9451%" height="15" fill="rgb(224,123,36)" fg:x="23" fg:w="65579"/><text x="0.2851%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (65,579 samples, 99.95%)</title><rect x="0.0351%" y="293" width="99.9451%" height="15" fill="rgb(240,125,3)" fg:x="23" fg:w="65579"/><text x="0.2851%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (65,579 samples, 99.95%)</title><rect x="0.0351%" y="277" width="99.9451%" height="15" fill="rgb(205,98,50)" fg:x="23" fg:w="65579"/><text x="0.2851%" y="287.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (65,579 samples, 99.95%)</title><rect x="0.0351%" y="261" width="99.9451%" height="15" fill="rgb(205,185,37)" fg:x="23" fg:w="65579"/><text x="0.2851%" y="271.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (65,579 samples, 99.95%)</title><rect x="0.0351%" y="245" width="99.9451%" height="15" fill="rgb(238,207,15)" fg:x="23" fg:w="65579"/><text x="0.2851%" y="255.50">main::main</text></g><g><title>main::min_cost (9 samples, 0.01%)</title><rect x="99.9817%" y="373" width="0.0137%" height="15" fill="rgb(213,199,42)" fg:x="65603" fg:w="9"/><text x="100.2317%" y="383.50"></text></g><g><title>main::update_sptree (8 samples, 0.01%)</title><rect x="99.9832%" y="357" width="0.0122%" height="15" fill="rgb(235,201,11)" fg:x="65604" fg:w="8"/><text x="100.2332%" y="367.50"></text></g><g><title>all (65,615 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="65615"/><text x="0.2500%" y="415.50"></text></g><g><title>main (65,615 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="65615"/><text x="0.2500%" y="399.50">main</text></g></svg></svg>