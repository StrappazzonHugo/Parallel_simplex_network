<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="20051"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="0.0000%" y="405" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="415.50"></text></g><g><title>[[heap]] (4 samples, 0.02%)</title><rect x="0.0150%" y="405" width="0.0199%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="4"/><text x="0.2650%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.02%)</title><rect x="0.0150%" y="389" width="0.0199%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="4"/><text x="0.2650%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.02%)</title><rect x="0.0150%" y="373" width="0.0199%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="4"/><text x="0.2650%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.02%)</title><rect x="0.0150%" y="357" width="0.0199%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="4"/><text x="0.2650%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (4 samples, 0.02%)</title><rect x="0.0150%" y="341" width="0.0199%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="4"/><text x="0.2650%" y="351.50"></text></g><g><title>[[stack]] (3 samples, 0.01%)</title><rect x="0.0349%" y="405" width="0.0150%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="3"/><text x="0.2849%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.01%)</title><rect x="0.1147%" y="325" width="0.0150%" height="15" fill="rgb(228,23,34)" fg:x="23" fg:w="3"/><text x="0.3647%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (17 samples, 0.08%)</title><rect x="0.0499%" y="405" width="0.0848%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="17"/><text x="0.2999%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.04%)</title><rect x="0.0898%" y="389" width="0.0449%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="9"/><text x="0.3398%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.04%)</title><rect x="0.0948%" y="373" width="0.0399%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="8"/><text x="0.3448%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.03%)</title><rect x="0.0997%" y="357" width="0.0349%" height="15" fill="rgb(240,193,28)" fg:x="20" fg:w="7"/><text x="0.3497%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.02%)</title><rect x="0.1097%" y="341" width="0.0249%" height="15" fill="rgb(216,20,37)" fg:x="22" fg:w="5"/><text x="0.3597%" y="351.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (8 samples, 0.04%)</title><rect x="0.2593%" y="165" width="0.0399%" height="15" fill="rgb(206,188,39)" fg:x="52" fg:w="8"/><text x="0.5093%" y="175.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (8 samples, 0.04%)</title><rect x="0.2593%" y="149" width="0.0399%" height="15" fill="rgb(217,207,13)" fg:x="52" fg:w="8"/><text x="0.5093%" y="159.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (10 samples, 0.05%)</title><rect x="0.2593%" y="245" width="0.0499%" height="15" fill="rgb(231,73,38)" fg:x="52" fg:w="10"/><text x="0.5093%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.05%)</title><rect x="0.2593%" y="229" width="0.0499%" height="15" fill="rgb(225,20,46)" fg:x="52" fg:w="10"/><text x="0.5093%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.05%)</title><rect x="0.2593%" y="213" width="0.0499%" height="15" fill="rgb(210,31,41)" fg:x="52" fg:w="10"/><text x="0.5093%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.05%)</title><rect x="0.2593%" y="197" width="0.0499%" height="15" fill="rgb(221,200,47)" fg:x="52" fg:w="10"/><text x="0.5093%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.05%)</title><rect x="0.2593%" y="181" width="0.0499%" height="15" fill="rgb(226,26,5)" fg:x="52" fg:w="10"/><text x="0.5093%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.03%)</title><rect x="0.3092%" y="245" width="0.0299%" height="15" fill="rgb(249,33,26)" fg:x="62" fg:w="6"/><text x="0.5592%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.03%)</title><rect x="0.3092%" y="229" width="0.0299%" height="15" fill="rgb(235,183,28)" fg:x="62" fg:w="6"/><text x="0.5592%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6 samples, 0.03%)</title><rect x="0.3092%" y="213" width="0.0299%" height="15" fill="rgb(221,5,38)" fg:x="62" fg:w="6"/><text x="0.5592%" y="223.50"></text></g><g><title>main::min_cost::_{{closure}} (6 samples, 0.03%)</title><rect x="0.3092%" y="197" width="0.0299%" height="15" fill="rgb(247,18,42)" fg:x="62" fg:w="6"/><text x="0.5592%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (890 samples, 4.44%)</title><rect x="43.8183%" y="229" width="4.4387%" height="15" fill="rgb(241,131,45)" fg:x="8786" fg:w="890"/><text x="44.0683%" y="239.50">&lt;i32 ..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (292 samples, 1.46%)</title><rect x="48.2569%" y="229" width="1.4563%" height="15" fill="rgb(249,31,29)" fg:x="9676" fg:w="292"/><text x="48.5069%" y="239.50"></text></g><g><title>&lt;i32 as num_traits::sign::Signed&gt;::is_negative (1,072 samples, 5.35%)</title><rect x="49.7132%" y="229" width="5.3464%" height="15" fill="rgb(225,111,53)" fg:x="9968" fg:w="1072"/><text x="49.9632%" y="239.50">&lt;i32 as..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1,326 samples, 6.61%)</title><rect x="55.0596%" y="229" width="6.6131%" height="15" fill="rgb(238,160,17)" fg:x="11040" fg:w="1326"/><text x="55.3096%" y="239.50">core::cmp..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (216 samples, 1.08%)</title><rect x="61.7725%" y="197" width="1.0773%" height="15" fill="rgb(214,148,48)" fg:x="12386" fg:w="216"/><text x="62.0225%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (216 samples, 1.08%)</title><rect x="61.7725%" y="181" width="1.0773%" height="15" fill="rgb(232,36,49)" fg:x="12386" fg:w="216"/><text x="62.0225%" y="191.50"></text></g><g><title>main::_block_search_v1 (13,005 samples, 64.86%)</title><rect x="0.3491%" y="245" width="64.8596%" height="15" fill="rgb(209,103,24)" fg:x="70" fg:w="13005"/><text x="0.5991%" y="255.50">main::_block_search_v1</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (709 samples, 3.54%)</title><rect x="61.6727%" y="229" width="3.5360%" height="15" fill="rgb(229,88,8)" fg:x="12366" fg:w="709"/><text x="61.9227%" y="239.50">cor..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (709 samples, 3.54%)</title><rect x="61.6727%" y="213" width="3.5360%" height="15" fill="rgb(213,181,19)" fg:x="12366" fg:w="709"/><text x="61.9227%" y="223.50">&lt;co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (473 samples, 2.36%)</title><rect x="62.8497%" y="197" width="2.3590%" height="15" fill="rgb(254,191,54)" fg:x="12602" fg:w="473"/><text x="63.0997%" y="207.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (252 samples, 1.26%)</title><rect x="83.0981%" y="229" width="1.2568%" height="15" fill="rgb(241,83,37)" fg:x="16662" fg:w="252"/><text x="83.3481%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (252 samples, 1.26%)</title><rect x="83.0981%" y="213" width="1.2568%" height="15" fill="rgb(233,36,39)" fg:x="16662" fg:w="252"/><text x="83.3481%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (252 samples, 1.26%)</title><rect x="83.0981%" y="197" width="1.2568%" height="15" fill="rgb(226,3,54)" fg:x="16662" fg:w="252"/><text x="83.3481%" y="207.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (299 samples, 1.49%)</title><rect x="84.3549%" y="229" width="1.4912%" height="15" fill="rgb(245,192,40)" fg:x="16914" fg:w="299"/><text x="84.6049%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::ne (8 samples, 0.04%)</title><rect x="85.8461%" y="229" width="0.0399%" height="15" fill="rgb(238,167,29)" fg:x="17213" fg:w="8"/><text x="86.0961%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (36 samples, 0.18%)</title><rect x="85.8860%" y="229" width="0.1795%" height="15" fill="rgb(232,182,51)" fg:x="17221" fg:w="36"/><text x="86.1360%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (13 samples, 0.06%)</title><rect x="86.0655%" y="229" width="0.0648%" height="15" fill="rgb(231,60,39)" fg:x="17257" fg:w="13"/><text x="86.3155%" y="239.50"></text></g><g><title>main::_compute_flowchange (4,461 samples, 22.25%)</title><rect x="65.2087%" y="245" width="22.2483%" height="15" fill="rgb(208,69,12)" fg:x="13075" fg:w="4461"/><text x="65.4587%" y="255.50">main::_compute_flowchange</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (266 samples, 1.33%)</title><rect x="86.1304%" y="229" width="1.3266%" height="15" fill="rgb(235,93,37)" fg:x="17270" fg:w="266"/><text x="86.3804%" y="239.50"></text></g><g><title>main::_find_best_arc (5 samples, 0.02%)</title><rect x="87.4570%" y="245" width="0.0249%" height="15" fill="rgb(213,116,39)" fg:x="17536" fg:w="5"/><text x="87.7070%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (3 samples, 0.01%)</title><rect x="87.5168%" y="197" width="0.0150%" height="15" fill="rgb(222,207,29)" fg:x="17548" fg:w="3"/><text x="87.7668%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.01%)</title><rect x="87.5168%" y="181" width="0.0150%" height="15" fill="rgb(206,96,30)" fg:x="17548" fg:w="3"/><text x="87.7668%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3 samples, 0.01%)</title><rect x="87.5168%" y="165" width="0.0150%" height="15" fill="rgb(218,138,4)" fg:x="17548" fg:w="3"/><text x="87.7668%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="87.5168%" y="149" width="0.0150%" height="15" fill="rgb(250,191,14)" fg:x="17548" fg:w="3"/><text x="87.7668%" y="159.50"></text></g><g><title>alloc::alloc::alloc_zeroed (3 samples, 0.01%)</title><rect x="87.5168%" y="133" width="0.0150%" height="15" fill="rgb(239,60,40)" fg:x="17548" fg:w="3"/><text x="87.7668%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.01%)</title><rect x="87.5168%" y="117" width="0.0150%" height="15" fill="rgb(206,27,48)" fg:x="17548" fg:w="3"/><text x="87.7668%" y="127.50"></text></g><g><title>alloc::vec::from_elem (4 samples, 0.02%)</title><rect x="87.5168%" y="229" width="0.0199%" height="15" fill="rgb(225,35,8)" fg:x="17548" fg:w="4"/><text x="87.7668%" y="239.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 0.02%)</title><rect x="87.5168%" y="213" width="0.0199%" height="15" fill="rgb(250,213,24)" fg:x="17548" fg:w="4"/><text x="87.7668%" y="223.50"></text></g><g><title>&lt;petgraph::graph_impl::EdgeReferences&lt;E,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="87.5517%" y="197" width="0.0150%" height="15" fill="rgb(247,123,22)" fg:x="17555" fg:w="3"/><text x="87.8017%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (22 samples, 0.11%)</title><rect x="87.5468%" y="229" width="0.1097%" height="15" fill="rgb(231,138,38)" fg:x="17554" fg:w="22"/><text x="87.7968%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 0.11%)</title><rect x="87.5468%" y="213" width="0.1097%" height="15" fill="rgb(231,145,46)" fg:x="17554" fg:w="22"/><text x="87.7968%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (18 samples, 0.09%)</title><rect x="87.5667%" y="197" width="0.0898%" height="15" fill="rgb(251,118,11)" fg:x="17558" fg:w="18"/><text x="87.8167%" y="207.50"></text></g><g><title>main::initialization::_{{closure}} (18 samples, 0.09%)</title><rect x="87.5667%" y="181" width="0.0898%" height="15" fill="rgb(217,147,25)" fg:x="17558" fg:w="18"/><text x="87.8167%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.03%)</title><rect x="87.6665%" y="117" width="0.0349%" height="15" fill="rgb(247,81,37)" fg:x="17578" fg:w="7"/><text x="87.9165%" y="127.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.03%)</title><rect x="87.6665%" y="101" width="0.0349%" height="15" fill="rgb(209,12,38)" fg:x="17578" fg:w="7"/><text x="87.9165%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (14 samples, 0.07%)</title><rect x="87.6565%" y="133" width="0.0698%" height="15" fill="rgb(227,1,9)" fg:x="17576" fg:w="14"/><text x="87.9065%" y="143.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="87.7113%" y="117" width="0.0150%" height="15" fill="rgb(248,47,43)" fg:x="17587" fg:w="3"/><text x="87.9613%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="87.7263%" y="101" width="0.0199%" height="15" fill="rgb(221,10,30)" fg:x="17590" fg:w="4"/><text x="87.9763%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (19 samples, 0.09%)</title><rect x="87.6565%" y="213" width="0.0948%" height="15" fill="rgb(210,229,1)" fg:x="17576" fg:w="19"/><text x="87.9065%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (19 samples, 0.09%)</title><rect x="87.6565%" y="197" width="0.0948%" height="15" fill="rgb(222,148,37)" fg:x="17576" fg:w="19"/><text x="87.9065%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.09%)</title><rect x="87.6565%" y="181" width="0.0948%" height="15" fill="rgb(234,67,33)" fg:x="17576" fg:w="19"/><text x="87.9065%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (19 samples, 0.09%)</title><rect x="87.6565%" y="165" width="0.0948%" height="15" fill="rgb(247,98,35)" fg:x="17576" fg:w="19"/><text x="87.9065%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (19 samples, 0.09%)</title><rect x="87.6565%" y="149" width="0.0948%" height="15" fill="rgb(247,138,52)" fg:x="17576" fg:w="19"/><text x="87.9065%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (5 samples, 0.02%)</title><rect x="87.7263%" y="133" width="0.0249%" height="15" fill="rgb(213,79,30)" fg:x="17590" fg:w="5"/><text x="87.9763%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.02%)</title><rect x="87.7263%" y="117" width="0.0249%" height="15" fill="rgb(246,177,23)" fg:x="17590" fg:w="5"/><text x="87.9763%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.02%)</title><rect x="87.7512%" y="213" width="0.0199%" height="15" fill="rgb(230,62,27)" fg:x="17595" fg:w="4"/><text x="88.0012%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="87.7512%" y="197" width="0.0199%" height="15" fill="rgb(216,154,8)" fg:x="17595" fg:w="4"/><text x="88.0012%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.02%)</title><rect x="87.7512%" y="181" width="0.0199%" height="15" fill="rgb(244,35,45)" fg:x="17595" fg:w="4"/><text x="88.0012%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.02%)</title><rect x="87.7512%" y="165" width="0.0199%" height="15" fill="rgb(251,115,12)" fg:x="17595" fg:w="4"/><text x="88.0012%" y="175.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (4 samples, 0.02%)</title><rect x="87.7512%" y="149" width="0.0199%" height="15" fill="rgb(240,54,50)" fg:x="17595" fg:w="4"/><text x="88.0012%" y="159.50"></text></g><g><title>itertools::Itertools::sorted_by_key (5 samples, 0.02%)</title><rect x="87.7712%" y="213" width="0.0249%" height="15" fill="rgb(233,84,52)" fg:x="17599" fg:w="5"/><text x="88.0212%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (5 samples, 0.02%)</title><rect x="87.7712%" y="197" width="0.0249%" height="15" fill="rgb(207,117,47)" fg:x="17599" fg:w="5"/><text x="88.0212%" y="207.50"></text></g><g><title>alloc::slice::stable_sort (5 samples, 0.02%)</title><rect x="87.7712%" y="181" width="0.0249%" height="15" fill="rgb(249,43,39)" fg:x="17599" fg:w="5"/><text x="88.0212%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (5 samples, 0.02%)</title><rect x="87.7712%" y="165" width="0.0249%" height="15" fill="rgb(209,38,44)" fg:x="17599" fg:w="5"/><text x="88.0212%" y="175.50"></text></g><g><title>core::slice::sort::merge (5 samples, 0.02%)</title><rect x="87.7712%" y="149" width="0.0249%" height="15" fill="rgb(236,212,23)" fg:x="17599" fg:w="5"/><text x="88.0212%" y="159.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="87.8011%" y="197" width="0.0199%" height="15" fill="rgb(242,79,21)" fg:x="17605" fg:w="4"/><text x="88.0511%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.05%)</title><rect x="87.8410%" y="181" width="0.0499%" height="15" fill="rgb(211,96,35)" fg:x="17613" fg:w="10"/><text x="88.0910%" y="191.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (22 samples, 0.11%)</title><rect x="87.7961%" y="213" width="0.1097%" height="15" fill="rgb(253,215,40)" fg:x="17604" fg:w="22"/><text x="88.0461%" y="223.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (17 samples, 0.08%)</title><rect x="87.8211%" y="197" width="0.0848%" height="15" fill="rgb(211,81,21)" fg:x="17609" fg:w="17"/><text x="88.0711%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.02%)</title><rect x="87.9358%" y="165" width="0.0199%" height="15" fill="rgb(208,190,38)" fg:x="17632" fg:w="4"/><text x="88.1858%" y="175.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (7 samples, 0.03%)</title><rect x="87.9308%" y="181" width="0.0349%" height="15" fill="rgb(235,213,38)" fg:x="17631" fg:w="7"/><text x="88.1808%" y="191.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (6 samples, 0.03%)</title><rect x="87.9657%" y="181" width="0.0299%" height="15" fill="rgb(237,122,38)" fg:x="17638" fg:w="6"/><text x="88.2157%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.03%)</title><rect x="87.9657%" y="165" width="0.0299%" height="15" fill="rgb(244,218,35)" fg:x="17638" fg:w="6"/><text x="88.2157%" y="175.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="87.9806%" y="149" width="0.0150%" height="15" fill="rgb(240,68,47)" fg:x="17641" fg:w="3"/><text x="88.2306%" y="159.50"></text></g><g><title>main::compute_node_potentials (69 samples, 0.34%)</title><rect x="87.6565%" y="229" width="0.3441%" height="15" fill="rgb(210,16,53)" fg:x="17576" fg:w="69"/><text x="87.9065%" y="239.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (19 samples, 0.09%)</title><rect x="87.9058%" y="213" width="0.0948%" height="15" fill="rgb(235,124,12)" fg:x="17626" fg:w="19"/><text x="88.1558%" y="223.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (19 samples, 0.09%)</title><rect x="87.9058%" y="197" width="0.0948%" height="15" fill="rgb(224,169,11)" fg:x="17626" fg:w="19"/><text x="88.1558%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24 samples, 0.12%)</title><rect x="88.0355%" y="213" width="0.1197%" height="15" fill="rgb(250,166,2)" fg:x="17652" fg:w="24"/><text x="88.2855%" y="223.50"></text></g><g><title>core::ptr::write (24 samples, 0.12%)</title><rect x="88.0355%" y="197" width="0.1197%" height="15" fill="rgb(242,216,29)" fg:x="17652" fg:w="24"/><text x="88.2855%" y="207.50"></text></g><g><title>main::initialization (136 samples, 0.68%)</title><rect x="87.4819%" y="245" width="0.6783%" height="15" fill="rgb(230,116,27)" fg:x="17541" fg:w="136"/><text x="87.7319%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (32 samples, 0.16%)</title><rect x="88.0006%" y="229" width="0.1596%" height="15" fill="rgb(228,99,48)" fg:x="17645" fg:w="32"/><text x="88.2506%" y="239.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (42 samples, 0.21%)</title><rect x="88.4395%" y="229" width="0.2095%" height="15" fill="rgb(253,11,6)" fg:x="17733" fg:w="42"/><text x="88.6895%" y="239.50"></text></g><g><title>main::update_node_potentials (104 samples, 0.52%)</title><rect x="88.1602%" y="245" width="0.5187%" height="15" fill="rgb(247,143,39)" fg:x="17677" fg:w="104"/><text x="88.4102%" y="255.50"></text></g><g><title>main::get_reduced_cost_edgeindex (6 samples, 0.03%)</title><rect x="88.6489%" y="229" width="0.0299%" height="15" fill="rgb(236,97,10)" fg:x="17775" fg:w="6"/><text x="88.8989%" y="239.50"></text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (4 samples, 0.02%)</title><rect x="88.6589%" y="213" width="0.0199%" height="15" fill="rgb(233,208,19)" fg:x="17777" fg:w="4"/><text x="88.9089%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (15 samples, 0.07%)</title><rect x="97.6261%" y="229" width="0.0748%" height="15" fill="rgb(216,164,2)" fg:x="19575" fg:w="15"/><text x="97.8761%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15 samples, 0.07%)</title><rect x="97.6261%" y="213" width="0.0748%" height="15" fill="rgb(220,129,5)" fg:x="19575" fg:w="15"/><text x="97.8761%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.07%)</title><rect x="97.6261%" y="197" width="0.0748%" height="15" fill="rgb(242,17,10)" fg:x="19575" fg:w="15"/><text x="97.8761%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.01%)</title><rect x="97.8605%" y="181" width="0.0150%" height="15" fill="rgb(242,107,0)" fg:x="19622" fg:w="3"/><text x="98.1105%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.01%)</title><rect x="97.8605%" y="165" width="0.0150%" height="15" fill="rgb(251,28,31)" fg:x="19622" fg:w="3"/><text x="98.1105%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.01%)</title><rect x="97.8605%" y="149" width="0.0150%" height="15" fill="rgb(233,223,10)" fg:x="19622" fg:w="3"/><text x="98.1105%" y="159.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (13 samples, 0.06%)</title><rect x="97.8754%" y="181" width="0.0648%" height="15" fill="rgb(215,21,27)" fg:x="19625" fg:w="13"/><text x="98.1254%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (47 samples, 0.23%)</title><rect x="97.7108%" y="229" width="0.2344%" height="15" fill="rgb(232,23,21)" fg:x="19592" fg:w="47"/><text x="97.9608%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (47 samples, 0.23%)</title><rect x="97.7108%" y="213" width="0.2344%" height="15" fill="rgb(244,5,23)" fg:x="19592" fg:w="47"/><text x="97.9608%" y="223.50"></text></g><g><title>main::update_sptree::_{{closure}} (47 samples, 0.23%)</title><rect x="97.7108%" y="197" width="0.2344%" height="15" fill="rgb(226,81,46)" fg:x="19592" fg:w="47"/><text x="97.9608%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="97.9452%" y="229" width="0.0249%" height="15" fill="rgb(247,70,30)" fg:x="19639" fg:w="5"/><text x="98.1952%" y="239.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (5 samples, 0.02%)</title><rect x="97.9452%" y="213" width="0.0249%" height="15" fill="rgb(212,68,19)" fg:x="19639" fg:w="5"/><text x="98.1952%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="97.9851%" y="213" width="0.0249%" height="15" fill="rgb(240,187,13)" fg:x="19647" fg:w="5"/><text x="98.2351%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.01%)</title><rect x="97.9951%" y="197" width="0.0150%" height="15" fill="rgb(223,113,26)" fg:x="19649" fg:w="3"/><text x="98.2451%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.04%)</title><rect x="98.0949%" y="197" width="0.0399%" height="15" fill="rgb(206,192,2)" fg:x="19669" fg:w="8"/><text x="98.3449%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.04%)</title><rect x="98.0949%" y="181" width="0.0399%" height="15" fill="rgb(241,108,4)" fg:x="19669" fg:w="8"/><text x="98.3449%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.04%)</title><rect x="98.0949%" y="165" width="0.0399%" height="15" fill="rgb(247,173,49)" fg:x="19669" fg:w="8"/><text x="98.3449%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (80 samples, 0.40%)</title><rect x="97.9702%" y="229" width="0.3990%" height="15" fill="rgb(224,114,35)" fg:x="19644" fg:w="80"/><text x="98.2202%" y="239.50"></text></g><g><title>main::update_sptree::_{{closure}} (72 samples, 0.36%)</title><rect x="98.0101%" y="213" width="0.3591%" height="15" fill="rgb(245,159,27)" fg:x="19652" fg:w="72"/><text x="98.2601%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (47 samples, 0.23%)</title><rect x="98.1348%" y="197" width="0.2344%" height="15" fill="rgb(245,172,44)" fg:x="19677" fg:w="47"/><text x="98.3848%" y="207.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (3 samples, 0.01%)</title><rect x="98.3692%" y="229" width="0.0150%" height="15" fill="rgb(236,23,11)" fg:x="19724" fg:w="3"/><text x="98.6192%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.01%)</title><rect x="98.3841%" y="229" width="0.0150%" height="15" fill="rgb(205,117,38)" fg:x="19727" fg:w="3"/><text x="98.6341%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.01%)</title><rect x="98.3841%" y="213" width="0.0150%" height="15" fill="rgb(237,72,25)" fg:x="19727" fg:w="3"/><text x="98.6341%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.01%)</title><rect x="98.3841%" y="197" width="0.0150%" height="15" fill="rgb(244,70,9)" fg:x="19727" fg:w="3"/><text x="98.6341%" y="207.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.01%)</title><rect x="98.3841%" y="181" width="0.0150%" height="15" fill="rgb(217,125,39)" fg:x="19727" fg:w="3"/><text x="98.6341%" y="191.50"></text></g><g><title>malloc (3 samples, 0.01%)</title><rect x="98.3841%" y="165" width="0.0150%" height="15" fill="rgb(235,36,10)" fg:x="19727" fg:w="3"/><text x="98.6341%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.01%)</title><rect x="98.4240%" y="181" width="0.0150%" height="15" fill="rgb(251,123,47)" fg:x="19735" fg:w="3"/><text x="98.6740%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (37 samples, 0.18%)</title><rect x="98.4390%" y="165" width="0.1845%" height="15" fill="rgb(221,13,13)" fg:x="19738" fg:w="37"/><text x="98.6890%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (37 samples, 0.18%)</title><rect x="98.4390%" y="149" width="0.1845%" height="15" fill="rgb(238,131,9)" fg:x="19738" fg:w="37"/><text x="98.6890%" y="159.50"></text></g><g><title>alloc::alloc::realloc (37 samples, 0.18%)</title><rect x="98.4390%" y="133" width="0.1845%" height="15" fill="rgb(211,50,8)" fg:x="19738" fg:w="37"/><text x="98.6890%" y="143.50"></text></g><g><title>realloc (36 samples, 0.18%)</title><rect x="98.4440%" y="117" width="0.1795%" height="15" fill="rgb(245,182,24)" fg:x="19739" fg:w="36"/><text x="98.6940%" y="127.50"></text></g><g><title>[libc.so.6] (27 samples, 0.13%)</title><rect x="98.4889%" y="101" width="0.1347%" height="15" fill="rgb(242,14,37)" fg:x="19748" fg:w="27"/><text x="98.7389%" y="111.50"></text></g><g><title>[libc.so.6] (22 samples, 0.11%)</title><rect x="98.5138%" y="85" width="0.1097%" height="15" fill="rgb(246,228,12)" fg:x="19753" fg:w="22"/><text x="98.7638%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (44 samples, 0.22%)</title><rect x="98.4240%" y="213" width="0.2194%" height="15" fill="rgb(213,55,15)" fg:x="19735" fg:w="44"/><text x="98.6740%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (44 samples, 0.22%)</title><rect x="98.4240%" y="197" width="0.2194%" height="15" fill="rgb(209,9,3)" fg:x="19735" fg:w="44"/><text x="98.6740%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (41 samples, 0.20%)</title><rect x="98.4390%" y="181" width="0.2045%" height="15" fill="rgb(230,59,30)" fg:x="19738" fg:w="41"/><text x="98.6890%" y="191.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="98.6235%" y="165" width="0.0199%" height="15" fill="rgb(209,121,21)" fg:x="19775" fg:w="4"/><text x="98.8735%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (58 samples, 0.29%)</title><rect x="98.3991%" y="229" width="0.2893%" height="15" fill="rgb(220,109,13)" fg:x="19730" fg:w="58"/><text x="98.6491%" y="239.50"></text></g><g><title>core::ptr::write (7 samples, 0.03%)</title><rect x="98.6534%" y="213" width="0.0349%" height="15" fill="rgb(232,18,1)" fg:x="19781" fg:w="7"/><text x="98.9034%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.01%)</title><rect x="98.7033%" y="181" width="0.0150%" height="15" fill="rgb(215,41,42)" fg:x="19791" fg:w="3"/><text x="98.9533%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.01%)</title><rect x="98.7033%" y="165" width="0.0150%" height="15" fill="rgb(224,123,36)" fg:x="19791" fg:w="3"/><text x="98.9533%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (35 samples, 0.17%)</title><rect x="98.7033%" y="197" width="0.1746%" height="15" fill="rgb(240,125,3)" fg:x="19791" fg:w="35"/><text x="98.9533%" y="207.50"></text></g><g><title>core::ptr::write (32 samples, 0.16%)</title><rect x="98.7183%" y="181" width="0.1596%" height="15" fill="rgb(205,98,50)" fg:x="19794" fg:w="32"/><text x="98.9683%" y="191.50"></text></g><g><title>__rdl_alloc (5 samples, 0.02%)</title><rect x="98.8878%" y="101" width="0.0249%" height="15" fill="rgb(205,185,37)" fg:x="19828" fg:w="5"/><text x="99.1378%" y="111.50"></text></g><g><title>core::ptr::read_volatile (5 samples, 0.02%)</title><rect x="98.9227%" y="101" width="0.0249%" height="15" fill="rgb(238,207,15)" fg:x="19835" fg:w="5"/><text x="99.1727%" y="111.50"></text></g><g><title>alloc::vec::from_elem (124 samples, 0.62%)</title><rect x="98.6983%" y="229" width="0.6184%" height="15" fill="rgb(213,199,42)" fg:x="19790" fg:w="124"/><text x="98.9483%" y="239.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (124 samples, 0.62%)</title><rect x="98.6983%" y="213" width="0.6184%" height="15" fill="rgb(235,201,11)" fg:x="19790" fg:w="124"/><text x="98.9483%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (88 samples, 0.44%)</title><rect x="98.8779%" y="197" width="0.4389%" height="15" fill="rgb(207,46,11)" fg:x="19826" fg:w="88"/><text x="99.1279%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (88 samples, 0.44%)</title><rect x="98.8779%" y="181" width="0.4389%" height="15" fill="rgb(241,35,35)" fg:x="19826" fg:w="88"/><text x="99.1279%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (88 samples, 0.44%)</title><rect x="98.8779%" y="165" width="0.4389%" height="15" fill="rgb(243,32,47)" fg:x="19826" fg:w="88"/><text x="99.1279%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.43%)</title><rect x="98.8878%" y="149" width="0.4289%" height="15" fill="rgb(247,202,23)" fg:x="19828" fg:w="86"/><text x="99.1378%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.43%)</title><rect x="98.8878%" y="133" width="0.4289%" height="15" fill="rgb(219,102,11)" fg:x="19828" fg:w="86"/><text x="99.1378%" y="143.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.43%)</title><rect x="98.8878%" y="117" width="0.4289%" height="15" fill="rgb(243,110,44)" fg:x="19828" fg:w="86"/><text x="99.1378%" y="127.50"></text></g><g><title>malloc (74 samples, 0.37%)</title><rect x="98.9477%" y="101" width="0.3691%" height="15" fill="rgb(222,74,54)" fg:x="19840" fg:w="74"/><text x="99.1977%" y="111.50"></text></g><g><title>[libc.so.6] (27 samples, 0.13%)</title><rect x="99.1821%" y="85" width="0.1347%" height="15" fill="rgb(216,99,12)" fg:x="19887" fg:w="27"/><text x="99.4321%" y="95.50"></text></g><g><title>[libc.so.6] (12 samples, 0.06%)</title><rect x="99.2569%" y="69" width="0.0598%" height="15" fill="rgb(226,22,26)" fg:x="19902" fg:w="12"/><text x="99.5069%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 0.03%)</title><rect x="99.3167%" y="229" width="0.0299%" height="15" fill="rgb(217,163,10)" fg:x="19914" fg:w="6"/><text x="99.5667%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.03%)</title><rect x="99.3167%" y="213" width="0.0299%" height="15" fill="rgb(213,25,53)" fg:x="19914" fg:w="6"/><text x="99.5667%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.03%)</title><rect x="99.3167%" y="197" width="0.0299%" height="15" fill="rgb(252,105,26)" fg:x="19914" fg:w="6"/><text x="99.5667%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 0.03%)</title><rect x="99.3167%" y="181" width="0.0299%" height="15" fill="rgb(220,39,43)" fg:x="19914" fg:w="6"/><text x="99.5667%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.02%)</title><rect x="99.3267%" y="165" width="0.0199%" height="15" fill="rgb(229,68,48)" fg:x="19916" fg:w="4"/><text x="99.5767%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="99.3267%" y="149" width="0.0199%" height="15" fill="rgb(252,8,32)" fg:x="19916" fg:w="4"/><text x="99.5767%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="99.3267%" y="133" width="0.0199%" height="15" fill="rgb(223,20,43)" fg:x="19916" fg:w="4"/><text x="99.5767%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4 samples, 0.02%)</title><rect x="99.3267%" y="117" width="0.0199%" height="15" fill="rgb(229,81,49)" fg:x="19916" fg:w="4"/><text x="99.5767%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="99.3267%" y="101" width="0.0199%" height="15" fill="rgb(236,28,36)" fg:x="19916" fg:w="4"/><text x="99.5767%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="99.3267%" y="85" width="0.0199%" height="15" fill="rgb(249,185,26)" fg:x="19916" fg:w="4"/><text x="99.5767%" y="95.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="99.3267%" y="69" width="0.0199%" height="15" fill="rgb(249,174,33)" fg:x="19916" fg:w="4"/><text x="99.5767%" y="79.50"></text></g><g><title>malloc (4 samples, 0.02%)</title><rect x="99.3267%" y="53" width="0.0199%" height="15" fill="rgb(233,201,37)" fg:x="19916" fg:w="4"/><text x="99.5767%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.01%)</title><rect x="99.3517%" y="213" width="0.0150%" height="15" fill="rgb(221,78,26)" fg:x="19921" fg:w="3"/><text x="99.6017%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.02%)</title><rect x="99.3716%" y="197" width="0.0199%" height="15" fill="rgb(250,127,30)" fg:x="19925" fg:w="4"/><text x="99.6216%" y="207.50"></text></g><g><title>main::update_sptree::_{{closure}} (4 samples, 0.02%)</title><rect x="99.3716%" y="181" width="0.0199%" height="15" fill="rgb(230,49,44)" fg:x="19925" fg:w="4"/><text x="99.6216%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16 samples, 0.08%)</title><rect x="99.3467%" y="229" width="0.0798%" height="15" fill="rgb(229,67,23)" fg:x="19920" fg:w="16"/><text x="99.5967%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 0.06%)</title><rect x="99.3666%" y="213" width="0.0598%" height="15" fill="rgb(249,83,47)" fg:x="19924" fg:w="12"/><text x="99.6166%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (7 samples, 0.03%)</title><rect x="99.3916%" y="197" width="0.0349%" height="15" fill="rgb(215,43,3)" fg:x="19929" fg:w="7"/><text x="99.6416%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="99.3916%" y="181" width="0.0349%" height="15" fill="rgb(238,154,13)" fg:x="19929" fg:w="7"/><text x="99.6416%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (7 samples, 0.03%)</title><rect x="99.3916%" y="165" width="0.0349%" height="15" fill="rgb(219,56,2)" fg:x="19929" fg:w="7"/><text x="99.6416%" y="175.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="99.3916%" y="149" width="0.0349%" height="15" fill="rgb(233,0,4)" fg:x="19929" fg:w="7"/><text x="99.6416%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (7 samples, 0.03%)</title><rect x="99.3916%" y="133" width="0.0349%" height="15" fill="rgb(235,30,7)" fg:x="19929" fg:w="7"/><text x="99.6416%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.03%)</title><rect x="99.3916%" y="117" width="0.0349%" height="15" fill="rgb(250,79,13)" fg:x="19929" fg:w="7"/><text x="99.6416%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.03%)</title><rect x="99.3916%" y="101" width="0.0349%" height="15" fill="rgb(211,146,34)" fg:x="19929" fg:w="7"/><text x="99.6416%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.03%)</title><rect x="99.3916%" y="85" width="0.0349%" height="15" fill="rgb(228,22,38)" fg:x="19929" fg:w="7"/><text x="99.6416%" y="95.50"></text></g><g><title>cfree (5 samples, 0.02%)</title><rect x="99.4015%" y="69" width="0.0249%" height="15" fill="rgb(235,168,5)" fg:x="19931" fg:w="5"/><text x="99.6515%" y="79.50"></text></g><g><title>[libc.so.6] (3 samples, 0.01%)</title><rect x="99.4115%" y="53" width="0.0150%" height="15" fill="rgb(221,155,16)" fg:x="19933" fg:w="3"/><text x="99.6615%" y="63.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (17 samples, 0.08%)</title><rect x="99.4314%" y="229" width="0.0848%" height="15" fill="rgb(215,215,53)" fg:x="19937" fg:w="17"/><text x="99.6814%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30 samples, 0.15%)</title><rect x="99.5162%" y="181" width="0.1496%" height="15" fill="rgb(223,4,10)" fg:x="19954" fg:w="30"/><text x="99.7662%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.15%)</title><rect x="99.5162%" y="165" width="0.1496%" height="15" fill="rgb(234,103,6)" fg:x="19954" fg:w="30"/><text x="99.7662%" y="175.50"></text></g><g><title>cfree (29 samples, 0.14%)</title><rect x="99.5212%" y="149" width="0.1446%" height="15" fill="rgb(227,97,0)" fg:x="19955" fg:w="29"/><text x="99.7712%" y="159.50"></text></g><g><title>[libc.so.6] (23 samples, 0.11%)</title><rect x="99.5511%" y="133" width="0.1147%" height="15" fill="rgb(234,150,53)" fg:x="19961" fg:w="23"/><text x="99.8011%" y="143.50"></text></g><g><title>[libc.so.6] (6 samples, 0.03%)</title><rect x="99.6359%" y="117" width="0.0299%" height="15" fill="rgb(228,201,54)" fg:x="19978" fg:w="6"/><text x="99.8859%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (34 samples, 0.17%)</title><rect x="99.5162%" y="229" width="0.1696%" height="15" fill="rgb(222,22,37)" fg:x="19954" fg:w="34"/><text x="99.7662%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (34 samples, 0.17%)</title><rect x="99.5162%" y="213" width="0.1696%" height="15" fill="rgb(237,53,32)" fg:x="19954" fg:w="34"/><text x="99.7662%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.17%)</title><rect x="99.5162%" y="197" width="0.1696%" height="15" fill="rgb(233,25,53)" fg:x="19954" fg:w="34"/><text x="99.7662%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.02%)</title><rect x="99.6659%" y="181" width="0.0199%" height="15" fill="rgb(210,40,34)" fg:x="19984" fg:w="4"/><text x="99.9159%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (4 samples, 0.02%)</title><rect x="99.6659%" y="165" width="0.0199%" height="15" fill="rgb(241,220,44)" fg:x="19984" fg:w="4"/><text x="99.9159%" y="175.50"></text></g><g><title>main::min_cost (19,945 samples, 99.47%)</title><rect x="0.2294%" y="261" width="99.4713%" height="15" fill="rgb(235,28,35)" fg:x="46" fg:w="19945"/><text x="0.4794%" y="271.50">main::min_cost</text></g><g><title>main::update_sptree (2,210 samples, 11.02%)</title><rect x="88.6789%" y="245" width="11.0219%" height="15" fill="rgb(210,56,17)" fg:x="17781" fg:w="2210"/><text x="88.9289%" y="255.50">main::update_spt..</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3 samples, 0.01%)</title><rect x="99.6858%" y="229" width="0.0150%" height="15" fill="rgb(224,130,29)" fg:x="19988" fg:w="3"/><text x="99.9358%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29 samples, 0.14%)</title><rect x="99.7157%" y="245" width="0.1446%" height="15" fill="rgb(235,212,8)" fg:x="19994" fg:w="29"/><text x="99.9657%" y="255.50"></text></g><g><title>core::ptr::write (24 samples, 0.12%)</title><rect x="99.7407%" y="229" width="0.1197%" height="15" fill="rgb(223,33,50)" fg:x="19999" fg:w="24"/><text x="99.9907%" y="239.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (37 samples, 0.18%)</title><rect x="99.7008%" y="261" width="0.1845%" height="15" fill="rgb(219,149,13)" fg:x="19991" fg:w="37"/><text x="99.9508%" y="271.50"></text></g><g><title>petgraph::graph_impl::index_twice (5 samples, 0.02%)</title><rect x="99.8604%" y="245" width="0.0249%" height="15" fill="rgb(250,156,29)" fg:x="20023" fg:w="5"/><text x="100.1104%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (9 samples, 0.04%)</title><rect x="99.8853%" y="261" width="0.0449%" height="15" fill="rgb(216,193,19)" fg:x="20028" fg:w="9"/><text x="100.1353%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.03%)</title><rect x="99.8953%" y="245" width="0.0349%" height="15" fill="rgb(216,135,14)" fg:x="20030" fg:w="7"/><text x="100.1453%" y="255.50"></text></g><g><title>core::ptr::write (4 samples, 0.02%)</title><rect x="99.9102%" y="229" width="0.0199%" height="15" fill="rgb(241,47,5)" fg:x="20033" fg:w="4"/><text x="100.1602%" y="239.50"></text></g><g><title>_start (20,016 samples, 99.83%)</title><rect x="0.1446%" y="405" width="99.8254%" height="15" fill="rgb(233,42,35)" fg:x="29" fg:w="20016"/><text x="0.3946%" y="415.50">_start</text></g><g><title>__libc_start_main (20,016 samples, 99.83%)</title><rect x="0.1446%" y="389" width="99.8254%" height="15" fill="rgb(231,13,6)" fg:x="29" fg:w="20016"/><text x="0.3946%" y="399.50">__libc_start_main</text></g><g><title>[libc.so.6] (20,016 samples, 99.83%)</title><rect x="0.1446%" y="373" width="99.8254%" height="15" fill="rgb(207,181,40)" fg:x="29" fg:w="20016"/><text x="0.3946%" y="383.50">[libc.so.6]</text></g><g><title>main (20,016 samples, 99.83%)</title><rect x="0.1446%" y="357" width="99.8254%" height="15" fill="rgb(254,173,49)" fg:x="29" fg:w="20016"/><text x="0.3946%" y="367.50">main</text></g><g><title>std::rt::lang_start_internal (20,016 samples, 99.83%)</title><rect x="0.1446%" y="341" width="99.8254%" height="15" fill="rgb(221,1,38)" fg:x="29" fg:w="20016"/><text x="0.3946%" y="351.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (20,016 samples, 99.83%)</title><rect x="0.1446%" y="325" width="99.8254%" height="15" fill="rgb(206,124,46)" fg:x="29" fg:w="20016"/><text x="0.3946%" y="335.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,016 samples, 99.83%)</title><rect x="0.1446%" y="309" width="99.8254%" height="15" fill="rgb(249,21,11)" fg:x="29" fg:w="20016"/><text x="0.3946%" y="319.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (20,016 samples, 99.83%)</title><rect x="0.1446%" y="293" width="99.8254%" height="15" fill="rgb(222,201,40)" fg:x="29" fg:w="20016"/><text x="0.3946%" y="303.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (20,016 samples, 99.83%)</title><rect x="0.1446%" y="277" width="99.8254%" height="15" fill="rgb(235,61,29)" fg:x="29" fg:w="20016"/><text x="0.3946%" y="287.50">main::main</text></g><g><title>rand::rng::Rng::gen (8 samples, 0.04%)</title><rect x="99.9302%" y="261" width="0.0399%" height="15" fill="rgb(219,207,3)" fg:x="20037" fg:w="8"/><text x="100.1802%" y="271.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (8 samples, 0.04%)</title><rect x="99.9302%" y="245" width="0.0399%" height="15" fill="rgb(222,56,46)" fg:x="20037" fg:w="8"/><text x="100.1802%" y="255.50"></text></g><g><title>rand::rng::Rng::gen (6 samples, 0.03%)</title><rect x="99.9402%" y="229" width="0.0299%" height="15" fill="rgb(239,76,54)" fg:x="20039" fg:w="6"/><text x="100.1902%" y="239.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (6 samples, 0.03%)</title><rect x="99.9402%" y="213" width="0.0299%" height="15" fill="rgb(231,124,27)" fg:x="20039" fg:w="6"/><text x="100.1902%" y="223.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (6 samples, 0.03%)</title><rect x="99.9402%" y="197" width="0.0299%" height="15" fill="rgb(249,195,6)" fg:x="20039" fg:w="6"/><text x="100.1902%" y="207.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (6 samples, 0.03%)</title><rect x="99.9402%" y="181" width="0.0299%" height="15" fill="rgb(237,174,47)" fg:x="20039" fg:w="6"/><text x="100.1902%" y="191.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (6 samples, 0.03%)</title><rect x="99.9402%" y="165" width="0.0299%" height="15" fill="rgb(206,201,31)" fg:x="20039" fg:w="6"/><text x="100.1902%" y="175.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (5 samples, 0.02%)</title><rect x="99.9451%" y="149" width="0.0249%" height="15" fill="rgb(231,57,52)" fg:x="20040" fg:w="5"/><text x="100.1951%" y="159.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (5 samples, 0.02%)</title><rect x="99.9451%" y="133" width="0.0249%" height="15" fill="rgb(248,177,22)" fg:x="20040" fg:w="5"/><text x="100.1951%" y="143.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (5 samples, 0.02%)</title><rect x="99.9451%" y="117" width="0.0249%" height="15" fill="rgb(215,211,37)" fg:x="20040" fg:w="5"/><text x="100.1951%" y="127.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (5 samples, 0.02%)</title><rect x="99.9451%" y="101" width="0.0249%" height="15" fill="rgb(241,128,51)" fg:x="20040" fg:w="5"/><text x="100.1951%" y="111.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (5 samples, 0.02%)</title><rect x="99.9451%" y="85" width="0.0249%" height="15" fill="rgb(227,165,31)" fg:x="20040" fg:w="5"/><text x="100.1951%" y="95.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (5 samples, 0.02%)</title><rect x="99.9451%" y="69" width="0.0249%" height="15" fill="rgb(228,167,24)" fg:x="20040" fg:w="5"/><text x="100.1951%" y="79.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (5 samples, 0.02%)</title><rect x="99.9451%" y="53" width="0.0249%" height="15" fill="rgb(228,143,12)" fg:x="20040" fg:w="5"/><text x="100.1951%" y="63.50"></text></g><g><title>rand_chacha::guts::round (4 samples, 0.02%)</title><rect x="99.9501%" y="37" width="0.0199%" height="15" fill="rgb(249,149,8)" fg:x="20041" fg:w="4"/><text x="100.2001%" y="47.50"></text></g><g><title>main::min_cost (4 samples, 0.02%)</title><rect x="99.9751%" y="405" width="0.0199%" height="15" fill="rgb(243,35,44)" fg:x="20046" fg:w="4"/><text x="100.2251%" y="415.50"></text></g><g><title>main::update_sptree (4 samples, 0.02%)</title><rect x="99.9751%" y="389" width="0.0199%" height="15" fill="rgb(246,89,9)" fg:x="20046" fg:w="4"/><text x="100.2251%" y="399.50"></text></g><g><title>all (20,051 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(233,213,13)" fg:x="0" fg:w="20051"/><text x="0.2500%" y="447.50"></text></g><g><title>main (20,051 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="20051"/><text x="0.2500%" y="431.50">main</text></g></svg></svg>