<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="4395"><g><title>[[heap]] (1 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0228%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0228%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.0228%" y="437" width="0.0228%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2728%" y="447.50"></text></g><g><title>[[stack]] (2 samples, 0.05%)</title><rect x="0.0228%" y="453" width="0.0455%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.2728%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.0455%" y="437" width="0.0228%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.2955%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="0.0455%" y="421" width="0.0228%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.2955%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="0.0455%" y="405" width="0.0228%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2955%" y="415.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="0.0455%" y="389" width="0.0228%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2955%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.20%)</title><rect x="0.0683%" y="453" width="0.2048%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="9"/><text x="0.3183%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.07%)</title><rect x="0.2048%" y="437" width="0.0683%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="3"/><text x="0.4548%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.07%)</title><rect x="0.2048%" y="421" width="0.0683%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="3"/><text x="0.4548%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.07%)</title><rect x="0.2048%" y="405" width="0.0683%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="3"/><text x="0.4548%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="0.2275%" y="389" width="0.0455%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="2"/><text x="0.4775%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.2503%" y="373" width="0.0228%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1"/><text x="0.5003%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.2503%" y="357" width="0.0228%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="1"/><text x="0.5003%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="0.2730%" y="437" width="0.0455%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="2"/><text x="0.5230%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.09%)</title><rect x="0.2730%" y="453" width="0.0910%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="4"/><text x="0.5230%" y="463.50"></text></g><g><title>malloc (2 samples, 0.05%)</title><rect x="0.3185%" y="437" width="0.0455%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="2"/><text x="0.5685%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="0.3641%" y="309" width="0.0228%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="1"/><text x="0.6141%" y="319.50"></text></g><g><title>&lt;petgraph::graph_impl::Edge&lt;E,Ix&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.4778%" y="213" width="0.0228%" height="15" fill="rgb(226,26,5)" fg:x="21" fg:w="1"/><text x="0.7278%" y="223.50"></text></g><g><title>&lt;main::CustomEdgeIndices&lt;NUM&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.4778%" y="197" width="0.0228%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="1"/><text x="0.7278%" y="207.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="0.4778%" y="293" width="0.0455%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="2"/><text x="0.7278%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="0.4778%" y="277" width="0.0455%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="2"/><text x="0.7278%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.05%)</title><rect x="0.4778%" y="261" width="0.0455%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="2"/><text x="0.7278%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.05%)</title><rect x="0.4778%" y="245" width="0.0455%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="2"/><text x="0.7278%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.05%)</title><rect x="0.4778%" y="229" width="0.0455%" height="15" fill="rgb(249,31,29)" fg:x="21" fg:w="2"/><text x="0.7278%" y="239.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.02%)</title><rect x="0.5006%" y="213" width="0.0228%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="0.7506%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.5233%" y="277" width="0.0228%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="1"/><text x="0.7733%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.5233%" y="261" width="0.0228%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="1"/><text x="0.7733%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (1 samples, 0.02%)</title><rect x="0.5233%" y="245" width="0.0228%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="1"/><text x="0.7733%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="0.5233%" y="229" width="0.0228%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="1"/><text x="0.7733%" y="239.50"></text></g><g><title>main::min_cost::_{{closure}} (1 samples, 0.02%)</title><rect x="0.5233%" y="213" width="0.0228%" height="15" fill="rgb(229,88,8)" fg:x="23" fg:w="1"/><text x="0.7733%" y="223.50"></text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.02%)</title><rect x="0.5233%" y="197" width="0.0228%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="0.7733%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.07%)</title><rect x="0.5233%" y="293" width="0.0683%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="3"/><text x="0.7733%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.05%)</title><rect x="0.5461%" y="277" width="0.0455%" height="15" fill="rgb(241,83,37)" fg:x="24" fg:w="2"/><text x="0.7961%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect x="0.5461%" y="261" width="0.0455%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="2"/><text x="0.7961%" y="271.50"></text></g><g><title>main::min_cost::_{{closure}} (2 samples, 0.05%)</title><rect x="0.5461%" y="245" width="0.0455%" height="15" fill="rgb(226,3,54)" fg:x="24" fg:w="2"/><text x="0.7961%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.02%)</title><rect x="0.5916%" y="293" width="0.0228%" height="15" fill="rgb(245,192,40)" fg:x="26" fg:w="1"/><text x="0.8416%" y="303.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (179 samples, 4.07%)</title><rect x="40.9556%" y="277" width="4.0728%" height="15" fill="rgb(238,167,29)" fg:x="1800" fg:w="179"/><text x="41.2056%" y="287.50">&lt;i32..</text></g><g><title>&lt;i32 as core::ops::arith::Mul&gt;::mul (101 samples, 2.30%)</title><rect x="45.0284%" y="277" width="2.2981%" height="15" fill="rgb(232,182,51)" fg:x="1979" fg:w="101"/><text x="45.2784%" y="287.50">&lt;..</text></g><g><title>&lt;i32 as num_traits::sign::Signed&gt;::is_negative (282 samples, 6.42%)</title><rect x="47.3265%" y="277" width="6.4164%" height="15" fill="rgb(231,60,39)" fg:x="2080" fg:w="282"/><text x="47.5765%" y="287.50">&lt;i32 as ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (324 samples, 7.37%)</title><rect x="53.7429%" y="277" width="7.3720%" height="15" fill="rgb(208,69,12)" fg:x="2362" fg:w="324"/><text x="53.9929%" y="287.50">core::cmp:..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (64 samples, 1.46%)</title><rect x="61.2514%" y="245" width="1.4562%" height="15" fill="rgb(235,93,37)" fg:x="2692" fg:w="64"/><text x="61.5014%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (64 samples, 1.46%)</title><rect x="61.2514%" y="229" width="1.4562%" height="15" fill="rgb(213,116,39)" fg:x="2692" fg:w="64"/><text x="61.5014%" y="239.50"></text></g><g><title>main::_block_search_v1 (2,858 samples, 65.03%)</title><rect x="0.6143%" y="293" width="65.0284%" height="15" fill="rgb(222,207,29)" fg:x="27" fg:w="2858"/><text x="0.8643%" y="303.50">main::_block_search_v1</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (199 samples, 4.53%)</title><rect x="61.1149%" y="277" width="4.5279%" height="15" fill="rgb(206,96,30)" fg:x="2686" fg:w="199"/><text x="61.3649%" y="287.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (199 samples, 4.53%)</title><rect x="61.1149%" y="261" width="4.5279%" height="15" fill="rgb(218,138,4)" fg:x="2686" fg:w="199"/><text x="61.3649%" y="271.50">&lt;core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (129 samples, 2.94%)</title><rect x="62.7076%" y="245" width="2.9352%" height="15" fill="rgb(250,191,14)" fg:x="2756" fg:w="129"/><text x="62.9576%" y="255.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (79 samples, 1.80%)</title><rect x="82.7986%" y="277" width="1.7975%" height="15" fill="rgb(239,60,40)" fg:x="3639" fg:w="79"/><text x="83.0486%" y="287.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (79 samples, 1.80%)</title><rect x="82.7986%" y="261" width="1.7975%" height="15" fill="rgb(206,27,48)" fg:x="3639" fg:w="79"/><text x="83.0486%" y="271.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (79 samples, 1.80%)</title><rect x="82.7986%" y="245" width="1.7975%" height="15" fill="rgb(225,35,8)" fg:x="3639" fg:w="79"/><text x="83.0486%" y="255.50">&lt;..</text></g><g><title>&lt;i32 as core::ops::arith::Sub&gt;::sub (55 samples, 1.25%)</title><rect x="84.5961%" y="277" width="1.2514%" height="15" fill="rgb(250,213,24)" fg:x="3718" fg:w="55"/><text x="84.8461%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (1 samples, 0.02%)</title><rect x="85.8476%" y="277" width="0.0228%" height="15" fill="rgb(247,123,22)" fg:x="3773" fg:w="1"/><text x="86.0976%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (11 samples, 0.25%)</title><rect x="85.8703%" y="277" width="0.2503%" height="15" fill="rgb(231,138,38)" fg:x="3774" fg:w="11"/><text x="86.1203%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (6 samples, 0.14%)</title><rect x="86.1206%" y="277" width="0.1365%" height="15" fill="rgb(231,145,46)" fg:x="3785" fg:w="6"/><text x="86.3706%" y="287.50"></text></g><g><title>main::_compute_flowchange (935 samples, 21.27%)</title><rect x="65.6428%" y="293" width="21.2742%" height="15" fill="rgb(251,118,11)" fg:x="2885" fg:w="935"/><text x="65.8928%" y="303.50">main::_compute_flowchange</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (29 samples, 0.66%)</title><rect x="86.2571%" y="277" width="0.6598%" height="15" fill="rgb(217,147,25)" fg:x="3791" fg:w="29"/><text x="86.5071%" y="287.50"></text></g><g><title>main::_find_best_arc (1 samples, 0.02%)</title><rect x="86.9170%" y="293" width="0.0228%" height="15" fill="rgb(247,81,37)" fg:x="3820" fg:w="1"/><text x="87.1670%" y="303.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.02%)</title><rect x="86.9625%" y="277" width="0.0228%" height="15" fill="rgb(209,12,38)" fg:x="3822" fg:w="1"/><text x="87.2125%" y="287.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="86.9625%" y="261" width="0.0228%" height="15" fill="rgb(227,1,9)" fg:x="3822" fg:w="1"/><text x="87.2125%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.02%)</title><rect x="86.9625%" y="245" width="0.0228%" height="15" fill="rgb(248,47,43)" fg:x="3822" fg:w="1"/><text x="87.2125%" y="255.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="86.9625%" y="229" width="0.0228%" height="15" fill="rgb(221,10,30)" fg:x="3822" fg:w="1"/><text x="87.2125%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="87.0535%" y="197" width="0.0228%" height="15" fill="rgb(210,229,1)" fg:x="3826" fg:w="1"/><text x="87.3035%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="87.0535%" y="181" width="0.0228%" height="15" fill="rgb(222,148,37)" fg:x="3826" fg:w="1"/><text x="87.3035%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="87.0535%" y="165" width="0.0228%" height="15" fill="rgb(234,67,33)" fg:x="3826" fg:w="1"/><text x="87.3035%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="87.0535%" y="149" width="0.0228%" height="15" fill="rgb(247,98,35)" fg:x="3826" fg:w="1"/><text x="87.3035%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="87.0535%" y="133" width="0.0228%" height="15" fill="rgb(247,138,52)" fg:x="3826" fg:w="1"/><text x="87.3035%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="87.0535%" y="117" width="0.0228%" height="15" fill="rgb(213,79,30)" fg:x="3826" fg:w="1"/><text x="87.3035%" y="127.50"></text></g><g><title>realloc (1 samples, 0.02%)</title><rect x="87.0535%" y="101" width="0.0228%" height="15" fill="rgb(246,177,23)" fg:x="3826" fg:w="1"/><text x="87.3035%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="87.0535%" y="85" width="0.0228%" height="15" fill="rgb(230,62,27)" fg:x="3826" fg:w="1"/><text x="87.3035%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="87.0535%" y="69" width="0.0228%" height="15" fill="rgb(216,154,8)" fg:x="3826" fg:w="1"/><text x="87.3035%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.11%)</title><rect x="86.9852%" y="277" width="0.1138%" height="15" fill="rgb(244,35,45)" fg:x="3823" fg:w="5"/><text x="87.2352%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.11%)</title><rect x="86.9852%" y="261" width="0.1138%" height="15" fill="rgb(251,115,12)" fg:x="3823" fg:w="5"/><text x="87.2352%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 0.11%)</title><rect x="86.9852%" y="245" width="0.1138%" height="15" fill="rgb(240,54,50)" fg:x="3823" fg:w="5"/><text x="87.2352%" y="255.50"></text></g><g><title>main::initialization::_{{closure}} (5 samples, 0.11%)</title><rect x="86.9852%" y="229" width="0.1138%" height="15" fill="rgb(233,84,52)" fg:x="3823" fg:w="5"/><text x="87.2352%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="87.0535%" y="213" width="0.0455%" height="15" fill="rgb(207,117,47)" fg:x="3826" fg:w="2"/><text x="87.3035%" y="223.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="87.0762%" y="197" width="0.0228%" height="15" fill="rgb(249,43,39)" fg:x="3827" fg:w="1"/><text x="87.3262%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.09%)</title><rect x="87.0990%" y="181" width="0.0910%" height="15" fill="rgb(209,38,44)" fg:x="3828" fg:w="4"/><text x="87.3490%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.09%)</title><rect x="87.0990%" y="165" width="0.0910%" height="15" fill="rgb(236,212,23)" fg:x="3828" fg:w="4"/><text x="87.3490%" y="175.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.09%)</title><rect x="87.0990%" y="149" width="0.0910%" height="15" fill="rgb(242,79,21)" fg:x="3828" fg:w="4"/><text x="87.3490%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.11%)</title><rect x="87.0990%" y="261" width="0.1138%" height="15" fill="rgb(211,96,35)" fg:x="3828" fg:w="5"/><text x="87.3490%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.11%)</title><rect x="87.0990%" y="245" width="0.1138%" height="15" fill="rgb(253,215,40)" fg:x="3828" fg:w="5"/><text x="87.3490%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.11%)</title><rect x="87.0990%" y="229" width="0.1138%" height="15" fill="rgb(211,81,21)" fg:x="3828" fg:w="5"/><text x="87.3490%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 0.11%)</title><rect x="87.0990%" y="213" width="0.1138%" height="15" fill="rgb(208,190,38)" fg:x="3828" fg:w="5"/><text x="87.3490%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.11%)</title><rect x="87.0990%" y="197" width="0.1138%" height="15" fill="rgb(235,213,38)" fg:x="3828" fg:w="5"/><text x="87.3490%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="87.1900%" y="181" width="0.0228%" height="15" fill="rgb(237,122,38)" fg:x="3832" fg:w="1"/><text x="87.4400%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="87.1900%" y="165" width="0.0228%" height="15" fill="rgb(244,218,35)" fg:x="3832" fg:w="1"/><text x="87.4400%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="87.1900%" y="149" width="0.0228%" height="15" fill="rgb(240,68,47)" fg:x="3832" fg:w="1"/><text x="87.4400%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (1 samples, 0.02%)</title><rect x="87.1900%" y="133" width="0.0228%" height="15" fill="rgb(210,16,53)" fg:x="3832" fg:w="1"/><text x="87.4400%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="87.1900%" y="117" width="0.0228%" height="15" fill="rgb(235,124,12)" fg:x="3832" fg:w="1"/><text x="87.4400%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1 samples, 0.02%)</title><rect x="87.1900%" y="101" width="0.0228%" height="15" fill="rgb(224,169,11)" fg:x="3832" fg:w="1"/><text x="87.4400%" y="111.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="87.1900%" y="85" width="0.0228%" height="15" fill="rgb(250,166,2)" fg:x="3832" fg:w="1"/><text x="87.4400%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.05%)</title><rect x="87.2127%" y="261" width="0.0455%" height="15" fill="rgb(242,216,29)" fg:x="3833" fg:w="2"/><text x="87.4627%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="87.2127%" y="245" width="0.0455%" height="15" fill="rgb(230,116,27)" fg:x="3833" fg:w="2"/><text x="87.4627%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="87.2127%" y="229" width="0.0455%" height="15" fill="rgb(228,99,48)" fg:x="3833" fg:w="2"/><text x="87.4627%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect x="87.2127%" y="213" width="0.0455%" height="15" fill="rgb(253,11,6)" fg:x="3833" fg:w="2"/><text x="87.4627%" y="223.50"></text></g><g><title>main::compute_node_potentials::_{{closure}} (2 samples, 0.05%)</title><rect x="87.2127%" y="197" width="0.0455%" height="15" fill="rgb(247,143,39)" fg:x="3833" fg:w="2"/><text x="87.4627%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge (2 samples, 0.05%)</title><rect x="87.2127%" y="181" width="0.0455%" height="15" fill="rgb(236,97,10)" fg:x="3833" fg:w="2"/><text x="87.4627%" y="191.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::find_edge_directed_from_node (2 samples, 0.05%)</title><rect x="87.2127%" y="165" width="0.0455%" height="15" fill="rgb(233,208,19)" fg:x="3833" fg:w="2"/><text x="87.4627%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect x="87.2355%" y="149" width="0.0228%" height="15" fill="rgb(216,164,2)" fg:x="3834" fg:w="1"/><text x="87.4855%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect x="87.2355%" y="133" width="0.0228%" height="15" fill="rgb(220,129,5)" fg:x="3834" fg:w="1"/><text x="87.4855%" y="143.50"></text></g><g><title>itertools::Itertools::sorted_by_key (1 samples, 0.02%)</title><rect x="87.2582%" y="261" width="0.0228%" height="15" fill="rgb(242,17,10)" fg:x="3835" fg:w="1"/><text x="87.5082%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.02%)</title><rect x="87.2582%" y="245" width="0.0228%" height="15" fill="rgb(242,107,0)" fg:x="3835" fg:w="1"/><text x="87.5082%" y="255.50"></text></g><g><title>alloc::slice::stable_sort (1 samples, 0.02%)</title><rect x="87.2582%" y="229" width="0.0228%" height="15" fill="rgb(251,28,31)" fg:x="3835" fg:w="1"/><text x="87.5082%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.02%)</title><rect x="87.2582%" y="213" width="0.0228%" height="15" fill="rgb(233,223,10)" fg:x="3835" fg:w="1"/><text x="87.5082%" y="223.50"></text></g><g><title>core::slice::sort::merge (1 samples, 0.02%)</title><rect x="87.2582%" y="197" width="0.0228%" height="15" fill="rgb(215,21,27)" fg:x="3835" fg:w="1"/><text x="87.5082%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="87.2582%" y="181" width="0.0228%" height="15" fill="rgb(232,23,21)" fg:x="3835" fg:w="1"/><text x="87.5082%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (1 samples, 0.02%)</title><rect x="87.3038%" y="245" width="0.0228%" height="15" fill="rgb(244,5,23)" fg:x="3837" fg:w="1"/><text x="87.5538%" y="255.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford (5 samples, 0.11%)</title><rect x="87.2810%" y="261" width="0.1138%" height="15" fill="rgb(226,81,46)" fg:x="3836" fg:w="5"/><text x="87.5310%" y="271.50"></text></g><g><title>petgraph::algo::bellman_ford::bellman_ford_initialize_relax (3 samples, 0.07%)</title><rect x="87.3265%" y="245" width="0.0683%" height="15" fill="rgb(247,70,30)" fg:x="3838" fg:w="3"/><text x="87.5765%" y="255.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="87.3265%" y="229" width="0.0683%" height="15" fill="rgb(212,68,19)" fg:x="3838" fg:w="3"/><text x="87.5765%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="87.3948%" y="229" width="0.0683%" height="15" fill="rgb(240,187,13)" fg:x="3841" fg:w="3"/><text x="87.6448%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (3 samples, 0.07%)</title><rect x="87.3948%" y="213" width="0.0683%" height="15" fill="rgb(223,113,26)" fg:x="3841" fg:w="3"/><text x="87.6448%" y="223.50"></text></g><g><title>core::ptr::read (3 samples, 0.07%)</title><rect x="87.3948%" y="197" width="0.0683%" height="15" fill="rgb(206,192,2)" fg:x="3841" fg:w="3"/><text x="87.6448%" y="207.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (1 samples, 0.02%)</title><rect x="87.4630%" y="229" width="0.0228%" height="15" fill="rgb(241,108,4)" fg:x="3844" fg:w="1"/><text x="87.7130%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="87.4630%" y="213" width="0.0228%" height="15" fill="rgb(247,173,49)" fg:x="3844" fg:w="1"/><text x="87.7130%" y="223.50"></text></g><g><title>main::compute_node_potentials (19 samples, 0.43%)</title><rect x="87.0990%" y="277" width="0.4323%" height="15" fill="rgb(224,114,35)" fg:x="3828" fg:w="19"/><text x="87.3490%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::from_edges (6 samples, 0.14%)</title><rect x="87.3948%" y="261" width="0.1365%" height="15" fill="rgb(245,159,27)" fg:x="3841" fg:w="6"/><text x="87.6448%" y="271.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::extend_with_edges (6 samples, 0.14%)</title><rect x="87.3948%" y="245" width="0.1365%" height="15" fill="rgb(245,172,44)" fg:x="3841" fg:w="6"/><text x="87.6448%" y="255.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_node (2 samples, 0.05%)</title><rect x="87.4858%" y="229" width="0.0455%" height="15" fill="rgb(236,23,11)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="87.4858%" y="213" width="0.0455%" height="15" fill="rgb(205,117,38)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.05%)</title><rect x="87.4858%" y="197" width="0.0455%" height="15" fill="rgb(237,72,25)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.05%)</title><rect x="87.4858%" y="181" width="0.0455%" height="15" fill="rgb(244,70,9)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="87.4858%" y="165" width="0.0455%" height="15" fill="rgb(217,125,39)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.05%)</title><rect x="87.4858%" y="149" width="0.0455%" height="15" fill="rgb(235,36,10)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.05%)</title><rect x="87.4858%" y="133" width="0.0455%" height="15" fill="rgb(251,123,47)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="143.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.05%)</title><rect x="87.4858%" y="117" width="0.0455%" height="15" fill="rgb(221,13,13)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="127.50"></text></g><g><title>realloc (2 samples, 0.05%)</title><rect x="87.4858%" y="101" width="0.0455%" height="15" fill="rgb(238,131,9)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="87.4858%" y="85" width="0.0455%" height="15" fill="rgb(211,50,8)" fg:x="3845" fg:w="2"/><text x="87.7358%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="87.5085%" y="69" width="0.0228%" height="15" fill="rgb(245,182,24)" fg:x="3846" fg:w="1"/><text x="87.7585%" y="79.50"></text></g><g><title>main::initialization (28 samples, 0.64%)</title><rect x="86.9397%" y="293" width="0.6371%" height="15" fill="rgb(242,14,37)" fg:x="3821" fg:w="28"/><text x="87.1897%" y="303.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2 samples, 0.05%)</title><rect x="87.5313%" y="277" width="0.0455%" height="15" fill="rgb(246,228,12)" fg:x="3847" fg:w="2"/><text x="87.7813%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="87.5313%" y="261" width="0.0455%" height="15" fill="rgb(213,55,15)" fg:x="3847" fg:w="2"/><text x="87.7813%" y="271.50"></text></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect x="87.5313%" y="245" width="0.0455%" height="15" fill="rgb(209,9,3)" fg:x="3847" fg:w="2"/><text x="87.7813%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="87.8953%" y="277" width="0.0228%" height="15" fill="rgb(230,59,30)" fg:x="3863" fg:w="1"/><text x="88.1453%" y="287.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="87.8953%" y="261" width="0.0228%" height="15" fill="rgb(209,121,21)" fg:x="3863" fg:w="1"/><text x="88.1453%" y="271.50"></text></g><g><title>&lt;i32 as core::ops::arith::AddAssign&gt;::add_assign (6 samples, 0.14%)</title><rect x="87.9181%" y="277" width="0.1365%" height="15" fill="rgb(220,109,13)" fg:x="3864" fg:w="6"/><text x="88.1681%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="88.0774%" y="261" width="0.0228%" height="15" fill="rgb(232,18,1)" fg:x="3871" fg:w="1"/><text x="88.3274%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="88.0774%" y="245" width="0.0228%" height="15" fill="rgb(215,41,42)" fg:x="3871" fg:w="1"/><text x="88.3274%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="88.0774%" y="229" width="0.0228%" height="15" fill="rgb(224,123,36)" fg:x="3871" fg:w="1"/><text x="88.3274%" y="239.50"></text></g><g><title>main::update_node_potentials (24 samples, 0.55%)</title><rect x="87.5768%" y="293" width="0.5461%" height="15" fill="rgb(240,125,3)" fg:x="3849" fg:w="24"/><text x="87.8268%" y="303.50"></text></g><g><title>main::get_reduced_cost_edgeindex (3 samples, 0.07%)</title><rect x="88.0546%" y="277" width="0.0683%" height="15" fill="rgb(205,98,50)" fg:x="3870" fg:w="3"/><text x="88.3046%" y="287.50"></text></g><g><title>&lt;i32 as core::ops::arith::Add&gt;::add (1 samples, 0.02%)</title><rect x="88.1001%" y="261" width="0.0228%" height="15" fill="rgb(205,185,37)" fg:x="3872" fg:w="1"/><text x="88.3501%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.14%)</title><rect x="97.0421%" y="277" width="0.1365%" height="15" fill="rgb(238,207,15)" fg:x="4265" fg:w="6"/><text x="97.2921%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.14%)</title><rect x="97.0421%" y="261" width="0.1365%" height="15" fill="rgb(213,199,42)" fg:x="4265" fg:w="6"/><text x="97.2921%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.14%)</title><rect x="97.0421%" y="245" width="0.1365%" height="15" fill="rgb(235,201,11)" fg:x="4265" fg:w="6"/><text x="97.2921%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="97.1786%" y="277" width="0.0228%" height="15" fill="rgb(207,46,11)" fg:x="4271" fg:w="1"/><text x="97.4286%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.02%)</title><rect x="97.1786%" y="261" width="0.0228%" height="15" fill="rgb(241,35,35)" fg:x="4271" fg:w="1"/><text x="97.4286%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="97.1786%" y="245" width="0.0228%" height="15" fill="rgb(243,32,47)" fg:x="4271" fg:w="1"/><text x="97.4286%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (14 samples, 0.32%)</title><rect x="97.2014%" y="277" width="0.3185%" height="15" fill="rgb(247,202,23)" fg:x="4272" fg:w="14"/><text x="97.4514%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (14 samples, 0.32%)</title><rect x="97.2014%" y="261" width="0.3185%" height="15" fill="rgb(219,102,11)" fg:x="4272" fg:w="14"/><text x="97.4514%" y="271.50"></text></g><g><title>main::update_sptree::_{{closure}} (14 samples, 0.32%)</title><rect x="97.2014%" y="245" width="0.3185%" height="15" fill="rgb(243,110,44)" fg:x="4272" fg:w="14"/><text x="97.4514%" y="255.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (3 samples, 0.07%)</title><rect x="97.4516%" y="229" width="0.0683%" height="15" fill="rgb(222,74,54)" fg:x="4283" fg:w="3"/><text x="97.7016%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="97.5199%" y="261" width="0.0683%" height="15" fill="rgb(216,99,12)" fg:x="4286" fg:w="3"/><text x="97.7699%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="97.7474%" y="245" width="0.0228%" height="15" fill="rgb(226,22,26)" fg:x="4296" fg:w="1"/><text x="97.9974%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="97.7474%" y="229" width="0.0228%" height="15" fill="rgb(217,163,10)" fg:x="4296" fg:w="1"/><text x="97.9974%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="97.7474%" y="213" width="0.0228%" height="15" fill="rgb(213,25,53)" fg:x="4296" fg:w="1"/><text x="97.9974%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (20 samples, 0.46%)</title><rect x="97.5199%" y="277" width="0.4551%" height="15" fill="rgb(252,105,26)" fg:x="4286" fg:w="20"/><text x="97.7699%" y="287.50"></text></g><g><title>main::update_sptree::_{{closure}} (17 samples, 0.39%)</title><rect x="97.5882%" y="261" width="0.3868%" height="15" fill="rgb(220,39,43)" fg:x="4289" fg:w="17"/><text x="97.8382%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (9 samples, 0.20%)</title><rect x="97.7702%" y="245" width="0.2048%" height="15" fill="rgb(229,68,48)" fg:x="4297" fg:w="9"/><text x="98.0202%" y="255.50"></text></g><g><title>&lt;usize as petgraph::graph_impl::IndexType&gt;::index (1 samples, 0.02%)</title><rect x="97.9750%" y="277" width="0.0228%" height="15" fill="rgb(252,8,32)" fg:x="4306" fg:w="1"/><text x="98.2250%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="97.9977%" y="277" width="0.0228%" height="15" fill="rgb(223,20,43)" fg:x="4307" fg:w="1"/><text x="98.2477%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="97.9977%" y="261" width="0.0228%" height="15" fill="rgb(229,81,49)" fg:x="4307" fg:w="1"/><text x="98.2477%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="97.9977%" y="245" width="0.0228%" height="15" fill="rgb(236,28,36)" fg:x="4307" fg:w="1"/><text x="98.2477%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="97.9977%" y="229" width="0.0228%" height="15" fill="rgb(249,185,26)" fg:x="4307" fg:w="1"/><text x="98.2477%" y="239.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="97.9977%" y="213" width="0.0228%" height="15" fill="rgb(249,174,33)" fg:x="4307" fg:w="1"/><text x="98.2477%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="98.0432%" y="229" width="0.0228%" height="15" fill="rgb(233,201,37)" fg:x="4309" fg:w="1"/><text x="98.2932%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.02%)</title><rect x="98.0660%" y="229" width="0.0228%" height="15" fill="rgb(221,78,26)" fg:x="4310" fg:w="1"/><text x="98.3160%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="98.0887%" y="165" width="0.0228%" height="15" fill="rgb(250,127,30)" fg:x="4311" fg:w="1"/><text x="98.3387%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.20%)</title><rect x="98.0887%" y="213" width="0.2048%" height="15" fill="rgb(230,49,44)" fg:x="4311" fg:w="9"/><text x="98.3387%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.20%)</title><rect x="98.0887%" y="197" width="0.2048%" height="15" fill="rgb(229,67,23)" fg:x="4311" fg:w="9"/><text x="98.3387%" y="207.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.20%)</title><rect x="98.0887%" y="181" width="0.2048%" height="15" fill="rgb(249,83,47)" fg:x="4311" fg:w="9"/><text x="98.3387%" y="191.50"></text></g><g><title>realloc (8 samples, 0.18%)</title><rect x="98.1115%" y="165" width="0.1820%" height="15" fill="rgb(215,43,3)" fg:x="4312" fg:w="8"/><text x="98.3615%" y="175.50"></text></g><g><title>[libc.so.6] (7 samples, 0.16%)</title><rect x="98.1342%" y="149" width="0.1593%" height="15" fill="rgb(238,154,13)" fg:x="4313" fg:w="7"/><text x="98.3842%" y="159.50"></text></g><g><title>[libc.so.6] (6 samples, 0.14%)</title><rect x="98.1570%" y="133" width="0.1365%" height="15" fill="rgb(219,56,2)" fg:x="4314" fg:w="6"/><text x="98.4070%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="98.2708%" y="117" width="0.0228%" height="15" fill="rgb(233,0,4)" fg:x="4319" fg:w="1"/><text x="98.5208%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.25%)</title><rect x="98.0887%" y="229" width="0.2503%" height="15" fill="rgb(235,30,7)" fg:x="4311" fg:w="11"/><text x="98.3387%" y="239.50"></text></g><g><title>malloc (2 samples, 0.05%)</title><rect x="98.2935%" y="213" width="0.0455%" height="15" fill="rgb(250,79,13)" fg:x="4320" fg:w="2"/><text x="98.5435%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="98.3390%" y="229" width="0.0228%" height="15" fill="rgb(211,146,34)" fg:x="4322" fg:w="1"/><text x="98.5890%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.02%)</title><rect x="98.3390%" y="213" width="0.0228%" height="15" fill="rgb(228,22,38)" fg:x="4322" fg:w="1"/><text x="98.5890%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.34%)</title><rect x="98.0432%" y="261" width="0.3413%" height="15" fill="rgb(235,168,5)" fg:x="4309" fg:w="15"/><text x="98.2932%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.34%)</title><rect x="98.0432%" y="245" width="0.3413%" height="15" fill="rgb(221,155,16)" fg:x="4309" fg:w="15"/><text x="98.2932%" y="255.50"></text></g><g><title>core::cmp::max (1 samples, 0.02%)</title><rect x="98.3618%" y="229" width="0.0228%" height="15" fill="rgb(215,215,53)" fg:x="4323" fg:w="1"/><text x="98.6118%" y="239.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="98.3618%" y="213" width="0.0228%" height="15" fill="rgb(223,4,10)" fg:x="4323" fg:w="1"/><text x="98.6118%" y="223.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.02%)</title><rect x="98.3618%" y="197" width="0.0228%" height="15" fill="rgb(234,103,6)" fg:x="4323" fg:w="1"/><text x="98.6118%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.39%)</title><rect x="98.0205%" y="277" width="0.3868%" height="15" fill="rgb(227,97,0)" fg:x="4308" fg:w="17"/><text x="98.2705%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="98.3845%" y="261" width="0.0228%" height="15" fill="rgb(234,150,53)" fg:x="4324" fg:w="1"/><text x="98.6345%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.23%)</title><rect x="98.4073%" y="245" width="0.2275%" height="15" fill="rgb(228,201,54)" fg:x="4325" fg:w="10"/><text x="98.6573%" y="255.50"></text></g><g><title>core::ptr::write (10 samples, 0.23%)</title><rect x="98.4073%" y="229" width="0.2275%" height="15" fill="rgb(222,22,37)" fg:x="4325" fg:w="10"/><text x="98.6573%" y="239.50"></text></g><g><title>alloc::vec::from_elem (34 samples, 0.77%)</title><rect x="98.4073%" y="277" width="0.7736%" height="15" fill="rgb(237,53,32)" fg:x="4325" fg:w="34"/><text x="98.6573%" y="287.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (34 samples, 0.77%)</title><rect x="98.4073%" y="261" width="0.7736%" height="15" fill="rgb(233,25,53)" fg:x="4325" fg:w="34"/><text x="98.6573%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (24 samples, 0.55%)</title><rect x="98.6348%" y="245" width="0.5461%" height="15" fill="rgb(210,40,34)" fg:x="4335" fg:w="24"/><text x="98.8848%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.55%)</title><rect x="98.6348%" y="229" width="0.5461%" height="15" fill="rgb(241,220,44)" fg:x="4335" fg:w="24"/><text x="98.8848%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (24 samples, 0.55%)</title><rect x="98.6348%" y="213" width="0.5461%" height="15" fill="rgb(235,28,35)" fg:x="4335" fg:w="24"/><text x="98.8848%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.55%)</title><rect x="98.6348%" y="197" width="0.5461%" height="15" fill="rgb(210,56,17)" fg:x="4335" fg:w="24"/><text x="98.8848%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.55%)</title><rect x="98.6348%" y="181" width="0.5461%" height="15" fill="rgb(224,130,29)" fg:x="4335" fg:w="24"/><text x="98.8848%" y="191.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.55%)</title><rect x="98.6348%" y="165" width="0.5461%" height="15" fill="rgb(235,212,8)" fg:x="4335" fg:w="24"/><text x="98.8848%" y="175.50"></text></g><g><title>malloc (24 samples, 0.55%)</title><rect x="98.6348%" y="149" width="0.5461%" height="15" fill="rgb(223,33,50)" fg:x="4335" fg:w="24"/><text x="98.8848%" y="159.50"></text></g><g><title>[libc.so.6] (5 samples, 0.11%)</title><rect x="99.0671%" y="133" width="0.1138%" height="15" fill="rgb(219,149,13)" fg:x="4354" fg:w="5"/><text x="99.3171%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="99.1354%" y="117" width="0.0455%" height="15" fill="rgb(250,156,29)" fg:x="4357" fg:w="2"/><text x="99.3854%" y="127.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="99.2264%" y="101" width="0.0228%" height="15" fill="rgb(216,193,19)" fg:x="4361" fg:w="1"/><text x="99.4764%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.09%)</title><rect x="99.1809%" y="277" width="0.0910%" height="15" fill="rgb(216,135,14)" fg:x="4359" fg:w="4"/><text x="99.4309%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.09%)</title><rect x="99.1809%" y="261" width="0.0910%" height="15" fill="rgb(241,47,5)" fg:x="4359" fg:w="4"/><text x="99.4309%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.09%)</title><rect x="99.1809%" y="245" width="0.0910%" height="15" fill="rgb(233,42,35)" fg:x="4359" fg:w="4"/><text x="99.4309%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.09%)</title><rect x="99.1809%" y="229" width="0.0910%" height="15" fill="rgb(231,13,6)" fg:x="4359" fg:w="4"/><text x="99.4309%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.05%)</title><rect x="99.2264%" y="213" width="0.0455%" height="15" fill="rgb(207,181,40)" fg:x="4361" fg:w="2"/><text x="99.4764%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="99.2264%" y="197" width="0.0455%" height="15" fill="rgb(254,173,49)" fg:x="4361" fg:w="2"/><text x="99.4764%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.05%)</title><rect x="99.2264%" y="181" width="0.0455%" height="15" fill="rgb(221,1,38)" fg:x="4361" fg:w="2"/><text x="99.4764%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.05%)</title><rect x="99.2264%" y="165" width="0.0455%" height="15" fill="rgb(206,124,46)" fg:x="4361" fg:w="2"/><text x="99.4764%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect x="99.2264%" y="149" width="0.0455%" height="15" fill="rgb(249,21,11)" fg:x="4361" fg:w="2"/><text x="99.4764%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.05%)</title><rect x="99.2264%" y="133" width="0.0455%" height="15" fill="rgb(222,201,40)" fg:x="4361" fg:w="2"/><text x="99.4764%" y="143.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect x="99.2264%" y="117" width="0.0455%" height="15" fill="rgb(235,61,29)" fg:x="4361" fg:w="2"/><text x="99.4764%" y="127.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="99.2491%" y="101" width="0.0228%" height="15" fill="rgb(219,207,3)" fg:x="4362" fg:w="1"/><text x="99.4991%" y="111.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.2719%" y="245" width="0.0228%" height="15" fill="rgb(222,56,46)" fg:x="4363" fg:w="1"/><text x="99.5219%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (1 samples, 0.02%)</title><rect x="99.2719%" y="229" width="0.0228%" height="15" fill="rgb(239,76,54)" fg:x="4363" fg:w="1"/><text x="99.5219%" y="239.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="99.2719%" y="213" width="0.0228%" height="15" fill="rgb(231,124,27)" fg:x="4363" fg:w="1"/><text x="99.5219%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect x="99.2947%" y="245" width="0.0455%" height="15" fill="rgb(249,195,6)" fg:x="4364" fg:w="2"/><text x="99.5447%" y="255.50"></text></g><g><title>main::update_sptree::_{{closure}} (2 samples, 0.05%)</title><rect x="99.2947%" y="229" width="0.0455%" height="15" fill="rgb(237,174,47)" fg:x="4364" fg:w="2"/><text x="99.5447%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="99.3174%" y="213" width="0.0228%" height="15" fill="rgb(206,201,31)" fg:x="4365" fg:w="1"/><text x="99.5674%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="99.3174%" y="197" width="0.0228%" height="15" fill="rgb(231,57,52)" fg:x="4365" fg:w="1"/><text x="99.5674%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="99.3174%" y="181" width="0.0228%" height="15" fill="rgb(248,177,22)" fg:x="4365" fg:w="1"/><text x="99.5674%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.09%)</title><rect x="99.2719%" y="277" width="0.0910%" height="15" fill="rgb(215,211,37)" fg:x="4363" fg:w="4"/><text x="99.5219%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.09%)</title><rect x="99.2719%" y="261" width="0.0910%" height="15" fill="rgb(241,128,51)" fg:x="4363" fg:w="4"/><text x="99.5219%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="99.3402%" y="245" width="0.0228%" height="15" fill="rgb(227,165,31)" fg:x="4366" fg:w="1"/><text x="99.5902%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.3402%" y="229" width="0.0228%" height="15" fill="rgb(228,167,24)" fg:x="4366" fg:w="1"/><text x="99.5902%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (1 samples, 0.02%)</title><rect x="99.3402%" y="213" width="0.0228%" height="15" fill="rgb(228,143,12)" fg:x="4366" fg:w="1"/><text x="99.5902%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.3402%" y="197" width="0.0228%" height="15" fill="rgb(249,149,8)" fg:x="4366" fg:w="1"/><text x="99.5902%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="99.3402%" y="181" width="0.0228%" height="15" fill="rgb(243,35,44)" fg:x="4366" fg:w="1"/><text x="99.5902%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.3402%" y="165" width="0.0228%" height="15" fill="rgb(246,89,9)" fg:x="4366" fg:w="1"/><text x="99.5902%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="99.3402%" y="149" width="0.0228%" height="15" fill="rgb(233,213,13)" fg:x="4366" fg:w="1"/><text x="99.5902%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="99.3402%" y="133" width="0.0228%" height="15" fill="rgb(233,141,41)" fg:x="4366" fg:w="1"/><text x="99.5902%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (18 samples, 0.41%)</title><rect x="99.3629%" y="277" width="0.4096%" height="15" fill="rgb(239,167,4)" fg:x="4367" fg:w="18"/><text x="99.6129%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (18 samples, 0.41%)</title><rect x="99.3629%" y="261" width="0.4096%" height="15" fill="rgb(209,217,16)" fg:x="4367" fg:w="18"/><text x="99.6129%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.41%)</title><rect x="99.3629%" y="245" width="0.4096%" height="15" fill="rgb(219,88,35)" fg:x="4367" fg:w="18"/><text x="99.6129%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.41%)</title><rect x="99.3629%" y="229" width="0.4096%" height="15" fill="rgb(220,193,23)" fg:x="4367" fg:w="18"/><text x="99.6129%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.41%)</title><rect x="99.3629%" y="213" width="0.4096%" height="15" fill="rgb(230,90,52)" fg:x="4367" fg:w="18"/><text x="99.6129%" y="223.50"></text></g><g><title>cfree (17 samples, 0.39%)</title><rect x="99.3857%" y="197" width="0.3868%" height="15" fill="rgb(252,106,19)" fg:x="4368" fg:w="17"/><text x="99.6357%" y="207.50"></text></g><g><title>[libc.so.6] (15 samples, 0.34%)</title><rect x="99.4312%" y="181" width="0.3413%" height="15" fill="rgb(206,74,20)" fg:x="4370" fg:w="15"/><text x="99.6812%" y="191.50"></text></g><g><title>[libc.so.6] (7 samples, 0.16%)</title><rect x="99.6132%" y="165" width="0.1593%" height="15" fill="rgb(230,138,44)" fg:x="4378" fg:w="7"/><text x="99.8632%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.7497%" y="149" width="0.0228%" height="15" fill="rgb(235,182,43)" fg:x="4384" fg:w="1"/><text x="99.9997%" y="159.50"></text></g><g><title>main::min_cost (4,370 samples, 99.43%)</title><rect x="0.3868%" y="309" width="99.4312%" height="15" fill="rgb(242,16,51)" fg:x="17" fg:w="4370"/><text x="0.6368%" y="319.50">main::min_cost</text></g><g><title>main::update_sptree (514 samples, 11.70%)</title><rect x="88.1229%" y="293" width="11.6951%" height="15" fill="rgb(248,9,4)" fg:x="3873" fg:w="514"/><text x="88.3729%" y="303.50">main::update_sptr..</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2 samples, 0.05%)</title><rect x="99.7725%" y="277" width="0.0455%" height="15" fill="rgb(210,31,22)" fg:x="4385" fg:w="2"/><text x="100.0225%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.07%)</title><rect x="99.8180%" y="293" width="0.0683%" height="15" fill="rgb(239,54,39)" fg:x="4387" fg:w="3"/><text x="100.0680%" y="303.50"></text></g><g><title>core::ptr::write (3 samples, 0.07%)</title><rect x="99.8180%" y="277" width="0.0683%" height="15" fill="rgb(230,99,41)" fg:x="4387" fg:w="3"/><text x="100.0680%" y="287.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (4 samples, 0.09%)</title><rect x="99.8180%" y="309" width="0.0910%" height="15" fill="rgb(253,106,12)" fg:x="4387" fg:w="4"/><text x="100.0680%" y="319.50"></text></g><g><title>petgraph::graph_impl::index_twice (1 samples, 0.02%)</title><rect x="99.8862%" y="293" width="0.0228%" height="15" fill="rgb(213,46,41)" fg:x="4390" fg:w="1"/><text x="100.1362%" y="303.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (2 samples, 0.05%)</title><rect x="99.9090%" y="69" width="0.0455%" height="15" fill="rgb(215,133,35)" fg:x="4391" fg:w="2"/><text x="100.1590%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (2 samples, 0.05%)</title><rect x="99.9090%" y="53" width="0.0455%" height="15" fill="rgb(213,28,5)" fg:x="4391" fg:w="2"/><text x="100.1590%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (2 samples, 0.05%)</title><rect x="99.9090%" y="37" width="0.0455%" height="15" fill="rgb(215,77,49)" fg:x="4391" fg:w="2"/><text x="100.1590%" y="47.50"></text></g><g><title>_start (4,378 samples, 99.61%)</title><rect x="0.3641%" y="453" width="99.6132%" height="15" fill="rgb(248,100,22)" fg:x="16" fg:w="4378"/><text x="0.6141%" y="463.50">_start</text></g><g><title>__libc_start_main (4,378 samples, 99.61%)</title><rect x="0.3641%" y="437" width="99.6132%" height="15" fill="rgb(208,67,9)" fg:x="16" fg:w="4378"/><text x="0.6141%" y="447.50">__libc_start_main</text></g><g><title>[libc.so.6] (4,378 samples, 99.61%)</title><rect x="0.3641%" y="421" width="99.6132%" height="15" fill="rgb(219,133,21)" fg:x="16" fg:w="4378"/><text x="0.6141%" y="431.50">[libc.so.6]</text></g><g><title>main (4,378 samples, 99.61%)</title><rect x="0.3641%" y="405" width="99.6132%" height="15" fill="rgb(246,46,29)" fg:x="16" fg:w="4378"/><text x="0.6141%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (4,378 samples, 99.61%)</title><rect x="0.3641%" y="389" width="99.6132%" height="15" fill="rgb(246,185,52)" fg:x="16" fg:w="4378"/><text x="0.6141%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (4,378 samples, 99.61%)</title><rect x="0.3641%" y="373" width="99.6132%" height="15" fill="rgb(252,136,11)" fg:x="16" fg:w="4378"/><text x="0.6141%" y="383.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,378 samples, 99.61%)</title><rect x="0.3641%" y="357" width="99.6132%" height="15" fill="rgb(219,138,53)" fg:x="16" fg:w="4378"/><text x="0.6141%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (4,378 samples, 99.61%)</title><rect x="0.3641%" y="341" width="99.6132%" height="15" fill="rgb(211,51,23)" fg:x="16" fg:w="4378"/><text x="0.6141%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (4,378 samples, 99.61%)</title><rect x="0.3641%" y="325" width="99.6132%" height="15" fill="rgb(247,221,28)" fg:x="16" fg:w="4378"/><text x="0.6141%" y="335.50">main::main</text></g><g><title>rand::rng::Rng::gen (3 samples, 0.07%)</title><rect x="99.9090%" y="309" width="0.0683%" height="15" fill="rgb(251,222,45)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="319.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (3 samples, 0.07%)</title><rect x="99.9090%" y="293" width="0.0683%" height="15" fill="rgb(217,162,53)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="303.50"></text></g><g><title>rand::rng::Rng::gen (3 samples, 0.07%)</title><rect x="99.9090%" y="277" width="0.0683%" height="15" fill="rgb(229,93,14)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="287.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (3 samples, 0.07%)</title><rect x="99.9090%" y="261" width="0.0683%" height="15" fill="rgb(209,67,49)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="271.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (3 samples, 0.07%)</title><rect x="99.9090%" y="245" width="0.0683%" height="15" fill="rgb(213,87,29)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="255.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (3 samples, 0.07%)</title><rect x="99.9090%" y="229" width="0.0683%" height="15" fill="rgb(205,151,52)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="239.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (3 samples, 0.07%)</title><rect x="99.9090%" y="213" width="0.0683%" height="15" fill="rgb(253,215,39)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="223.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (3 samples, 0.07%)</title><rect x="99.9090%" y="197" width="0.0683%" height="15" fill="rgb(221,220,41)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="207.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.07%)</title><rect x="99.9090%" y="181" width="0.0683%" height="15" fill="rgb(218,133,21)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="191.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.07%)</title><rect x="99.9090%" y="165" width="0.0683%" height="15" fill="rgb(221,193,43)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="175.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (3 samples, 0.07%)</title><rect x="99.9090%" y="149" width="0.0683%" height="15" fill="rgb(240,128,52)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (3 samples, 0.07%)</title><rect x="99.9090%" y="133" width="0.0683%" height="15" fill="rgb(253,114,12)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (3 samples, 0.07%)</title><rect x="99.9090%" y="117" width="0.0683%" height="15" fill="rgb(215,223,47)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (3 samples, 0.07%)</title><rect x="99.9090%" y="101" width="0.0683%" height="15" fill="rgb(248,225,23)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="111.50"></text></g><g><title>rand_chacha::guts::round (3 samples, 0.07%)</title><rect x="99.9090%" y="85" width="0.0683%" height="15" fill="rgb(250,108,0)" fg:x="4391" fg:w="3"/><text x="100.1590%" y="95.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (1 samples, 0.02%)</title><rect x="99.9545%" y="69" width="0.0228%" height="15" fill="rgb(228,208,7)" fg:x="4393" fg:w="1"/><text x="100.2045%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (1 samples, 0.02%)</title><rect x="99.9545%" y="53" width="0.0228%" height="15" fill="rgb(244,45,10)" fg:x="4393" fg:w="1"/><text x="100.2045%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (1 samples, 0.02%)</title><rect x="99.9545%" y="37" width="0.0228%" height="15" fill="rgb(207,125,25)" fg:x="4393" fg:w="1"/><text x="100.2045%" y="47.50"></text></g><g><title>all (4,395 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="4395"/><text x="0.2500%" y="495.50"></text></g><g><title>main (4,395 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="4395"/><text x="0.2500%" y="479.50">main</text></g><g><title>main::min_cost (1 samples, 0.02%)</title><rect x="99.9772%" y="453" width="0.0228%" height="15" fill="rgb(221,65,9)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="463.50"></text></g><g><title>main::update_sptree (1 samples, 0.02%)</title><rect x="99.9772%" y="437" width="0.0228%" height="15" fill="rgb(235,49,36)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="99.9772%" y="421" width="0.0228%" height="15" fill="rgb(225,32,20)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="99.9772%" y="405" width="0.0228%" height="15" fill="rgb(215,141,46)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9772%" y="389" width="0.0228%" height="15" fill="rgb(250,160,47)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9772%" y="373" width="0.0228%" height="15" fill="rgb(216,222,40)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9772%" y="357" width="0.0228%" height="15" fill="rgb(234,217,39)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9772%" y="341" width="0.0228%" height="15" fill="rgb(207,178,40)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.02%)</title><rect x="99.9772%" y="325" width="0.0228%" height="15" fill="rgb(221,136,13)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9772%" y="309" width="0.0228%" height="15" fill="rgb(249,199,10)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="99.9772%" y="293" width="0.0228%" height="15" fill="rgb(249,222,13)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="99.9772%" y="277" width="0.0228%" height="15" fill="rgb(244,185,38)" fg:x="4394" fg:w="1"/><text x="100.2272%" y="287.50"></text></g></svg></svg>